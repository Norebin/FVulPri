<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_c_w_e-79_8c" kind="file" language="C++">
    <compoundname>CWE-79.c</compoundname>
      <sectiondef kind="define">
      <memberdef kind="define" id="_c_w_e-79_8c_1a9ec263e4fff9d2f9abebeb60ad1961ce" prot="public" static="no">
        <name>PHPAP_INI_OFF</name>
        <initializer><ref refid="_c_w_e-20_8c_1abc3aed438a7e108c8708500b4adeb95c" kindref="member">php_apache_ini_dtor</ref>(r, parent_req TSRMLS_CC);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11582" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_c_w_e-79_8c_1af12504bb905fef496e9befc7c98263e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PHP_FUNCTION</definition>
        <argsstring>(header_register_callback)</argsstring>
        <name>PHP_FUNCTION</name>
        <param>
          <type>header_register_callback</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1" bodyend="26"/>
        <references refid="_c_w_e-416_8c_1a2ab631c1981c866e31877eb766412686" compoundref="_c_w_e-416_8c" startline="11890" endline="11902">zend_parse_parameters</references>
        <references refid="_c_w_e-416_8c_1a1d6ce13dd16483210fc7dedd215300e4" compoundref="_c_w_e-416_8c" startline="10799" endline="10802">zend_is_callable</references>
        <references refid="_c_w_e-20_8c_1a21611e581374a9003fa96e3bceafee73">Z_ADDREF_P</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a0ae77578cd327b2a15f44cdef9fe57de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API</type>
        <definition>SAPI_API SAPI_POST_READER_FUNC</definition>
        <argsstring>(sapi_read_standard_form_data)</argsstring>
        <name>SAPI_POST_READER_FUNC</name>
        <param>
          <type>sapi_read_standard_form_data</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="27" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="27" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ab119ddca7a4c92687819ee579e506daf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char *</type>
        <definition>static char* get_default_content_type</definition>
        <argsstring>(uint prefix_len, uint *len TSRMLS_DC)</argsstring>
        <name>get_default_content_type</name>
        <param>
          <type>uint</type>
          <declname>prefix_len</declname>
        </param>
        <param>
          <type>uint *len</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="60" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="60" bodyend="97"/>
        <references refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0">p</references>
        <referencedby refid="_c_w_e-79_8c_1a3b154b34dca2d4b83c707d3d6197c14d" compoundref="_c_w_e-79_8c" startline="325" endline="330">sapi_get_default_content_type</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a2b1b9b75a1e9d432085b02cf2acb4121" compoundref="_c_w_e-79_8c" startline="331" endline="338">sapi_get_default_content_type_header</referencedby>
        <referencedby refid="_c_w_e-79_8c_1abc1d494f64d5070f4ed9630e1a9007b5" compoundref="_c_w_e-79_8c" startline="616" endline="691">sapi_send_headers</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a82a5ee55b73af4ddadffd205f922d1d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API void</type>
        <definition>SAPI_API void sapi_activate</definition>
        <argsstring>(TSRMLS_D)</argsstring>
        <name>sapi_activate</name>
        <param>
          <type>TSRMLS_D</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="98" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="98" bodyend="159"/>
        <references refid="_c_w_e-79_8c_1a645b897be33948ad48fe52266772807c" compoundref="_c_w_e-79_8c" startline="321" endline="324">sapi_free_header</references>
        <references refid="_c_w_e-20_8c_1aa31a1709fa11916c793adcd69392520b" compoundref="_c_w_e-20_8c" startline="75098" endline="75101">request_method</references>
        <references refid="_c_w_e-79_8c_1ad385fbe862b86bf1e688deef2a2fb743" compoundref="_c_w_e-79_8c" startline="455" endline="513">sapi_read_post_data</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a5062d73437b7bc98f9351ef0988ca83c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API void</type>
        <definition>SAPI_API void sapi_activate_headers_only</definition>
        <argsstring>(TSRMLS_D)</argsstring>
        <name>sapi_activate_headers_only</name>
        <param>
          <type>TSRMLS_D</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="160" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="160" bodyend="199"/>
        <references refid="_c_w_e-79_8c_1a645b897be33948ad48fe52266772807c" compoundref="_c_w_e-79_8c" startline="321" endline="324">sapi_free_header</references>
        <references refid="_c_w_e-20_8c_1aa31a1709fa11916c793adcd69392520b" compoundref="_c_w_e-20_8c" startline="75098" endline="75101">request_method</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a1261563c5cc7a36a91deab4dcde6686b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API int</type>
        <definition>SAPI_API int sapi_add_header_ex</definition>
        <argsstring>(char *header_line, uint header_line_len, zend_bool duplicate, zend_bool replace TSRMLS_DC)</argsstring>
        <name>sapi_add_header_ex</name>
        <param>
          <type>char *</type>
          <declname>header_line</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>header_line_len</declname>
        </param>
        <param>
          <type>zend_bool</type>
          <declname>duplicate</declname>
        </param>
        <param>
          <type>zend_bool replace</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="200" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="200" bodyend="215"/>
        <references refid="_c_w_e-79_8c_1ae3f072913063235163ebe7da439a415b" compoundref="_c_w_e-79_8c" startline="11387" endline="11571">sapi_header_op</references>
        <referencedby refid="_c_w_e-416_8c_1af58545e4d3cafbb3bfdce17edb2ec5a8" compoundref="_c_w_e-416_8c" startline="8922" endline="8992">php_session_send_cookie</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a40a6968974920b2c2493a7086a25971e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API size_t</type>
        <definition>SAPI_API size_t sapi_apply_default_charset</definition>
        <argsstring>(char **mimetype, size_t len TSRMLS_DC)</argsstring>
        <name>sapi_apply_default_charset</name>
        <param>
          <type>char **</type>
          <declname>mimetype</declname>
        </param>
        <param>
          <type>size_t len</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="216" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="216" bodyend="235"/>
        <referencedby refid="_c_w_e-79_8c_1ae3f072913063235163ebe7da439a415b" compoundref="_c_w_e-79_8c" startline="11387" endline="11571">sapi_header_op</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a6f0db081ca92a1bd237148101de9fbe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API void</type>
        <definition>SAPI_API void sapi_deactivate</definition>
        <argsstring>(TSRMLS_D)</argsstring>
        <name>sapi_deactivate</name>
        <param>
          <type>TSRMLS_D</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="236" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="236" bodyend="289"/>
        <references refid="_c_w_e-79_8c_1aafc8dd4177475278b98f374a42e1b571" compoundref="_c_w_e-79_8c" startline="692" endline="698">sapi_send_headers_free</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a7a0f9ce713c19f065fa08bababef22cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int sapi_extract_response_code</definition>
        <argsstring>(const char *header_line)</argsstring>
        <name>sapi_extract_response_code</name>
        <param>
          <type>const char *</type>
          <declname>header_line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="290" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="290" bodyend="303"/>
        <referencedby refid="_c_w_e-79_8c_1ae3f072913063235163ebe7da439a415b" compoundref="_c_w_e-79_8c" startline="11387" endline="11571">sapi_header_op</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1afe7b673392008f8c59d8364bec34b266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API int</type>
        <definition>SAPI_API int sapi_flush</definition>
        <argsstring>(TSRMLS_D)</argsstring>
        <name>sapi_flush</name>
        <param>
          <type>TSRMLS_D</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="304" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="304" bodyend="312"/>
        <references refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" compoundref="_c_w_e-416_8c" startline="8017">SUCCESS</references>
        <referencedby refid="_c_w_e-78_8c_1a6edb986a56b74b9a196a2f06b6a17c44" compoundref="_c_w_e-78_8c" startline="4223" endline="4331">php_exec</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a76beaa29480d22196868abcbed8c47fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API int</type>
        <definition>SAPI_API int sapi_force_http_10</definition>
        <argsstring>(TSRMLS_D)</argsstring>
        <name>sapi_force_http_10</name>
        <param>
          <type>TSRMLS_D</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="313" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="313" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a645b897be33948ad48fe52266772807c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API void</type>
        <definition>SAPI_API void sapi_free_header</definition>
        <argsstring>(sapi_header_struct *sapi_header)</argsstring>
        <name>sapi_free_header</name>
        <param>
          <type>sapi_header_struct *</type>
          <declname>sapi_header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="321" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="321" bodyend="324"/>
        <referencedby refid="_c_w_e-416_8c_1a41490a63ed0cd7f11470eb7234a2ca13" compoundref="_c_w_e-416_8c" startline="8609" endline="8645">php_session_remove_cookie</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a82a5ee55b73af4ddadffd205f922d1d0" compoundref="_c_w_e-79_8c" startline="98" endline="159">sapi_activate</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a5062d73437b7bc98f9351ef0988ca83c" compoundref="_c_w_e-79_8c" startline="160" endline="199">sapi_activate_headers_only</referencedby>
        <referencedby refid="_c_w_e-79_8c_1ad42bb4c1037e286c3f894393ce47a953" compoundref="_c_w_e-79_8c" startline="428" endline="447">sapi_header_add_op</referencedby>
        <referencedby refid="_c_w_e-79_8c_1aa0fe6f09d794f9cacb4f67042d5852bd" compoundref="_c_w_e-79_8c" startline="560" endline="586">sapi_remove_header</referencedby>
        <referencedby refid="_c_w_e-79_8c_1abc1d494f64d5070f4ed9630e1a9007b5" compoundref="_c_w_e-79_8c" startline="616" endline="691">sapi_send_headers</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a3b154b34dca2d4b83c707d3d6197c14d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API char *</type>
        <definition>SAPI_API char* sapi_get_default_content_type</definition>
        <argsstring>(TSRMLS_D)</argsstring>
        <name>sapi_get_default_content_type</name>
        <param>
          <type>TSRMLS_D</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="325" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="325" bodyend="330"/>
        <references refid="_c_w_e-79_8c_1ab119ddca7a4c92687819ee579e506daf" compoundref="_c_w_e-79_8c" startline="60" endline="97">get_default_content_type</references>
        <referencedby refid="_c_w_e-20_8c_1aa4f9bd84d6de0a348696577dcca7410a" compoundref="_c_w_e-20_8c" startline="15267" endline="15294">php_apache_sapi_send_headers</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a2b1b9b75a1e9d432085b02cf2acb4121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API void</type>
        <definition>SAPI_API void sapi_get_default_content_type_header</definition>
        <argsstring>(sapi_header_struct *default_header TSRMLS_DC)</argsstring>
        <name>sapi_get_default_content_type_header</name>
        <param>
          <type>sapi_header_struct *default_header</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="331" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="331" bodyend="338"/>
        <references refid="_c_w_e-79_8c_1ab119ddca7a4c92687819ee579e506daf" compoundref="_c_w_e-79_8c" startline="60" endline="97">get_default_content_type</references>
        <referencedby refid="_c_w_e-79_8c_1abc1d494f64d5070f4ed9630e1a9007b5" compoundref="_c_w_e-79_8c" startline="616" endline="691">sapi_send_headers</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ab529d8d8e7783e4c3c6529696ef7f8e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API int</type>
        <definition>SAPI_API int sapi_get_fd</definition>
        <argsstring>(int *fd TSRMLS_DC)</argsstring>
        <name>sapi_get_fd</name>
        <param>
          <type>int *fd</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="339" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="339" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a418ab4e18452533b62a0d9cf77e33310" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API double</type>
        <definition>SAPI_API double sapi_get_request_time</definition>
        <argsstring>(TSRMLS_D)</argsstring>
        <name>sapi_get_request_time</name>
        <param>
          <type>TSRMLS_D</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="347" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="347" bodyend="362"/>
        <referencedby refid="_c_w_e-416_8c_1a85855b2f6402e7005236cf6d596315c9" compoundref="_c_w_e-416_8c" startline="8681" endline="8864">php_session_rfc1867_callback</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa40efcf63322407a047c7e7f9ec7d90f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API struct stat *</type>
        <definition>SAPI_API struct stat* sapi_get_stat</definition>
        <argsstring>(TSRMLS_D)</argsstring>
        <name>sapi_get_stat</name>
        <param>
          <type>TSRMLS_D</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="363" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="363" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1afdc27860cf844a774a88faac00c2a2cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API int</type>
        <definition>SAPI_API int sapi_get_target_gid</definition>
        <argsstring>(gid_t *obj TSRMLS_DC)</argsstring>
        <name>sapi_get_target_gid</name>
        <param>
          <type>gid_t *obj</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="374" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="374" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ac453f3a3d1f91e80d7a264c775f3c87d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API int</type>
        <definition>SAPI_API int sapi_get_target_uid</definition>
        <argsstring>(uid_t *obj TSRMLS_DC)</argsstring>
        <name>sapi_get_target_uid</name>
        <param>
          <type>uid_t *obj</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="382" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="382" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a0cf806c94ce92a713ffa0016ca3451f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API char *</type>
        <definition>SAPI_API char* sapi_getenv</definition>
        <argsstring>(char *name, size_t name_len TSRMLS_DC)</argsstring>
        <name>sapi_getenv</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t name_len</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="390" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="390" bodyend="405"/>
        <references refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" compoundref="_c_w_e-20_8c" startline="208664">value</references>
        <references refid="_c_w_e-125_8c_1a07440528847aa4badd589f7c57113524">PARSE_STRING</references>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a726f754db4d97ca793c5200b2c05ea70" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sapi_globals_ctor</definition>
        <argsstring>(sapi_globals_struct *sapi_globals TSRMLS_DC)</argsstring>
        <name>sapi_globals_ctor</name>
        <param>
          <type>sapi_globals_struct *sapi_globals</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="406" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="406" bodyend="411"/>
        <referencedby refid="_c_w_e-79_8c_1af25214bf5b246305c520dfdfd172f9ca" compoundref="_c_w_e-79_8c" startline="715" endline="740">sapi_startup</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a8fd7c3044ae60a2800c97b83bce049a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sapi_globals_dtor</definition>
        <argsstring>(sapi_globals_struct *sapi_globals TSRMLS_DC)</argsstring>
        <name>sapi_globals_dtor</name>
        <param>
          <type>sapi_globals_struct *sapi_globals</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="412" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="412" bodyend="415"/>
        <referencedby refid="_c_w_e-79_8c_1afe712e68ddeb338d46b3fe044c1125be" compoundref="_c_w_e-79_8c" startline="699" endline="714">sapi_shutdown</referencedby>
        <referencedby refid="_c_w_e-79_8c_1af25214bf5b246305c520dfdfd172f9ca" compoundref="_c_w_e-79_8c" startline="715" endline="740">sapi_startup</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1acca57d0b1d9f64d2867a38fdb841b879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API void</type>
        <definition>SAPI_API void sapi_handle_post</definition>
        <argsstring>(void *arg TSRMLS_DC)</argsstring>
        <name>sapi_handle_post</name>
        <param>
          <type>void *arg</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="416" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="416" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ad42bb4c1037e286c3f894393ce47a953" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sapi_header_add_op</definition>
        <argsstring>(sapi_header_op_enum op, sapi_header_struct *sapi_header TSRMLS_DC)</argsstring>
        <name>sapi_header_add_op</name>
        <param>
          <type>sapi_header_op_enum</type>
          <declname>op</declname>
        </param>
        <param>
          <type>sapi_header_struct *sapi_header</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="428" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="428" bodyend="447"/>
        <references refid="_c_w_e-79_8c_1aa0fe6f09d794f9cacb4f67042d5852bd" compoundref="_c_w_e-79_8c" startline="560" endline="586">sapi_remove_header</references>
        <references refid="_c_w_e-79_8c_1a645b897be33948ad48fe52266772807c" compoundref="_c_w_e-79_8c" startline="321" endline="324">sapi_free_header</references>
        <referencedby refid="_c_w_e-79_8c_1abc1d494f64d5070f4ed9630e1a9007b5" compoundref="_c_w_e-79_8c" startline="616" endline="691">sapi_send_headers</referencedby>
        <referencedby refid="_c_w_e-79_8c_1ae3f072913063235163ebe7da439a415b" compoundref="_c_w_e-79_8c" startline="11387" endline="11571">sapi_header_op</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1abd2fbb5753bebf9dabb6be87a4bf94ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API void</type>
        <definition>SAPI_API void sapi_initialize_empty_request</definition>
        <argsstring>(TSRMLS_D)</argsstring>
        <name>sapi_initialize_empty_request</name>
        <param>
          <type>TSRMLS_D</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="448" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="448" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ad385fbe862b86bf1e688deef2a2fb743" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sapi_read_post_data</definition>
        <argsstring>(TSRMLS_D)</argsstring>
        <name>sapi_read_post_data</name>
        <param>
          <type>TSRMLS_D</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="455" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="455" bodyend="513"/>
        <references refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0">p</references>
        <references refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" compoundref="_c_w_e-416_8c" startline="8017">SUCCESS</references>
        <referencedby refid="_c_w_e-79_8c_1a82a5ee55b73af4ddadffd205f922d1d0" compoundref="_c_w_e-79_8c" startline="98" endline="159">sapi_activate</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a6ac717a6be4db03361ac0a5eabf05bc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API int</type>
        <definition>SAPI_API int sapi_register_default_post_reader</definition>
        <argsstring>(void(*default_post_reader)(TSRMLS_D) TSRMLS_DC)</argsstring>
        <name>sapi_register_default_post_reader</name>
        <param>
          <type>void(*)(TSRMLS_D) TSRMLS_DC</type>
          <declname>default_post_reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="514" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="514" bodyend="521"/>
        <references refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" compoundref="_c_w_e-416_8c" startline="8017">SUCCESS</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa8580097e90ad555e1a8f9303f7cc4e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API int</type>
        <definition>SAPI_API int sapi_register_input_filter</definition>
        <argsstring>(unsigned int(*input_filter)(int arg, char *var, char **val, unsigned int val_len, unsigned int *new_val_len TSRMLS_DC), unsigned int(*input_filter_init)(TSRMLS_D) TSRMLS_DC)</argsstring>
        <name>sapi_register_input_filter</name>
        <param>
          <type>unsigned int(*)(int arg, char *var, char **val, unsigned int val_len, unsigned int *new_val_len TSRMLS_DC)</type>
          <declname>input_filter</declname>
        </param>
        <param>
          <type>unsigned int(*)(TSRMLS_D) TSRMLS_DC</type>
          <declname>input_filter_init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="522" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="522" bodyend="530"/>
        <references refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" compoundref="_c_w_e-416_8c" startline="8017">SUCCESS</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1af764f07578c1f0abf24f045a151d047f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API int</type>
        <definition>SAPI_API int sapi_register_post_entries</definition>
        <argsstring>(sapi_post_entry *post_entries TSRMLS_DC)</argsstring>
        <name>sapi_register_post_entries</name>
        <param>
          <type>sapi_post_entry *post_entries</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="531" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="531" bodyend="542"/>
        <references refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0">p</references>
        <references refid="_c_w_e-79_8c_1a6d0f7ff5a4f7cdbfb2bae7e7edd79747" compoundref="_c_w_e-79_8c" startline="543" endline="551">sapi_register_post_entry</references>
        <references refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" compoundref="_c_w_e-416_8c" startline="8017">SUCCESS</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a6d0f7ff5a4f7cdbfb2bae7e7edd79747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API int</type>
        <definition>SAPI_API int sapi_register_post_entry</definition>
        <argsstring>(sapi_post_entry *post_entry TSRMLS_DC)</argsstring>
        <name>sapi_register_post_entry</name>
        <param>
          <type>sapi_post_entry *post_entry</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="543" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="543" bodyend="551"/>
        <referencedby refid="_c_w_e-79_8c_1af764f07578c1f0abf24f045a151d047f" compoundref="_c_w_e-79_8c" startline="531" endline="542">sapi_register_post_entries</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a2c1363ca2ef00abc8f49332ab7e24fec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API int</type>
        <definition>SAPI_API int sapi_register_treat_data</definition>
        <argsstring>(void(*treat_data)(int arg, char *str, zval *destArray TSRMLS_DC) TSRMLS_DC)</argsstring>
        <name>sapi_register_treat_data</name>
        <param>
          <type>void(*)(int arg, char *str, zval *destArray TSRMLS_DC) TSRMLS_DC</type>
          <declname>treat_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="552" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="552" bodyend="559"/>
        <references refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" compoundref="_c_w_e-416_8c" startline="8017">SUCCESS</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa0fe6f09d794f9cacb4f67042d5852bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sapi_remove_header</definition>
        <argsstring>(zend_llist *l, char *name, uint len)</argsstring>
        <name>sapi_remove_header</name>
        <param>
          <type>zend_llist *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="560" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="560" bodyend="586"/>
        <references refid="_c_w_e-79_8c_1a645b897be33948ad48fe52266772807c" compoundref="_c_w_e-79_8c" startline="321" endline="324">sapi_free_header</references>
        <referencedby refid="_c_w_e-79_8c_1ad42bb4c1037e286c3f894393ce47a953" compoundref="_c_w_e-79_8c" startline="428" endline="447">sapi_header_add_op</referencedby>
        <referencedby refid="_c_w_e-79_8c_1ae3f072913063235163ebe7da439a415b" compoundref="_c_w_e-79_8c" startline="11387" endline="11571">sapi_header_op</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a6e690d49b0f6ac2345559b3599422829" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sapi_run_header_callback</definition>
        <argsstring>(TSRMLS_D)</argsstring>
        <name>sapi_run_header_callback</name>
        <param>
          <type>TSRMLS_D</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="587" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="587" bodyend="615"/>
        <references refid="_c_w_e-416_8c_1a08da0d69a01d565ca040bfdfbef84af6" compoundref="_c_w_e-416_8c" startline="10626" endline="10643">zend_fcall_info_init</references>
        <references refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" compoundref="_c_w_e-416_8c" startline="8017">SUCCESS</references>
        <referencedby refid="_c_w_e-79_8c_1abc1d494f64d5070f4ed9630e1a9007b5" compoundref="_c_w_e-79_8c" startline="616" endline="691">sapi_send_headers</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1abc1d494f64d5070f4ed9630e1a9007b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API int</type>
        <definition>SAPI_API int sapi_send_headers</definition>
        <argsstring>(TSRMLS_D)</argsstring>
        <name>sapi_send_headers</name>
        <param>
          <type>TSRMLS_D</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="616" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="616" bodyend="691"/>
        <references refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" compoundref="_c_w_e-416_8c" startline="8017">SUCCESS</references>
        <references refid="_c_w_e-79_8c_1ab119ddca7a4c92687819ee579e506daf" compoundref="_c_w_e-79_8c" startline="60" endline="97">get_default_content_type</references>
        <references refid="_c_w_e-79_8c_1ad42bb4c1037e286c3f894393ce47a953" compoundref="_c_w_e-79_8c" startline="428" endline="447">sapi_header_add_op</references>
        <references refid="_c_w_e-79_8c_1a6e690d49b0f6ac2345559b3599422829" compoundref="_c_w_e-79_8c" startline="587" endline="615">sapi_run_header_callback</references>
        <references refid="_c_w_e-416_8c_1aec4b0173bbfe004e02a2bb9ed4e37b81" compoundref="_c_w_e-416_8c" startline="8007">buf</references>
        <references refid="_c_w_e-79_8c_1a2b1b9b75a1e9d432085b02cf2acb4121" compoundref="_c_w_e-79_8c" startline="331" endline="338">sapi_get_default_content_type_header</references>
        <references refid="_c_w_e-79_8c_1a645b897be33948ad48fe52266772807c" compoundref="_c_w_e-79_8c" startline="321" endline="324">sapi_free_header</references>
        <references refid="_c_w_e-79_8c_1aafc8dd4177475278b98f374a42e1b571" compoundref="_c_w_e-79_8c" startline="692" endline="698">sapi_send_headers_free</references>
        <referencedby refid="_c_w_e-20_8c_1aad1c72ad68b6c43f11221bddb4560556" compoundref="_c_w_e-20_8c" startline="15061" endline="15085">php_apache_sapi_flush</referencedby>
        <referencedby refid="_c_w_e-20_8c_1a5f6bc3f93c24455ae308f270669a018a" compoundref="_c_w_e-20_8c" startline="55389" endline="55401">phar_do_403</referencedby>
        <referencedby refid="_c_w_e-20_8c_1afd40fbea118125f08d9a6ecd3706e783" compoundref="_c_w_e-20_8c" startline="55403" endline="55425">phar_do_404</referencedby>
        <referencedby refid="_c_w_e-20_8c_1a17a2e481e53563e5e4b880a9e6acf832" compoundref="_c_w_e-20_8c" startline="55612" endline="55774">phar_file_action</referencedby>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aafc8dd4177475278b98f374a42e1b571" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sapi_send_headers_free</definition>
        <argsstring>(TSRMLS_D)</argsstring>
        <name>sapi_send_headers_free</name>
        <param>
          <type>TSRMLS_D</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="692" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="692" bodyend="698"/>
        <referencedby refid="_c_w_e-79_8c_1a6f0db081ca92a1bd237148101de9fbe7" compoundref="_c_w_e-79_8c" startline="236" endline="289">sapi_deactivate</referencedby>
        <referencedby refid="_c_w_e-79_8c_1abc1d494f64d5070f4ed9630e1a9007b5" compoundref="_c_w_e-79_8c" startline="616" endline="691">sapi_send_headers</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1afe712e68ddeb338d46b3fe044c1125be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API void</type>
        <definition>SAPI_API void sapi_shutdown</definition>
        <argsstring>(void)</argsstring>
        <name>sapi_shutdown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="699" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="699" bodyend="714"/>
        <references refid="_c_w_e-79_8c_1a8fd7c3044ae60a2800c97b83bce049a4" compoundref="_c_w_e-79_8c" startline="412" endline="415">sapi_globals_dtor</references>
        <referencedby refid="_c_w_e-20_8c_1ae5c02624a9e8741b4aae43c4dc83cdda" compoundref="_c_w_e-20_8c" startline="15309" endline="15317">php_apache_server_shutdown</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1af25214bf5b246305c520dfdfd172f9ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API void</type>
        <definition>SAPI_API void sapi_startup</definition>
        <argsstring>(sapi_module_struct *sf)</argsstring>
        <name>sapi_startup</name>
        <param>
          <type>sapi_module_struct *</type>
          <declname>sf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="715" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="715" bodyend="740"/>
        <references refid="_c_w_e-79_8c_1a726f754db4d97ca793c5200b2c05ea70" compoundref="_c_w_e-79_8c" startline="406" endline="411">sapi_globals_ctor</references>
        <references refid="_c_w_e-79_8c_1a8fd7c3044ae60a2800c97b83bce049a4" compoundref="_c_w_e-79_8c" startline="412" endline="415">sapi_globals_dtor</references>
        <referencedby refid="_c_w_e-20_8c_1af48ddc3762af3fb327596799bc7cb423" compoundref="_c_w_e-20_8c" startline="15318" endline="15349">php_apache_server_startup</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa94a6dc7c048977e94da271a21cafee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API void</type>
        <definition>SAPI_API void sapi_terminate_process</definition>
        <argsstring>(TSRMLS_D)</argsstring>
        <name>sapi_terminate_process</name>
        <param>
          <type>TSRMLS_D</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="741" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="741" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a29d52b97c324bc1052d2665c71077522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API void</type>
        <definition>SAPI_API void sapi_unregister_post_entry</definition>
        <argsstring>(sapi_post_entry *post_entry TSRMLS_DC)</argsstring>
        <name>sapi_unregister_post_entry</name>
        <param>
          <type>sapi_post_entry *post_entry</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="746" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="746" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a0fd0e1dad1fc523bcae010064e0f2fb0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sapi_update_response_code</definition>
        <argsstring>(int ncode TSRMLS_DC)</argsstring>
        <name>sapi_update_response_code</name>
        <param>
          <type>int ncode</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="754" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="754" bodyend="767"/>
        <referencedby refid="_c_w_e-79_8c_1ae3f072913063235163ebe7da439a415b" compoundref="_c_w_e-79_8c" startline="11387" endline="11571">sapi_header_op</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a4779c2d358d5d899f8692aa7eaaf0b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>php_apache_sapi_header_handler</definition>
        <argsstring>(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers TSRMLS_DC)</argsstring>
        <name>php_apache_sapi_header_handler</name>
        <param>
          <type>sapi_header_struct *</type>
          <declname>sapi_header</declname>
        </param>
        <param>
          <type>sapi_header_op_enum</type>
          <declname>op</declname>
        </param>
        <param>
          <type>sapi_headers_struct *sapi_headers</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="768" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="768" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a25aa6680196ac2a843ce754f75e98b14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>php_apache_sapi_register_variables</definition>
        <argsstring>(zval *track_vars_array TSRMLS_DC)</argsstring>
        <name>php_apache_sapi_register_variables</name>
        <param>
          <type>zval *track_vars_array</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="828" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="828" bodyend="847"/>
        <references refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" compoundref="_c_w_e-20_8c" startline="208532">key</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa54529e7edcd685d5676065d4db774f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int oidc_auth_checker</definition>
        <argsstring>(request_rec *r)</argsstring>
        <name>oidc_auth_checker</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="848" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="848" bodyend="891"/>
        <references refid="_c_w_e-79_8c_1a1b668b7a31cb502b8f93350b683f94c6" compoundref="_c_w_e-79_8c" startline="1140" endline="1152">oidc_authz_get_claims_and_idtoken</references>
        <references refid="_c_w_e-20_8c_1a7734f8b2c328f4fd387908b604be6d73" compoundref="_c_w_e-20_8c" startline="208521" endline="208523">if</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a489397adb4bb645c9d94e1861e265fa7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int oidc_authenticate_user</definition>
        <argsstring>(request_rec *r, oidc_cfg *c, oidc_provider_t *provider, const char *original_url, const char *login_hint, const char *id_token_hint, const char *prompt, const char *auth_request_params, const char *path_scope)</argsstring>
        <name>oidc_authenticate_user</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>oidc_cfg *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>oidc_provider_t *</type>
          <declname>provider</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>original_url</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>login_hint</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>id_token_hint</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prompt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>auth_request_params</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path_scope</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="892" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="892" bodyend="1003"/>
        <references refid="_c_w_e-79_8c_1aabd7e87d40ba94c684ed5ce90108c521" compoundref="_c_w_e-79_8c" startline="1460" endline="1608">oidc_discovery</references>
        <references refid="_c_w_e-79_8c_1ae2939eb43c3cbcd84a4f983fa915a7f8" compoundref="_c_w_e-79_8c" startline="1609" endline="1660">oidc_get_browser_state_hash</references>
        <references refid="_c_w_e-79_8c_1a6e097fb4bca722db810e8467f62f6f9f" compoundref="_c_w_e-79_8c" startline="1004" endline="1058">oidc_authorization_request_set_cookie</references>
        <references refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0">p</references>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a6e097fb4bca722db810e8467f62f6f9f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int oidc_authorization_request_set_cookie</definition>
        <argsstring>(request_rec *r, oidc_cfg *c, const char *state, oidc_proto_state_t *proto_state)</argsstring>
        <name>oidc_authorization_request_set_cookie</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>oidc_cfg *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>oidc_proto_state_t *</type>
          <declname>proto_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1004" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1004" bodyend="1058"/>
        <references refid="_c_w_e-79_8c_1a1fddc39e97b40b30e8bedbc308e8c2ec" compoundref="_c_w_e-79_8c" startline="1324" endline="1385">oidc_clean_expired_state_cookies</references>
        <references refid="_c_w_e-79_8c_1a91fcc5fc83318624a00f1f4fec481ada" compoundref="_c_w_e-79_8c" startline="1724" endline="1726">oidc_get_state_cookie_name</references>
        <referencedby refid="_c_w_e-79_8c_1a489397adb4bb645c9d94e1861e265fa7" compoundref="_c_w_e-79_8c" startline="892" endline="1003">oidc_authenticate_user</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a90362c938248d9bdccdb2d621c0f3247" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int oidc_authorization_response_error</definition>
        <argsstring>(request_rec *r, oidc_cfg *c, oidc_proto_state_t *proto_state, const char *error, const char *error_description)</argsstring>
        <name>oidc_authorization_response_error</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>oidc_cfg *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>oidc_proto_state_t *</type>
          <declname>proto_state</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>error</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>error_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1059" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1059" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1adb2241e3fd0c387b0ce3147a6e1769bf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_byte_t</type>
        <definition>static apr_byte_t oidc_authorization_response_match_state</definition>
        <argsstring>(request_rec *r, oidc_cfg *c, const char *state, struct oidc_provider_t **provider, oidc_proto_state_t **proto_state)</argsstring>
        <name>oidc_authorization_response_match_state</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>oidc_cfg *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>struct oidc_provider_t **</type>
          <declname>provider</declname>
        </param>
        <param>
          <type>oidc_proto_state_t **</type>
          <declname>proto_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1074" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1074" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a36471b62f62dbf7d0c932e66946c9645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>authz_status</type>
        <definition>authz_status oidc_authz_checker</definition>
        <argsstring>(request_rec *r, const char *require_args, const void *parsed_require_args, oidc_authz_match_claim_fn_type match_claim_fn)</argsstring>
        <name>oidc_authz_checker</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>require_args</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>parsed_require_args</declname>
        </param>
        <param>
          <type>oidc_authz_match_claim_fn_type</type>
          <declname>match_claim_fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1096" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1096" bodyend="1131"/>
        <references refid="_c_w_e-79_8c_1a1b668b7a31cb502b8f93350b683f94c6" compoundref="_c_w_e-79_8c" startline="1140" endline="1152">oidc_authz_get_claims_and_idtoken</references>
        <referencedby refid="_c_w_e-79_8c_1a306e6ff2fc1987cce19465fb1a6cdbae" compoundref="_c_w_e-79_8c" startline="1132" endline="1136">oidc_authz_checker_claim</referencedby>
        <referencedby refid="_c_w_e-79_8c_1ad20823486022b8fc78b9337f30611995" compoundref="_c_w_e-79_8c" startline="1137" endline="1139">oidc_authz_checker_claims_expr</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a306e6ff2fc1987cce19465fb1a6cdbae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>authz_status</type>
        <definition>authz_status oidc_authz_checker_claim</definition>
        <argsstring>(request_rec *r, const char *require_args, const void *parsed_require_args)</argsstring>
        <name>oidc_authz_checker_claim</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>require_args</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>parsed_require_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1132" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1132" bodyend="1136"/>
        <references refid="_c_w_e-79_8c_1a36471b62f62dbf7d0c932e66946c9645" compoundref="_c_w_e-79_8c" startline="1096" endline="1131">oidc_authz_checker</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ad20823486022b8fc78b9337f30611995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>authz_status</type>
        <definition>authz_status oidc_authz_checker_claims_expr</definition>
        <argsstring>(request_rec *r, const char *require_args, const void *parsed_require_args)</argsstring>
        <name>oidc_authz_checker_claims_expr</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>require_args</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>parsed_require_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1137" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1137" bodyend="1139"/>
        <references refid="_c_w_e-79_8c_1a36471b62f62dbf7d0c932e66946c9645" compoundref="_c_w_e-79_8c" startline="1096" endline="1131">oidc_authz_checker</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a1b668b7a31cb502b8f93350b683f94c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void oidc_authz_get_claims_and_idtoken</definition>
        <argsstring>(request_rec *r, json_t **claims, json_t **id_token)</argsstring>
        <name>oidc_authz_get_claims_and_idtoken</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>json_t **</type>
          <declname>claims</declname>
        </param>
        <param>
          <type>json_t **</type>
          <declname>id_token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1140" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1140" bodyend="1152"/>
        <referencedby refid="_c_w_e-79_8c_1aa54529e7edcd685d5676065d4db774f5" compoundref="_c_w_e-79_8c" startline="848" endline="891">oidc_auth_checker</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a36471b62f62dbf7d0c932e66946c9645" compoundref="_c_w_e-79_8c" startline="1096" endline="1131">oidc_authz_checker</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a8542054553d19b49e0af133369ff4063" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_byte_t</type>
        <definition>static apr_byte_t oidc_check_cookie_domain</definition>
        <argsstring>(request_rec *r, oidc_cfg *cfg, oidc_session_t *session)</argsstring>
        <name>oidc_check_cookie_domain</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>oidc_cfg *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>oidc_session_t *</type>
          <declname>session</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1153" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1153" bodyend="1168"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa44defc7aafe9832a0ba6cebc77324f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int oidc_check_max_session_duration</definition>
        <argsstring>(request_rec *r, oidc_cfg *cfg, oidc_session_t *session)</argsstring>
        <name>oidc_check_max_session_duration</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>oidc_cfg *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>oidc_session_t *</type>
          <declname>session</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1169" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1169" bodyend="1187"/>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a806eaa919b4ebcb9f7dc8e3d1b28825a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int oidc_check_mixed_userid_oauth</definition>
        <argsstring>(request_rec *r, oidc_cfg *c)</argsstring>
        <name>oidc_check_mixed_userid_oauth</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>oidc_cfg *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1188" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1188" bodyend="1197"/>
        <references refid="_c_w_e-79_8c_1a1092d07b51ba4b17990bc153522f850b" compoundref="_c_w_e-79_8c" startline="1229" endline="1323">oidc_check_userid_openidc</references>
        <referencedby refid="_c_w_e-79_8c_1a516e20de501b601f44033f7a4add041a" compoundref="_c_w_e-79_8c" startline="1198" endline="1228">oidc_check_user_id</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a516e20de501b601f44033f7a4add041a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int oidc_check_user_id</definition>
        <argsstring>(request_rec *r)</argsstring>
        <name>oidc_check_user_id</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1198" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1198" bodyend="1228"/>
        <references refid="_c_w_e-79_8c_1a1092d07b51ba4b17990bc153522f850b" compoundref="_c_w_e-79_8c" startline="1229" endline="1323">oidc_check_userid_openidc</references>
        <references refid="_c_w_e-79_8c_1a806eaa919b4ebcb9f7dc8e3d1b28825a" compoundref="_c_w_e-79_8c" startline="1188" endline="1197">oidc_check_mixed_userid_oauth</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a1092d07b51ba4b17990bc153522f850b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int oidc_check_userid_openidc</definition>
        <argsstring>(request_rec *r, oidc_cfg *c)</argsstring>
        <name>oidc_check_userid_openidc</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>oidc_cfg *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1229" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1229" bodyend="1323"/>
        <references refid="_c_w_e-79_8c_1ace0fddaa9ebc4456d6aa1f29ff8bdd7c" compoundref="_c_w_e-79_8c" startline="1410" endline="1429">oidc_copy_tokens_to_request_state</references>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a806eaa919b4ebcb9f7dc8e3d1b28825a" compoundref="_c_w_e-79_8c" startline="1188" endline="1197">oidc_check_mixed_userid_oauth</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a516e20de501b601f44033f7a4add041a" compoundref="_c_w_e-79_8c" startline="1198" endline="1228">oidc_check_user_id</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a1fddc39e97b40b30e8bedbc308e8c2ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int oidc_clean_expired_state_cookies</definition>
        <argsstring>(request_rec *r, oidc_cfg *c, const char *currentCookieName, int delete_oldest)</argsstring>
        <name>oidc_clean_expired_state_cookies</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>oidc_cfg *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>currentCookieName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delete_oldest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1324" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1324" bodyend="1385"/>
        <references refid="_c_w_e-79_8c_1a65d6b4fa94707cdf566297b5f512939f" compoundref="_c_w_e-79_8c" startline="1430" endline="1459">oidc_delete_oldest_state_cookies</references>
        <referencedby refid="_c_w_e-79_8c_1a6e097fb4bca722db810e8467f62f6f9f" compoundref="_c_w_e-79_8c" startline="1004" endline="1058">oidc_authorization_request_set_cookie</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a0b1160ee37762d297b186934fd10e622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int oidc_content_handler</definition>
        <argsstring>(request_rec *r)</argsstring>
        <name>oidc_content_handler</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1386" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1386" bodyend="1409"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ace0fddaa9ebc4456d6aa1f29ff8bdd7c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void oidc_copy_tokens_to_request_state</definition>
        <argsstring>(request_rec *r, oidc_session_t *session, const char **s_id_token, const char **s_claims)</argsstring>
        <name>oidc_copy_tokens_to_request_state</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>oidc_session_t *</type>
          <declname>session</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>s_id_token</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>s_claims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1410" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1410" bodyend="1429"/>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a1092d07b51ba4b17990bc153522f850b" compoundref="_c_w_e-79_8c" startline="1229" endline="1323">oidc_check_userid_openidc</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a65d6b4fa94707cdf566297b5f512939f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int oidc_delete_oldest_state_cookies</definition>
        <argsstring>(request_rec *r, int number_of_valid_state_cookies, int max_number_of_state_cookies, oidc_state_cookies_t *first)</argsstring>
        <name>oidc_delete_oldest_state_cookies</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>number_of_valid_state_cookies</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_number_of_state_cookies</declname>
        </param>
        <param>
          <type>oidc_state_cookies_t *</type>
          <declname>first</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1430" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1430" bodyend="1459"/>
        <referencedby refid="_c_w_e-79_8c_1a1fddc39e97b40b30e8bedbc308e8c2ec" compoundref="_c_w_e-79_8c" startline="1324" endline="1385">oidc_clean_expired_state_cookies</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aabd7e87d40ba94c684ed5ce90108c521" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int oidc_discovery</definition>
        <argsstring>(request_rec *r, oidc_cfg *cfg)</argsstring>
        <name>oidc_discovery</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>oidc_cfg *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1460" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1460" bodyend="1608"/>
        <referencedby refid="_c_w_e-79_8c_1a489397adb4bb645c9d94e1861e265fa7" compoundref="_c_w_e-79_8c" startline="892" endline="1003">oidc_authenticate_user</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ae2939eb43c3cbcd84a4f983fa915a7f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* oidc_get_browser_state_hash</definition>
        <argsstring>(request_rec *r, const char *nonce)</argsstring>
        <name>oidc_get_browser_state_hash</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>nonce</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1609" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1609" bodyend="1660"/>
        <references refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" compoundref="_c_w_e-20_8c" startline="208664">value</references>
        <references refid="_c_w_e-787_8c_1ad74ed21140b565a25e2fcfe9d9cff7c4" compoundref="_c_w_e-787_8c" startline="19046" endline="19082">hash</references>
        <referencedby refid="_c_w_e-79_8c_1a489397adb4bb645c9d94e1861e265fa7" compoundref="_c_w_e-79_8c" startline="892" endline="1003">oidc_authenticate_user</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a2d9cae6aa994a49c90c8a10fecd9b9ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_byte_t</type>
        <definition>apr_byte_t oidc_get_provider_from_session</definition>
        <argsstring>(request_rec *r, oidc_cfg *c, oidc_session_t *session, oidc_provider_t **provider)</argsstring>
        <name>oidc_get_provider_from_session</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>oidc_cfg *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>oidc_session_t *</type>
          <declname>session</declname>
        </param>
        <param>
          <type>oidc_provider_t **</type>
          <declname>provider</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1661" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1661" bodyend="1684"/>
        <references refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0">p</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ada56cccc1a839510ef2fb374e900c7a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apr_byte_t</type>
        <definition>apr_byte_t oidc_get_remote_user</definition>
        <argsstring>(request_rec *r, const char *claim_name, const char *reg_exp, const char *replace, json_t *json, char **request_user)</argsstring>
        <name>oidc_get_remote_user</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>claim_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>reg_exp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>replace</declname>
        </param>
        <param>
          <type>json_t *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>request_user</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1685" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1685" bodyend="1723"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a91fcc5fc83318624a00f1f4fec481ada" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* oidc_get_state_cookie_name</definition>
        <argsstring>(request_rec *r, const char *state)</argsstring>
        <name>oidc_get_state_cookie_name</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="1724" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="1724" bodyend="1726"/>
        <referencedby refid="_c_w_e-79_8c_1a6e097fb4bca722db810e8467f62f6f9f" compoundref="_c_w_e-79_8c" startline="1004" endline="1058">oidc_authorization_request_set_cookie</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a35e82b296d5566bb0ce02ddbfe9b27f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AdvanceTime</definition>
        <argsstring>(base::TimeDelta delta)</argsstring>
        <name>AdvanceTime</name>
        <param>
          <type>base::TimeDelta</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2005" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2005" bodyend="2008"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa435057b3a088067e9358944524db81b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VideoDetectorTest</definition>
        <argsstring>()</argsstring>
        <name>VideoDetectorTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2009" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2009" bodyend="2009"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1afb530d2b25a56843c5796031651f17e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int num_invocations</definition>
        <argsstring>() const</argsstring>
        <name>num_invocations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2010" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2010" bodyend="2010"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a3a0f2873df1d7d2c10b2f98e90ebe58e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reset_stats</definition>
        <argsstring>()</argsstring>
        <name>reset_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2011" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2011" bodyend="2011"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aff1a5f755378cfcfa49a39ba3122173a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual ~VideoDetectorTest</definition>
        <argsstring>()</argsstring>
        <name>~VideoDetectorTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2012" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2012" bodyend="2012"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ad2654a232dbe9656c406209f49fc4211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CastCastView *</type>
        <definition>CastCastView* cast_view</definition>
        <argsstring>()</argsstring>
        <name>cast_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2342" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2342" bodyend="2342"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a7692e014d9cb19f32eeec6ca7b8b7b81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CastSelectDefaultView *</type>
        <definition>CastSelectDefaultView* select_view</definition>
        <argsstring>()</argsstring>
        <name>select_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2343" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2343" bodyend="2343"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1afd1b401cf4b3a4ab89a15e5bd5c29a3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ExecuteJavaScript</definition>
        <argsstring>(const std::string &amp;javascript)</argsstring>
        <name>ExecuteJavaScript</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>javascript</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2364" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2364" bodyend="2369"/>
        <references refid="_c_w_e-79_8c_1a538456d008711e011a10fd7037e02b04" compoundref="_c_w_e-79_8c" startline="2433" endline="2442">GetRenderViewHost</references>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1af341a7671a1ca6361b06f47cd2298c38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ExecuteJavaScriptWithCallback</definition>
        <argsstring>(const std::string &amp;javascript, const JavaScriptResultCallback &amp;callback)</argsstring>
        <name>ExecuteJavaScriptWithCallback</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>javascript</declname>
        </param>
        <param>
          <type>const JavaScriptResultCallback &amp;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2370" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2370" bodyend="2377"/>
        <references refid="_c_w_e-79_8c_1a538456d008711e011a10fd7037e02b04" compoundref="_c_w_e-79_8c" startline="2433" endline="2442">GetRenderViewHost</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1adf414f88ee4192e1a0762b60780b7c60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const extensions::Extension *</type>
        <definition>const extensions::Extension* FindCastExtension</definition>
        <argsstring>()</argsstring>
        <name>FindCastExtension</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2378" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2378" bodyend="2393"/>
        <referencedby refid="_c_w_e-79_8c_1a538456d008711e011a10fd7037e02b04" compoundref="_c_w_e-79_8c" startline="2433" endline="2442">GetRenderViewHost</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a43780de2a63e02d844aa5db8e433b729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GetReceiversAndActivitiesCallback</definition>
        <argsstring>(const ash::CastConfigDelegate::ReceiversAndActivitesCallback &amp;callback, const base::Value *value)</argsstring>
        <name>GetReceiversAndActivitiesCallback</name>
        <param>
          <type>const ash::CastConfigDelegate::ReceiversAndActivitesCallback &amp;</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>const base::Value *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2400" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2400" bodyend="2432"/>
        <references refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" compoundref="_c_w_e-20_8c" startline="208664">value</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a538456d008711e011a10fd7037e02b04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>content::RenderViewHost *</type>
        <definition>content::RenderViewHost* GetRenderViewHost</definition>
        <argsstring>()</argsstring>
        <name>GetRenderViewHost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2433" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2433" bodyend="2442"/>
        <references refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" compoundref="_c_w_e-79_8c" startline="11257" endline="11257">extension</references>
        <references refid="_c_w_e-79_8c_1adf414f88ee4192e1a0762b60780b7c60" compoundref="_c_w_e-79_8c" startline="2378" endline="2393">FindCastExtension</references>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
        <referencedby refid="_c_w_e-79_8c_1afd1b401cf4b3a4ab89a15e5bd5c29a3a" compoundref="_c_w_e-79_8c" startline="2364" endline="2369">ExecuteJavaScript</referencedby>
        <referencedby refid="_c_w_e-79_8c_1af341a7671a1ca6361b06f47cd2298c38" compoundref="_c_w_e-79_8c" startline="2370" endline="2377">ExecuteJavaScriptWithCallback</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a8ca3b9e319ea7526107a927e3369246a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LayoutRect</type>
        <definition>static LayoutRect AbsoluteToLocal</definition>
        <argsstring>(const LayoutBox &amp;box, LayoutRect rect)</argsstring>
        <name>AbsoluteToLocal</name>
        <param>
          <type>const LayoutBox &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>LayoutRect</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2484" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2484" bodyend="2488"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ab92a072305281d21253b7c6cb747740e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool CanHaveOverflowScrollbars</definition>
        <argsstring>(const LayoutBox &amp;box)</argsstring>
        <name>CanHaveOverflowScrollbars</name>
        <param>
          <type>const LayoutBox &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2489" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2489" bodyend="2491"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a114e8747768bfd453b304f7f375ce663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClampScrollableAreas</definition>
        <argsstring>()</argsstring>
        <name>ClampScrollableAreas</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2512" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2512" bodyend="2516"/>
        <referencedby refid="_c_w_e-79_8c_1ae8a734bd9476b778530a5c278809b5b0" compoundref="_c_w_e-79_8c" startline="4711" endline="4714">~DelayScrollOffsetClampScope</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1acb008d333bae0dba38a568da96638940" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int CornerStart</definition>
        <argsstring>(const LayoutBox &amp;box, int min_x, int max_x, int thickness)</argsstring>
        <name>CornerStart</name>
        <param>
          <type>const LayoutBox &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thickness</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2718" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2718" bodyend="2725"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a3c699dc49dbb0fb4c4dccf37f431f2a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DelayScrollOffsetClampScope</definition>
        <argsstring>()</argsstring>
        <name>DelayScrollOffsetClampScope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="2761" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="2761" bodyend="2764"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a3b9e9a9dcac654659a8bcd2165396793" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool InvalidatePaintOfScrollControlIfNeeded</definition>
        <argsstring>(const LayoutRect &amp;new_visual_rect, const LayoutRect &amp;previous_visual_rect, bool needs_paint_invalidation, LayoutBox &amp;box, const LayoutBoxModelObject &amp;paint_invalidation_container)</argsstring>
        <name>InvalidatePaintOfScrollControlIfNeeded</name>
        <param>
          <type>const LayoutRect &amp;</type>
          <declname>new_visual_rect</declname>
        </param>
        <param>
          <type>const LayoutRect &amp;</type>
          <declname>previous_visual_rect</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>needs_paint_invalidation</declname>
        </param>
        <param>
          <type>LayoutBox &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const LayoutBoxModelObject &amp;</type>
          <declname>paint_invalidation_container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="3205" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="3205" bodyend="3220"/>
        <referencedby refid="_c_w_e-79_8c_1a963e0d0714c6b5234aa802216aa62824" compoundref="_c_w_e-79_8c" startline="3260" endline="3318">InvalidatePaintOfScrollbarIfNeeded</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a963e0d0714c6b5234aa802216aa62824" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LayoutRect</type>
        <definition>static LayoutRect InvalidatePaintOfScrollbarIfNeeded</definition>
        <argsstring>(Scrollbar *scrollbar, GraphicsLayer *graphics_layer, bool &amp;previously_was_overlay, const LayoutRect &amp;previous_visual_rect, bool needs_paint_invalidation_arg, LayoutBox &amp;box, const PaintInvalidatorContext &amp;context)</argsstring>
        <name>InvalidatePaintOfScrollbarIfNeeded</name>
        <param>
          <type>Scrollbar *</type>
          <declname>scrollbar</declname>
        </param>
        <param>
          <type>GraphicsLayer *</type>
          <declname>graphics_layer</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>previously_was_overlay</declname>
        </param>
        <param>
          <type>const LayoutRect &amp;</type>
          <declname>previous_visual_rect</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>needs_paint_invalidation_arg</declname>
        </param>
        <param>
          <type>LayoutBox &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const PaintInvalidatorContext &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="3260" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="3260" bodyend="3318"/>
        <references refid="_c_w_e-79_8c_1a81c4c21d3596064af4bfb2a9a4574248" compoundref="_c_w_e-79_8c" startline="3800" endline="3814">ScrollControlVisualRect</references>
        <references refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" compoundref="_c_w_e-20_8c" startline="77926" endline="77926">context</references>
        <references refid="_c_w_e-79_8c_1a3b9e9a9dcac654659a8bcd2165396793" compoundref="_c_w_e-79_8c" startline="3205" endline="3220">InvalidatePaintOfScrollControlIfNeeded</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a17f9c42e8a407fda3e792baf74c8f8c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool LayerNodeMayNeedCompositedScrolling</definition>
        <argsstring>(const PaintLayer *layer)</argsstring>
        <name>LayerNodeMayNeedCompositedScrolling</name>
        <param>
          <type>const PaintLayer *</type>
          <declname>layer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="3391" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="3391" bodyend="3402"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1acca9f6bb735ad83e9b7bc21bb6128691" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LayoutRect</type>
        <definition>static LayoutRect LocalToAbsolute</definition>
        <argsstring>(const LayoutBox &amp;box, LayoutRect rect)</argsstring>
        <name>LocalToAbsolute</name>
        <param>
          <type>const LayoutBox &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>LayoutRect</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="3427" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="3427" bodyend="3431"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a9d46271da10581b6214b91fa2f6622cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PaintedOutputOfObjectHasNoEffectRegardlessOfSize</definition>
        <argsstring>() const</argsstring>
        <name>PaintedOutputOfObjectHasNoEffectRegardlessOfSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="3591" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="3591" bodyend="3594"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a81c4c21d3596064af4bfb2a9a4574248" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LayoutRect</type>
        <definition>static LayoutRect ScrollControlVisualRect</definition>
        <argsstring>(const IntRect &amp;scroll_control_rect, const LayoutBox &amp;box, const PaintInvalidatorContext &amp;context, const LayoutRect &amp;previous_visual_rect)</argsstring>
        <name>ScrollControlVisualRect</name>
        <param>
          <type>const IntRect &amp;</type>
          <declname>scroll_control_rect</declname>
        </param>
        <param>
          <type>const LayoutBox &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const PaintInvalidatorContext &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const LayoutRect &amp;</type>
          <declname>previous_visual_rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="3800" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="3800" bodyend="3814"/>
        <references refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" compoundref="_c_w_e-20_8c" startline="77926" endline="77926">context</references>
        <referencedby refid="_c_w_e-79_8c_1a963e0d0714c6b5234aa802216aa62824" compoundref="_c_w_e-79_8c" startline="3260" endline="3318">InvalidatePaintOfScrollbarIfNeeded</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa14fc222a7f1d75d7f2596336b2fb9c6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const LayoutObject &amp;</type>
        <definition>static const LayoutObject&amp; ScrollbarStyleSource</definition>
        <argsstring>(const LayoutBox &amp;layout_box)</argsstring>
        <name>ScrollbarStyleSource</name>
        <param>
          <type>const LayoutBox &amp;</type>
          <declname>layout_box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="3949" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="3949" bodyend="3972"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ae8a734bd9476b778530a5c278809b5b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~DelayScrollOffsetClampScope</definition>
        <argsstring>()</argsstring>
        <name>~DelayScrollOffsetClampScope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="4711" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="4711" bodyend="4714"/>
        <references refid="_c_w_e-79_8c_1a114e8747768bfd453b304f7f375ce663" compoundref="_c_w_e-79_8c" startline="2512" endline="2516">ClampScrollableAreas</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a4de9823c973e64a58e9654b2ba10ada2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkAndSetPrivateFlagOnConsole</definition>
        <argsstring>(const char *name, bool defaultValue)</argsstring>
        <name>checkAndSetPrivateFlagOnConsole</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="4826" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="4826" bodyend="4841"/>
        <references refid="_c_w_e-79_8c_1ae18573ae56672288281713f5aebb32e0" compoundref="_c_w_e-79_8c" startline="4927" endline="4935">ensureConsole</references>
        <references refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" compoundref="_c_w_e-20_8c" startline="208532">key</references>
        <referencedby refid="_c_w_e-79_8c_1aa0c8977d7081b502e68985076649b108" compoundref="_c_w_e-79_8c" startline="5191" endline="5197">reportDeprecatedCall</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void createBoundFunctionProperty</definition>
        <argsstring>(v8::Local&lt; v8::Context &gt; context, v8::Local&lt; v8::Object &gt; console, const char *name, v8::FunctionCallback callback, const char *description=nullptr)</argsstring>
        <name>createBoundFunctionProperty</name>
        <param>
          <type>v8::Local&lt; v8::Context &gt;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>v8::Local&lt; v8::Object &gt;</type>
          <declname>console</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>v8::FunctionCallback</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="4876" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="4876" bodyend="4891"/>
        <references refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" compoundref="_c_w_e-20_8c" startline="77926" endline="77926">context</references>
        <references refid="_c_w_e-79_8c_1ad295777dfe6bee4c6c39aab43e332e3d" compoundref="_c_w_e-79_8c" startline="5198" endline="5201">returnDataCallback</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ada0e5f821a7afd1fe0ea6730bb197492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>V8InspectorSessionImpl *</type>
        <definition>V8InspectorSessionImpl* currentSession</definition>
        <argsstring>()</argsstring>
        <name>currentSession</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="4892" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="4892" bodyend="4898"/>
        <references refid="_c_w_e-79_8c_1a7caa98120b81c90545a31c4794f1b019" compoundref="_c_w_e-79_8c" startline="4946" endline="4959">ensureInspectedContext</references>
        <referencedby refid="_c_w_e-79_8c_1a9ec7c35ae38d078bae575f9f127fee48" compoundref="_c_w_e-79_8c" startline="4911" endline="4918">debuggerAgent</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a345a8291112b2c729143978bbcc04a03" compoundref="_c_w_e-79_8c" startline="5151" endline="5158">profilerAgent</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a9ec7c35ae38d078bae575f9f127fee48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>V8DebuggerAgentImpl *</type>
        <definition>V8DebuggerAgentImpl* debuggerAgent</definition>
        <argsstring>()</argsstring>
        <name>debuggerAgent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="4911" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="4911" bodyend="4918"/>
        <references refid="_c_w_e-79_8c_1ada0e5f821a7afd1fe0ea6730bb197492" compoundref="_c_w_e-79_8c" startline="4892" endline="4898">currentSession</references>
        <referencedby refid="_c_w_e-79_8c_1aa1063dedacc1258211353b49b4f91cb6" compoundref="_c_w_e-79_8c" startline="5208" endline="5222">setFunctionBreakpoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ae18573ae56672288281713f5aebb32e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v8::Local&lt; v8::Object &gt;</type>
        <definition>v8::Local&lt;v8::Object&gt; ensureConsole</definition>
        <argsstring>()</argsstring>
        <name>ensureConsole</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="4927" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="4927" bodyend="4935"/>
        <referencedby refid="_c_w_e-79_8c_1a4de9823c973e64a58e9654b2ba10ada2" compoundref="_c_w_e-79_8c" startline="4826" endline="4841">checkAndSetPrivateFlagOnConsole</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a7caa98120b81c90545a31c4794f1b019" compoundref="_c_w_e-79_8c" startline="4946" endline="4959">ensureInspectedContext</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a09bc7577c1e6e5ce99641dd37d101326" compoundref="_c_w_e-79_8c" startline="5124" endline="5138">privateMap</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a65e4a4bb85615d76a23c6029378c52e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>V8InspectorClient *</type>
        <definition>V8InspectorClient* ensureDebuggerClient</definition>
        <argsstring>()</argsstring>
        <name>ensureDebuggerClient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="4936" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="4936" bodyend="4945"/>
        <references refid="_c_w_e-79_8c_1a7caa98120b81c90545a31c4794f1b019" compoundref="_c_w_e-79_8c" startline="4946" endline="4959">ensureInspectedContext</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a7caa98120b81c90545a31c4794f1b019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>InspectedContext *</type>
        <definition>InspectedContext* ensureInspectedContext</definition>
        <argsstring>()</argsstring>
        <name>ensureInspectedContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="4946" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="4946" bodyend="4959"/>
        <references refid="_c_w_e-79_8c_1ae18573ae56672288281713f5aebb32e0" compoundref="_c_w_e-79_8c" startline="4927" endline="4935">ensureConsole</references>
        <references refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" compoundref="_c_w_e-20_8c" startline="208532">key</references>
        <references refid="_c_w_e-79_8c_1a67370beabf17ad54f38c306dd997d6ea" compoundref="_c_w_e-79_8c" startline="5038" endline="5041">inspectedContextPrivateKey</references>
        <referencedby refid="_c_w_e-79_8c_1ada0e5f821a7afd1fe0ea6730bb197492" compoundref="_c_w_e-79_8c" startline="4892" endline="4898">currentSession</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a65e4a4bb85615d76a23c6029378c52e7" compoundref="_c_w_e-79_8c" startline="4936" endline="4945">ensureDebuggerClient</referencedby>
        <referencedby refid="_c_w_e-79_8c_1ae52a4414ae75fea34999325d9ab60c50" compoundref="_c_w_e-79_8c" startline="5168" endline="5176">reportCall</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a68bf80e1550c47cd7bae238671850008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v8::MaybeLocal&lt; v8::Function &gt;</type>
        <definition>v8::MaybeLocal&lt;v8::Function&gt; firstArgAsFunction</definition>
        <argsstring>()</argsstring>
        <name>firstArgAsFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="4964" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="4964" bodyend="4969"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aca055add3e4d96da693c0d2595fbc173" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v8::MaybeLocal&lt; v8::Object &gt;</type>
        <definition>v8::MaybeLocal&lt;v8::Object&gt; firstArgAsObject</definition>
        <argsstring>()</argsstring>
        <name>firstArgAsObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="4970" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="4970" bodyend="4975"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a7180426c260e875d2494683c13a51b4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool firstArgToBoolean</definition>
        <argsstring>(bool defaultValue)</argsstring>
        <name>firstArgToBoolean</name>
        <param>
          <type>bool</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="4976" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="4976" bodyend="4983"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a7de5269f0ad51809ed58d6c62e4cbbc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String16</type>
        <definition>String16 firstArgToString</definition>
        <argsstring>(const String16 &amp;defaultValue)</argsstring>
        <name>firstArgToString</name>
        <param>
          <type>const String16 &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="4984" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="4984" bodyend="4997"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a83f098d2cc7ba8a0bee28bdeb09297f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getDoubleFromMap</definition>
        <argsstring>(v8::Local&lt; v8::Map &gt; map, const String16 &amp;key, double defaultValue)</argsstring>
        <name>getDoubleFromMap</name>
        <param>
          <type>v8::Local&lt; v8::Map &gt;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>const String16 &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="4998" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="4998" bodyend="5007"/>
        <references refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" compoundref="_c_w_e-20_8c" startline="208532">key</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a5baa628a9c29bbab6f37770ffe3743e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t getIntFromMap</definition>
        <argsstring>(v8::Local&lt; v8::Map &gt; map, const String16 &amp;key, int64_t defaultValue)</argsstring>
        <name>getIntFromMap</name>
        <param>
          <type>v8::Local&lt; v8::Map &gt;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>const String16 &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5008" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5008" bodyend="5017"/>
        <references refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" compoundref="_c_w_e-20_8c" startline="208532">key</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a67370beabf17ad54f38c306dd997d6ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v8::Local&lt; v8::Private &gt;</type>
        <definition>v8::Local&lt;v8::Private&gt; inspectedContextPrivateKey</definition>
        <argsstring>(v8::Isolate *isolate)</argsstring>
        <name>inspectedContextPrivateKey</name>
        <param>
          <type>v8::Isolate *</type>
          <declname>isolate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5038" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5038" bodyend="5041"/>
        <referencedby refid="_c_w_e-79_8c_1a7caa98120b81c90545a31c4794f1b019" compoundref="_c_w_e-79_8c" startline="4946" endline="4959">ensureInspectedContext</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ad300709e8d9e950fbc3fbf0698d047b7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool isCommandLineAPIGetter</definition>
        <argsstring>(const String16 &amp;name)</argsstring>
        <name>isCommandLineAPIGetter</name>
        <param>
          <type>const String16 &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5055" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5055" bodyend="5060"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a09bc7577c1e6e5ce99641dd37d101326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v8::MaybeLocal&lt; v8::Map &gt;</type>
        <definition>v8::MaybeLocal&lt;v8::Map&gt; privateMap</definition>
        <argsstring>(const char *name)</argsstring>
        <name>privateMap</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5124" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5124" bodyend="5138"/>
        <references refid="_c_w_e-79_8c_1ae18573ae56672288281713f5aebb32e0" compoundref="_c_w_e-79_8c" startline="4927" endline="4935">ensureConsole</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a345a8291112b2c729143978bbcc04a03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>V8ProfilerAgentImpl *</type>
        <definition>V8ProfilerAgentImpl* profilerAgent</definition>
        <argsstring>()</argsstring>
        <name>profilerAgent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5151" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5151" bodyend="5158"/>
        <references refid="_c_w_e-79_8c_1ada0e5f821a7afd1fe0ea6730bb197492" compoundref="_c_w_e-79_8c" startline="4892" endline="4898">currentSession</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a83288decb1ad25fec9563fa822463b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reportCall</definition>
        <argsstring>(ConsoleAPIType type)</argsstring>
        <name>reportCall</name>
        <param>
          <type>ConsoleAPIType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5159" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5159" bodyend="5167"/>
        <referencedby refid="_c_w_e-79_8c_1a906ae658e7881f1a3ce7e278c9915455" compoundref="_c_w_e-79_8c" startline="5177" endline="5181">reportCallWithArgument</referencedby>
        <referencedby refid="_c_w_e-79_8c_1af15a1048bb49abacc2531d6611a21d9c" compoundref="_c_w_e-79_8c" startline="5182" endline="5190">reportCallWithDefaultArgument</referencedby>
        <referencedby refid="_c_w_e-79_8c_1aa0c8977d7081b502e68985076649b108" compoundref="_c_w_e-79_8c" startline="5191" endline="5197">reportDeprecatedCall</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ae52a4414ae75fea34999325d9ab60c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reportCall</definition>
        <argsstring>(ConsoleAPIType type, const std::vector&lt; v8::Local&lt; v8::Value &gt;&gt; &amp;arguments)</argsstring>
        <name>reportCall</name>
        <param>
          <type>ConsoleAPIType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::vector&lt; v8::Local&lt; v8::Value &gt;&gt; &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5168" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5168" bodyend="5176"/>
        <references refid="_c_w_e-79_8c_1a7caa98120b81c90545a31c4794f1b019" compoundref="_c_w_e-79_8c" startline="4946" endline="4959">ensureInspectedContext</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a906ae658e7881f1a3ce7e278c9915455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reportCallWithArgument</definition>
        <argsstring>(ConsoleAPIType type, const String16 &amp;message)</argsstring>
        <name>reportCallWithArgument</name>
        <param>
          <type>ConsoleAPIType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const String16 &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5177" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5177" bodyend="5181"/>
        <references refid="_c_w_e-79_8c_1a83288decb1ad25fec9563fa822463b38" compoundref="_c_w_e-79_8c" startline="5159" endline="5167">reportCall</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1af15a1048bb49abacc2531d6611a21d9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reportCallWithDefaultArgument</definition>
        <argsstring>(ConsoleAPIType type, const String16 &amp;message)</argsstring>
        <name>reportCallWithDefaultArgument</name>
        <param>
          <type>ConsoleAPIType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const String16 &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5182" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5182" bodyend="5190"/>
        <references refid="_c_w_e-79_8c_1a83288decb1ad25fec9563fa822463b38" compoundref="_c_w_e-79_8c" startline="5159" endline="5167">reportCall</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa0c8977d7081b502e68985076649b108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reportDeprecatedCall</definition>
        <argsstring>(const char *id, const String16 &amp;message)</argsstring>
        <name>reportDeprecatedCall</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const String16 &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5191" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5191" bodyend="5197"/>
        <references refid="_c_w_e-79_8c_1a4de9823c973e64a58e9654b2ba10ada2" compoundref="_c_w_e-79_8c" startline="4826" endline="4841">checkAndSetPrivateFlagOnConsole</references>
        <references refid="_c_w_e-79_8c_1a83288decb1ad25fec9563fa822463b38" compoundref="_c_w_e-79_8c" startline="5159" endline="5167">reportCall</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ad295777dfe6bee4c6c39aab43e332e3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void returnDataCallback</definition>
        <argsstring>(const v8::FunctionCallbackInfo&lt; v8::Value &gt; &amp;info)</argsstring>
        <name>returnDataCallback</name>
        <param>
          <type>const v8::FunctionCallbackInfo&lt; v8::Value &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5198" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5198" bodyend="5201"/>
        <referencedby refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" compoundref="_c_w_e-79_8c" startline="4876" endline="4891">createBoundFunctionProperty</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aede5594cab9decbfe2b2b243abbae35c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setDoubleOnMap</definition>
        <argsstring>(v8::Local&lt; v8::Map &gt; map, const String16 &amp;key, double value)</argsstring>
        <name>setDoubleOnMap</name>
        <param>
          <type>v8::Local&lt; v8::Map &gt;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>const String16 &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5202" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5202" bodyend="5207"/>
        <references refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" compoundref="_c_w_e-20_8c" startline="208532">key</references>
        <references refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" compoundref="_c_w_e-20_8c" startline="208664">value</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa1063dedacc1258211353b49b4f91cb6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void setFunctionBreakpoint</definition>
        <argsstring>(ConsoleHelper &amp;helper, v8::Local&lt; v8::Function &gt; function, V8DebuggerAgentImpl::BreakpointSource source, const String16 &amp;condition, bool enable)</argsstring>
        <name>setFunctionBreakpoint</name>
        <param>
          <type>ConsoleHelper &amp;</type>
          <declname>helper</declname>
        </param>
        <param>
          <type>v8::Local&lt; v8::Function &gt;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>V8DebuggerAgentImpl::BreakpointSource</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const String16 &amp;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5208" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5208" bodyend="5222"/>
        <references refid="_c_w_e-79_8c_1a9ec7c35ae38d078bae575f9f127fee48" compoundref="_c_w_e-79_8c" startline="4911" endline="4918">debuggerAgent</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aeeda4320226a5110c06b71694efd1da9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setIntOnMap</definition>
        <argsstring>(v8::Local&lt; v8::Map &gt; map, const String16 &amp;key, int64_t value)</argsstring>
        <name>setIntOnMap</name>
        <param>
          <type>v8::Local&lt; v8::Map &gt;</type>
          <declname>map</declname>
        </param>
        <param>
          <type>const String16 &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5223" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5223" bodyend="5228"/>
        <references refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" compoundref="_c_w_e-20_8c" startline="208532">key</references>
        <references refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" compoundref="_c_w_e-20_8c" startline="208664">value</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a2b94d67860cedab171f35938a31a852d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void timeEndFunction</definition>
        <argsstring>(const v8::FunctionCallbackInfo&lt; v8::Value &gt; &amp;info, bool timelinePrefix)</argsstring>
        <name>timeEndFunction</name>
        <param>
          <type>const v8::FunctionCallbackInfo&lt; v8::Value &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>timelinePrefix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5241" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5241" bodyend="5257"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ab6a84e08397ba8e6a20b261c941f4c36" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void timeFunction</definition>
        <argsstring>(const v8::FunctionCallbackInfo&lt; v8::Value &gt; &amp;info, bool timelinePrefix)</argsstring>
        <name>timeFunction</name>
        <param>
          <type>const v8::FunctionCallbackInfo&lt; v8::Value &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>timelinePrefix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5258" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5258" bodyend="5272"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a0ce0176a3c3f50d922a92cfd0858fe7c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>V8Debugger *</type>
        <definition>static V8Debugger* toV8Debugger</definition>
        <argsstring>(v8::Local&lt; v8::Value &gt; data)</argsstring>
        <name>toV8Debugger</name>
        <param>
          <type>v8::Local&lt; v8::Value &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5898" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5898" bodyend="5902"/>
        <references refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0">p</references>
        <references refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" compoundref="_c_w_e-20_8c" startline="208661">data</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a2a92818f268e3305470d937415ce4c9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>v8::Local&lt; v8::Boolean &gt;</type>
        <definition>v8::Local&lt;v8::Boolean&gt; v8Boolean</definition>
        <argsstring>(bool value, v8::Isolate *isolate)</argsstring>
        <name>v8Boolean</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <param>
          <type>v8::Isolate *</type>
          <declname>isolate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5908" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5908" bodyend="5911"/>
        <references refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" compoundref="_c_w_e-20_8c" startline="208664">value</references>
        <referencedby refid="_c_w_e-79_8c_1a15864646880d3365e83126dce7e253f7" compoundref="_c_w_e-79_8c" startline="8118" endline="8161">initializeHolderIfNeeded</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a4984b5587b1733239c3887072df545c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setFunctionProperty</definition>
        <argsstring>(v8::Local&lt; v8::Context &gt; context, v8::Local&lt; v8::Object &gt; obj, const char *name, v8::FunctionCallback callback, v8::Local&lt; v8::External &gt; external)</argsstring>
        <name>setFunctionProperty</name>
        <param>
          <type>v8::Local&lt; v8::Context &gt;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>v8::Local&lt; v8::Object &gt;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>v8::FunctionCallback</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>v8::Local&lt; v8::External &gt;</type>
          <declname>external</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="5974" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="5974" bodyend="5983"/>
        <references refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" compoundref="_c_w_e-20_8c" startline="77926" endline="77926">context</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa30fc467eb824727e2c19749d28fd240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>V8InspectorImpl *</type>
        <definition>V8InspectorImpl* unwrapInspector</definition>
        <argsstring>(const v8::FunctionCallbackInfo&lt; v8::Value &gt; &amp;info)</argsstring>
        <name>unwrapInspector</name>
        <param>
          <type>const v8::FunctionCallbackInfo&lt; v8::Value &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6048" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6048" bodyend="6055"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a1a538e2dbf23591193748014456489e0" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>AndroidIncognitoObserver</definition>
        <argsstring>(ChromeMetricsServiceClient *parent)</argsstring>
        <name>AndroidIncognitoObserver</name>
        <param>
          <type>ChromeMetricsServiceClient *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6056" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6056" bodyend="6059"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a790a55db90fb44cde5078cbcd0c3af0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>AreNotificationListenersEnabledOnAllProfiles</definition>
        <argsstring>()</argsstring>
        <name>AreNotificationListenersEnabledOnAllProfiles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6060" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6060" bodyend="6064"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a6d78dc2b50690b16ceb7daad67570ae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; metrics::FileMetricsProvider &gt;</type>
        <definition>std::unique_ptr&lt;metrics::FileMetricsProvider&gt; CreateFileMetricsProvider</definition>
        <argsstring>(bool metrics_reporting_enabled)</argsstring>
        <name>CreateFileMetricsProvider</name>
        <param>
          <type>bool</type>
          <declname>metrics_reporting_enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6115" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6115" bodyend="6196"/>
        <references refid="_c_w_e-79_8c_1ad6b48676850af468881f1baad4a66f90" compoundref="_c_w_e-79_8c" startline="6551" endline="6574">RegisterOrRemovePreviousRunMetricsFile</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1af8b821770e0d04bb34e1be3ba3359bd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GetExecutableVersionDetails</definition>
        <argsstring>(base::string16 *product_name, base::string16 *version_number, base::string16 *channel_name)</argsstring>
        <name>GetExecutableVersionDetails</name>
        <param>
          <type>base::string16 *</type>
          <declname>product_name</declname>
        </param>
        <param>
          <type>base::string16 *</type>
          <declname>version_number</declname>
        </param>
        <param>
          <type>base::string16 *</type>
          <declname>channel_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6238" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6238" bodyend="6252"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a04c204acd31451b19a8c34bedba6c1dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RegisterFileMetricsPreferences</definition>
        <argsstring>(PrefRegistrySimple *registry)</argsstring>
        <name>RegisterFileMetricsPreferences</name>
        <param>
          <type>PrefRegistrySimple *</type>
          <declname>registry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6470" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6470" bodyend="6483"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ad6b48676850af468881f1baad4a66f90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RegisterOrRemovePreviousRunMetricsFile</definition>
        <argsstring>(bool metrics_reporting_enabled, const base::FilePath &amp;dir, base::StringPiece metrics_name, metrics::FileMetricsProvider::SourceAssociation association, metrics::FileMetricsProvider *file_metrics_provider)</argsstring>
        <name>RegisterOrRemovePreviousRunMetricsFile</name>
        <param>
          <type>bool</type>
          <declname>metrics_reporting_enabled</declname>
        </param>
        <param>
          <type>const base::FilePath &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>base::StringPiece</type>
          <declname>metrics_name</declname>
        </param>
        <param>
          <type>metrics::FileMetricsProvider::SourceAssociation</type>
          <declname>association</declname>
        </param>
        <param>
          <type>metrics::FileMetricsProvider *</type>
          <declname>file_metrics_provider</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6551" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6551" bodyend="6574"/>
        <referencedby refid="_c_w_e-79_8c_1a6d78dc2b50690b16ceb7daad67570ae1" compoundref="_c_w_e-79_8c" startline="6115" endline="6196">CreateFileMetricsProvider</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a5a555c2f4bfc92c333468aa66a943c0f" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>IndependentFlattener</definition>
        <argsstring>(MetricsLog *log)</argsstring>
        <name>IndependentFlattener</name>
        <param>
          <type>MetricsLog *</type>
          <declname>log</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6629" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6629" bodyend="6629"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ad4b42943a2fce5e8cc1e7e97857921a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsTestingID</definition>
        <argsstring>(const std::string &amp;id)</argsstring>
        <name>IsTestingID</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6635" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6635" bodyend="6637"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ac0fdf8d267e6b11d30a38acc803bbe37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CheckSystemProfile</definition>
        <argsstring>(const SystemProfileProto &amp;system_profile)</argsstring>
        <name>CheckSystemProfile</name>
        <param>
          <type>const SystemProfileProto &amp;</type>
          <declname>system_profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6800" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6800" bodyend="6812"/>
        <references refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" compoundref="_c_w_e-79_8c" startline="6822" endline="6824">system_profile</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a606ac755cd2a9d6c69210d58be9a316a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MetricsLogTest</definition>
        <argsstring>()</argsstring>
        <name>MetricsLogTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6813" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6813" bodyend="6813"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a50a220655ca1945d941c3d916184dec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TestMetricsLog</definition>
        <argsstring>(const std::string &amp;client_id, int session_id, LogType log_type, MetricsServiceClient *client)</argsstring>
        <name>TestMetricsLog</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>client_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>session_id</declname>
        </param>
        <param>
          <type>LogType</type>
          <declname>log_type</declname>
        </param>
        <param>
          <type>MetricsServiceClient *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6814" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6814" bodyend="6818"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a038111a2859b95220edf1d23776abd74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ChromeUserMetricsExtension *</type>
        <definition>ChromeUserMetricsExtension* mutable_uma_proto</definition>
        <argsstring>()</argsstring>
        <name>mutable_uma_proto</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6819" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6819" bodyend="6821"/>
        <references refid="_c_w_e-79_8c_1ac8d66430b59f81077b7e1f9e4869e508" compoundref="_c_w_e-79_8c" startline="6825" endline="6827">uma_proto</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const SystemProfileProto &amp;</type>
        <definition>const SystemProfileProto&amp; system_profile</definition>
        <argsstring>() const</argsstring>
        <name>system_profile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6822" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6822" bodyend="6824"/>
        <references refid="_c_w_e-79_8c_1ac8d66430b59f81077b7e1f9e4869e508" compoundref="_c_w_e-79_8c" startline="6825" endline="6827">uma_proto</references>
        <referencedby refid="_c_w_e-79_8c_1ac0fdf8d267e6b11d30a38acc803bbe37" compoundref="_c_w_e-79_8c" startline="6800" endline="6812">CheckSystemProfile</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a65f53bf7104be1327e2eee180253739f" compoundref="_c_w_e-79_8c" startline="7436" endline="7464">GetFallbackStartupProfile</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ac8d66430b59f81077b7e1f9e4869e508" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const ChromeUserMetricsExtension &amp;</type>
        <definition>const ChromeUserMetricsExtension&amp; uma_proto</definition>
        <argsstring>() const</argsstring>
        <name>uma_proto</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6825" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6825" bodyend="6827"/>
        <referencedby refid="_c_w_e-79_8c_1a038111a2859b95220edf1d23776abd74" compoundref="_c_w_e-79_8c" startline="6819" endline="6821">mutable_uma_proto</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" compoundref="_c_w_e-79_8c" startline="6822" endline="6824">system_profile</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a25d0e49f6c8a61ab56034685bfb55102" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v8::Local&lt; v8::Object &gt;</type>
        <definition>static v8::Local&lt; v8::Object &gt; classObjectOfPrivateScript</definition>
        <argsstring>(ScriptState *scriptState, String className)</argsstring>
        <name>classObjectOfPrivateScript</name>
        <param>
          <type>ScriptState *</type>
          <declname>scriptState</declname>
        </param>
        <param>
          <type>String</type>
          <declname>className</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6828" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6828" bodyend="6849"/>
        <references refid="_c_w_e-79_8c_1ae55a2d2968dda83858240e1392eb2599" compoundref="_c_w_e-79_8c" startline="6964" endline="6978">installPrivateScriptRunner</references>
        <references refid="_c_w_e-79_8c_1ac18195aa4776e27774d244e8ecb4a020" compoundref="_c_w_e-79_8c" startline="6938" endline="6963">installPrivateScript</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v8::Local&lt; v8::Value &gt;</type>
        <definition>static v8::Local&lt; v8::Value &gt; compileAndRunPrivateScript</definition>
        <argsstring>(ScriptState *scriptState, String scriptClassName, const char *source, size_t size)</argsstring>
        <name>compileAndRunPrivateScript</name>
        <param>
          <type>ScriptState *</type>
          <declname>scriptState</declname>
        </param>
        <param>
          <type>String</type>
          <declname>scriptClassName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6850" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6850" bodyend="6889"/>
        <references refid="_c_w_e-22_8c_1ac325ee2e130c33214318b5dea0073d47" compoundref="_c_w_e-22_8c" startline="17384" endline="17386">size</references>
        <references refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" compoundref="_c_w_e-20_8c" startline="77926" endline="77926">context</references>
        <references refid="_c_w_e-79_8c_1a3529938c16e0e3ebfefefa994878c111" compoundref="_c_w_e-79_8c" startline="6908" endline="6924">importFunction</references>
        <references refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" compoundref="_c_w_e-79_8c" startline="6890" endline="6907">dumpV8Message</references>
        <referencedby refid="_c_w_e-79_8c_1a3529938c16e0e3ebfefefa994878c111" compoundref="_c_w_e-79_8c" startline="6908" endline="6924">importFunction</referencedby>
        <referencedby refid="_c_w_e-79_8c_1ac18195aa4776e27774d244e8ecb4a020" compoundref="_c_w_e-79_8c" startline="6938" endline="6963">installPrivateScript</referencedby>
        <referencedby refid="_c_w_e-79_8c_1ae55a2d2968dda83858240e1392eb2599" compoundref="_c_w_e-79_8c" startline="6964" endline="6978">installPrivateScriptRunner</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dumpV8Message</definition>
        <argsstring>(v8::Local&lt; v8::Context &gt; context, v8::Local&lt; v8::Message &gt; message)</argsstring>
        <name>dumpV8Message</name>
        <param>
          <type>v8::Local&lt; v8::Context &gt;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>v8::Local&lt; v8::Message &gt;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6890" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6890" bodyend="6907"/>
        <references refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" compoundref="_c_w_e-20_8c" startline="77926" endline="77926">context</references>
        <referencedby refid="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" compoundref="_c_w_e-79_8c" startline="6850" endline="6889">compileAndRunPrivateScript</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a097ff2ae9deb0314990702671c978cb1" compoundref="_c_w_e-79_8c" startline="6979" endline="7016">rethrowExceptionInPrivateScript</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a15864646880d3365e83126dce7e253f7" compoundref="_c_w_e-79_8c" startline="8118" endline="8161">initializeHolderIfNeeded</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a3529938c16e0e3ebfefefa994878c111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void importFunction</definition>
        <argsstring>(const v8::FunctionCallbackInfo&lt; v8::Value &gt; &amp;args)</argsstring>
        <name>importFunction</name>
        <param>
          <type>const v8::FunctionCallbackInfo&lt; v8::Value &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6908" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6908" bodyend="6924"/>
        <references refid="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" compoundref="_c_w_e-79_8c" startline="6850" endline="6889">compileAndRunPrivateScript</references>
        <referencedby refid="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" compoundref="_c_w_e-79_8c" startline="6850" endline="6889">compileAndRunPrivateScript</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ac18195aa4776e27774d244e8ecb4a020" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void installPrivateScript</definition>
        <argsstring>(v8::Isolate *isolate, String className)</argsstring>
        <name>installPrivateScript</name>
        <param>
          <type>v8::Isolate *</type>
          <declname>isolate</declname>
        </param>
        <param>
          <type>String</type>
          <declname>className</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6938" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6938" bodyend="6963"/>
        <references refid="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" compoundref="_c_w_e-79_8c" startline="6850" endline="6889">compileAndRunPrivateScript</references>
        <references refid="_c_w_e-22_8c_1ac325ee2e130c33214318b5dea0073d47" compoundref="_c_w_e-22_8c" startline="17384" endline="17386">size</references>
        <referencedby refid="_c_w_e-79_8c_1a25d0e49f6c8a61ab56034685bfb55102" compoundref="_c_w_e-79_8c" startline="6828" endline="6849">classObjectOfPrivateScript</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ae55a2d2968dda83858240e1392eb2599" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v8::Local&lt; v8::Value &gt;</type>
        <definition>static v8::Local&lt; v8::Value &gt; installPrivateScriptRunner</definition>
        <argsstring>(v8::Isolate *isolate)</argsstring>
        <name>installPrivateScriptRunner</name>
        <param>
          <type>v8::Isolate *</type>
          <declname>isolate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6964" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6964" bodyend="6978"/>
        <references refid="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" compoundref="_c_w_e-79_8c" startline="6850" endline="6889">compileAndRunPrivateScript</references>
        <referencedby refid="_c_w_e-79_8c_1a25d0e49f6c8a61ab56034685bfb55102" compoundref="_c_w_e-79_8c" startline="6828" endline="6849">classObjectOfPrivateScript</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a097ff2ae9deb0314990702671c978cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rethrowExceptionInPrivateScript</definition>
        <argsstring>(v8::Isolate *isolate, v8::TryCatch &amp;block, ScriptState *scriptStateInUserScript, ExceptionState::ContextType errorContext, const char *propertyName, const char *interfaceName)</argsstring>
        <name>rethrowExceptionInPrivateScript</name>
        <param>
          <type>v8::Isolate *</type>
          <declname>isolate</declname>
        </param>
        <param>
          <type>v8::TryCatch &amp;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>ScriptState *</type>
          <declname>scriptStateInUserScript</declname>
        </param>
        <param>
          <type>ExceptionState::ContextType</type>
          <declname>errorContext</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>propertyName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>interfaceName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="6979" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="6979" bodyend="7016"/>
        <references refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" compoundref="_c_w_e-20_8c" startline="77926" endline="77926">context</references>
        <references refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" compoundref="_c_w_e-79_8c" startline="6890" endline="6907">dumpV8Message</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a9364c0586bcea75f3c4bbecb7c5b2f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetBookmarkDragOperation</definition>
        <argsstring>(content::BrowserContext *browser_context, const BookmarkNode *node)</argsstring>
        <name>GetBookmarkDragOperation</name>
        <param>
          <type>content::BrowserContext *</type>
          <declname>browser_context</declname>
        </param>
        <param>
          <type>const BookmarkNode *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7017" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7017" bodyend="7031"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ac321770cb84203ffacb0cc3ba96fad61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetBookmarkDropOperation</definition>
        <argsstring>(Profile *profile, const ui::DropTargetEvent &amp;event, const bookmarks::BookmarkNodeData &amp;data, const BookmarkNode *parent, int index)</argsstring>
        <name>GetBookmarkDropOperation</name>
        <param>
          <type>Profile *</type>
          <declname>profile</declname>
        </param>
        <param>
          <type>const ui::DropTargetEvent &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type>const bookmarks::BookmarkNodeData &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const BookmarkNode *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7032" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7032" bodyend="7060"/>
        <references refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" compoundref="_c_w_e-20_8c" startline="208661">data</references>
        <references refid="_c_w_e-79_8c_1a5503f87ba21a1dc99f56c0065d76a463" compoundref="_c_w_e-79_8c" startline="7153" endline="7185">IsValidBookmarkDropLocation</references>
        <references refid="_c_w_e-79_8c_1a28358b93a2d7dbcd0b5cfd3e6cfbcf7e" compoundref="_c_w_e-79_8c" startline="7120" endline="7131">GetPreferredBookmarkDropOperation</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a8ddd518c8dfbf5532cb9b1ec149c27a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gfx::ImageSkia</type>
        <definition>gfx::ImageSkia GetBookmarkFolderIcon</definition>
        <argsstring>(SkColor text_color)</argsstring>
        <name>GetBookmarkFolderIcon</name>
        <param>
          <type>SkColor</type>
          <declname>text_color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7061" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7061" bodyend="7068"/>
        <references refid="_c_w_e-79_8c_1a0999e87a41b730deb4522abef9abd561" compoundref="_c_w_e-79_8c" startline="7116" endline="7119">GetFolderIcon</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a63979ff18be39fa1cb9a47391fa72aab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gfx::ImageSkia</type>
        <definition>gfx::ImageSkia GetBookmarkManagedFolderIcon</definition>
        <argsstring>(SkColor text_color)</argsstring>
        <name>GetBookmarkManagedFolderIcon</name>
        <param>
          <type>SkColor</type>
          <declname>text_color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7069" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7069" bodyend="7076"/>
        <references refid="_c_w_e-79_8c_1a0999e87a41b730deb4522abef9abd561" compoundref="_c_w_e-79_8c" startline="7116" endline="7119">GetFolderIcon</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a5119f9e73271f9c113b0e23e38de0eb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BookmarkShortcutDisposition</type>
        <definition>BookmarkShortcutDisposition GetBookmarkShortcutDisposition</definition>
        <argsstring>(Profile *profile)</argsstring>
        <name>GetBookmarkShortcutDisposition</name>
        <param>
          <type>Profile *</type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7077" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7077" bodyend="7107"/>
        <referencedby refid="_c_w_e-79_8c_1add85323596fb2be95ae4b0fbb37b0be5" compoundref="_c_w_e-79_8c" startline="7206" endline="7209">ShouldRemoveBookmarkThisPageUI</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aee0f8dbd4216d1cad8b4673fcf3a71e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gfx::ImageSkia</type>
        <definition>gfx::ImageSkia GetBookmarkSupervisedFolderIcon</definition>
        <argsstring>(SkColor text_color)</argsstring>
        <name>GetBookmarkSupervisedFolderIcon</name>
        <param>
          <type>SkColor</type>
          <declname>text_color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7108" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7108" bodyend="7115"/>
        <references refid="_c_w_e-79_8c_1a0999e87a41b730deb4522abef9abd561" compoundref="_c_w_e-79_8c" startline="7116" endline="7119">GetFolderIcon</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a0999e87a41b730deb4522abef9abd561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gfx::ImageSkia</type>
        <definition>gfx::ImageSkia GetFolderIcon</definition>
        <argsstring>(gfx::VectorIconId id, SkColor text_color)</argsstring>
        <name>GetFolderIcon</name>
        <param>
          <type>gfx::VectorIconId</type>
          <declname>id</declname>
        </param>
        <param>
          <type>SkColor</type>
          <declname>text_color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7116" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7116" bodyend="7119"/>
        <referencedby refid="_c_w_e-79_8c_1a8ddd518c8dfbf5532cb9b1ec149c27a9" compoundref="_c_w_e-79_8c" startline="7061" endline="7068">GetBookmarkFolderIcon</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a63979ff18be39fa1cb9a47391fa72aab" compoundref="_c_w_e-79_8c" startline="7069" endline="7076">GetBookmarkManagedFolderIcon</referencedby>
        <referencedby refid="_c_w_e-79_8c_1aee0f8dbd4216d1cad8b4673fcf3a71e7" compoundref="_c_w_e-79_8c" startline="7108" endline="7115">GetBookmarkSupervisedFolderIcon</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a28358b93a2d7dbcd0b5cfd3e6cfbcf7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetPreferredBookmarkDropOperation</definition>
        <argsstring>(int source_operations, int operations)</argsstring>
        <name>GetPreferredBookmarkDropOperation</name>
        <param>
          <type>int</type>
          <declname>source_operations</declname>
        </param>
        <param>
          <type>int</type>
          <declname>operations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7120" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7120" bodyend="7131"/>
        <referencedby refid="_c_w_e-79_8c_1ac321770cb84203ffacb0cc3ba96fad61" compoundref="_c_w_e-79_8c" startline="7032" endline="7060">GetBookmarkDropOperation</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a499220ec9ceb0680d3865e2aa45186a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GetURLAndTitleToBookmark</definition>
        <argsstring>(content::WebContents *web_contents, GURL *url, base::string16 *title)</argsstring>
        <name>GetURLAndTitleToBookmark</name>
        <param>
          <type>content::WebContents *</type>
          <declname>web_contents</declname>
        </param>
        <param>
          <type>GURL *</type>
          <declname>url</declname>
        </param>
        <param>
          <type>base::string16 *</type>
          <declname>title</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7132" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7132" bodyend="7137"/>
        <references refid="_c_w_e-79_8c_1aa8d904c778b1a954349ee24984f967c5" compoundref="_c_w_e-79_8c" startline="7138" endline="7142">GetURLToBookmark</references>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa8d904c778b1a954349ee24984f967c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GURL</type>
        <definition>GURL GetURLToBookmark</definition>
        <argsstring>(content::WebContents *web_contents)</argsstring>
        <name>GetURLToBookmark</name>
        <param>
          <type>content::WebContents *</type>
          <declname>web_contents</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7138" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7138" bodyend="7142"/>
        <referencedby refid="_c_w_e-79_8c_1a499220ec9ceb0680d3865e2aa45186a5" compoundref="_c_w_e-79_8c" startline="7132" endline="7137">GetURLAndTitleToBookmark</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1afa5e833b45dd130f3f94abbcc3b163a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsAppsShortcutEnabled</definition>
        <argsstring>(Profile *profile)</argsstring>
        <name>IsAppsShortcutEnabled</name>
        <param>
          <type>Profile *</type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7143" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7143" bodyend="7152"/>
        <referencedby refid="_c_w_e-79_8c_1ac688e81717df1b09b344013132aa1473" compoundref="_c_w_e-79_8c" startline="7210" endline="7214">ShouldShowAppsShortcutInBookmarkBar</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a5503f87ba21a1dc99f56c0065d76a463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsValidBookmarkDropLocation</definition>
        <argsstring>(Profile *profile, const bookmarks::BookmarkNodeData &amp;data, const BookmarkNode *drop_parent, int index)</argsstring>
        <name>IsValidBookmarkDropLocation</name>
        <param>
          <type>Profile *</type>
          <declname>profile</declname>
        </param>
        <param>
          <type>const bookmarks::BookmarkNodeData &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const BookmarkNode *</type>
          <declname>drop_parent</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7153" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7153" bodyend="7185"/>
        <references refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" compoundref="_c_w_e-20_8c" startline="208661">data</references>
        <referencedby refid="_c_w_e-79_8c_1ac321770cb84203ffacb0cc3ba96fad61" compoundref="_c_w_e-79_8c" startline="7032" endline="7060">GetBookmarkDropOperation</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa731830e2fe03fc05e5188191a701b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ShouldRemoveBookmarkOpenPagesUI</definition>
        <argsstring>(Profile *profile)</argsstring>
        <name>ShouldRemoveBookmarkOpenPagesUI</name>
        <param>
          <type>Profile *</type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7186" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7186" bodyend="7205"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1add85323596fb2be95ae4b0fbb37b0be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ShouldRemoveBookmarkThisPageUI</definition>
        <argsstring>(Profile *profile)</argsstring>
        <name>ShouldRemoveBookmarkThisPageUI</name>
        <param>
          <type>Profile *</type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7206" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7206" bodyend="7209"/>
        <references refid="_c_w_e-79_8c_1a5119f9e73271f9c113b0e23e38de0eb9" compoundref="_c_w_e-79_8c" startline="7077" endline="7107">GetBookmarkShortcutDisposition</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ac688e81717df1b09b344013132aa1473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ShouldShowAppsShortcutInBookmarkBar</definition>
        <argsstring>(Profile *profile)</argsstring>
        <name>ShouldShowAppsShortcutInBookmarkBar</name>
        <param>
          <type>Profile *</type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7210" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7210" bodyend="7214"/>
        <references refid="_c_w_e-79_8c_1afa5e833b45dd130f3f94abbcc3b163a2" compoundref="_c_w_e-79_8c" startline="7143" endline="7152">IsAppsShortcutEnabled</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aea1f04474d34ac4881af2da4b28170a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ToggleBookmarkBarWhenVisible</definition>
        <argsstring>(content::BrowserContext *browser_context)</argsstring>
        <name>ToggleBookmarkBarWhenVisible</name>
        <param>
          <type>content::BrowserContext *</type>
          <declname>browser_context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7215" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7215" bodyend="7221"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a535d8eb98497053522cfcfde712a108f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BookmarkEditorView::EditorNode *</type>
        <definition>BookmarkEditorView::EditorNode* AddNewFolder</definition>
        <argsstring>(BookmarkEditorView::EditorNode *parent)</argsstring>
        <name>AddNewFolder</name>
        <param>
          <type>BookmarkEditorView::EditorNode *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7222" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7222" bodyend="7225"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ab0bb8af538a546e5e1641b963921a3a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AddTestData</definition>
        <argsstring>()</argsstring>
        <name>AddTestData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7226" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7226" bodyend="7241"/>
        <references refid="_c_w_e-79_8c_1aef501a4d35fb6a4c822509e1f951982a" compoundref="_c_w_e-79_8c" startline="7280" endline="7280">base_path</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a799475e9025c1dd3e4cba783455bdced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ApplyEdits</definition>
        <argsstring>()</argsstring>
        <name>ApplyEdits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7242" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7242" bodyend="7244"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a473dc638f6a16dd34f5ee64ea2717bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ApplyEdits</definition>
        <argsstring>(BookmarkEditorView::EditorNode *node)</argsstring>
        <name>ApplyEdits</name>
        <param>
          <type>BookmarkEditorView::EditorNode *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7245" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7245" bodyend="7247"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a5e98a3eff96310b151916e8a640b4c17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BookmarkEditorViewTest</definition>
        <argsstring>()</argsstring>
        <name>BookmarkEditorViewTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7248" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7248" bodyend="7248"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a5f1428d28a63884d81dbacb11f50d7fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CreateEditor</definition>
        <argsstring>(Profile *profile, const BookmarkNode *parent, const BookmarkEditor::EditDetails &amp;details, BookmarkEditor::Configuration configuration)</argsstring>
        <name>CreateEditor</name>
        <param>
          <type>Profile *</type>
          <declname>profile</declname>
        </param>
        <param>
          <type>const BookmarkNode *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const BookmarkEditor::EditDetails &amp;</type>
          <declname>details</declname>
        </param>
        <param>
          <type>BookmarkEditor::Configuration</type>
          <declname>configuration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7249" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7249" bodyend="7255"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a15d474bc3a8286b601b40b46b2278684" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ExpandAndSelect</definition>
        <argsstring>()</argsstring>
        <name>ExpandAndSelect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7256" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7256" bodyend="7258"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa392ed55ced9a2c375322d8e7bbd475c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BookmarkNode *</type>
        <definition>BookmarkNode* GetMutableNode</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>GetMutableNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7259" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7259" bodyend="7261"/>
        <references refid="_c_w_e-79_8c_1a5a703a2f81e3ac28a451bf1b55919957" compoundref="_c_w_e-79_8c" startline="7262" endline="7264">GetNode</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a5a703a2f81e3ac28a451bf1b55919957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const BookmarkNode *</type>
        <definition>const BookmarkNode* GetNode</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>GetNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7262" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7262" bodyend="7264"/>
        <references refid="_c_w_e-79_8c_1aef501a4d35fb6a4c822509e1f951982a" compoundref="_c_w_e-79_8c" startline="7280" endline="7280">base_path</references>
        <referencedby refid="_c_w_e-79_8c_1aa392ed55ced9a2c375322d8e7bbd475c" compoundref="_c_w_e-79_8c" startline="7259" endline="7261">GetMutableNode</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa2ae69d244d4592af9094242e4978096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NewFolder</definition>
        <argsstring>()</argsstring>
        <name>NewFolder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7265" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7265" bodyend="7267"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a23941640d1011752d544713b8a25d43a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetTitleText</definition>
        <argsstring>(const base::string16 &amp;title)</argsstring>
        <name>SetTitleText</name>
        <param>
          <type>const base::string16 &amp;</type>
          <declname>title</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7268" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7268" bodyend="7270"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a657c98748ac0dd73991353e59de03b26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetURLText</definition>
        <argsstring>(const base::string16 &amp;text)</argsstring>
        <name>SetURLText</name>
        <param>
          <type>const base::string16 &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7271" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7271" bodyend="7274"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a7053ffcd633baff8bf68078afdbebcb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool URLTFHasParent</definition>
        <argsstring>()</argsstring>
        <name>URLTFHasParent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7275" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7275" bodyend="7279"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aef501a4d35fb6a4c822509e1f951982a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string base_path</definition>
        <argsstring>() const</argsstring>
        <name>base_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7280" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7280" bodyend="7280"/>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
        <referencedby refid="_c_w_e-79_8c_1ab0bb8af538a546e5e1641b963921a3a0" compoundref="_c_w_e-79_8c" startline="7226" endline="7241">AddTestData</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a5a703a2f81e3ac28a451bf1b55919957" compoundref="_c_w_e-79_8c" startline="7262" endline="7264">GetNode</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a7fa678964c0966e459a0916e8c498426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BookmarkEditorView::EditorTreeModel *</type>
        <definition>BookmarkEditorView::EditorTreeModel* editor_tree_model</definition>
        <argsstring>()</argsstring>
        <name>editor_tree_model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7281" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7281" bodyend="7283"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a3a5eea318d1ad84bd99f382c4b048bf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ActivateProfile</definition>
        <argsstring>()</argsstring>
        <name>ActivateProfile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7386" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7386" bodyend="7394"/>
        <references refid="_c_w_e-79_8c_1ad08fd70a885a650dfed64c57ed85082c" compoundref="_c_w_e-79_8c" startline="11219" endline="11219">browser</references>
        <referencedby refid="_c_w_e-79_8c_1a954e522dd383113c24b63bb1fafbadc5" compoundref="_c_w_e-79_8c" startline="7682" endline="7695">MaybeActivateProfile</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1abf1cc88042b50dc4f491922ce30a8272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AddLaunched</definition>
        <argsstring>(Profile *profile)</argsstring>
        <name>AddLaunched</name>
        <param>
          <type>Profile *</type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7401" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7401" bodyend="7406"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a0461459310023e2c619aa2066de931d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CanOpenProfileOnStartup</definition>
        <argsstring>(Profile *profile)</argsstring>
        <name>CanOpenProfileOnStartup</name>
        <param>
          <type>Profile *</type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7407" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7407" bodyend="7422"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa71d36872f416feaa853788a7a7a7ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7423" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7423" bodyend="7426"/>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a94cc45c270cb398c7515f42ad4480d3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DumpBrowserHistograms</definition>
        <argsstring>(const base::FilePath &amp;output_file)</argsstring>
        <name>DumpBrowserHistograms</name>
        <param>
          <type>const base::FilePath &amp;</type>
          <declname>output_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7427" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7427" bodyend="7435"/>
        <references refid="_c_w_e-22_8c_1a55a1a69e6128ea62ed2420381eb7ab85" compoundref="_c_w_e-22_8c" startline="17282" endline="17292">WriteFile</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a65f53bf7104be1327e2eee180253739f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Profile *</type>
        <definition>Profile* GetFallbackStartupProfile</definition>
        <argsstring>()</argsstring>
        <name>GetFallbackStartupProfile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7436" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7436" bodyend="7464"/>
        <references refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" compoundref="_c_w_e-79_8c" startline="6822" endline="6824">system_profile</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a2da8a76e03b50546c1e9983ab198635b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Profile *</type>
        <definition>Profile* GetStartupProfile</definition>
        <argsstring>(const base::FilePath &amp;user_data_dir, const base::CommandLine &amp;command_line)</argsstring>
        <name>GetStartupProfile</name>
        <param>
          <type>const base::FilePath &amp;</type>
          <declname>user_data_dir</declname>
        </param>
        <param>
          <type>const base::CommandLine &amp;</type>
          <declname>command_line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7465" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7465" bodyend="7483"/>
        <references refid="_c_w_e-79_8c_1a1084f5304152cad3d582f0560042eede" compoundref="_c_w_e-79_8c" startline="7484" endline="7507">GetStartupProfilePath</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a1084f5304152cad3d582f0560042eede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>base::FilePath</type>
        <definition>base::FilePath GetStartupProfilePath</definition>
        <argsstring>(const base::FilePath &amp;user_data_dir, const base::CommandLine &amp;command_line)</argsstring>
        <name>GetStartupProfilePath</name>
        <param>
          <type>const base::FilePath &amp;</type>
          <declname>user_data_dir</declname>
        </param>
        <param>
          <type>const base::CommandLine &amp;</type>
          <declname>command_line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7484" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7484" bodyend="7507"/>
        <references refid="_c_w_e-79_8c_1add0f89767741bb2713880593d9a3b94a" compoundref="_c_w_e-79_8c" startline="7580" endline="7597">IsGuestModeEnforced</references>
        <referencedby refid="_c_w_e-79_8c_1a2da8a76e03b50546c1e9983ab198635b" compoundref="_c_w_e-79_8c" startline="7465" endline="7483">GetStartupProfile</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a9528ab292b117f4c33a04ad5737b5941" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool HasBeenLaunched</definition>
        <argsstring>(const Profile *profile) const</argsstring>
        <name>HasBeenLaunched</name>
        <param>
          <type>const Profile *</type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7570" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7570" bodyend="7572"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ade2b28dcc6be492e91f0e000117d2516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool HasPendingUncleanExit</definition>
        <argsstring>(Profile *profile)</argsstring>
        <name>HasPendingUncleanExit</name>
        <param>
          <type>Profile *</type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7573" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7573" bodyend="7576"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1add0f89767741bb2713880593d9a3b94a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsGuestModeEnforced</definition>
        <argsstring>(const base::CommandLine &amp;command_line, bool show_warning)</argsstring>
        <name>IsGuestModeEnforced</name>
        <param>
          <type>const base::CommandLine &amp;</type>
          <declname>command_line</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>show_warning</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7580" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7580" bodyend="7597"/>
        <referencedby refid="_c_w_e-79_8c_1a1084f5304152cad3d582f0560042eede" compoundref="_c_w_e-79_8c" startline="7484" endline="7507">GetStartupProfilePath</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a954e522dd383113c24b63bb1fafbadc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MaybeActivateProfile</definition>
        <argsstring>()</argsstring>
        <name>MaybeActivateProfile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7682" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7682" bodyend="7695"/>
        <references refid="_c_w_e-787_8c_1afc515de5e9a1bacf5ffcf5f764cbb51c" compoundref="_c_w_e-787_8c" startline="57571" endline="57576">PostTask</references>
        <references refid="_c_w_e-79_8c_1a3a5eea318d1ad84bd99f382c4b048bf2" compoundref="_c_w_e-79_8c" startline="7386" endline="7394">ActivateProfile</references>
        <referencedby refid="_c_w_e-79_8c_1a73a6eb54c01dbb9cff124f9b1874a093" compoundref="_c_w_e-79_8c" startline="8044" endline="8047">set_profile_to_activate</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a9356dcb04b663ca265c54451e6ba7960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ProfileLaunchObserver</definition>
        <argsstring>()</argsstring>
        <name>ProfileLaunchObserver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="7996" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="7996" bodyend="8000"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ac8171bca67c0ccf78b4d306ee023810b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShowUserManagerOnStartup</definition>
        <argsstring>(const base::CommandLine &amp;command_line)</argsstring>
        <name>ShowUserManagerOnStartup</name>
        <param>
          <type>const base::CommandLine &amp;</type>
          <declname>command_line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="8017" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="8017" bodyend="8022"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ae0386ac0d517194a1cb9a6e775f66e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool activated_profile</definition>
        <argsstring>()</argsstring>
        <name>activated_profile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="8043" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="8043" bodyend="8043"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a73a6eb54c01dbb9cff124f9b1874a093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_profile_to_activate</definition>
        <argsstring>(Profile *profile)</argsstring>
        <name>set_profile_to_activate</name>
        <param>
          <type>Profile *</type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="8044" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="8044" bodyend="8047"/>
        <references refid="_c_w_e-79_8c_1a954e522dd383113c24b63bb1fafbadc5" compoundref="_c_w_e-79_8c" startline="7682" endline="7695">MaybeActivateProfile</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a15864646880d3365e83126dce7e253f7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void initializeHolderIfNeeded</definition>
        <argsstring>(ScriptState *scriptState, v8::Local&lt; v8::Object &gt; classObject, v8::Local&lt; v8::Value &gt; holder)</argsstring>
        <name>initializeHolderIfNeeded</name>
        <param>
          <type>ScriptState *</type>
          <declname>scriptState</declname>
        </param>
        <param>
          <type>v8::Local&lt; v8::Object &gt;</type>
          <declname>classObject</declname>
        </param>
        <param>
          <type>v8::Local&lt; v8::Value &gt;</type>
          <declname>holder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="8118" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="8118" bodyend="8161"/>
        <references refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" compoundref="_c_w_e-20_8c" startline="77926" endline="77926">context</references>
        <references refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" compoundref="_c_w_e-79_8c" startline="6890" endline="6907">dumpV8Message</references>
        <references refid="_c_w_e-79_8c_1a2a92818f268e3305470d937415ce4c9d" compoundref="_c_w_e-79_8c" startline="5908" endline="5911">v8Boolean</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ae5f4cacd0f5018edab94ff06214aa7f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>content::RenderFrameHost *</type>
        <definition>content::RenderFrameHost* GetMainFrame</definition>
        <argsstring>(content::RenderFrameHost *rfh)</argsstring>
        <name>GetMainFrame</name>
        <param>
          <type>content::RenderFrameHost *</type>
          <declname>rfh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="8481" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="8481" bodyend="8485"/>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ab00b23989597c3f9050209553ab8b478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MockNetworkQualityProvider &amp;</type>
        <definition>MockNetworkQualityProvider&amp; mock_network_quality_provider</definition>
        <argsstring>()</argsstring>
        <name>mock_network_quality_provider</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9131" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9131" bodyend="9133"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a24b32474fdb58bdb33c180ed6f926431" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>String</type>
        <definition>static String Decode16BitUnicodeEscapeSequences</definition>
        <argsstring>(const String &amp;string)</argsstring>
        <name>Decode16BitUnicodeEscapeSequences</name>
        <param>
          <type>const String &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9235" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9235" bodyend="9238"/>
        <referencedby refid="_c_w_e-79_8c_1a745b635010b28b54ef3a07bbbedc190e" compoundref="_c_w_e-79_8c" startline="9509" endline="9520">FullyDecodeString</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a558e122beebbb24056642075db346712" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool FindAttributeWithName</definition>
        <argsstring>(const HTMLToken &amp;token, const QualifiedName &amp;name, size_t &amp;index_of_matching_attribute)</argsstring>
        <name>FindAttributeWithName</name>
        <param>
          <type>const HTMLToken &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const QualifiedName &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>index_of_matching_attribute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9493" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9493" bodyend="9508"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a745b635010b28b54ef3a07bbbedc190e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>static String FullyDecodeString</definition>
        <argsstring>(const String &amp;string, const WTF::TextEncoding &amp;encoding)</argsstring>
        <name>FullyDecodeString</name>
        <param>
          <type>const String &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const WTF::TextEncoding &amp;</type>
          <declname>encoding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9509" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9509" bodyend="9520"/>
        <references refid="_c_w_e-79_8c_1a24b32474fdb58bdb33c180ed6f926431" compoundref="_c_w_e-79_8c" startline="9235" endline="9238">Decode16BitUnicodeEscapeSequences</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool HasName</definition>
        <argsstring>(const HTMLToken &amp;token, const QualifiedName &amp;name)</argsstring>
        <name>HasName</name>
        <param>
          <type>const HTMLToken &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const QualifiedName &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9521" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9521" bodyend="9523"/>
        <references refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" compoundref="_c_w_e-79_8c" startline="9678" endline="9681">ThreadSafeMatch</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1acd240fe1fa14238b3890fe46b7e2ad65" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsDangerousHTTPEquiv</definition>
        <argsstring>(const String &amp;value)</argsstring>
        <name>IsDangerousHTTPEquiv</name>
        <param>
          <type>const String &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9540" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9540" bodyend="9544"/>
        <references refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" compoundref="_c_w_e-20_8c" startline="208664">value</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a79c2b2cbf977223c9e4f0a5faa2c120e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsHTMLQuote</definition>
        <argsstring>(UChar c)</argsstring>
        <name>IsHTMLQuote</name>
        <param>
          <type>UChar</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9545" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9545" bodyend="9547"/>
        <referencedby refid="_c_w_e-79_8c_1a3f867ee2b3965cbbcc36a71f89d22d81" compoundref="_c_w_e-79_8c" startline="9682" endline="9693">TruncateForScriptLikeAttribute</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a53940b795ca360007027ff4413c095b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsJSNewline</definition>
        <argsstring>(UChar c)</argsstring>
        <name>IsJSNewline</name>
        <param>
          <type>UChar</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9548" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9548" bodyend="9550"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a4031f17259addac6410cb3ca6f09b6fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsNameOfInlineEventHandler</definition>
        <argsstring>(const Vector&lt; UChar, 32 &gt; &amp;name)</argsstring>
        <name>IsNameOfInlineEventHandler</name>
        <param>
          <type>const Vector&lt; UChar, 32 &gt; &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9562" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9562" bodyend="9567"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ab7e91d7419da000b8e73046611eb1a95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsNonCanonicalCharacter</definition>
        <argsstring>(UChar c)</argsstring>
        <name>IsNonCanonicalCharacter</name>
        <param>
          <type>UChar</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9568" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9568" bodyend="9571"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa3bb831ca33684d0dbd55ba558684d29" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsRequiredForInjection</definition>
        <argsstring>(UChar c)</argsstring>
        <name>IsRequiredForInjection</name>
        <param>
          <type>UChar</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9572" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9572" bodyend="9574"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1abed8adfa878825cb326df8026af38b6c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsSemicolonSeparatedAttribute</definition>
        <argsstring>(const HTMLToken::Attribute &amp;attribute)</argsstring>
        <name>IsSemicolonSeparatedAttribute</name>
        <param>
          <type>const HTMLToken::Attribute &amp;</type>
          <declname>attribute</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9581" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9581" bodyend="9584"/>
        <references refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" compoundref="_c_w_e-79_8c" startline="9678" endline="9681">ThreadSafeMatch</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a568571591fcc7f488af22e8a1c0fcd26" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsSemicolonSeparatedValueContainingJavaScriptURL</definition>
        <argsstring>(const String &amp;value)</argsstring>
        <name>IsSemicolonSeparatedValueContainingJavaScriptURL</name>
        <param>
          <type>const String &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9585" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9585" bodyend="9595"/>
        <references refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" compoundref="_c_w_e-20_8c" startline="208664">value</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a1f297a3e05b479f524aba74117218893" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsSlash</definition>
        <argsstring>(UChar c)</argsstring>
        <name>IsSlash</name>
        <param>
          <type>UChar</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9596" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9596" bodyend="9598"/>
        <referencedby refid="_c_w_e-79_8c_1ae5ee816839a5fee5480cb839f78e59ee" compoundref="_c_w_e-79_8c" startline="9701" endline="9726">TruncateForSrcLikeAttribute</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aef4646bb2c405388c9a7f84e417570ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsTerminatingCharacter</definition>
        <argsstring>(UChar c)</argsstring>
        <name>IsTerminatingCharacter</name>
        <param>
          <type>UChar</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9599" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9599" bodyend="9602"/>
        <referencedby refid="_c_w_e-79_8c_1a3f867ee2b3965cbbcc36a71f89d22d81" compoundref="_c_w_e-79_8c" startline="9682" endline="9693">TruncateForScriptLikeAttribute</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a06b0c6b4ff0570f1e9ddceb8ffaf8f52" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool StartsClosingScriptTagAt</definition>
        <argsstring>(const String &amp;string, size_t start)</argsstring>
        <name>StartsClosingScriptTagAt</name>
        <param>
          <type>const String &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9647" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9647" bodyend="9653"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a3c5519a88f3289dd3a707e9363be6961" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool StartsHTMLCloseCommentAt</definition>
        <argsstring>(const String &amp;string, size_t start)</argsstring>
        <name>StartsHTMLCloseCommentAt</name>
        <param>
          <type>const String &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9654" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9654" bodyend="9657"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a0ddb28e1b63d6629ceaec0bc329ddf6b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool StartsHTMLOpenCommentAt</definition>
        <argsstring>(const String &amp;string, size_t start)</argsstring>
        <name>StartsHTMLOpenCommentAt</name>
        <param>
          <type>const String &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9658" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9658" bodyend="9662"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a69dab7fa98b75d3d4e3235dfe768f0d4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool StartsMultiLineCommentAt</definition>
        <argsstring>(const String &amp;string, size_t start)</argsstring>
        <name>StartsMultiLineCommentAt</name>
        <param>
          <type>const String &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9663" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9663" bodyend="9666"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a4155aa3de129e396f98fb76160871fe5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool StartsOpeningScriptTagAt</definition>
        <argsstring>(const String &amp;string, size_t start)</argsstring>
        <name>StartsOpeningScriptTagAt</name>
        <param>
          <type>const String &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9667" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9667" bodyend="9673"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ace65f3869170d50fc84abcf15f9734f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool StartsSingleLineCommentAt</definition>
        <argsstring>(const String &amp;string, size_t start)</argsstring>
        <name>StartsSingleLineCommentAt</name>
        <param>
          <type>const String &amp;</type>
          <declname>string</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9674" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9674" bodyend="9677"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ThreadSafeMatch</definition>
        <argsstring>(const Vector&lt; UChar, inlineCapacity &gt; &amp;vector, const QualifiedName &amp;qname)</argsstring>
        <name>ThreadSafeMatch</name>
        <param>
          <type>const Vector&lt; UChar, inlineCapacity &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const QualifiedName &amp;</type>
          <declname>qname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9678" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9678" bodyend="9681"/>
        <referencedby refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" compoundref="_c_w_e-79_8c" startline="9521" endline="9523">HasName</referencedby>
        <referencedby refid="_c_w_e-79_8c_1abed8adfa878825cb326df8026af38b6c" compoundref="_c_w_e-79_8c" startline="9581" endline="9584">IsSemicolonSeparatedAttribute</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a84b0acb38fa8fb623634966ab4b3d60e" compoundref="_c_w_e-79_8c" startline="11330" endline="11372">TokenExitsForeignContent</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a9bc13aa915d29324aed5bcd43f2b8113" compoundref="_c_w_e-79_8c" startline="11373" endline="11378">TokenExitsInSelect</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a2170bfdc04db1ea427d590790007d7e3" compoundref="_c_w_e-79_8c" startline="11379" endline="11386">TokenExitsMath</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a3f867ee2b3965cbbcc36a71f89d22d81" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void TruncateForScriptLikeAttribute</definition>
        <argsstring>(String &amp;decoded_snippet)</argsstring>
        <name>TruncateForScriptLikeAttribute</name>
        <param>
          <type>String &amp;</type>
          <declname>decoded_snippet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9682" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9682" bodyend="9693"/>
        <references refid="_c_w_e-79_8c_1aef4646bb2c405388c9a7f84e417570ea" compoundref="_c_w_e-79_8c" startline="9599" endline="9602">IsTerminatingCharacter</references>
        <references refid="_c_w_e-79_8c_1a79c2b2cbf977223c9e4f0a5faa2c120e" compoundref="_c_w_e-79_8c" startline="9545" endline="9547">IsHTMLQuote</references>
        <referencedby refid="_c_w_e-79_8c_1a5e6003bcf725077e64d1ef19d68cd225" compoundref="_c_w_e-79_8c" startline="9694" endline="9700">TruncateForSemicolonSeparatedScriptLikeAttribute</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a5e6003bcf725077e64d1ef19d68cd225" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void TruncateForSemicolonSeparatedScriptLikeAttribute</definition>
        <argsstring>(String &amp;decoded_snippet)</argsstring>
        <name>TruncateForSemicolonSeparatedScriptLikeAttribute</name>
        <param>
          <type>String &amp;</type>
          <declname>decoded_snippet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9694" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9694" bodyend="9700"/>
        <references refid="_c_w_e-79_8c_1a3f867ee2b3965cbbcc36a71f89d22d81" compoundref="_c_w_e-79_8c" startline="9682" endline="9693">TruncateForScriptLikeAttribute</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ae5ee816839a5fee5480cb839f78e59ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void TruncateForSrcLikeAttribute</definition>
        <argsstring>(String &amp;decoded_snippet)</argsstring>
        <name>TruncateForSrcLikeAttribute</name>
        <param>
          <type>String &amp;</type>
          <declname>decoded_snippet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9701" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9701" bodyend="9726"/>
        <references refid="_c_w_e-79_8c_1a1f297a3e05b479f524aba74117218893" compoundref="_c_w_e-79_8c" startline="9596" endline="9598">IsSlash</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a80f85a6cb949e4a8573b8dd2cb72fd1c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void FillHuffmanTable</definition>
        <argsstring>(const JpegHuffmanTable *dc_table, const JpegHuffmanTable *ac_table, VAHuffmanTableBufferJPEGBaseline *huffman_table)</argsstring>
        <name>FillHuffmanTable</name>
        <param>
          <type>const JpegHuffmanTable *</type>
          <declname>dc_table</declname>
        </param>
        <param>
          <type>const JpegHuffmanTable *</type>
          <declname>ac_table</declname>
        </param>
        <param>
          <type>VAHuffmanTableBufferJPEGBaseline *</type>
          <declname>huffman_table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9842" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9842" bodyend="9882"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a0ae5ef3b53011b0fc8a3443a35ec083a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void FillIQMatrix</definition>
        <argsstring>(const JpegQuantizationTable *q_table, VAIQMatrixBufferJPEGBaseline *iq_matrix)</argsstring>
        <name>FillIQMatrix</name>
        <param>
          <type>const JpegQuantizationTable *</type>
          <declname>q_table</declname>
        </param>
        <param>
          <type>VAIQMatrixBufferJPEGBaseline *</type>
          <declname>iq_matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9883" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9883" bodyend="9898"/>
        <references refid="_c_w_e-22_8c_1ac325ee2e130c33214318b5dea0073d47" compoundref="_c_w_e-22_8c" startline="17384" endline="17386">size</references>
        <references refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" compoundref="_c_w_e-20_8c" startline="208664">value</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a2e7336ccf2abb440d43e43a014529326" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void FillSliceParameters</definition>
        <argsstring>(const JpegParseResult &amp;parse_result, VASliceParameterBufferJPEGBaseline *slice_param)</argsstring>
        <name>FillSliceParameters</name>
        <param>
          <type>const JpegParseResult &amp;</type>
          <declname>parse_result</declname>
        </param>
        <param>
          <type>VASliceParameterBufferJPEGBaseline *</type>
          <declname>slice_param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9899" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9899" bodyend="9927"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a7a29e65794456d365eca004a00fe749e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsVaapiSupportedJpeg</definition>
        <argsstring>(const JpegParseResult &amp;jpeg)</argsstring>
        <name>IsVaapiSupportedJpeg</name>
        <param>
          <type>const JpegParseResult &amp;</type>
          <declname>jpeg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="9957" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="9957" bodyend="9999"/>
        <references refid="_c_w_e-79_8c_1a6acf7fa6d75500b639bb3535cd853658" compoundref="_c_w_e-79_8c" startline="10000" endline="10021">VaSurfaceFormatForJpeg</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a6acf7fa6d75500b639bb3535cd853658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int VaSurfaceFormatForJpeg</definition>
        <argsstring>(const JpegFrameHeader &amp;frame_header)</argsstring>
        <name>VaSurfaceFormatForJpeg</name>
        <param>
          <type>const JpegFrameHeader &amp;</type>
          <declname>frame_header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10000" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10000" bodyend="10021"/>
        <referencedby refid="_c_w_e-79_8c_1a7a29e65794456d365eca004a00fe749e" compoundref="_c_w_e-79_8c" startline="9957" endline="9999">IsVaapiSupportedJpeg</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a41fa4155031192c02776fda7722909d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>base::string16</type>
        <definition>base::string16 Elide</definition>
        <argsstring>(const GURL &amp;url, const gfx::FontList &amp;font_list, float available_width, ElisionMethod method)</argsstring>
        <name>Elide</name>
        <param>
          <type>const GURL &amp;</type>
          <declname>url</declname>
        </param>
        <param>
          <type>const gfx::FontList &amp;</type>
          <declname>font_list</declname>
        </param>
        <param>
          <type>float</type>
          <declname>available_width</declname>
        </param>
        <param>
          <type>ElisionMethod</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10022" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10022" bodyend="10040"/>
        <referencedby refid="_c_w_e-79_8c_1ad92e909b840c1cf205e61291c453e412" compoundref="_c_w_e-79_8c" startline="10112" endline="10147">RunProgressiveElisionTest</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a3bb122fb54bb56fefde1bd23c367ac47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>url::Component *</type>
        <definition>url::Component* GetComponent</definition>
        <argsstring>(url::Parsed *parsed, url::Parsed::ComponentType type)</argsstring>
        <name>GetComponent</name>
        <param>
          <type>url::Parsed *</type>
          <declname>parsed</declname>
        </param>
        <param>
          <type>url::Parsed::ComponentType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10041" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10041" bodyend="10064"/>
        <referencedby refid="_c_w_e-79_8c_1a75ade601ba99aa3824a5c4b340422ef1" compoundref="_c_w_e-79_8c" startline="10065" endline="10100">RunElisionParsingTest</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a75ade601ba99aa3824a5c4b340422ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RunElisionParsingTest</definition>
        <argsstring>(const std::vector&lt; ParsingTestcase &gt; &amp;testcases)</argsstring>
        <name>RunElisionParsingTest</name>
        <param>
          <type>const std::vector&lt; ParsingTestcase &gt; &amp;</type>
          <declname>testcases</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10065" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10065" bodyend="10100"/>
        <references refid="_c_w_e-79_8c_1a3bb122fb54bb56fefde1bd23c367ac47" compoundref="_c_w_e-79_8c" startline="10041" endline="10064">GetComponent</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a16bd00ef2b69082358c148b1a56e9ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RunElisionTest</definition>
        <argsstring>(const std::vector&lt; Testcase &gt; &amp;testcases)</argsstring>
        <name>RunElisionTest</name>
        <param>
          <type>const std::vector&lt; Testcase &gt; &amp;</type>
          <declname>testcases</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10101" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10101" bodyend="10111"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ad92e909b840c1cf205e61291c453e412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RunProgressiveElisionTest</definition>
        <argsstring>(const std::vector&lt; ProgressiveTestcase &gt; &amp;testcases, ElisionMethod method)</argsstring>
        <name>RunProgressiveElisionTest</name>
        <param>
          <type>const std::vector&lt; ProgressiveTestcase &gt; &amp;</type>
          <declname>testcases</declname>
        </param>
        <param>
          <type>ElisionMethod</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10112" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10112" bodyend="10147"/>
        <references refid="_c_w_e-787_8c_1affe776513b24d84b39af8ab0930fef7f">max</references>
        <references refid="_c_w_e-79_8c_1a41fa4155031192c02776fda7722909d1" compoundref="_c_w_e-79_8c" startline="10022" endline="10040">Elide</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a603d4166eb9b7128b21a44550f4a72ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsQueryMatch</definition>
        <argsstring>(const std::string &amp;url_query, const std::string &amp;key, URLQueryElementMatcherCondition::QueryElementType query_element_type, const std::string &amp;value, URLQueryElementMatcherCondition::QueryValueMatchType query_value_match_type, URLQueryElementMatcherCondition::Type match_type)</argsstring>
        <name>IsQueryMatch</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>url_query</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>URLQueryElementMatcherCondition::QueryElementType</type>
          <declname>query_element_type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>URLQueryElementMatcherCondition::QueryValueMatchType</type>
          <declname>query_value_match_type</declname>
        </param>
        <param>
          <type>URLQueryElementMatcherCondition::Type</type>
          <declname>match_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10148" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10148" bodyend="10188"/>
        <references refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" compoundref="_c_w_e-20_8c" startline="208532">key</references>
        <references refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" compoundref="_c_w_e-20_8c" startline="208664">value</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1af37cc3fd9d0a33511cdd3ffe8bba2330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Matches</definition>
        <argsstring>(const URLMatcherCondition &amp;condition, const std::string &amp;text)</argsstring>
        <name>Matches</name>
        <param>
          <type>const URLMatcherCondition &amp;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10189" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10189" bodyend="10192"/>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1abdc4d735a5454d59affc57b3a5eda9f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char CanonicalSchemeChar</definition>
        <argsstring>(base::char16 ch)</argsstring>
        <name>CanonicalSchemeChar</name>
        <param>
          <type>base::char16</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10193" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10193" bodyend="10197"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ae23b41b05df50f14ae29562c05e32c0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CanonicalizePort</definition>
        <argsstring>(const char *spec, const Component &amp;port, int default_port_for_scheme, CanonOutput *output, Component *out_port)</argsstring>
        <name>CanonicalizePort</name>
        <param>
          <type>const char *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const Component &amp;</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>default_port_for_scheme</declname>
        </param>
        <param>
          <type>CanonOutput *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>Component *</type>
          <declname>out_port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10198" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10198" bodyend="10206"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a92f80c8e9dd3d7cfeb203cf76e93b14b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CanonicalizePort</definition>
        <argsstring>(const base::char16 *spec, const Component &amp;port, int default_port_for_scheme, CanonOutput *output, Component *out_port)</argsstring>
        <name>CanonicalizePort</name>
        <param>
          <type>const base::char16 *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const Component &amp;</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>default_port_for_scheme</declname>
        </param>
        <param>
          <type>CanonOutput *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>Component *</type>
          <declname>out_port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10207" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10207" bodyend="10214"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1abac0c31f0ca5268d6857c22889e9fc26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CanonicalizeRef</definition>
        <argsstring>(const char *spec, const Component &amp;ref, CanonOutput *output, Component *out_ref)</argsstring>
        <name>CanonicalizeRef</name>
        <param>
          <type>const char *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const Component &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>CanonOutput *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>Component *</type>
          <declname>out_ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10215" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10215" bodyend="10220"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a9c3926adf45109febf87a0bd7250a66e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CanonicalizeRef</definition>
        <argsstring>(const base::char16 *spec, const Component &amp;ref, CanonOutput *output, Component *out_ref)</argsstring>
        <name>CanonicalizeRef</name>
        <param>
          <type>const base::char16 *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const Component &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>CanonOutput *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>Component *</type>
          <declname>out_ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10221" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10221" bodyend="10226"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a8814f1bc228bc4e62a30060dea5e75dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CanonicalizeScheme</definition>
        <argsstring>(const char *spec, const Component &amp;scheme, CanonOutput *output, Component *out_scheme)</argsstring>
        <name>CanonicalizeScheme</name>
        <param>
          <type>const char *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const Component &amp;</type>
          <declname>scheme</declname>
        </param>
        <param>
          <type>CanonOutput *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>Component *</type>
          <declname>out_scheme</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10227" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10227" bodyend="10232"/>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a16a83793e27c64a85a91bdbfb4c735c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CanonicalizeScheme</definition>
        <argsstring>(const base::char16 *spec, const Component &amp;scheme, CanonOutput *output, Component *out_scheme)</argsstring>
        <name>CanonicalizeScheme</name>
        <param>
          <type>const base::char16 *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const Component &amp;</type>
          <declname>scheme</declname>
        </param>
        <param>
          <type>CanonOutput *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>Component *</type>
          <declname>out_scheme</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10233" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10233" bodyend="10238"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a5e0d6adbc96da7c8e11d8ff19b46ae28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CanonicalizeUserInfo</definition>
        <argsstring>(const char *username_source, const Component &amp;username, const char *password_source, const Component &amp;password, CanonOutput *output, Component *out_username, Component *out_password)</argsstring>
        <name>CanonicalizeUserInfo</name>
        <param>
          <type>const char *</type>
          <declname>username_source</declname>
        </param>
        <param>
          <type>const Component &amp;</type>
          <declname>username</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>password_source</declname>
        </param>
        <param>
          <type>const Component &amp;</type>
          <declname>password</declname>
        </param>
        <param>
          <type>CanonOutput *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>Component *</type>
          <declname>out_username</declname>
        </param>
        <param>
          <type>Component *</type>
          <declname>out_password</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10239" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10239" bodyend="10249"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a2a32eef508617eb0bee5035d0293ef6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CanonicalizeUserInfo</definition>
        <argsstring>(const base::char16 *username_source, const Component &amp;username, const base::char16 *password_source, const Component &amp;password, CanonOutput *output, Component *out_username, Component *out_password)</argsstring>
        <name>CanonicalizeUserInfo</name>
        <param>
          <type>const base::char16 *</type>
          <declname>username_source</declname>
        </param>
        <param>
          <type>const Component &amp;</type>
          <declname>username</declname>
        </param>
        <param>
          <type>const base::char16 *</type>
          <declname>password_source</declname>
        </param>
        <param>
          <type>const Component &amp;</type>
          <declname>password</declname>
        </param>
        <param>
          <type>CanonOutput *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>Component *</type>
          <declname>out_username</declname>
        </param>
        <param>
          <type>Component *</type>
          <declname>out_password</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10250" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10250" bodyend="10260"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1af317974b31b982e06f31b5d0c44026ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DoPort</definition>
        <argsstring>(const CHAR *spec, const Component &amp;port, int default_port_for_scheme, CanonOutput *output, Component *out_port)</argsstring>
        <name>DoPort</name>
        <param>
          <type>const CHAR *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const Component &amp;</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>default_port_for_scheme</declname>
        </param>
        <param>
          <type>CanonOutput *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>Component *</type>
          <declname>out_port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10261" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10261" bodyend="10291"/>
        <references refid="_c_w_e-416_8c_1aec4b0173bbfe004e02a2bb9ed4e37b81" compoundref="_c_w_e-416_8c" startline="8007">buf</references>
        <references refid="_c_w_e-79_8c_1a6a31f3f4ff9cd16da4f94dd99d63b8aa" compoundref="_c_w_e-79_8c" startline="10423" endline="10425">WritePortInt</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a4efe10c6d6ee40d8e3d1b884fc7845a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const CHAR *</type>
        <definition>const CHAR* DoRemoveURLWhitespace</definition>
        <argsstring>(const CHAR *input, int input_len, CanonOutputT&lt; CHAR &gt; *buffer, int *output_len, bool *potentially_dangling_markup)</argsstring>
        <name>DoRemoveURLWhitespace</name>
        <param>
          <type>const CHAR *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>input_len</declname>
        </param>
        <param>
          <type>CanonOutputT&lt; CHAR &gt; *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>output_len</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>potentially_dangling_markup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10292" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10292" bodyend="10325"/>
        <references refid="_c_w_e-79_8c_1a3b7af3b03c59d1011062768a2b1dc075" compoundref="_c_w_e-79_8c" startline="10401" endline="10403">IsRemovableURLWhitespace</references>
        <referencedby refid="_c_w_e-79_8c_1a55f0840f580850f7dbbf455b793ae238" compoundref="_c_w_e-79_8c" startline="10407" endline="10414">RemoveURLWhitespace</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ad4aae80f3ec46d3acb10fb932cdb4d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DoScheme</definition>
        <argsstring>(const CHAR *spec, const Component &amp;scheme, CanonOutput *output, Component *out_scheme)</argsstring>
        <name>DoScheme</name>
        <param>
          <type>const CHAR *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const Component &amp;</type>
          <declname>scheme</declname>
        </param>
        <param>
          <type>CanonOutput *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>Component *</type>
          <declname>out_scheme</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10326" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10326" bodyend="10367"/>
        <references refid="_c_w_e-79_8c_1a8d99d507ec61df283dc4bdfd1613571a" compoundref="_c_w_e-79_8c" startline="10404" endline="10406">IsSchemeFirstChar</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ae6f95410a66f8b95343489972dd5aa16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DoUserInfo</definition>
        <argsstring>(const CHAR *username_spec, const Component &amp;username, const CHAR *password_spec, const Component &amp;password, CanonOutput *output, Component *out_username, Component *out_password)</argsstring>
        <name>DoUserInfo</name>
        <param>
          <type>const CHAR *</type>
          <declname>username_spec</declname>
        </param>
        <param>
          <type>const Component &amp;</type>
          <declname>username</declname>
        </param>
        <param>
          <type>const CHAR *</type>
          <declname>password_spec</declname>
        </param>
        <param>
          <type>const Component &amp;</type>
          <declname>password</declname>
        </param>
        <param>
          <type>CanonOutput *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>Component *</type>
          <declname>out_username</declname>
        </param>
        <param>
          <type>Component *</type>
          <declname>out_password</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10368" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10368" bodyend="10400"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a3b7af3b03c59d1011062768a2b1dc075" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsRemovableURLWhitespace</definition>
        <argsstring>(int ch)</argsstring>
        <name>IsRemovableURLWhitespace</name>
        <param>
          <type>int</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10401" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10401" bodyend="10403"/>
        <referencedby refid="_c_w_e-79_8c_1a4efe10c6d6ee40d8e3d1b884fc7845a8" compoundref="_c_w_e-79_8c" startline="10292" endline="10325">DoRemoveURLWhitespace</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a8d99d507ec61df283dc4bdfd1613571a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsSchemeFirstChar</definition>
        <argsstring>(unsigned char c)</argsstring>
        <name>IsSchemeFirstChar</name>
        <param>
          <type>unsigned char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10404" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10404" bodyend="10406"/>
        <referencedby refid="_c_w_e-79_8c_1ad4aae80f3ec46d3acb10fb932cdb4d8d" compoundref="_c_w_e-79_8c" startline="10326" endline="10367">DoScheme</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a55f0840f580850f7dbbf455b793ae238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* RemoveURLWhitespace</definition>
        <argsstring>(const char *input, int input_len, CanonOutputT&lt; char &gt; *buffer, int *output_len, bool *potentially_dangling_markup)</argsstring>
        <name>RemoveURLWhitespace</name>
        <param>
          <type>const char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>input_len</declname>
        </param>
        <param>
          <type>CanonOutputT&lt; char &gt; *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>output_len</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>potentially_dangling_markup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10407" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10407" bodyend="10414"/>
        <references refid="_c_w_e-79_8c_1a4efe10c6d6ee40d8e3d1b884fc7845a8" compoundref="_c_w_e-79_8c" startline="10292" endline="10325">DoRemoveURLWhitespace</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1acdefcb95fc6c94ead47a299a9ae65427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const base::char16 *</type>
        <definition>const base::char16* RemoveURLWhitespace</definition>
        <argsstring>(const base::char16 *input, int input_len, CanonOutputT&lt; base::char16 &gt; *buffer, int *output_len, bool *potentially_dangling_markup)</argsstring>
        <name>RemoveURLWhitespace</name>
        <param>
          <type>const base::char16 *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>input_len</declname>
        </param>
        <param>
          <type>CanonOutputT&lt; base::char16 &gt; *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>output_len</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>potentially_dangling_markup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10415" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10415" bodyend="10422"/>
        <references refid="_c_w_e-79_8c_1a4efe10c6d6ee40d8e3d1b884fc7845a8" compoundref="_c_w_e-79_8c" startline="10292" endline="10325">DoRemoveURLWhitespace</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a6a31f3f4ff9cd16da4f94dd99d63b8aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void WritePortInt</definition>
        <argsstring>(char *output, int output_len, int port)</argsstring>
        <name>WritePortInt</name>
        <param>
          <type>char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>output_len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10423" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10423" bodyend="10425"/>
        <referencedby refid="_c_w_e-79_8c_1af317974b31b982e06f31b5d0c44026ea" compoundref="_c_w_e-79_8c" startline="10261" endline="10291">DoPort</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aba7acace23f569e142364025f9f1f3e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string BytesToHexString</definition>
        <argsstring>(unsigned char bytes[16], int length)</argsstring>
        <name>BytesToHexString</name>
        <param>
          <type>unsigned char</type>
          <declname>bytes</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10426" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10426" bodyend="10435"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a2ded9bdcb74fdf2c94abb7894f606758" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool ParsedIsEqual</definition>
        <argsstring>(const Parsed &amp;a, const Parsed &amp;b)</argsstring>
        <name>ParsedIsEqual</name>
        <param>
          <type>const Parsed &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Parsed &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10436" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10436" bodyend="10445"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a6cb1954551450e37450609765af6957a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetupReplComp</definition>
        <argsstring>(void(Replacements&lt; CHAR &gt;::*set)(const CHAR *, const Component &amp;), void(Replacements&lt; CHAR &gt;::*clear)(), Replacements&lt; CHAR &gt; *rep, const CHAR *str)</argsstring>
        <name>SetupReplComp</name>
        <param>
          <type>void(Replacements&lt; CHAR &gt;::*)(const CHAR *, const Component &amp;)</type>
          <declname>set</declname>
        </param>
        <param>
          <type>void(Replacements&lt; CHAR &gt;::*)()</type>
          <declname>clear</declname>
        </param>
        <param>
          <type>Replacements&lt; CHAR &gt; *</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>const CHAR *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10446" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10446" bodyend="10456"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a45a80a28daecbfadb3a25a8ace1f7060" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AbortCompilation</definition>
        <argsstring>()</argsstring>
        <name>AbortCompilation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10989" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10989" bodyend="10992"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1af0dede2e50ca786eb3761b3df8331fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FetchDataLoaderAsWasmModule</definition>
        <argsstring>(ScriptState *script_state)</argsstring>
        <name>FetchDataLoaderAsWasmModule</name>
        <param>
          <type>ScriptState *</type>
          <declname>script_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10993" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10993" bodyend="10994"/>
        <referencedby refid="_c_w_e-79_8c_1a07d8270b8758538d9838d925a2815460" compoundref="_c_w_e-79_8c" startline="13069" endline="13131">CompileFromResponseCallback</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a29cd3cc4457e0a4aaafe45a92939b229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v8::Local&lt; v8::Promise &gt;</type>
        <definition>v8::Local&lt;v8::Promise&gt; GetPromise</definition>
        <argsstring>()</argsstring>
        <name>GetPromise</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="10995" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="10995" bodyend="10995"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a0e270e5f7b7fb99081898069f0d9b2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Trace</definition>
        <argsstring>(blink::Visitor *visitor)</argsstring>
        <name>Trace</name>
        <param>
          <type>blink::Visitor *</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11001" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11001" bodyend="11006"/>
        <referencedby refid="_c_w_e-20_8c_1a3386ec59cf0d65a8e7ec9991d9de8103" compoundref="_c_w_e-20_8c" startline="61638" endline="61677">inflate</referencedby>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
        <referencedby refid="_c_w_e-22_8c_1a06ae6d9413c23144bb371ee24dc0d404" compoundref="_c_w_e-22_8c" startline="9274" endline="9494">compress_thread</referencedby>
        <referencedby refid="_c_w_e-22_8c_1aa0fecd792c2ca84222df9934378e0438" compoundref="_c_w_e-22_8c" startline="9596" endline="9604">cut_short</referencedby>
        <referencedby refid="_c_w_e-22_8c_1a3b9c6b27821a499722bf727acf0dee61" compoundref="_c_w_e-22_8c" startline="9684" endline="9719">finish_jobs</referencedby>
        <referencedby refid="_c_w_e-22_8c_1a35356befb1cff2d790ed29177fa0c537" compoundref="_c_w_e-22_8c" startline="10331" endline="10346">load_read</referencedby>
        <referencedby refid="_c_w_e-22_8c_1a941a5e4821f6dc8d1352d9a00786edc4" compoundref="_c_w_e-22_8c" startline="10840" endline="10856">outb_check</referencedby>
        <referencedby refid="_c_w_e-22_8c_1a0632be3f4761b695948555d1eff28546" compoundref="_c_w_e-22_8c" startline="10857" endline="10874">outb_write</referencedby>
        <referencedby refid="_c_w_e-22_8c_1a27eef9b8b56f234304e49bf425d3d2bf" compoundref="_c_w_e-22_8c" startline="10875" endline="11051">parallel_compress</referencedby>
        <referencedby refid="_c_w_e-22_8c_1a5fa02863d0cc602a0868861b1b8cde31" compoundref="_c_w_e-22_8c" startline="11835" endline="11902">write_thread</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ae4f5601f48e971c6f7b6881e1f63497a" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>WasmDataLoaderClient</definition>
        <argsstring>()</argsstring>
        <name>WasmDataLoaderClient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11007" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11007" bodyend="11007"/>
        <referencedby refid="_c_w_e-79_8c_1a07d8270b8758538d9838d925a2815460" compoundref="_c_w_e-79_8c" startline="13069" endline="13131">CompileFromResponseCallback</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a4f5b209e69a1e57586409c08dda71982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; Permissions &gt;</type>
        <definition>std::unique_ptr&lt;Permissions&gt; PackPermissionSet</definition>
        <argsstring>(const PermissionSet &amp;set)</argsstring>
        <name>PackPermissionSet</name>
        <param>
          <type>const PermissionSet &amp;</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11008" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11008" bodyend="11030"/>
        <references refid="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" compoundref="_c_w_e-79_8c" startline="11258" endline="11258">permissions</references>
        <references refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" compoundref="_c_w_e-20_8c" startline="208664">value</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aa10c38e158c6289d942d1ffb23edf3d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool UnpackAPIPermissions</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;permissions_input, const PermissionSet &amp;required_permissions, const PermissionSet &amp;optional_permissions, UnpackPermissionSetResult *result, std::string *error)</argsstring>
        <name>UnpackAPIPermissions</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>permissions_input</declname>
        </param>
        <param>
          <type>const PermissionSet &amp;</type>
          <declname>required_permissions</declname>
        </param>
        <param>
          <type>const PermissionSet &amp;</type>
          <declname>optional_permissions</declname>
        </param>
        <param>
          <type>UnpackPermissionSetResult *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11031" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11031" bodyend="11081"/>
        <references refid="_c_w_e-79_8c_1a79dfb66ac4ead27315f3d44996e8dc40" compoundref="_c_w_e-79_8c" startline="11109" endline="11140">UnpackPermissionWithArguments</references>
        <referencedby refid="_c_w_e-79_8c_1acf6535a5adccbc8c693ead30ec00e3b9" compoundref="_c_w_e-79_8c" startline="11082" endline="11108">UnpackPermissionSet</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1acf6535a5adccbc8c693ead30ec00e3b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; UnpackPermissionSetResult &gt;</type>
        <definition>std::unique_ptr&lt;UnpackPermissionSetResult&gt; UnpackPermissionSet</definition>
        <argsstring>(const Permissions &amp;permissions_input, const PermissionSet &amp;required_permissions, const PermissionSet &amp;optional_permissions, bool allow_file_access, std::string *error)</argsstring>
        <name>UnpackPermissionSet</name>
        <param>
          <type>const Permissions &amp;</type>
          <declname>permissions_input</declname>
        </param>
        <param>
          <type>const PermissionSet &amp;</type>
          <declname>required_permissions</declname>
        </param>
        <param>
          <type>const PermissionSet &amp;</type>
          <declname>optional_permissions</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_file_access</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11082" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11082" bodyend="11108"/>
        <references refid="_c_w_e-79_8c_1aa10c38e158c6289d942d1ffb23edf3d2" compoundref="_c_w_e-79_8c" startline="11031" endline="11081">UnpackAPIPermissions</references>
        <references refid="_c_w_e-79_8c_1a24f27d728b4352f4744f45db74f69ea3" compoundref="_c_w_e-79_8c" startline="13145" endline="13193">UnpackOriginPermissions</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a79dfb66ac4ead27315f3d44996e8dc40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; APIPermission &gt;</type>
        <definition>std::unique_ptr&lt;APIPermission&gt; UnpackPermissionWithArguments</definition>
        <argsstring>(base::StringPiece permission_name, base::StringPiece permission_arg, const std::string &amp;permission_str, std::string *error)</argsstring>
        <name>UnpackPermissionWithArguments</name>
        <param>
          <type>base::StringPiece</type>
          <declname>permission_name</declname>
        </param>
        <param>
          <type>base::StringPiece</type>
          <declname>permission_arg</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>permission_str</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11109" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11109" bodyend="11140"/>
        <references refid="_c_w_e-787_8c_1ad736559292abd08bd8de43074a63726b" compoundref="_c_w_e-787_8c" startline="60319" endline="60391">Read</references>
        <referencedby refid="_c_w_e-79_8c_1aa10c38e158c6289d942d1ffb23edf3d2" compoundref="_c_w_e-79_8c" startline="11031" endline="11081">UnpackAPIPermissions</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a3f228a9b4a3c188820b5e98ec622c6f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AddExtensionAndGrantPermissions</definition>
        <argsstring>(const Extension &amp;extension)</argsstring>
        <name>AddExtensionAndGrantPermissions</name>
        <param>
          <type>const Extension &amp;</type>
          <declname>extension</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11141" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11141" bodyend="11146"/>
        <references refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" compoundref="_c_w_e-79_8c" startline="11257" endline="11257">extension</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a2e88b0446fc71bde7010d2698f56bb27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>scoped_refptr&lt; const Extension &gt;</type>
        <definition>scoped_refptr&lt;const Extension&gt; CreateExtensionWithPermissions</definition>
        <argsstring>(std::unique_ptr&lt; base::Value &gt; permissions, const std::string &amp;name, bool allow_file_access)</argsstring>
        <name>CreateExtensionWithPermissions</name>
        <param>
          <type>std::unique_ptr&lt; base::Value &gt;</type>
          <declname>permissions</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_file_access</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11147" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11147" bodyend="11166"/>
        <references refid="_c_w_e-20_8c_1a9078f3a0f246c24961486f729b1aaa34" compoundref="_c_w_e-20_8c" startline="80634" endline="80642">Set</references>
        <references refid="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" compoundref="_c_w_e-79_8c" startline="11258" endline="11258">permissions</references>
        <referencedby refid="_c_w_e-79_8c_1a1ed60db7eccc323f37d655c5f74cc733" compoundref="_c_w_e-79_8c" startline="11168" endline="11186">RunContainsFunction</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a4d6a04c0d4cdbf29734762746cc7abd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PermissionsAPIUnitTest</definition>
        <argsstring>()</argsstring>
        <name>PermissionsAPIUnitTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11167" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11167" bodyend="11167"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a1ed60db7eccc323f37d655c5f74cc733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RunContainsFunction</definition>
        <argsstring>(const std::string &amp;manifest_permission, const std::string &amp;args_string, bool allow_file_access)</argsstring>
        <name>RunContainsFunction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>manifest_permission</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>args_string</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_file_access</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11168" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11168" bodyend="11186"/>
        <references refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" compoundref="_c_w_e-79_8c" startline="11257" endline="11257">extension</references>
        <references refid="_c_w_e-79_8c_1a2e88b0446fc71bde7010d2698f56bb27" compoundref="_c_w_e-79_8c" startline="11147" endline="11166">CreateExtensionWithPermissions</references>
        <references refid="_c_w_e-79_8c_1ad08fd70a885a650dfed64c57ed85082c" compoundref="_c_w_e-79_8c" startline="11219" endline="11219">browser</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a355d38a7542577bb85aae7d1f75f5e88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RunRequestFunction</definition>
        <argsstring>(const Extension &amp;extension, Browser *browser, const char *args, std::unique_ptr&lt; const PermissionSet &gt; *prompted_permissions_out)</argsstring>
        <name>RunRequestFunction</name>
        <param>
          <type>const Extension &amp;</type>
          <declname>extension</declname>
        </param>
        <param>
          <type>Browser *</type>
          <declname>browser</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; const PermissionSet &gt; *</type>
          <declname>prompted_permissions_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11187" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11187" bodyend="11211"/>
        <references refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" compoundref="_c_w_e-79_8c" startline="11257" endline="11257">extension</references>
        <references refid="_c_w_e-79_8c_1ad08fd70a885a650dfed64c57ed85082c" compoundref="_c_w_e-79_8c" startline="11219" endline="11219">browser</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a5ac4c4360fd66c2aaa278ca2d9823385" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; base::Value &gt;</type>
        <definition>std::unique_ptr&lt;base::Value&gt; StringVectorToValue</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;strings)</argsstring>
        <name>StringVectorToValue</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>strings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11212" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11212" bodyend="11218"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ad08fd70a885a650dfed64c57ed85082c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Browser *</type>
        <definition>Browser* browser</definition>
        <argsstring>()</argsstring>
        <name>browser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11219" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11219" bodyend="11219"/>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a3a5eea318d1ad84bd99f382c4b048bf2" compoundref="_c_w_e-79_8c" startline="7386" endline="7394">ActivateProfile</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a1ed60db7eccc323f37d655c5f74cc733" compoundref="_c_w_e-79_8c" startline="11168" endline="11186">RunContainsFunction</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a355d38a7542577bb85aae7d1f75f5e88" compoundref="_c_w_e-79_8c" startline="11187" endline="11211">RunRequestFunction</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a7687a53b1fe4d2834ded01f3fa29a081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AddPattern</definition>
        <argsstring>(URLPatternSet *extent, const std::string &amp;pattern)</argsstring>
        <name>AddPattern</name>
        <param>
          <type>URLPatternSet *</type>
          <declname>extent</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11220" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11220" bodyend="11223"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a18c3a4fe8a99b9efa9ba744b4202ad7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>scoped_refptr&lt; const Extension &gt;</type>
        <definition>scoped_refptr&lt;const Extension&gt; CreateExtensionWithOptionalPermissions</definition>
        <argsstring>(std::unique_ptr&lt; base::Value &gt; optional_permissions, std::unique_ptr&lt; base::Value &gt; permissions, const std::string &amp;name)</argsstring>
        <name>CreateExtensionWithOptionalPermissions</name>
        <param>
          <type>std::unique_ptr&lt; base::Value &gt;</type>
          <declname>optional_permissions</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; base::Value &gt;</type>
          <declname>permissions</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11224" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11224" bodyend="11241"/>
        <references refid="_c_w_e-20_8c_1a9078f3a0f246c24961486f729b1aaa34" compoundref="_c_w_e-20_8c" startline="80634" endline="80642">Set</references>
        <references refid="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" compoundref="_c_w_e-79_8c" startline="11258" endline="11258">permissions</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a83e0503bde0b09713a7764e20606d74d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PermissionsUpdaterTestDelegate</definition>
        <argsstring>()</argsstring>
        <name>PermissionsUpdaterTestDelegate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11242" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11242" bodyend="11242"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a372de693ad40b3f42839c8ec6ac845f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Reset</definition>
        <argsstring>()</argsstring>
        <name>Reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11243" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11243" bodyend="11248"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ade7c17fb79686f6fe6865d28e80d5a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Wait</definition>
        <argsstring>()</argsstring>
        <name>Wait</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11249" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11249" bodyend="11256"/>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Extension *</type>
        <definition>const Extension* extension</definition>
        <argsstring>() const</argsstring>
        <name>extension</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11257" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11257" bodyend="11257"/>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
        <referencedby refid="_c_w_e-22_8c_1ab5defcc6449948f23c1e97af955749ff" compoundref="_c_w_e-22_8c" startline="24642" endline="24793">ReadCTAPGetInfoResponse</referencedby>
        <referencedby refid="_c_w_e-476_8c_1a4d686174741a2774ebbc9e84f3226d28" compoundref="_c_w_e-476_8c" startline="31614">ktypes2str</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a538456d008711e011a10fd7037e02b04" compoundref="_c_w_e-79_8c" startline="2433" endline="2442">GetRenderViewHost</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a3f228a9b4a3c188820b5e98ec622c6f5" compoundref="_c_w_e-79_8c" startline="11141" endline="11146">AddExtensionAndGrantPermissions</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a1ed60db7eccc323f37d655c5f74cc733" compoundref="_c_w_e-79_8c" startline="11168" endline="11186">RunContainsFunction</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a355d38a7542577bb85aae7d1f75f5e88" compoundref="_c_w_e-79_8c" startline="11187" endline="11211">RunRequestFunction</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const PermissionSet *</type>
        <definition>const PermissionSet* permissions</definition>
        <argsstring>() const</argsstring>
        <name>permissions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11258" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11258" bodyend="11258"/>
        <referencedby refid="_c_w_e-20_8c_1af8f30b0fc9e40b8f9626d13049401d61" compoundref="_c_w_e-20_8c" startline="161801" endline="161873">security_dump_masked_av</referencedby>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a4f5b209e69a1e57586409c08dda71982" compoundref="_c_w_e-79_8c" startline="11008" endline="11030">PackPermissionSet</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a2e88b0446fc71bde7010d2698f56bb27" compoundref="_c_w_e-79_8c" startline="11147" endline="11166">CreateExtensionWithPermissions</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a18c3a4fe8a99b9efa9ba744b4202ad7e" compoundref="_c_w_e-79_8c" startline="11224" endline="11241">CreateExtensionWithOptionalPermissions</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1aae1fe56f5ea0265a89f10cf0000f14e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>UpdatedExtensionPermissionsInfo::Reason</type>
        <definition>UpdatedExtensionPermissionsInfo::Reason reason</definition>
        <argsstring>() const</argsstring>
        <name>reason</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11259" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11259" bodyend="11259"/>
        <referencedby refid="_c_w_e-20_8c_1a11087cf32ac4096394f83f777a1d098a" compoundref="_c_w_e-20_8c" startline="103973" endline="103999">rose_disconnect</referencedby>
        <referencedby refid="_c_w_e-20_8c_1a2bbfe1f9bc7dbf9d4f69022d69128851" compoundref="_c_w_e-20_8c" startline="113549" endline="113567">kvm_task_switch</referencedby>
        <referencedby refid="_c_w_e-20_8c_1afa6792755523983566800b97dfd9f358" compoundref="_c_w_e-20_8c" startline="141025" endline="141062">dev_error</referencedby>
        <referencedby refid="_c_w_e-20_8c_1a0c4eb3bfc0efb0cc319b3d4b076b3c84" compoundref="_c_w_e-20_8c" startline="147585" endline="147651">handle_task_switch</referencedby>
        <referencedby refid="_c_w_e-20_8c_1ae379613e3d74d93925efc3a9154b86f8" compoundref="_c_w_e-20_8c" startline="152274" endline="152313">cm_format_rej</referencedby>
        <referencedby refid="_c_w_e-20_8c_1a94972b84d229a0943b2600646f2e3f63" compoundref="_c_w_e-20_8c" startline="152941" endline="152975">cm_issue_rej</referencedby>
        <referencedby refid="_c_w_e-20_8c_1a744c69fbb988dabc20d043afbf9598b4" compoundref="_c_w_e-20_8c" startline="154408" endline="154466">ib_send_cm_rej</referencedby>
        <referencedby refid="_c_w_e-20_8c_1af8f30b0fc9e40b8f9626d13049401d61" compoundref="_c_w_e-20_8c" startline="161801" endline="161873">security_dump_masked_av</referencedby>
        <referencedby refid="_c_w_e-20_8c_1ab4fa955c020f96d07331beb8c09ba90c" compoundref="_c_w_e-20_8c" startline="230694" endline="230716">on_check_config</referencedby>
        <referencedby refid="_c_w_e-20_8c_1a93d08e74784525f9202ec55ae1c30881" compoundref="_c_w_e-20_8c" startline="230767" endline="230785">on_handler_vanished</referencedby>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
        <referencedby refid="_c_w_e-476_8c_1ab23e65eb82d40c730cec5e792ea9bcfd" compoundref="_c_w_e-476_8c" startline="19028" endline="19108">ssh_packet_read_poll_seqnr</referencedby>
        <referencedby refid="_c_w_e-476_8c_1a4d686174741a2774ebbc9e84f3226d28" compoundref="_c_w_e-476_8c" startline="31614">ktypes2str</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a8f7a8fbe315a243327d1162794dc02d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool received_notification</definition>
        <argsstring>() const</argsstring>
        <name>received_notification</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11260" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11260" bodyend="11260"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a84b0acb38fa8fb623634966ab4b3d60e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool TokenExitsForeignContent</definition>
        <argsstring>(const CompactHTMLToken &amp;token)</argsstring>
        <name>TokenExitsForeignContent</name>
        <param>
          <type>const CompactHTMLToken &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11330" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11330" bodyend="11372"/>
        <references refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" compoundref="_c_w_e-79_8c" startline="9678" endline="9681">ThreadSafeMatch</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a9bc13aa915d29324aed5bcd43f2b8113" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool TokenExitsInSelect</definition>
        <argsstring>(const CompactHTMLToken &amp;token)</argsstring>
        <name>TokenExitsInSelect</name>
        <param>
          <type>const CompactHTMLToken &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11373" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11373" bodyend="11378"/>
        <references refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" compoundref="_c_w_e-79_8c" startline="9678" endline="9681">ThreadSafeMatch</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a2170bfdc04db1ea427d590790007d7e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool TokenExitsMath</definition>
        <argsstring>(const CompactHTMLToken &amp;token)</argsstring>
        <name>TokenExitsMath</name>
        <param>
          <type>const CompactHTMLToken &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11379" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11379" bodyend="11386"/>
        <references refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" compoundref="_c_w_e-79_8c" startline="9678" endline="9681">ThreadSafeMatch</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ae3f072913063235163ebe7da439a415b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SAPI_API int</type>
        <definition>SAPI_API int sapi_header_op</definition>
        <argsstring>(sapi_header_op_enum op, void *arg TSRMLS_DC)</argsstring>
        <name>sapi_header_op</name>
        <param>
          <type>sapi_header_op_enum</type>
          <declname>op</declname>
        </param>
        <param>
          <type>void *arg</type>
          <declname>TSRMLS_DC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11387" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11387" bodyend="11571"/>
        <references refid="_c_w_e-79_8c_1a0fd0e1dad1fc523bcae010064e0f2fb0" compoundref="_c_w_e-79_8c" startline="754" endline="767">sapi_update_response_code</references>
        <references refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" compoundref="_c_w_e-416_8c" startline="8017">SUCCESS</references>
        <references refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0">p</references>
        <references refid="_c_w_e-79_8c_1aa0fe6f09d794f9cacb4f67042d5852bd" compoundref="_c_w_e-79_8c" startline="560" endline="586">sapi_remove_header</references>
        <references refid="_c_w_e-79_8c_1a7a0f9ce713c19f065fa08bababef22cb" compoundref="_c_w_e-79_8c" startline="290" endline="303">sapi_extract_response_code</references>
        <references refid="_c_w_e-79_8c_1a40a6968974920b2c2493a7086a25971e" compoundref="_c_w_e-79_8c" startline="216" endline="235">sapi_apply_default_charset</references>
        <references refid="_c_w_e-20_8c_1aa31a1709fa11916c793adcd69392520b" compoundref="_c_w_e-20_8c" startline="75098" endline="75101">request_method</references>
        <references refid="_c_w_e-79_8c_1ad42bb4c1037e286c3f894393ce47a953" compoundref="_c_w_e-79_8c" startline="428" endline="447">sapi_header_add_op</references>
        <referencedby refid="_c_w_e-20_8c_1a5f6bc3f93c24455ae308f270669a018a" compoundref="_c_w_e-20_8c" startline="55389" endline="55401">phar_do_403</referencedby>
        <referencedby refid="_c_w_e-20_8c_1afd40fbea118125f08d9a6ecd3706e783" compoundref="_c_w_e-20_8c" startline="55403" endline="55425">phar_do_404</referencedby>
        <referencedby refid="_c_w_e-20_8c_1a17a2e481e53563e5e4b880a9e6acf832" compoundref="_c_w_e-20_8c" startline="55612" endline="55774">phar_file_action</referencedby>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
        <referencedby refid="_c_w_e-79_8c_1a1261563c5cc7a36a91deab4dcde6686b" compoundref="_c_w_e-79_8c" startline="200" endline="215">sapi_add_header_ex</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a54a4a77f4e85a662ead293d3102c30ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int php_handler</definition>
        <argsstring>(request_rec *r)</argsstring>
        <name>php_handler</name>
        <param>
          <type>request_rec *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="11572" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="11572" bodyend="11733"/>
        <references refid="_c_w_e-20_8c_1af1df7f9267e5c4e639236dcab9c0ed2a" compoundref="_c_w_e-20_8c" startline="15366" endline="15371">php_server_context_cleanup</references>
        <references refid="_c_w_e-79_8c_1a9ec263e4fff9d2f9abebeb60ad1961ce">PHPAP_INI_OFF</references>
        <references refid="_c_w_e-20_8c_1a51e351e264c4232186edee8ad8e79311" compoundref="_c_w_e-20_8c" startline="15199" endline="15206">php_apache_sapi_log_message_ex</references>
        <references refid="_c_w_e-20_8c_1af62b3996f83275f2e0514274b1730293" compoundref="_c_w_e-20_8c" startline="15024" endline="15056">php_apache_request_ctor</references>
        <references refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" compoundref="_c_w_e-416_8c" startline="8017">SUCCESS</references>
        <references refid="_c_w_e-416_8c_1ab528d402be5568b1e8a1111648c604ab" compoundref="_c_w_e-416_8c" startline="8155" endline="8172">last_modified</references>
        <references refid="_c_w_e-20_8c_1a7d317f492d8d825dab5f51b4b82f4216" compoundref="_c_w_e-20_8c" startline="122361" endline="122384">highlight_file</references>
        <references refid="_c_w_e-20_8c_1a7734f8b2c328f4fd387908b604be6d73" compoundref="_c_w_e-20_8c" startline="208521" endline="208523">if</references>
        <references refid="_c_w_e-20_8c_1a3b24ca832f9cfec8796c814b05aaf0c7" compoundref="_c_w_e-20_8c" startline="15057" endline="15060">php_apache_request_dtor</references>
        <referencedby refid="_c_w_e-20_8c_1ab39bc539de0eae9e7a2bd2e4196b6bdc" compoundref="_c_w_e-20_8c" startline="14966" endline="14972">php_ap2_register_hook</referencedby>
        <referencedby refid="_c_w_e-20_8c_1a7510ca315ddba4a9030016b107f43449" compoundref="_c_w_e-20_8c" startline="256602">amf_tag_contents</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a98fe1cf3ea15667d665681c79795469c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StopCast</definition>
        <argsstring>()</argsstring>
        <name>StopCast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="12063" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="12063" bodyend="12070"/>
        <references refid="_c_w_e-79_8c_1a5e6aa2b0ab57cb9b3ece755f7ed14b1a" compoundref="_c_w_e-79_8c" startline="12071" endline="12079">StopCastCallback</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a5e6aa2b0ab57cb9b3ece755f7ed14b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StopCastCallback</definition>
        <argsstring>(CastConfigDelegate *cast_config, const CastConfigDelegate::ReceiversAndActivites &amp;receivers_activities)</argsstring>
        <name>StopCastCallback</name>
        <param>
          <type>CastConfigDelegate *</type>
          <declname>cast_config</declname>
        </param>
        <param>
          <type>const CastConfigDelegate::ReceiversAndActivites &amp;</type>
          <declname>receivers_activities</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="12071" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="12071" bodyend="12079"/>
        <referencedby refid="_c_w_e-79_8c_1a98fe1cf3ea15667d665681c79795469c" compoundref="_c_w_e-79_8c" startline="12063" endline="12070">StopCast</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a40511fae1574a0ebf606594cf7de5882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>base::string16</type>
        <definition>base::string16 FormatBookmarkURLForDisplay</definition>
        <argsstring>(const GURL &amp;url)</argsstring>
        <name>FormatBookmarkURLForDisplay</name>
        <param>
          <type>const GURL &amp;</type>
          <declname>url</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="12621" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="12621" bodyend="12626"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a53522aa297007b22a828ac79ff8ff416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GetUploadData</definition>
        <argsstring>(const std::string &amp;brand)</argsstring>
        <name>GetUploadData</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>brand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="12627" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="12627" bodyend="12635"/>
        <references refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" compoundref="_c_w_e-20_8c" startline="208661">data</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a8d6b5d15c3cecadf447e429a5a66cd7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UserInitiatedInfo</type>
        <definition>UserInitiatedInfo CreateUserInitiatedInfo</definition>
        <argsstring>(content::NavigationHandle *navigation_handle, PageLoadTracker *committed_load)</argsstring>
        <name>CreateUserInitiatedInfo</name>
        <param>
          <type>content::NavigationHandle *</type>
          <declname>navigation_handle</declname>
        </param>
        <param>
          <type>PageLoadTracker *</type>
          <declname>committed_load</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="12737" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="12737" bodyend="12745"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a684c1e77bc23b7d1f701d95ce8ddac57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DoCanonicalizeRef</definition>
        <argsstring>(const CHAR *spec, const Component &amp;ref, CanonOutput *output, Component *out_ref)</argsstring>
        <name>DoCanonicalizeRef</name>
        <param>
          <type>const CHAR *</type>
          <declname>spec</declname>
        </param>
        <param>
          <type>const Component &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>CanonOutput *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>Component *</type>
          <declname>out_ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="13012" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="13012" bodyend="13040"/>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a07d8270b8758538d9838d925a2815460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CompileFromResponseCallback</definition>
        <argsstring>(const v8::FunctionCallbackInfo&lt; v8::Value &gt; &amp;args)</argsstring>
        <name>CompileFromResponseCallback</name>
        <param>
          <type>const v8::FunctionCallbackInfo&lt; v8::Value &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="13069" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="13069" bodyend="13131"/>
        <references refid="_c_w_e-79_8c_1af0dede2e50ca786eb3761b3df8331fea" compoundref="_c_w_e-79_8c" startline="10993" endline="10994">FetchDataLoaderAsWasmModule</references>
        <references refid="_c_w_e-79_8c_1ae4f5601f48e971c6f7b6881e1f63497a" compoundref="_c_w_e-79_8c" startline="11007" endline="11007">WasmDataLoaderClient</references>
        <referencedby refid="_c_w_e-79_8c_1adbfb4798b5614e7996b7efda0a04245a" compoundref="_c_w_e-79_8c" startline="13132" endline="13144">WasmCompileStreamingImpl</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1adbfb4798b5614e7996b7efda0a04245a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WasmCompileStreamingImpl</definition>
        <argsstring>(const v8::FunctionCallbackInfo&lt; v8::Value &gt; &amp;args)</argsstring>
        <name>WasmCompileStreamingImpl</name>
        <param>
          <type>const v8::FunctionCallbackInfo&lt; v8::Value &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="13132" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="13132" bodyend="13144"/>
        <references refid="_c_w_e-79_8c_1a07d8270b8758538d9838d925a2815460" compoundref="_c_w_e-79_8c" startline="13069" endline="13131">CompileFromResponseCallback</references>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1a24f27d728b4352f4744f45db74f69ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool UnpackOriginPermissions</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;origins_input, const PermissionSet &amp;required_permissions, const PermissionSet &amp;optional_permissions, bool allow_file_access, UnpackPermissionSetResult *result, std::string *error)</argsstring>
        <name>UnpackOriginPermissions</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>origins_input</declname>
        </param>
        <param>
          <type>const PermissionSet &amp;</type>
          <declname>required_permissions</declname>
        </param>
        <param>
          <type>const PermissionSet &amp;</type>
          <declname>optional_permissions</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_file_access</declname>
        </param>
        <param>
          <type>UnpackPermissionSetResult *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="13145" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="13145" bodyend="13193"/>
        <referencedby refid="_c_w_e-79_8c_1acf6535a5adccbc8c693ead30ec00e3b9" compoundref="_c_w_e-79_8c" startline="11082" endline="11108">UnpackPermissionSet</referencedby>
      </memberdef>
      <memberdef kind="function" id="_c_w_e-79_8c_1ad23a14ab3d294df5b9ec6bda779c6177" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool TokenExitsSVG</definition>
        <argsstring>(const CompactHTMLToken &amp;token)</argsstring>
        <name>TokenExitsSVG</name>
        <param>
          <type>const CompactHTMLToken &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/HC/Desktop/path/CWE-79.c" line="13351" column="1" bodyfile="C:/Users/HC/Desktop/path/CWE-79.c" bodystart="13351" bodyend="13354"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="_c_w_e-79_8c_1af12504bb905fef496e9befc7c98263e4" refkind="member"><highlight class="normal"><ref refid="_c_w_e-79_8c_1af12504bb905fef496e9befc7c98263e4" kindref="member">PHP_FUNCTION</ref>(header_register_callback)</highlight></codeline>
<codeline lineno="2"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3"><highlight class="normal"><sp/><sp/><sp/><sp/>zval<sp/>*callback_func;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*callback_name;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-416_8c_1a2ab631c1981c866e31877eb766412686" kindref="member">zend_parse_parameters</ref>(ZEND_NUM_ARGS()<sp/>TSRMLS_CC,<sp/></highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">,<sp/>&amp;callback_func)<sp/>==<sp/>FAILURE)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-416_8c_1a1d6ce13dd16483210fc7dedd215300e4" kindref="member">zend_is_callable</ref>(callback_func,<sp/>0,<sp/>&amp;callback_name<sp/>TSRMLS_CC))<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(callback_name);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RETURN_FALSE;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>efree(callback_name);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(callback_func))<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zval_ptr_dtor(&amp;SG(callback_func));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(fci_cache)<sp/>=<sp/>empty_fcall_info_cache;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(callback_func)<sp/>=<sp/>callback_func;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a21611e581374a9003fa96e3bceafee73" kindref="member">Z_ADDREF_P</ref>(SG(callback_func));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>RETURN_TRUE;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27" refid="_c_w_e-79_8c_1a0ae77578cd327b2a15f44cdef9fe57de" refkind="member"><highlight class="normal">SAPI_API<sp/><ref refid="_c_w_e-79_8c_1a0ae77578cd327b2a15f44cdef9fe57de" kindref="member">SAPI_POST_READER_FUNC</ref>(sapi_read_standard_form_data)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_bytes;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>allocated_bytes=SAPI_POST_BLOCK_SIZE+1;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((SG(post_max_size)<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>(SG(request_info).content_length<sp/>&gt;<sp/>SG(post_max_size)))<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>php_error_docref(NULL<sp/>TSRMLS_CC,<sp/>E_WARNING,<sp/></highlight><highlight class="stringliteral">&quot;POST<sp/>Content-Length<sp/>of<sp/>%ld<sp/>bytes<sp/>exceeds<sp/>the<sp/>limit<sp/>of<sp/>%ld<sp/>bytes&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).content_length,<sp/>SG(post_max_size));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).post_data<sp/>=<sp/>emalloc(allocated_bytes);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_bytes<sp/>=<sp/>sapi_module.read_post(SG(request_info).post_data+SG(read_post_bytes),<sp/>SAPI_POST_BLOCK_SIZE<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_bytes&lt;=0)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(read_post_bytes)<sp/>+=<sp/>read_bytes;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((SG(post_max_size)<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>(SG(read_post_bytes)<sp/>&gt;<sp/>SG(post_max_size)))<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>php_error_docref(NULL<sp/>TSRMLS_CC,<sp/>E_WARNING,<sp/></highlight><highlight class="stringliteral">&quot;Actual<sp/>POST<sp/>length<sp/>does<sp/>not<sp/>match<sp/>Content-Length,<sp/>and<sp/>exceeds<sp/>%ld<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>SG(post_max_size));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_bytes<sp/>&lt;<sp/>SAPI_POST_BLOCK_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(read_post_bytes)+SAPI_POST_BLOCK_SIZE<sp/>&gt;=<sp/>allocated_bytes)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated_bytes<sp/>=<sp/>SG(read_post_bytes)+SAPI_POST_BLOCK_SIZE+1;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).post_data<sp/>=<sp/>erealloc(SG(request_info).post_data,<sp/>allocated_bytes);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).post_data[SG(read_post_bytes)]<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">/*<sp/>terminating<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).post_data_length<sp/>=<sp/>SG(read_post_bytes);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60" refid="_c_w_e-79_8c_1ab119ddca7a4c92687819ee579e506daf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_c_w_e-79_8c_1ab119ddca7a4c92687819ee579e506daf" kindref="member">get_default_content_type</ref>(uint<sp/>prefix_len,<sp/>uint<sp/>*len<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mimetype,<sp/>*charset,<sp/>*content_type;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>mimetype_len,<sp/>charset_len;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(default_mimetype))<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mimetype<sp/>=<sp/>SG(default_mimetype);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mimetype_len<sp/>=<sp/>strlen(SG(default_mimetype));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mimetype<sp/>=<sp/>SAPI_DEFAULT_MIMETYPE;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mimetype_len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(SAPI_DEFAULT_MIMETYPE)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(default_charset))<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>charset<sp/>=<sp/>SG(default_charset);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>charset_len<sp/>=<sp/>strlen(SG(default_charset));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>charset<sp/>=<sp/>SAPI_DEFAULT_CHARSET;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>charset_len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(SAPI_DEFAULT_CHARSET)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*charset<sp/>&amp;&amp;<sp/>strncasecmp(mimetype,<sp/></highlight><highlight class="stringliteral">&quot;text/&quot;</highlight><highlight class="normal">,<sp/>5)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*len<sp/>=<sp/>prefix_len<sp/>+<sp/>mimetype_len<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;;<sp/>charset=&quot;</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>+<sp/>charset_len;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content_type<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)emalloc(*len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref><sp/>=<sp/>content_type<sp/>+<sp/>prefix_len;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>,<sp/>mimetype,<sp/>mimetype_len);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref><sp/>+=<sp/>mimetype_len;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>,<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>charset=&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;;<sp/>charset=&quot;</highlight><highlight class="normal">)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref><sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;;<sp/>charset=&quot;</highlight><highlight class="normal">)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>,<sp/>charset,<sp/>charset_len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*len<sp/>=<sp/>prefix_len<sp/>+<sp/>mimetype_len;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content_type<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)emalloc(*len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(content_type<sp/>+<sp/>prefix_len,<sp/>mimetype,<sp/>mimetype_len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>content_type;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98" refid="_c_w_e-79_8c_1a82a5ee55b73af4ddadffd205f922d1d0" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a82a5ee55b73af4ddadffd205f922d1d0" kindref="member">sapi_activate</ref>(TSRMLS_D)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>zend_llist_init(&amp;SG(sapi_headers).headers,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sapi_header_struct),<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/><ref refid="_c_w_e-79_8c_1a645b897be33948ad48fe52266772807c" kindref="member">sapi_free_header</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(sapi_headers).send_default_content_type<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/>SG(sapi_headers).http_response_code<sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(sapi_headers).http_status_line<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(sapi_headers).mimetype<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(headers_sent)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(callback_run)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(callback_func)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(read_post_bytes)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).post_data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).raw_post_data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).current_user<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).current_user_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).no_headers<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).post_entry<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).proto_num<sp/>=<sp/>1000;<sp/></highlight><highlight class="comment">/*<sp/>Default<sp/>to<sp/>HTTP<sp/>1.0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(global_request_time)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It&apos;s<sp/>possible<sp/>to<sp/>override<sp/>this<sp/>general<sp/>case<sp/>in<sp/>the<sp/>activate()<sp/>callback,<sp/>if<sp/>necessary.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(request_info).<ref refid="_c_w_e-20_8c_1aa31a1709fa11916c793adcd69392520b" kindref="member">request_method</ref><sp/>&amp;&amp;<sp/>!strcmp(SG(request_info).<ref refid="_c_w_e-20_8c_1aa31a1709fa11916c793adcd69392520b" kindref="member">request_method</ref>,<sp/></highlight><highlight class="stringliteral">&quot;HEAD&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).headers_only<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).headers_only<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(rfc1867_uploaded_files)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handle<sp/>request<sp/>method<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(server_context))<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PG(enable_post_data_reading)<sp/>&amp;&amp;<sp/>SG(request_info).<ref refid="_c_w_e-20_8c_1aa31a1709fa11916c793adcd69392520b" kindref="member">request_method</ref>)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(request_info).content_type<sp/>&amp;&amp;<sp/>!strcmp(SG(request_info).<ref refid="_c_w_e-20_8c_1aa31a1709fa11916c793adcd69392520b" kindref="member">request_method</ref>,<sp/></highlight><highlight class="stringliteral">&quot;POST&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HTTP<sp/>POST<sp/>may<sp/>contain<sp/>form<sp/>data<sp/>to<sp/>be<sp/>processed<sp/>into<sp/>variables</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>depending<sp/>on<sp/>given<sp/>content<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ad385fbe862b86bf1e688deef2a2fb743" kindref="member">sapi_read_post_data</ref>(TSRMLS_C);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Any<sp/>other<sp/>method<sp/>with<sp/>content<sp/>payload<sp/>will<sp/>fill<sp/>$HTTP_RAW_POST_DATA<sp/></highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>if<sp/>it<sp/>is<sp/>enabled<sp/>by<sp/>always_populate_raw_post_data.<sp/></highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>It&apos;s<sp/>up<sp/>to<sp/>the<sp/>webserver<sp/>to<sp/>decide<sp/>whether<sp/>to<sp/>allow<sp/>a<sp/>method<sp/>or<sp/>not.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).content_type_dup<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.default_post_reader)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.default_post_reader(TSRMLS_C);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).content_type_dup<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cookies<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).cookie_data<sp/>=<sp/>sapi_module.read_cookies(TSRMLS_C);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.activate)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.activate(TSRMLS_C);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.input_filter_init)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.input_filter_init(TSRMLS_C);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160" refid="_c_w_e-79_8c_1a5062d73437b7bc98f9351ef0988ca83c" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a5062d73437b7bc98f9351ef0988ca83c" kindref="member">sapi_activate_headers_only</ref>(TSRMLS_D)</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(request_info).headers_read<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).headers_read<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>zend_llist_init(&amp;SG(sapi_headers).headers,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sapi_header_struct),<sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/><ref refid="_c_w_e-79_8c_1a645b897be33948ad48fe52266772807c" kindref="member">sapi_free_header</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(sapi_headers).send_default_content_type<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SG(sapi_headers).http_response_code<sp/>=<sp/>200;<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(sapi_headers).http_status_line<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(sapi_headers).mimetype<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(read_post_bytes)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).post_data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).raw_post_data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).current_user<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).current_user_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).no_headers<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).post_entry<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(global_request_time)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>It&apos;s<sp/>possible<sp/>to<sp/>override<sp/>this<sp/>general<sp/>case<sp/>in<sp/>the<sp/>activate()<sp/>callback,<sp/></highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>if<sp/>necessary.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(request_info).<ref refid="_c_w_e-20_8c_1aa31a1709fa11916c793adcd69392520b" kindref="member">request_method</ref><sp/>&amp;&amp;<sp/>!strcmp(SG(request_info).<ref refid="_c_w_e-20_8c_1aa31a1709fa11916c793adcd69392520b" kindref="member">request_method</ref>,<sp/></highlight><highlight class="stringliteral">&quot;HEAD&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).headers_only<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).headers_only<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(server_context))<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).cookie_data<sp/>=<sp/>sapi_module.read_cookies(TSRMLS_C);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.activate)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.activate(TSRMLS_C);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.input_filter_init<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.input_filter_init(TSRMLS_C);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200" refid="_c_w_e-79_8c_1a1261563c5cc7a36a91deab4dcde6686b" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a1261563c5cc7a36a91deab4dcde6686b" kindref="member">sapi_add_header_ex</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*header_line,<sp/>uint<sp/>header_line_len,<sp/>zend_bool<sp/>duplicate,<sp/>zend_bool<sp/>replace<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>sapi_header_line<sp/>ctr<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>ctr.line<sp/>=<sp/>header_line;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>ctr.line_len<sp/>=<sp/>header_line_len;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="_c_w_e-79_8c_1ae3f072913063235163ebe7da439a415b" kindref="member">sapi_header_op</ref>(replace<sp/>?<sp/>SAPI_HEADER_REPLACE<sp/>:<sp/>SAPI_HEADER_ADD,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ctr<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!duplicate)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(header_line);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216" refid="_c_w_e-79_8c_1a40a6968974920b2c2493a7086a25971e" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a40a6968974920b2c2493a7086a25971e" kindref="member">sapi_apply_default_charset</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**mimetype,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*charset,<sp/>*newtype;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newlen;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>charset<sp/>=<sp/>SG(default_charset)<sp/>?<sp/>SG(default_charset)<sp/>:<sp/>SAPI_DEFAULT_CHARSET;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*mimetype<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*charset<sp/>&amp;&amp;<sp/>strncmp(*mimetype,<sp/></highlight><highlight class="stringliteral">&quot;text/&quot;</highlight><highlight class="normal">,<sp/>5)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>strstr(*mimetype,<sp/></highlight><highlight class="stringliteral">&quot;charset=&quot;</highlight><highlight class="normal">)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newlen<sp/>=<sp/>len<sp/>+<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;;charset=&quot;</highlight><highlight class="normal">)-1)<sp/>+<sp/>strlen(charset);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newtype<sp/>=<sp/>emalloc(newlen<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PHP_STRLCPY(newtype,<sp/>*mimetype,<sp/>newlen<sp/>+<sp/>1,<sp/>len);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strlcat(newtype,<sp/></highlight><highlight class="stringliteral">&quot;;charset=&quot;</highlight><highlight class="normal">,<sp/>newlen<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strlcat(newtype,<sp/>charset,<sp/>newlen<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(*mimetype);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*mimetype<sp/>=<sp/>newtype;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newlen;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236" refid="_c_w_e-79_8c_1a6f0db081ca92a1bd237148101de9fbe7" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a6f0db081ca92a1bd237148101de9fbe7" kindref="member">sapi_deactivate</ref>(TSRMLS_D)</highlight></codeline>
<codeline lineno="237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>zend_llist_destroy(&amp;SG(sapi_headers).headers);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(request_info).post_data)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(SG(request_info).post_data);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(server_context))<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sapi_module.read_post)<sp/>{<sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>sure<sp/>we&apos;ve<sp/>consumed<sp/>all<sp/>request<sp/>input<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dummy[SAPI_POST_BLOCK_SIZE];</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_bytes;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((read_bytes<sp/>=<sp/>sapi_module.read_post(dummy,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dummy)-1<sp/>TSRMLS_CC))<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(read_post_bytes)<sp/>+=<sp/>read_bytes;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(request_info).raw_post_data)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(SG(request_info).raw_post_data);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(request_info).auth_user)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(SG(request_info).auth_user);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(request_info).auth_password)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(SG(request_info).auth_password);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(request_info).auth_digest)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(SG(request_info).auth_digest);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(request_info).content_type_dup)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(SG(request_info).content_type_dup);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(request_info).current_user)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(SG(request_info).current_user);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.deactivate)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.deactivate(TSRMLS_C);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(rfc1867_uploaded_files))<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destroy_uploaded_files_hash(TSRMLS_C);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(sapi_headers).mimetype)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(SG(sapi_headers).mimetype);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(sapi_headers).mimetype<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aafc8dd4177475278b98f374a42e1b571" kindref="member">sapi_send_headers_free</ref>(TSRMLS_C);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(sapi_started)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(headers_sent)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(callback_run)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(callback_func))<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zval_ptr_dtor(&amp;SG(callback_func));</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).headers_read<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(global_request_time)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290" refid="_c_w_e-79_8c_1a7a0f9ce713c19f065fa08bababef22cb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a7a0f9ce713c19f065fa08bababef22cb" kindref="member">sapi_extract_response_code</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*header_line)</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code<sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ptr<sp/>=<sp/>header_line;<sp/>*ptr;<sp/>ptr++)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ptr<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*(ptr<sp/>+<sp/>1)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>atoi(ptr<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304" refid="_c_w_e-79_8c_1afe7b673392008f8c59d8364bec34b266" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1afe7b673392008f8c59d8364bec34b266" kindref="member">sapi_flush</ref>(TSRMLS_D)</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.flush)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.flush(SG(server_context));</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313" refid="_c_w_e-79_8c_1a76beaa29480d22196868abcbed8c47fa" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a76beaa29480d22196868abcbed8c47fa" kindref="member">sapi_force_http_10</ref>(TSRMLS_D)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.force_http_10)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sapi_module.force_http_10(TSRMLS_C);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321" refid="_c_w_e-79_8c_1a645b897be33948ad48fe52266772807c" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a645b897be33948ad48fe52266772807c" kindref="member">sapi_free_header</ref>(sapi_header_struct<sp/>*sapi_header)</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>efree(sapi_header-&gt;header);</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325" refid="_c_w_e-79_8c_1a3b154b34dca2d4b83c707d3d6197c14d" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_c_w_e-79_8c_1a3b154b34dca2d4b83c707d3d6197c14d" kindref="member">sapi_get_default_content_type</ref>(TSRMLS_D)</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>len;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ab119ddca7a4c92687819ee579e506daf" kindref="member">get_default_content_type</ref>(0,<sp/>&amp;len<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331" refid="_c_w_e-79_8c_1a2b1b9b75a1e9d432085b02cf2acb4121" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a2b1b9b75a1e9d432085b02cf2acb4121" kindref="member">sapi_get_default_content_type_header</ref>(sapi_header_struct<sp/>*default_header<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>len;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>default_header-&gt;header<sp/>=<sp/><ref refid="_c_w_e-79_8c_1ab119ddca7a4c92687819ee579e506daf" kindref="member">get_default_content_type</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Content-type:<sp/>&quot;</highlight><highlight class="normal">)-1,<sp/>&amp;len<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>default_header-&gt;header_len<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(default_header-&gt;header,<sp/></highlight><highlight class="stringliteral">&quot;Content-type:<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Content-type:<sp/>&quot;</highlight><highlight class="normal">)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339" refid="_c_w_e-79_8c_1ab529d8d8e7783e4c3c6529696ef7f8e6" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ab529d8d8e7783e4c3c6529696ef7f8e6" kindref="member">sapi_get_fd</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*fd<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.get_fd)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sapi_module.get_fd(fd<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347" refid="_c_w_e-79_8c_1a418ab4e18452533b62a0d9cf77e33310" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a418ab4e18452533b62a0d9cf77e33310" kindref="member">sapi_get_request_time</ref>(TSRMLS_D)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SG(global_request_time))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SG(global_request_time);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.get_request_time<sp/>&amp;&amp;<sp/>SG(server_context))<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(global_request_time)<sp/>=<sp/>sapi_module.get_request_time(TSRMLS_C);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>tp<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gettimeofday(&amp;tp,<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(global_request_time)<sp/>=<sp/>(double)(tp.tv_sec<sp/>+<sp/>tp.tv_usec<sp/>/<sp/>1000000.00);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(global_request_time)<sp/>=<sp/>(double)time(0);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SG(global_request_time);</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363" refid="_c_w_e-79_8c_1aa40efcf63322407a047c7e7f9ec7d90f" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>*<ref refid="_c_w_e-79_8c_1aa40efcf63322407a047c7e7f9ec7d90f" kindref="member">sapi_get_stat</ref>(TSRMLS_D)</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.get_stat)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sapi_module.get_stat(TSRMLS_C);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!SG(request_info).path_translated<sp/>||<sp/>(VCWD_STAT(SG(request_info).path_translated,<sp/>&amp;SG(global_stat))<sp/>==<sp/>-1))<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;SG(global_stat);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374" refid="_c_w_e-79_8c_1afdc27860cf844a774a88faac00c2a2cb" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1afdc27860cf844a774a88faac00c2a2cb" kindref="member">sapi_get_target_gid</ref>(gid_t<sp/>*obj<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.get_target_gid)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sapi_module.get_target_gid(obj<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382" refid="_c_w_e-79_8c_1ac453f3a3d1f91e80d7a264c775f3c87d" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ac453f3a3d1f91e80d7a264c775f3c87d" kindref="member">sapi_get_target_uid</ref>(uid_t<sp/>*obj<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.get_target_uid)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sapi_module.get_target_uid(obj<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390" refid="_c_w_e-79_8c_1a0cf806c94ce92a713ffa0016ca3451f8" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_c_w_e-79_8c_1a0cf806c94ce92a713ffa0016ca3451f8" kindref="member">sapi_getenv</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>name_len<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.getenv)<sp/>{<sp/></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>,<sp/>*tmp<sp/>=<sp/>sapi_module.getenv(name,<sp/>name_len<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref><sp/>=<sp/>estrdup(tmp);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.input_filter)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.input_filter(<ref refid="_c_w_e-125_8c_1a07440528847aa4badd589f7c57113524" kindref="member">PARSE_STRING</ref>,<sp/>name,<sp/>&amp;<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>,<sp/>strlen(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>),<sp/>NULL<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406" refid="_c_w_e-79_8c_1a726f754db4d97ca793c5200b2c05ea70" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a726f754db4d97ca793c5200b2c05ea70" kindref="member">sapi_globals_ctor</ref>(sapi_globals_struct<sp/>*sapi_globals<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(sapi_globals,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*sapi_globals));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>zend_hash_init_ex(&amp;sapi_globals-&gt;known_post_content_types,<sp/>5,<sp/>NULL,<sp/>NULL,<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>php_setup_sapi_content_types(TSRMLS_C);</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412" refid="_c_w_e-79_8c_1a8fd7c3044ae60a2800c97b83bce049a4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a8fd7c3044ae60a2800c97b83bce049a4" kindref="member">sapi_globals_dtor</ref>(sapi_globals_struct<sp/>*sapi_globals<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>zend_hash_destroy(&amp;sapi_globals-&gt;known_post_content_types);</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416" refid="_c_w_e-79_8c_1acca57d0b1d9f64d2867a38fdb841b879" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1acca57d0b1d9f64d2867a38fdb841b879" kindref="member">sapi_handle_post</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(request_info).post_entry<sp/>&amp;&amp;<sp/>SG(request_info).content_type_dup)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).post_entry-&gt;post_handler(SG(request_info).content_type_dup,<sp/>arg<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(request_info).post_data)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(SG(request_info).post_data);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).post_data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(SG(request_info).content_type_dup);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).content_type_dup<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428" refid="_c_w_e-79_8c_1ad42bb4c1037e286c3f894393ce47a953" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ad42bb4c1037e286c3f894393ce47a953" kindref="member">sapi_header_add_op</ref>(sapi_header_op_enum<sp/>op,<sp/>sapi_header_struct<sp/>*sapi_header<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sapi_module.header_handler<sp/>||</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SAPI_HEADER_ADD<sp/>&amp;<sp/>sapi_module.header_handler(sapi_header,<sp/>op,<sp/>&amp;SG(sapi_headers)<sp/>TSRMLS_CC)))<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op<sp/>==<sp/>SAPI_HEADER_REPLACE)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*colon_offset<sp/>=<sp/>strchr(sapi_header-&gt;header,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colon_offset)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sav<sp/>=<sp/>*colon_offset;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*colon_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aa0fe6f09d794f9cacb4f67042d5852bd" kindref="member">sapi_remove_header</ref>(&amp;SG(sapi_headers).headers,<sp/>sapi_header-&gt;header,<sp/>strlen(sapi_header-&gt;header));</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*colon_offset<sp/>=<sp/>sav;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zend_llist_add_element(&amp;SG(sapi_headers).headers,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>sapi_header);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a645b897be33948ad48fe52266772807c" kindref="member">sapi_free_header</ref>(sapi_header);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448" refid="_c_w_e-79_8c_1abd2fbb5753bebf9dabb6be87a4bf94ed" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1abd2fbb5753bebf9dabb6be87a4bf94ed" kindref="member">sapi_initialize_empty_request</ref>(TSRMLS_D)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(server_context)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).request_method<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).auth_digest<sp/>=<sp/>SG(request_info).auth_user<sp/>=<sp/>SG(request_info).auth_password<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).content_type_dup<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455" refid="_c_w_e-79_8c_1ad385fbe862b86bf1e688deef2a2fb743" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ad385fbe862b86bf1e688deef2a2fb743" kindref="member">sapi_read_post_data</ref>(TSRMLS_D)</highlight></codeline>
<codeline lineno="456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>sapi_post_entry<sp/>*post_entry;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>content_type_length<sp/>=<sp/>strlen(SG(request_info).content_type);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*content_type<sp/>=<sp/>estrndup(SG(request_info).content_type,<sp/>content_type_length);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>oldchar=0;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*post_reader_func)(TSRMLS_D)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dedicated<sp/>implementation<sp/>for<sp/>increased<sp/>performance:</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>Make<sp/>the<sp/>content<sp/>type<sp/>lowercase</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>Trim<sp/>descriptive<sp/>data,<sp/>stay<sp/>with<sp/>the<sp/>content-type<sp/>only</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>=content_type;<sp/><ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>&lt;content_type+content_type_length;<sp/><ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content_type_length<sp/>=<sp/><ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>-content_type;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldchar<sp/>=<sp/>*<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref><sp/>=<sp/>tolower(*<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>now<sp/>try<sp/>to<sp/>find<sp/>an<sp/>appropriate<sp/>POST<sp/>content<sp/>handler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(zend_hash_find(&amp;SG(known_post_content_types),<sp/>content_type,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content_type_length+1,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>&amp;post_entry)<sp/>==<sp/><ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>found<sp/>one,<sp/>register<sp/>it<sp/>for<sp/>use<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).post_entry<sp/>=<sp/>post_entry;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>post_reader_func<sp/>=<sp/>post_entry-&gt;post_reader;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fallback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).post_entry<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sapi_module.default_post_reader)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>default<sp/>reader<sp/>?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).content_type_dup<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.sapi_error(E_WARNING,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>content<sp/>type:<sp/><sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>content_type);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldchar)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>-1)<sp/>=<sp/>oldchar;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(request_info).content_type_dup<sp/>=<sp/>content_type;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(post_reader_func)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>post_reader_func(TSRMLS_C);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sapi_module.default_post_reader)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.default_post_reader(TSRMLS_C);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514" refid="_c_w_e-79_8c_1a6ac717a6be4db03361ac0a5eabf05bc9" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a6ac717a6be4db03361ac0a5eabf05bc9" kindref="member">sapi_register_default_post_reader</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*default_post_reader)(TSRMLS_D)<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="515"><highlight class="normal">{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(sapi_started)<sp/>&amp;&amp;<sp/>EG(in_execution))<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>sapi_module.default_post_reader<sp/>=<sp/>default_post_reader;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>;</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522" refid="_c_w_e-79_8c_1aa8580097e90ad555e1a8f9303f7cc4e3" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aa8580097e90ad555e1a8f9303f7cc4e3" kindref="member">sapi_register_input_filter</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*input_filter)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*var,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**val,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val_len,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*new_val_len<sp/>TSRMLS_DC),<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*input_filter_init)(TSRMLS_D)<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="523"><highlight class="normal">{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(sapi_started)<sp/>&amp;&amp;<sp/>EG(in_execution))<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>sapi_module.input_filter<sp/>=<sp/>input_filter;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>sapi_module.input_filter_init<sp/>=<sp/>input_filter_init;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>;</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531" refid="_c_w_e-79_8c_1af764f07578c1f0abf24f045a151d047f" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1af764f07578c1f0abf24f045a151d047f" kindref="member">sapi_register_post_entries</ref>(sapi_post_entry<sp/>*post_entries<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>sapi_post_entry<sp/>*<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>=post_entries;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>-&gt;content_type)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a6d0f7ff5a4f7cdbfb2bae7e7edd79747" kindref="member">sapi_register_post_entry</ref>(<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref><sp/>TSRMLS_CC)<sp/>==<sp/>FAILURE)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>++;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>;</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543" refid="_c_w_e-79_8c_1a6d0f7ff5a4f7cdbfb2bae7e7edd79747" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a6d0f7ff5a4f7cdbfb2bae7e7edd79747" kindref="member">sapi_register_post_entry</ref>(sapi_post_entry<sp/>*post_entry<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(sapi_started)<sp/>&amp;&amp;<sp/>EG(in_execution))<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>zend_hash_add(&amp;SG(known_post_content_types),</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>post_entry-&gt;content_type,<sp/>post_entry-&gt;content_type_len+1,</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>post_entry,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sapi_post_entry),<sp/>NULL);</highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="552" refid="_c_w_e-79_8c_1a2c1363ca2ef00abc8f49332ab7e24fec" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a2c1363ca2ef00abc8f49332ab7e24fec" kindref="member">sapi_register_treat_data</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*treat_data)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/>zval<sp/>*destArray<sp/>TSRMLS_DC)<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(sapi_started)<sp/>&amp;&amp;<sp/>EG(in_execution))<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>sapi_module.treat_data<sp/>=<sp/>treat_data;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>;</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560" refid="_c_w_e-79_8c_1aa0fe6f09d794f9cacb4f67042d5852bd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aa0fe6f09d794f9cacb4f67042d5852bd" kindref="member">sapi_remove_header</ref>(zend_llist<sp/>*l,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>uint<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>sapi_header_struct<sp/>*header;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>zend_llist_element<sp/>*next;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>zend_llist_element<sp/>*current=l-&gt;head;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header<sp/>=<sp/>(sapi_header_struct<sp/>*)(current-&gt;data);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>current-&gt;next;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header-&gt;header_len<sp/>&gt;<sp/>len<sp/>&amp;&amp;<sp/>header-&gt;header[len]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!strncasecmp(header-&gt;header,<sp/>name,<sp/>len))<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;prev)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;prev-&gt;next<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l-&gt;head<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next-&gt;prev<sp/>=<sp/>current-&gt;prev;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l-&gt;tail<sp/>=<sp/>current-&gt;prev;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a645b897be33948ad48fe52266772807c" kindref="member">sapi_free_header</ref>(header);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(current);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--l-&gt;count;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587" refid="_c_w_e-79_8c_1a6e690d49b0f6ac2345559b3599422829" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a6e690d49b0f6ac2345559b3599422829" kindref="member">sapi_run_header_callback</ref>(TSRMLS_D)</highlight></codeline>
<codeline lineno="588"><highlight class="normal">{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>error;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>zend_fcall_info<sp/>fci;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*callback_name<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*callback_error<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>zval<sp/>*retval_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-416_8c_1a08da0d69a01d565ca040bfdfbef84af6" kindref="member">zend_fcall_info_init</ref>(SG(callback_func),<sp/>0,<sp/>&amp;fci,<sp/>&amp;SG(fci_cache),<sp/>&amp;callback_name,<sp/>&amp;callback_error<sp/>TSRMLS_CC)<sp/>==<sp/><ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fci.retval_ptr_ptr<sp/>=<sp/>&amp;retval_ptr;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>zend_call_function(&amp;fci,<sp/>&amp;SG(fci_cache)<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error<sp/>==<sp/>FAILURE)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>callback_failed;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval_ptr)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zval_ptr_dtor(&amp;retval_ptr);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal">callback_failed:</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>php_error_docref(NULL<sp/>TSRMLS_CC,<sp/>E_WARNING,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>call<sp/>the<sp/>sapi_header_callback&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(callback_name)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(callback_name);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(callback_error)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(callback_error);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="616" refid="_c_w_e-79_8c_1abc1d494f64d5070f4ed9630e1a9007b5" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1abc1d494f64d5070f4ed9630e1a9007b5" kindref="member">sapi_send_headers</ref>(TSRMLS_D)</highlight></codeline>
<codeline lineno="617"><highlight class="normal">{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>FAILURE;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(headers_sent)<sp/>||<sp/>SG(request_info).no_headers<sp/>||<sp/>SG(callback_run))<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Success-oriented.<sp/><sp/>We<sp/>set<sp/>headers_sent<sp/>to<sp/>1<sp/>here<sp/>to<sp/>avoid<sp/>an<sp/>infinite<sp/>loop</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>case<sp/>of<sp/>an<sp/>error<sp/>situation.</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(sapi_headers).send_default_content_type<sp/>&amp;&amp;<sp/>sapi_module.send_headers)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_header_struct<sp/>default_header;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint<sp/>len;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(sapi_headers).mimetype<sp/>=<sp/><ref refid="_c_w_e-79_8c_1ab119ddca7a4c92687819ee579e506daf" kindref="member">get_default_content_type</ref>(0,<sp/>&amp;len<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_header.header_len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Content-type:<sp/>&quot;</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_header.header<sp/>=<sp/>emalloc(default_header.header_len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(default_header.header,<sp/></highlight><highlight class="stringliteral">&quot;Content-type:<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Content-type:<sp/>&quot;</highlight><highlight class="normal">)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(default_header.header<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Content-type:<sp/>&quot;</highlight><highlight class="normal">)<sp/>-<sp/>1,<sp/>SG(sapi_headers).mimetype,<sp/>len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ad42bb4c1037e286c3f894393ce47a953" kindref="member">sapi_header_add_op</ref>(SAPI_HEADER_ADD,<sp/>&amp;default_header<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(sapi_headers).send_default_content_type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(callback_func)<sp/>&amp;&amp;<sp/>!SG(callback_run))<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(callback_run)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a6e690d49b0f6ac2345559b3599422829" kindref="member">sapi_run_header_callback</ref>(TSRMLS_C);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(headers_sent)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.send_headers)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>sapi_module.send_headers(&amp;SG(sapi_headers)<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>SAPI_HEADER_DO_SEND;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(retval)<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAPI_HEADER_SENT_SUCCESSFULLY:</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAPI_HEADER_DO_SEND:<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_header_struct<sp/>http_status_line;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-416_8c_1aec4b0173bbfe004e02a2bb9ed4e37b81" kindref="member">buf</ref>[255];</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(sapi_headers).http_status_line)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http_status_line.header<sp/>=<sp/>SG(sapi_headers).http_status_line;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http_status_line.header_len<sp/>=<sp/>strlen(SG(sapi_headers).http_status_line);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http_status_line.header<sp/>=<sp/><ref refid="_c_w_e-416_8c_1aec4b0173bbfe004e02a2bb9ed4e37b81" kindref="member">buf</ref>;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http_status_line.header_len<sp/>=<sp/>slprintf(<ref refid="_c_w_e-416_8c_1aec4b0173bbfe004e02a2bb9ed4e37b81" kindref="member">buf</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="_c_w_e-416_8c_1aec4b0173bbfe004e02a2bb9ed4e37b81" kindref="member">buf</ref>),<sp/></highlight><highlight class="stringliteral">&quot;HTTP/1.0<sp/>%d<sp/>X&quot;</highlight><highlight class="normal">,<sp/>SG(sapi_headers).http_response_code);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.send_header(&amp;http_status_line,<sp/>SG(server_context)<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zend_llist_apply_with_argument(&amp;SG(sapi_headers).headers,<sp/>(llist_apply_with_arg_func_t)<sp/>sapi_module.send_header,<sp/>SG(server_context)<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SG(sapi_headers).send_default_content_type)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_header_struct<sp/>default_header;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a2b1b9b75a1e9d432085b02cf2acb4121" kindref="member">sapi_get_default_content_type_header</ref>(&amp;default_header<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.send_header(&amp;default_header,<sp/>SG(server_context)<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a645b897be33948ad48fe52266772807c" kindref="member">sapi_free_header</ref>(&amp;default_header);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.send_header(NULL,<sp/>SG(server_context)<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAPI_HEADER_SEND_FAILED:</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(headers_sent)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>FAILURE;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aafc8dd4177475278b98f374a42e1b571" kindref="member">sapi_send_headers_free</ref>(TSRMLS_C);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="691"><highlight class="normal">}</highlight></codeline>
<codeline lineno="692" refid="_c_w_e-79_8c_1aafc8dd4177475278b98f374a42e1b571" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aafc8dd4177475278b98f374a42e1b571" kindref="member">sapi_send_headers_free</ref>(TSRMLS_D)</highlight></codeline>
<codeline lineno="693"><highlight class="normal">{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(sapi_headers).http_status_line)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(SG(sapi_headers).http_status_line);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(sapi_headers).http_status_line<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699" refid="_c_w_e-79_8c_1afe712e68ddeb338d46b3fe044c1125be" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1afe712e68ddeb338d46b3fe044c1125be" kindref="member">sapi_shutdown</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="700"><highlight class="normal">{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ZTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>ts_free_id(sapi_globals_id);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a8fd7c3044ae60a2800c97b83bce049a4" kindref="member">sapi_globals_dtor</ref>(&amp;sapi_globals);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>reentrancy_shutdown();</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>virtual_cwd_shutdown();</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PHP_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>tsrm_win32_shutdown();</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="715" refid="_c_w_e-79_8c_1af25214bf5b246305c520dfdfd172f9ca" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1af25214bf5b246305c520dfdfd172f9ca" kindref="member">sapi_startup</ref>(sapi_module_struct<sp/>*sf)</highlight></codeline>
<codeline lineno="716"><highlight class="normal">{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ZEND_SIGNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>zend_signal_startup();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>sf-&gt;ini_entries<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>sapi_module<sp/>=<sp/>*sf;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ZTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>ts_allocate_id(&amp;sapi_globals_id,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sapi_globals_struct),<sp/>(ts_allocate_ctor)<sp/><ref refid="_c_w_e-79_8c_1a726f754db4d97ca793c5200b2c05ea70" kindref="member">sapi_globals_ctor</ref>,<sp/>(ts_allocate_dtor)<sp/><ref refid="_c_w_e-79_8c_1a8fd7c3044ae60a2800c97b83bce049a4" kindref="member">sapi_globals_dtor</ref>);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>PHP_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>_configthreadlocale(_ENABLE_PER_THREAD_LOCALE);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a726f754db4d97ca793c5200b2c05ea70" kindref="member">sapi_globals_ctor</ref>(&amp;sapi_globals);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>virtual_cwd_startup();<sp/></highlight><highlight class="comment">/*<sp/>Could<sp/>use<sp/>shutdown<sp/>to<sp/>free<sp/>the<sp/>main<sp/>cwd<sp/>but<sp/>it<sp/>would<sp/>just<sp/>slow<sp/>it<sp/>down<sp/>for<sp/>CGI<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PHP_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>tsrm_win32_startup();</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>reentrancy_startup();</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741" refid="_c_w_e-79_8c_1aa94a6dc7c048977e94da271a21cafee0" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aa94a6dc7c048977e94da271a21cafee0" kindref="member">sapi_terminate_process</ref>(TSRMLS_D)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.terminate_process)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.terminate_process(TSRMLS_C);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="746" refid="_c_w_e-79_8c_1a29d52b97c324bc1052d2665c71077522" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a29d52b97c324bc1052d2665c71077522" kindref="member">sapi_unregister_post_entry</ref>(sapi_post_entry<sp/>*post_entry<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="747"><highlight class="normal">{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(sapi_started)<sp/>&amp;&amp;<sp/>EG(in_execution))<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>zend_hash_del(&amp;SG(known_post_content_types),<sp/>post_entry-&gt;content_type,</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>post_entry-&gt;content_type_len+1);</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754" refid="_c_w_e-79_8c_1a0fd0e1dad1fc523bcae010064e0f2fb0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a0fd0e1dad1fc523bcae010064e0f2fb0" kindref="member">sapi_update_response_code</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncode<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>the<sp/>status<sp/>code<sp/>did<sp/>not<sp/>change,<sp/>we<sp/>do<sp/>not<sp/>want</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>change<sp/>the<sp/>status<sp/>line,<sp/>and<sp/>no<sp/>need<sp/>to<sp/>change<sp/>the<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(sapi_headers).http_response_code<sp/>==<sp/>ncode)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(sapi_headers).http_status_line)<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(SG(sapi_headers).http_status_line);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(sapi_headers).http_status_line<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>SG(sapi_headers).http_response_code<sp/>=<sp/>ncode;</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768" refid="_c_w_e-79_8c_1a4779c2d358d5d899f8692aa7eaaf0b0d" refkind="member"><highlight class="normal"><ref refid="_c_w_e-79_8c_1a4779c2d358d5d899f8692aa7eaaf0b0d" kindref="member">php_apache_sapi_header_handler</ref>(sapi_header_struct<sp/>*sapi_header,<sp/>sapi_header_op_enum<sp/>op,<sp/>sapi_headers_struct<sp/>*sapi_headers<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="769"><highlight class="normal">{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>php_struct<sp/>*ctx;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*val,<sp/>*ptr;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>SG(server_context);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(op)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAPI_HEADER_DELETE:</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_table_unset(ctx-&gt;r-&gt;headers_out,<sp/>sapi_header-&gt;header);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAPI_HEADER_DELETE_ALL:</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_table_clear(ctx-&gt;r-&gt;headers_out);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAPI_HEADER_ADD:</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAPI_HEADER_REPLACE:</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>strchr(sapi_header-&gt;header,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!val)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*val<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val++;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*val<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcasecmp(sapi_header-&gt;header,<sp/></highlight><highlight class="stringliteral">&quot;content-type&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;content_type)<sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(ctx-&gt;content_type);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;content_type<sp/>=<sp/>estrdup(val);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcasecmp(sapi_header-&gt;header,<sp/></highlight><highlight class="stringliteral">&quot;content-length&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_off_t<sp/>clen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(APR_SUCCESS<sp/>!=<sp/>apr_strtoff(&amp;clen,<sp/>val,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>NULL,<sp/>10))<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We&apos;ll<sp/>fall<sp/>back<sp/>to<sp/>strtol,<sp/>since<sp/>that&apos;s<sp/>what<sp/>we<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>do<sp/>anyway.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clen<sp/>=<sp/>(apr_off_t)<sp/>strtol(val,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>NULL,<sp/>10);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ap_set_content_length(ctx-&gt;r,<sp/>clen);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op<sp/>==<sp/>SAPI_HEADER_REPLACE)<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_table_set(ctx-&gt;r-&gt;headers_out,<sp/>sapi_header-&gt;header,<sp/>val);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_table_add(ctx-&gt;r-&gt;headers_out,<sp/>sapi_header-&gt;header,<sp/>val);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SAPI_HEADER_ADD;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828" refid="_c_w_e-79_8c_1a25aa6680196ac2a843ce754f75e98b14" refkind="member"><highlight class="normal"><ref refid="_c_w_e-79_8c_1a25aa6680196ac2a843ce754f75e98b14" kindref="member">php_apache_sapi_register_variables</ref>(zval<sp/>*track_vars_array<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="829"><highlight class="normal">{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>php_struct<sp/>*ctx<sp/>=<sp/>SG(server_context);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>apr_array_header_t<sp/>*arr<sp/>=<sp/>apr_table_elts(ctx-&gt;r-&gt;subprocess_env);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>,<sp/>*val;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_val_len;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>APR_ARRAY_FOREACH_OPEN(arr,<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>,<sp/>val)</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!val)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.input_filter(PARSE_SERVER,<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>,<sp/>&amp;val,<sp/>strlen(val),<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)&amp;new_val_len<sp/>TSRMLS_CC))<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>php_register_variable_safe(<ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>,<sp/>val,<sp/>new_val_len,<sp/>track_vars_array<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>APR_ARRAY_FOREACH_CLOSE()</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.input_filter(PARSE_SERVER,<sp/></highlight><highlight class="stringliteral">&quot;PHP_SELF&quot;</highlight><highlight class="normal">,<sp/>&amp;ctx-&gt;r-&gt;uri,<sp/>strlen(ctx-&gt;r-&gt;uri),<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)&amp;new_val_len<sp/>TSRMLS_CC))<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>php_register_variable_safe(</highlight><highlight class="stringliteral">&quot;PHP_SELF&quot;</highlight><highlight class="normal">,<sp/>ctx-&gt;r-&gt;uri,<sp/>new_val_len,<sp/>track_vars_array<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="848" refid="_c_w_e-79_8c_1aa54529e7edcd685d5676065d4db774f5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aa54529e7edcd685d5676065d4db774f5" kindref="member">oidc_auth_checker</ref>(request_rec<sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>for<sp/>anonymous<sp/>access<sp/>and<sp/>PASS<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;user<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strlen(r-&gt;user)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;user<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oidc_dir_cfg_unauth_action(r)<sp/>==<sp/>OIDC_UNAUTH_PASS)</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OK;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>set<sp/>of<sp/>claims<sp/>from<sp/>the<sp/>request<sp/>state<sp/>(they&apos;ve<sp/>been<sp/>set<sp/>in<sp/>the<sp/>authentication<sp/>part<sp/>earlier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>json_t<sp/>*claims<sp/>=<sp/>NULL,<sp/>*id_token<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a1b668b7a31cb502b8f93350b683f94c6" kindref="member">oidc_authz_get_claims_and_idtoken</ref>(r,<sp/>&amp;claims,<sp/>&amp;id_token);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>Require<sp/>statements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>apr_array_header_t<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reqs_arr<sp/>=<sp/>ap_requires(r);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>see<sp/>if<sp/>we<sp/>have<sp/>any<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>require_line<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reqs<sp/>=</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reqs_arr<sp/>?<sp/>(require_line<sp/>*)<sp/>reqs_arr-&gt;elts<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a7734f8b2c328f4fd387908b604be6d73" kindref="member">if</ref><sp/>(!reqs_arr)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_debug(r,</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;no<sp/>require<sp/>statements<sp/>found,<sp/>so<sp/>declining<sp/>to<sp/>perform<sp/>authorization.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DECLINED;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>merge<sp/>id_token<sp/>claims<sp/>(e.g.<sp/>&quot;iss&quot;)<sp/>in<sp/>to<sp/>claims<sp/>json<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(claims)</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_util_json_merge(r,<sp/>id_token,<sp/>claims);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dispatch<sp/>to<sp/>the<sp/>&lt;2.4<sp/>specific<sp/>authz<sp/>routine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>oidc_authz_worker22(r,<sp/>claims<sp/>?<sp/>claims<sp/>:<sp/>id_token,<sp/>reqs,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reqs_arr-&gt;nelts);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>cleanup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(claims)</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_decref(claims);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(id_token)</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_decref(id_token);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rc<sp/>==<sp/>HTTP_UNAUTHORIZED)<sp/>&amp;&amp;<sp/>ap_auth_type(r))</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>oidc_handle_unauthorized_user22(r);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="892" refid="_c_w_e-79_8c_1a489397adb4bb645c9d94e1861e265fa7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a489397adb4bb645c9d94e1861e265fa7" kindref="member">oidc_authenticate_user</ref>(request_rec<sp/>*r,<sp/>oidc_cfg<sp/>*c,</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_provider_t<sp/>*provider,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*original_url,</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*login_hint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*id_token_hint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prompt,</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*auth_request_params,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path_scope)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_debug(r,<sp/></highlight><highlight class="stringliteral">&quot;enter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(provider<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;metadata_dir<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aabd7e87d40ba94c684ed5ce90108c521" kindref="member">oidc_discovery</ref>(r,<sp/>c);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we&apos;re<sp/>not<sp/>using<sp/>multiple<sp/>OP&apos;s<sp/>configured<sp/>in<sp/>a<sp/>metadata<sp/>directory,<sp/>pick<sp/>the<sp/>statically<sp/>configured<sp/>OP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oidc_provider_static_config(r,<sp/>c,<sp/>&amp;provider)<sp/>==<sp/>FALSE)</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTTP_INTERNAL_SERVER_ERROR;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>generate<sp/>the<sp/>random<sp/>nonce<sp/>value<sp/>that<sp/>correlates<sp/>requests<sp/>and<sp/>responses<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nonce<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oidc_proto_generate_nonce(r,<sp/>&amp;nonce,<sp/>OIDC_PROTO_NONCE_LENGTH)<sp/>==<sp/>FALSE)</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTTP_INTERNAL_SERVER_ERROR;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pkce_state<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*code_challenge<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((oidc_util_spaced_string_contains(r-&gt;pool,<sp/>provider-&gt;response_type,</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_PROTO_CODE)<sp/>==<sp/>TRUE)<sp/>&amp;&amp;<sp/>(provider-&gt;pkce<sp/>!=<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>generate<sp/>the<sp/>code<sp/>verifier<sp/>value<sp/>that<sp/>correlates<sp/>authorization<sp/>requests<sp/>and<sp/>code<sp/>exchange<sp/>requests<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(provider-&gt;pkce-&gt;state(r,<sp/>&amp;pkce_state)<sp/>==<sp/>FALSE)</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTTP_INTERNAL_SERVER_ERROR;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>generate<sp/>the<sp/>PKCE<sp/>code<sp/>challenge<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(provider-&gt;pkce-&gt;challenge(r,<sp/>pkce_state,<sp/>&amp;code_challenge)<sp/>==<sp/>FALSE)</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTTP_INTERNAL_SERVER_ERROR;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>the<sp/>state<sp/>between<sp/>request/response<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_proto_state_t<sp/>*proto_state<sp/>=<sp/>oidc_proto_state_new();</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_proto_state_set_original_url(proto_state,<sp/>original_url);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_proto_state_set_original_method(proto_state,</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_original_request_method(r,<sp/>c,<sp/>TRUE));</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_proto_state_set_issuer(proto_state,<sp/>provider-&gt;issuer);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_proto_state_set_response_type(proto_state,<sp/>provider-&gt;response_type);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_proto_state_set_nonce(proto_state,<sp/>nonce);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_proto_state_set_timestamp_now(proto_state);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(provider-&gt;response_mode)</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_proto_state_set_response_mode(proto_state,</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>provider-&gt;response_mode);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prompt)</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_proto_state_set_prompt(proto_state,<sp/>prompt);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pkce_state)</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_proto_state_set_pkce_state(proto_state,<sp/>pkce_state);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>a<sp/>hash<sp/>value<sp/>that<sp/>fingerprints<sp/>the<sp/>browser<sp/>concatenated<sp/>with<sp/>the<sp/>random<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*state<sp/>=<sp/><ref refid="_c_w_e-79_8c_1ae2939eb43c3cbcd84a4f983fa915a7f8" kindref="member">oidc_get_browser_state_hash</ref>(r,<sp/>nonce);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="950"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>create<sp/>state<sp/>that<sp/>restores<sp/>the<sp/>context<sp/>when<sp/>the<sp/>authorization<sp/>response<sp/>comes<sp/>in</highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>cryptographically<sp/>bind<sp/>it<sp/>to<sp/>the<sp/>browser</highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a6e097fb4bca722db810e8467f62f6f9f" kindref="member">oidc_authorization_request_set_cookie</ref>(r,<sp/>c,<sp/>state,<sp/>proto_state);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>!=<sp/>HTTP_OK)<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_proto_state_destroy(proto_state);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>printout<sp/>errors<sp/>if<sp/>Cookie<sp/>settings<sp/>are<sp/>not<sp/>going<sp/>to<sp/>work</highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>TODO:<sp/>separate<sp/>this<sp/>code<sp/>out<sp/>into<sp/>its<sp/>own<sp/>function</highlight></codeline>
<codeline lineno="962"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>apr_uri_t<sp/>o_uri;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;o_uri,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(apr_uri_t));</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>apr_uri_t<sp/>r_uri;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;r_uri,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(apr_uri_t));</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>apr_uri_parse(r-&gt;pool,<sp/>original_url,<sp/>&amp;o_uri);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>apr_uri_parse(r-&gt;pool,<sp/>oidc_get_redirect_uri(r,<sp/>c),<sp/>&amp;r_uri);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((apr_strnatcmp(o_uri.scheme,<sp/>r_uri.scheme)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(apr_strnatcmp(r_uri.scheme,<sp/></highlight><highlight class="stringliteral">&quot;https&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_error(r,</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>URL<sp/>scheme<sp/>(%s)<sp/>of<sp/>the<sp/>configured<sp/>&quot;</highlight><highlight class="normal"><sp/>OIDCRedirectURI<sp/></highlight><highlight class="stringliteral">&quot;<sp/>does<sp/>not<sp/>match<sp/>the<sp/>URL<sp/>scheme<sp/>of<sp/>the<sp/>URL<sp/>being<sp/>accessed<sp/>(%s):<sp/>the<sp/>\&quot;state\&quot;<sp/>and<sp/>\&quot;session\&quot;<sp/>cookies<sp/>will<sp/>not<sp/>be<sp/>shared<sp/>between<sp/>the<sp/>two!&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_uri.scheme,<sp/>o_uri.scheme);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_proto_state_destroy(proto_state);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTTP_INTERNAL_SERVER_ERROR;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;cookie_domain<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(apr_strnatcmp(o_uri.hostname,<sp/>r_uri.hostname)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref><sp/>=<sp/>strstr(o_uri.hostname,<sp/>r_uri.hostname);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref><sp/>==<sp/>NULL)<sp/>||<sp/>(apr_strnatcmp(r_uri.hostname,<sp/><ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>)<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_error(r,</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>URL<sp/>hostname<sp/>(%s)<sp/>of<sp/>the<sp/>configured<sp/>&quot;</highlight><highlight class="normal"><sp/>OIDCRedirectURI<sp/></highlight><highlight class="stringliteral">&quot;<sp/>does<sp/>not<sp/>match<sp/>the<sp/>URL<sp/>hostname<sp/>of<sp/>the<sp/>URL<sp/>being<sp/>accessed<sp/>(%s):<sp/>the<sp/>\&quot;state\&quot;<sp/>and<sp/>\&quot;session\&quot;<sp/>cookies<sp/>will<sp/>not<sp/>be<sp/>shared<sp/>between<sp/>the<sp/>two!&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_uri.hostname,<sp/>o_uri.hostname);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_proto_state_destroy(proto_state);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTTP_INTERNAL_SERVER_ERROR;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!oidc_util_cookie_domain_valid(r_uri.hostname,<sp/>c-&gt;cookie_domain))<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_error(r,</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>domain<sp/>(%s)<sp/>configured<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>OIDCCookieDomain<sp/></highlight><highlight class="stringliteral">&quot;<sp/>does<sp/>not<sp/>match<sp/>the<sp/>URL<sp/>hostname<sp/>(%s)<sp/>of<sp/>the<sp/>URL<sp/>being<sp/>accessed<sp/>(%s):<sp/>setting<sp/>\&quot;state\&quot;<sp/>and<sp/>\&quot;session\&quot;<sp/>cookies<sp/>will<sp/>not<sp/>work!!&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;cookie_domain,<sp/>o_uri.hostname,<sp/>original_url);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_proto_state_destroy(proto_state);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTTP_INTERNAL_SERVER_ERROR;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>send<sp/>off<sp/>to<sp/>the<sp/>OpenID<sp/>Connect<sp/>Provider<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oidc_proto_authorization_request(r,<sp/>provider,<sp/>login_hint,</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_get_redirect_uri_iss(r,<sp/>c,<sp/>provider),<sp/>state,<sp/>proto_state,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id_token_hint,<sp/>code_challenge,<sp/>auth_request_params,<sp/>path_scope);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1004" refid="_c_w_e-79_8c_1a6e097fb4bca722db810e8467f62f6f9f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a6e097fb4bca722db810e8467f62f6f9f" kindref="member">oidc_authorization_request_set_cookie</ref>(request_rec<sp/>*r,<sp/>oidc_cfg<sp/>*c,</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*state,<sp/>oidc_proto_state_t<sp/>*proto_state)<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1007"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>create<sp/>a<sp/>cookie<sp/>consisting<sp/>of<sp/>8<sp/>elements:</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>random<sp/>value,<sp/>original<sp/>URL,<sp/>original<sp/>method,<sp/>issuer,<sp/>response_type,<sp/>response_mod,<sp/>prompt<sp/>and<sp/>timestamp</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>encoded<sp/>as<sp/>JSON,<sp/>encrypting<sp/>the<sp/>resulting<sp/>JSON<sp/>value</highlight></codeline>
<codeline lineno="1010"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cookieValue<sp/>=<sp/>oidc_proto_state_to_cookie(r,<sp/>c,<sp/>proto_state);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cookieValue<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTTP_INTERNAL_SERVER_ERROR;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1016"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>clean<sp/>expired<sp/>state<sp/>cookies<sp/>to<sp/>avoid<sp/>pollution<sp/>and<sp/>optionally</highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>try<sp/>to<sp/>avoid<sp/>the<sp/>number<sp/>of<sp/>state<sp/>cookies<sp/>exceeding<sp/>a<sp/>max</highlight></codeline>
<codeline lineno="1018"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_cookies<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a1fddc39e97b40b30e8bedbc308e8c2ec" kindref="member">oidc_clean_expired_state_cookies</ref>(r,<sp/>c,<sp/>NULL,</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_cfg_delete_oldest_state_cookies(c));</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_number_of_cookies<sp/>=<sp/>oidc_cfg_max_number_of_state_cookies(c);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((max_number_of_cookies<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(number_of_cookies<sp/>&gt;=<sp/>max_number_of_cookies))<sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_warn(r,</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>number<sp/>of<sp/>existing,<sp/>valid<sp/>state<sp/>cookies<sp/>(%d)<sp/>has<sp/>exceeded<sp/>the<sp/>limit<sp/>(%d),<sp/>no<sp/>additional<sp/>authorization<sp/>request<sp/>+<sp/>state<sp/>cookie<sp/>can<sp/>be<sp/>generated,<sp/>aborting<sp/>the<sp/>request&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number_of_cookies,<sp/>max_number_of_cookies);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1029"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>TODO:<sp/>the<sp/>html_send<sp/>code<sp/>below<sp/>caters<sp/>for<sp/>the<sp/>case<sp/>that<sp/>there&apos;s<sp/>a<sp/>user<sp/>behind<sp/>a</highlight></codeline>
<codeline lineno="1030"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>browser<sp/>generating<sp/>this<sp/>request,<sp/>rather<sp/>than<sp/>a<sp/>piece<sp/>of<sp/>XHR<sp/>code;<sp/>how<sp/>would<sp/>an</highlight></codeline>
<codeline lineno="1031"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>XHR<sp/>client<sp/>handle<sp/>this?</highlight></codeline>
<codeline lineno="1032"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>it<sp/>appears<sp/>that<sp/>sending<sp/>content<sp/>with<sp/>a<sp/>503<sp/>turns<sp/>the<sp/>HTTP<sp/>status<sp/>code</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>into<sp/>a<sp/>200<sp/>so<sp/>we&apos;ll<sp/>avoid<sp/>that<sp/>for<sp/>now:<sp/>the<sp/>user<sp/>will<sp/>see<sp/>Apache<sp/>specific</highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>readable<sp/>text<sp/>anyway</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1039"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>oidc_util_html_send_error(r,<sp/>c-&gt;error_template,</highlight></codeline>
<codeline lineno="1040"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Too<sp/>Many<sp/>Outstanding<sp/>Requests&quot;,</highlight></codeline>
<codeline lineno="1041"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_psprintf(r-&gt;pool,</highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;No<sp/>authentication<sp/>request<sp/>could<sp/>be<sp/>generated<sp/>since<sp/>there<sp/>are<sp/>too<sp/>many<sp/>outstanding<sp/>authentication<sp/>requests<sp/>already;<sp/>you<sp/>may<sp/>have<sp/>to<sp/>wait<sp/>up<sp/>to<sp/>%d<sp/>seconds<sp/>to<sp/>be<sp/>able<sp/>to<sp/>create<sp/>a<sp/>new<sp/>request&quot;,</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;state_timeout),</highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HTTP_SERVICE_UNAVAILABLE);</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTTP_SERVICE_UNAVAILABLE;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>assemble<sp/>the<sp/>cookie<sp/>name<sp/>for<sp/>the<sp/>state<sp/>cookie<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cookieName<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a91fcc5fc83318624a00f1f4fec481ada" kindref="member">oidc_get_state_cookie_name</ref>(r,<sp/>state);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>it<sp/>as<sp/>a<sp/>cookie<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_util_set_cookie(r,<sp/>cookieName,<sp/>cookieValue,<sp/>-1,</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;cookie_same_site<sp/>?<sp/>OIDC_COOKIE_EXT_SAME_SITE_LAX<sp/>:<sp/>NULL);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTTP_OK;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1059" refid="_c_w_e-79_8c_1a90362c938248d9bdccdb2d621c0f3247" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a90362c938248d9bdccdb2d621c0f3247" kindref="member">oidc_authorization_response_error</ref>(request_rec<sp/>*r,<sp/>oidc_cfg<sp/>*c,</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_proto_state_t<sp/>*proto_state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error,</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error_description)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prompt<sp/>=<sp/>oidc_proto_state_get_prompt(proto_state);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prompt<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prompt<sp/>=<sp/>apr_pstrdup(r-&gt;pool,<sp/>prompt);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_proto_state_destroy(proto_state);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((prompt<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(apr_strnatcmp(prompt,<sp/>OIDC_PROTO_PROMPT_NONE)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oidc_session_redirect_parent_window_to_logout(r,<sp/>c);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oidc_util_html_send_error(r,<sp/>c-&gt;error_template,</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_psprintf(r-&gt;pool,<sp/></highlight><highlight class="stringliteral">&quot;OpenID<sp/>Connect<sp/>Provider<sp/>error:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>error),</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_description,<sp/>DONE);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1074" refid="_c_w_e-79_8c_1adb2241e3fd0c387b0ce3147a6e1769bf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>apr_byte_t<sp/><ref refid="_c_w_e-79_8c_1adb2241e3fd0c387b0ce3147a6e1769bf" kindref="member">oidc_authorization_response_match_state</ref>(request_rec<sp/>*r,</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_cfg<sp/>*c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*state,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>oidc_provider_t<sp/>**provider,</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_proto_state_t<sp/>**proto_state)<sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_debug(r,<sp/></highlight><highlight class="stringliteral">&quot;enter<sp/>(state=%s)&quot;</highlight><highlight class="normal">,<sp/>state);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((state<sp/>==<sp/>NULL)<sp/>||<sp/>(apr_strnatcmp(state,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_error(r,<sp/></highlight><highlight class="stringliteral">&quot;state<sp/>parameter<sp/>is<sp/>not<sp/>set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>the<sp/>state<sp/>parameter<sp/>against<sp/>what<sp/>we<sp/>stored<sp/>in<sp/>a<sp/>cookie<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oidc_restore_proto_state(r,<sp/>c,<sp/>state,<sp/>proto_state)<sp/>==<sp/>FALSE)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_error(r,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>restore<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>*provider<sp/>=<sp/>oidc_get_provider_for_issuer(r,<sp/>c,</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_proto_state_get_issuer(*proto_state),<sp/>FALSE);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*provider<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1096" refid="_c_w_e-79_8c_1a36471b62f62dbf7d0c932e66946c9645" refkind="member"><highlight class="normal">authz_status<sp/><ref refid="_c_w_e-79_8c_1a36471b62f62dbf7d0c932e66946c9645" kindref="member">oidc_authz_checker</ref>(request_rec<sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*require_args,</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*parsed_require_args,</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_authz_match_claim_fn_type<sp/>match_claim_fn)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_debug(r,<sp/></highlight><highlight class="stringliteral">&quot;enter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>for<sp/>anonymous<sp/>access<sp/>and<sp/>PASS<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;user<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strlen(r-&gt;user)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;user<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oidc_dir_cfg_unauth_action(r)<sp/>==<sp/>OIDC_UNAUTH_PASS)</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AUTHZ_GRANTED;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>set<sp/>of<sp/>claims<sp/>from<sp/>the<sp/>request<sp/>state<sp/>(they&apos;ve<sp/>been<sp/>set<sp/>in<sp/>the<sp/>authentication<sp/>part<sp/>earlier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>json_t<sp/>*claims<sp/>=<sp/>NULL,<sp/>*id_token<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a1b668b7a31cb502b8f93350b683f94c6" kindref="member">oidc_authz_get_claims_and_idtoken</ref>(r,<sp/>&amp;claims,<sp/>&amp;id_token);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>merge<sp/>id_token<sp/>claims<sp/>(e.g.<sp/>&quot;iss&quot;)<sp/>in<sp/>to<sp/>claims<sp/>json<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(claims)</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_util_json_merge(r,<sp/>id_token,<sp/>claims);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dispatch<sp/>to<sp/>the<sp/>&gt;=2.4<sp/>specific<sp/>authz<sp/>routine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>authz_status<sp/>rc<sp/>=<sp/>oidc_authz_worker24(r,<sp/>claims<sp/>?<sp/>claims<sp/>:<sp/>id_token,</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>require_args,<sp/>match_claim_fn);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>cleanup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(claims)</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_decref(claims);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(id_token)</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_decref(id_token);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rc<sp/>==<sp/>AUTHZ_DENIED)<sp/>&amp;&amp;<sp/>ap_auth_type(r))</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>oidc_handle_unauthorized_user24(r);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1132" refid="_c_w_e-79_8c_1a306e6ff2fc1987cce19465fb1a6cdbae" refkind="member"><highlight class="normal">authz_status<sp/><ref refid="_c_w_e-79_8c_1a306e6ff2fc1987cce19465fb1a6cdbae" kindref="member">oidc_authz_checker_claim</ref>(request_rec<sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*require_args,</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*parsed_require_args)<sp/>{</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a36471b62f62dbf7d0c932e66946c9645" kindref="member">oidc_authz_checker</ref>(r,<sp/>require_args,<sp/>parsed_require_args,</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_authz_match_claim);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1137" refid="_c_w_e-79_8c_1ad20823486022b8fc78b9337f30611995" refkind="member"><highlight class="normal">authz_status<sp/><ref refid="_c_w_e-79_8c_1ad20823486022b8fc78b9337f30611995" kindref="member">oidc_authz_checker_claims_expr</ref>(request_rec<sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*require_args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*parsed_require_args)<sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a36471b62f62dbf7d0c932e66946c9645" kindref="member">oidc_authz_checker</ref>(r,<sp/>require_args,<sp/>parsed_require_args,<sp/>oidc_authz_match_claims_expr);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1140" refid="_c_w_e-79_8c_1a1b668b7a31cb502b8f93350b683f94c6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a1b668b7a31cb502b8f93350b683f94c6" kindref="member">oidc_authz_get_claims_and_idtoken</ref>(request_rec<sp/>*r,<sp/>json_t<sp/>**claims,</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_t<sp/>**id_token)<sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s_claims<sp/>=<sp/>oidc_request_state_get(r,</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_REQUEST_STATE_KEY_CLAIMS);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_claims<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_util_decode_json_object(r,<sp/>s_claims,<sp/>claims);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s_id_token<sp/>=<sp/>oidc_request_state_get(r,</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_REQUEST_STATE_KEY_IDTOKEN);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_id_token<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_util_decode_json_object(r,<sp/>s_id_token,<sp/>id_token);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1153" refid="_c_w_e-79_8c_1a8542054553d19b49e0af133369ff4063" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>apr_byte_t<sp/><ref refid="_c_w_e-79_8c_1a8542054553d19b49e0af133369ff4063" kindref="member">oidc_check_cookie_domain</ref>(request_rec<sp/>*r,<sp/>oidc_cfg<sp/>*cfg,</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_session_t<sp/>*session)<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c_cookie_domain<sp/>=</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg-&gt;cookie_domain<sp/>?</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg-&gt;cookie_domain<sp/>:<sp/>oidc_get_current_url_host(r);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s_cookie_domain<sp/>=<sp/>oidc_session_get_cookie_domain(r,<sp/>session);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s_cookie_domain<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(apr_strnatcmp(c_cookie_domain,<sp/>s_cookie_domain)<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_warn(r,</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;aborting:<sp/>detected<sp/>attempt<sp/>to<sp/>play<sp/>cookie<sp/>against<sp/>a<sp/>different<sp/>domain/host<sp/>than<sp/>issued<sp/>for!<sp/>(issued=%s,<sp/>current=%s)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_cookie_domain,<sp/>c_cookie_domain);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1169" refid="_c_w_e-79_8c_1aa44defc7aafe9832a0ba6cebc77324f9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aa44defc7aafe9832a0ba6cebc77324f9" kindref="member">oidc_check_max_session_duration</ref>(request_rec<sp/>*r,<sp/>oidc_cfg<sp/>*cfg,</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_session_t<sp/>*session)<sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>session<sp/>expiry<sp/>from<sp/>the<sp/>session<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>apr_time_t<sp/>session_expires<sp/>=<sp/>oidc_session_get_session_expires(r,<sp/>session);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>the<sp/>expire<sp/>timestamp<sp/>against<sp/>the<sp/>current<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(apr_time_now()<sp/>&gt;<sp/>session_expires)<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_warn(r,<sp/></highlight><highlight class="stringliteral">&quot;maximum<sp/>session<sp/>duration<sp/>exceeded<sp/>for<sp/>user:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>session-&gt;remote_user);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_session_kill(r,<sp/>session);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oidc_handle_unauthenticated_user(r,<sp/>cfg);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log<sp/>message<sp/>about<sp/>max<sp/>session<sp/>duration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_log_session_expires(r,<sp/></highlight><highlight class="stringliteral">&quot;session<sp/>max<sp/>lifetime&quot;</highlight><highlight class="normal">,<sp/>session_expires);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OK;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188" refid="_c_w_e-79_8c_1a806eaa919b4ebcb9f7dc8e3d1b28825a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a806eaa919b4ebcb9f7dc8e3d1b28825a" kindref="member">oidc_check_mixed_userid_oauth</ref>(request_rec<sp/>*r,<sp/>oidc_cfg<sp/>*c)<sp/>{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>bearer<sp/>access<sp/>token<sp/>from<sp/>the<sp/>Authorization<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*access_token<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oidc_oauth_get_bearer_token(r,<sp/>&amp;access_token)<sp/>==<sp/>TRUE)</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oidc_oauth_check_userid(r,<sp/>c,<sp/>access_token);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>bearer<sp/>token<sp/>found:<sp/>then<sp/>treat<sp/>this<sp/>as<sp/>a<sp/>regular<sp/>OIDC<sp/>browser<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a1092d07b51ba4b17990bc153522f850b" kindref="member">oidc_check_userid_openidc</ref>(r,<sp/>c);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1198" refid="_c_w_e-79_8c_1a516e20de501b601f44033f7a4add041a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a516e20de501b601f44033f7a4add041a" kindref="member">oidc_check_user_id</ref>(request_rec<sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_cfg<sp/>*c<sp/>=<sp/>ap_get_module_config(r-&gt;server-&gt;module_config,</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;auth_openidc_module);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log<sp/>some<sp/>stuff<sp/>about<sp/>the<sp/>incoming<sp/>HTTP<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_debug(r,<sp/></highlight><highlight class="stringliteral">&quot;incoming<sp/>request:<sp/>\&quot;%s?%s\&quot;,<sp/>ap_is_initial_req(r)=%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;parsed_uri.path,<sp/>r-&gt;args,<sp/>ap_is_initial_req(r));</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>see<sp/>if<sp/>any<sp/>authentication<sp/>has<sp/>been<sp/>defined<sp/>at<sp/>all<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ap_auth_type(r)<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DECLINED;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>see<sp/>if<sp/>we&apos;ve<sp/>configured<sp/>OpenID<sp/>Connect<sp/>user<sp/>authentication<sp/>for<sp/>this<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(apr_strnatcasecmp((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>ap_auth_type(r),</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_AUTH_TYPE_OPENID_CONNECT)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a1092d07b51ba4b17990bc153522f850b" kindref="member">oidc_check_userid_openidc</ref>(r,<sp/>c);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>see<sp/>if<sp/>we&apos;ve<sp/>configured<sp/>OAuth<sp/>2.0<sp/>access<sp/>control<sp/>for<sp/>this<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(apr_strnatcasecmp((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>ap_auth_type(r),</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_AUTH_TYPE_OPENID_OAUTH20)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oidc_oauth_check_userid(r,<sp/>c,<sp/>NULL);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>see<sp/>if<sp/>we&apos;ve<sp/>configured<sp/>&quot;mixed<sp/>mode&quot;<sp/>for<sp/>this<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(apr_strnatcasecmp((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>ap_auth_type(r),</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_AUTH_TYPE_OPENID_BOTH)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a806eaa919b4ebcb9f7dc8e3d1b28825a" kindref="member">oidc_check_mixed_userid_oauth</ref>(r,<sp/>c);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>is<sp/>not<sp/>for<sp/>us<sp/>but<sp/>for<sp/>some<sp/>other<sp/>handler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DECLINED;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1229" refid="_c_w_e-79_8c_1a1092d07b51ba4b17990bc153522f850b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a1092d07b51ba4b17990bc153522f850b" kindref="member">oidc_check_userid_openidc</ref>(request_rec<sp/>*r,<sp/>oidc_cfg<sp/>*c)<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oidc_get_redirect_uri(r,<sp/>c)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_error(r,</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;configuration<sp/>error:<sp/>the<sp/>authentication<sp/>type<sp/>is<sp/>set<sp/>to<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>OIDC_AUTH_TYPE_OPENID_CONNECT<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>but<sp/>&quot;</highlight><highlight class="normal"><sp/>OIDCRedirectURI<sp/></highlight><highlight class="stringliteral">&quot;<sp/>has<sp/>not<sp/>been<sp/>set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTTP_INTERNAL_SERVER_ERROR;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>this<sp/>is<sp/>a<sp/>sub-request<sp/>or<sp/>an<sp/>initial<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ap_is_initial_req(r))<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>OK;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>load<sp/>the<sp/>session<sp/>from<sp/>the<sp/>request<sp/>state;<sp/>this<sp/>will<sp/>be<sp/>a<sp/>new<sp/>&quot;empty&quot;<sp/>session<sp/>if<sp/>no<sp/>state<sp/>exists<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_session_t<sp/>*session<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_session_load(r,<sp/>&amp;session);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>see<sp/>if<sp/>the<sp/>initial<sp/>request<sp/>is<sp/>to<sp/>the<sp/>redirect<sp/>URI;<sp/>this<sp/>handles<sp/>potential<sp/>logout<sp/>too<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oidc_util_request_matches_url(r,<sp/>oidc_get_redirect_uri(r,<sp/>c)))<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>handle<sp/>request<sp/>to<sp/>the<sp/>redirect_uri<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>oidc_handle_redirect_uri_request(r,<sp/>c,<sp/>session);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>resources<sp/>allocated<sp/>for<sp/>the<sp/>session<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_session_free(r,<sp/>session);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initial<sp/>request<sp/>to<sp/>non-redirect<sp/>URI,<sp/>check<sp/>if<sp/>we<sp/>have<sp/>an<sp/>existing<sp/>session<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(session-&gt;remote_user<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>is<sp/>initial<sp/>request<sp/>and<sp/>we<sp/>already<sp/>have<sp/>a<sp/>session<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>oidc_handle_existing_session(r,<sp/>c,<sp/>session);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>resources<sp/>allocated<sp/>for<sp/>the<sp/>session<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_session_free(r,<sp/>session);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>strip<sp/>any<sp/>cookies<sp/>that<sp/>we<sp/>need<sp/>to<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_strip_cookies(r);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>resources<sp/>allocated<sp/>for<sp/>the<sp/>session<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_session_free(r,<sp/>session);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1276"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>else:<sp/>initial<sp/>request,<sp/>we<sp/>have<sp/>no<sp/>session<sp/>and<sp/>it<sp/>is<sp/>not<sp/>an<sp/>authorization<sp/>or</highlight></codeline>
<codeline lineno="1277"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>discovery<sp/>response:<sp/>just<sp/>hit<sp/>the<sp/>default<sp/>flow<sp/>for<sp/>unauthenticated<sp/>users</highlight></codeline>
<codeline lineno="1278"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>not<sp/>an<sp/>initial<sp/>request,<sp/>try<sp/>to<sp/>recycle<sp/>what<sp/>we&apos;ve<sp/>already<sp/>established<sp/>in<sp/>the<sp/>main<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;main<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;user<sp/>=<sp/>r-&gt;main-&gt;user;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;prev<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;user<sp/>=<sp/>r-&gt;prev-&gt;user;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;user<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>is<sp/>a<sp/>sub-request<sp/>and<sp/>we<sp/>have<sp/>a<sp/>session<sp/>(headers<sp/>will<sp/>have<sp/>been<sp/>scrubbed<sp/>and<sp/>set<sp/>already)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_debug(r,</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;recycling<sp/>user<sp/>&apos;%s&apos;<sp/>from<sp/>initial<sp/>request<sp/>for<sp/>sub-request&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;user);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>apparently<sp/>request<sp/>state<sp/>can<sp/>get<sp/>lost<sp/>in<sp/>sub-requests,<sp/>so<sp/>let&apos;s<sp/>see</highlight></codeline>
<codeline lineno="1296"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>if<sp/>we<sp/>need<sp/>to<sp/>restore<sp/>id_token<sp/>and/or<sp/>claims<sp/>from<sp/>the<sp/>session<sp/>cache</highlight></codeline>
<codeline lineno="1297"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s_id_token<sp/>=<sp/>oidc_request_state_get(r,</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_REQUEST_STATE_KEY_IDTOKEN);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_id_token<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_session_t<sp/>*session<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_session_load(r,<sp/>&amp;session);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ace0fddaa9ebc4456d6aa1f29ff8bdd7c" kindref="member">oidc_copy_tokens_to_request_state</ref>(r,<sp/>session,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>resources<sp/>allocated<sp/>for<sp/>the<sp/>session<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_session_free(r,<sp/>session);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>strip<sp/>any<sp/>cookies<sp/>that<sp/>we<sp/>need<sp/>to<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_strip_cookies(r);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OK;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>else:<sp/>not<sp/>initial<sp/>request,<sp/>but<sp/>we<sp/>could<sp/>not<sp/>find<sp/>a<sp/>session,<sp/>so:</highlight></codeline>
<codeline lineno="1318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>just<sp/>hit<sp/>the<sp/>default<sp/>flow<sp/>for<sp/>unauthenticated<sp/>users</highlight></codeline>
<codeline lineno="1319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oidc_handle_unauthenticated_user(r,<sp/>c);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1324" refid="_c_w_e-79_8c_1a1fddc39e97b40b30e8bedbc308e8c2ec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a1fddc39e97b40b30e8bedbc308e8c2ec" kindref="member">oidc_clean_expired_state_cookies</ref>(request_rec<sp/>*r,<sp/>oidc_cfg<sp/>*c,</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*currentCookieName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delete_oldest)<sp/>{</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_valid_state_cookies<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_state_cookies_t<sp/>*first<sp/>=<sp/>NULL,<sp/>*last<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cookie,<sp/>*tokenizerCtx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cookies<sp/>=<sp/>apr_pstrdup(r-&gt;pool,<sp/>oidc_util_hdr_in_cookie_get(r));</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cookies<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cookie<sp/>=<sp/>apr_strtok(cookies,<sp/>OIDC_STR_SEMI_COLON,<sp/>&amp;tokenizerCtx);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cookie<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*cookie<sp/>==<sp/>OIDC_CHAR_SPACE)</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cookie++;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(cookie,<sp/>OIDC_STATE_COOKIE_PREFIX)<sp/>==<sp/>cookie)<sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cookieName<sp/>=<sp/>cookie;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cookie<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>*cookie<sp/>!=<sp/>OIDC_CHAR_EQUAL)</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cookie++;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*cookie<sp/>==<sp/>OIDC_CHAR_EQUAL)<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cookie<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cookie++;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((currentCookieName<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(apr_strnatcmp(cookieName,<sp/>currentCookieName)</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_proto_state_t<sp/>*proto_state<sp/>=</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_proto_state_from_cookie(r,<sp/>c,<sp/>cookie);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proto_state<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_int_t<sp/>ts<sp/>=<sp/>oidc_proto_state_get_timestamp(</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proto_state);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(apr_time_now()<sp/>&gt;<sp/>ts<sp/>+<sp/>apr_time_from_sec(c-&gt;state_timeout))<sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_error(r,<sp/></highlight><highlight class="stringliteral">&quot;state<sp/>(%s)<sp/>has<sp/>expired&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cookieName);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_util_set_cookie(r,<sp/>cookieName,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0,</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>apr_pcalloc(r-&gt;pool,</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(oidc_state_cookies_t));</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>first;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last-&gt;next<sp/>=<sp/>apr_pcalloc(r-&gt;pool,</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(oidc_state_cookies_t));</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>last-&gt;next;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last-&gt;name<sp/>=<sp/>cookieName;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last-&gt;timestamp<sp/>=<sp/>ts;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number_of_valid_state_cookies++;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_proto_state_destroy(proto_state);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cookie<sp/>=<sp/>apr_strtok(NULL,<sp/>OIDC_STR_SEMI_COLON,<sp/>&amp;tokenizerCtx);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delete_oldest<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number_of_valid_state_cookies<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a65d6b4fa94707cdf566297b5f512939f" kindref="member">oidc_delete_oldest_state_cookies</ref>(r,</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number_of_valid_state_cookies,<sp/>c-&gt;max_number_of_state_cookies,</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>number_of_valid_state_cookies;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1386" refid="_c_w_e-79_8c_1a0b1160ee37762d297b186934fd10e622" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a0b1160ee37762d297b186934fd10e622" kindref="member">oidc_content_handler</ref>(request_rec<sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_cfg<sp/>*c<sp/>=<sp/>ap_get_module_config(r-&gt;server-&gt;module_config,</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;auth_openidc_module);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>DECLINED;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oidc_util_request_matches_url(r,<sp/>oidc_get_redirect_uri(r,<sp/>c)))<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oidc_util_request_has_parameter(r,</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_REDIRECT_URI_REQUEST_INFO))<sp/>{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_session_t<sp/>*session<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_session_load(r,<sp/>&amp;session);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>handle<sp/>request<sp/>for<sp/>session<sp/>info<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>oidc_handle_info_request(r,<sp/>c,<sp/>session);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>resources<sp/>allocated<sp/>for<sp/>the<sp/>session<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_session_free(r,<sp/>session);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1410" refid="_c_w_e-79_8c_1ace0fddaa9ebc4456d6aa1f29ff8bdd7c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ace0fddaa9ebc4456d6aa1f29ff8bdd7c" kindref="member">oidc_copy_tokens_to_request_state</ref>(request_rec<sp/>*r,</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_session_t<sp/>*session,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**s_id_token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**s_claims)<sp/>{</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*id_token<sp/>=<sp/>oidc_session_get_idtoken_claims(r,<sp/>session);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*claims<sp/>=<sp/>oidc_session_get_userinfo_claims(r,<sp/>session);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_debug(r,<sp/></highlight><highlight class="stringliteral">&quot;id_token=%s<sp/>claims=%s&quot;</highlight><highlight class="normal">,<sp/>id_token,<sp/>claims);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(id_token<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_request_state_set(r,<sp/>OIDC_REQUEST_STATE_KEY_IDTOKEN,<sp/>id_token);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_id_token<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s_id_token<sp/>=<sp/>id_token;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(claims<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_request_state_set(r,<sp/>OIDC_REQUEST_STATE_KEY_CLAIMS,<sp/>claims);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_claims<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s_claims<sp/>=<sp/>claims;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1430" refid="_c_w_e-79_8c_1a65d6b4fa94707cdf566297b5f512939f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a65d6b4fa94707cdf566297b5f512939f" kindref="member">oidc_delete_oldest_state_cookies</ref>(request_rec<sp/>*r,</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_valid_state_cookies,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_number_of_state_cookies,</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_state_cookies_t<sp/>*first)<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_state_cookies_t<sp/>*cur<sp/>=<sp/>NULL,<sp/>*prev<sp/>=<sp/>NULL,<sp/>*prev_oldest<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*oldest<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(number_of_valid_state_cookies<sp/>&gt;=<sp/>max_number_of_state_cookies)<sp/>{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldest<sp/>=<sp/>first;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_oldest<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>first;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur<sp/>=<sp/>first-&gt;next;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cur)<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cur-&gt;timestamp<sp/>&lt;<sp/>oldest-&gt;timestamp))<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldest<sp/>=<sp/>cur;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_oldest<sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>cur;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur<sp/>=<sp/>cur-&gt;next;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_warn(r,</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;deleting<sp/>oldest<sp/>state<sp/>cookie:<sp/>%s<sp/>(time<sp/>until<sp/>expiry<sp/>%&quot;</highlight><highlight class="normal"><sp/>APR_TIME_T_FMT<sp/></highlight><highlight class="stringliteral">&quot;<sp/>seconds)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldest-&gt;name,<sp/>apr_time_sec(oldest-&gt;timestamp<sp/>-<sp/>apr_time_now()));</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_util_set_cookie(r,<sp/>oldest-&gt;name,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev_oldest)</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_oldest-&gt;next<sp/>=<sp/>oldest-&gt;next;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>first-&gt;next;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number_of_valid_state_cookies--;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>number_of_valid_state_cookies;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1460" refid="_c_w_e-79_8c_1aabd7e87d40ba94c684ed5ce90108c521" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aabd7e87d40ba94c684ed5ce90108c521" kindref="member">oidc_discovery</ref>(request_rec<sp/>*r,<sp/>oidc_cfg<sp/>*cfg)<sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_debug(r,<sp/></highlight><highlight class="stringliteral">&quot;enter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>obtain<sp/>the<sp/>URL<sp/>we&apos;re<sp/>currently<sp/>accessing,<sp/>to<sp/>be<sp/>stored<sp/>in<sp/>the<sp/>state/session<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*current_url<sp/>=<sp/>oidc_get_current_url(r);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*method<sp/>=<sp/>oidc_original_request_method(r,<sp/>cfg,<sp/>FALSE);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>generate<sp/>CSRF<sp/>token<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*csrf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oidc_proto_generate_nonce(r,<sp/>&amp;csrf,<sp/>8)<sp/>==<sp/>FALSE)</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTTP_INTERNAL_SERVER_ERROR;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path_scopes<sp/>=<sp/>oidc_dir_cfg_path_scope(r);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path_auth_request_params<sp/>=<sp/>oidc_dir_cfg_path_auth_request_params(r);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*discover_url<sp/>=<sp/>oidc_cfg_dir_discover_url(r);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>see<sp/>if<sp/>there&apos;s<sp/>an<sp/>external<sp/>discovery<sp/>page<sp/>configured<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(discover_url<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>yes,<sp/>assemble<sp/>the<sp/>parameters<sp/>for<sp/>external<sp/>discovery<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*url<sp/>=<sp/>apr_psprintf(r-&gt;pool,<sp/></highlight><highlight class="stringliteral">&quot;%s%s%s=%s&amp;%s=%s&amp;%s=%s&amp;%s=%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>discover_url,</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strchr(discover_url,<sp/>OIDC_CHAR_QUERY)<sp/>!=<sp/>NULL<sp/>?</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_STR_AMP<sp/>:</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_STR_QUERY,</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_DISC_RT_PARAM,<sp/>oidc_util_escape_string(r,<sp/>current_url),</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_DISC_RM_PARAM,<sp/>method,</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_DISC_CB_PARAM,</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_util_escape_string(r,<sp/>oidc_get_redirect_uri(r,<sp/>cfg)),</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_CSRF_NAME,<sp/>oidc_util_escape_string(r,<sp/>csrf));</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path_scopes<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>url<sp/>=<sp/>apr_psprintf(r-&gt;pool,<sp/></highlight><highlight class="stringliteral">&quot;%s&amp;%s=%s&quot;</highlight><highlight class="normal">,<sp/>url,<sp/>OIDC_DISC_SC_PARAM,</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_util_escape_string(r,<sp/>path_scopes));</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path_auth_request_params<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>url<sp/>=<sp/>apr_psprintf(r-&gt;pool,<sp/></highlight><highlight class="stringliteral">&quot;%s&amp;%s=%s&quot;</highlight><highlight class="normal">,<sp/>url,<sp/>OIDC_DISC_AR_PARAM,</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_util_escape_string(r,<sp/>path_auth_request_params));</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>log<sp/>what<sp/>we&apos;re<sp/>about<sp/>to<sp/>do<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_debug(r,<sp/></highlight><highlight class="stringliteral">&quot;redirecting<sp/>to<sp/>external<sp/>discovery<sp/>page:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>url);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>CSRF<sp/>cookie<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_util_set_cookie(r,<sp/>OIDC_CSRF_NAME,<sp/>csrf,<sp/>-1,</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg-&gt;cookie_same_site<sp/>?</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_COOKIE_EXT_SAME_SITE_STRICT<sp/>:</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>see<sp/>if<sp/>we<sp/>need<sp/>to<sp/>preserve<sp/>POST<sp/>parameters<sp/>through<sp/>Javascript/HTML5<sp/>storage<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oidc_post_preserve_javascript(r,<sp/>url,<sp/>NULL,<sp/>NULL)<sp/>==<sp/>TRUE)</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DONE;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>the<sp/>actual<sp/>redirect<sp/>to<sp/>an<sp/>external<sp/>discovery<sp/>page<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_util_hdr_out_location_set(r,<sp/>url);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTTP_MOVED_TEMPORARILY;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>a<sp/>list<sp/>of<sp/>all<sp/>providers<sp/>configured<sp/>in<sp/>the<sp/>metadata<sp/>directory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>apr_array_header_t<sp/>*arr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oidc_metadata_list(r,<sp/>cfg,<sp/>&amp;arr)<sp/>==<sp/>FALSE)</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oidc_util_html_send_error(r,<sp/>cfg-&gt;error_template,</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Configuration<sp/>Error&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;No<sp/>configured<sp/>providers<sp/>found,<sp/>contact<sp/>your<sp/>administrator&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HTTP_UNAUTHORIZED);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>assemble<sp/>a<sp/>where-are-you-from<sp/>IDP<sp/>discovery<sp/>HTML<sp/>page<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;h3&gt;Select<sp/>your<sp/>OpenID<sp/>Connect<sp/>Identity<sp/>Provider&lt;/h3&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>list<sp/>all<sp/>configured<sp/>providers<sp/>in<sp/>there<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr-&gt;nelts;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*issuer<sp/>=<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)<sp/>arr-&gt;elts)[i];</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*href<sp/>=<sp/>apr_psprintf(r-&gt;pool,</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s?%s=%s&amp;amp;%s=%s&amp;amp;%s=%s&amp;amp;%s=%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_get_redirect_uri(r,<sp/>cfg),<sp/>OIDC_DISC_OP_PARAM,</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_util_escape_string(r,<sp/>issuer),</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_DISC_RT_PARAM,<sp/>oidc_util_escape_string(r,<sp/>current_url),</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_DISC_RM_PARAM,<sp/>method,</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_CSRF_NAME,<sp/>csrf);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path_scopes<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>href<sp/>=<sp/>apr_psprintf(r-&gt;pool,<sp/></highlight><highlight class="stringliteral">&quot;%s&amp;amp;%s=%s&quot;</highlight><highlight class="normal">,<sp/>href,</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_DISC_SC_PARAM,<sp/>oidc_util_escape_string(r,<sp/>path_scopes));</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path_auth_request_params<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>href<sp/>=<sp/>apr_psprintf(r-&gt;pool,<sp/></highlight><highlight class="stringliteral">&quot;%s&amp;amp;%s=%s&quot;</highlight><highlight class="normal">,<sp/>href,</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_DISC_AR_PARAM,</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_util_escape_string(r,<sp/>path_auth_request_params));</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*display<sp/>=</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(strstr(issuer,<sp/></highlight><highlight class="stringliteral">&quot;https://&quot;</highlight><highlight class="normal">)<sp/>==<sp/>NULL)<sp/>?</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_pstrdup(r-&gt;pool,<sp/>issuer)<sp/>:</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_pstrdup(r-&gt;pool,<sp/>issuer<sp/>+<sp/>strlen(</highlight><highlight class="stringliteral">&quot;https://&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>strip<sp/>port<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>point<sp/>back<sp/>to<sp/>the<sp/>redirect_uri,<sp/>where<sp/>the<sp/>selection<sp/>is<sp/>handled,<sp/>with<sp/>an<sp/>IDP<sp/>selection<sp/>and<sp/>return_to<sp/>URL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>apr_psprintf(r-&gt;pool,<sp/></highlight><highlight class="stringliteral">&quot;%s&lt;p&gt;&lt;a<sp/>href=\&quot;%s\&quot;&gt;%s&lt;/a&gt;&lt;/p&gt;\n&quot;</highlight><highlight class="normal">,<sp/>s,<sp/>href,</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>add<sp/>an<sp/>option<sp/>to<sp/>enter<sp/>an<sp/>account<sp/>or<sp/>issuer<sp/>name<sp/>for<sp/>dynamic<sp/>OP<sp/>discovery<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>apr_psprintf(r-&gt;pool,<sp/></highlight><highlight class="stringliteral">&quot;%s&lt;form<sp/>method=\&quot;get\&quot;<sp/>action=\&quot;%s\&quot;&gt;\n&quot;</highlight><highlight class="normal">,<sp/>s,</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_get_redirect_uri(r,<sp/>cfg));</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>apr_psprintf(r-&gt;pool,</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s&lt;p&gt;&lt;input<sp/>type=\&quot;hidden\&quot;<sp/>name=\&quot;%s\&quot;<sp/>value=\&quot;%s\&quot;&gt;&lt;p&gt;\n&quot;</highlight><highlight class="normal">,<sp/>s,</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_DISC_RT_PARAM,<sp/>current_url);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>apr_psprintf(r-&gt;pool,</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s&lt;p&gt;&lt;input<sp/>type=\&quot;hidden\&quot;<sp/>name=\&quot;%s\&quot;<sp/>value=\&quot;%s\&quot;&gt;&lt;p&gt;\n&quot;</highlight><highlight class="normal">,<sp/>s,</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_DISC_RM_PARAM,<sp/>method);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>apr_psprintf(r-&gt;pool,</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s&lt;p&gt;&lt;input<sp/>type=\&quot;hidden\&quot;<sp/>name=\&quot;%s\&quot;<sp/>value=\&quot;%s\&quot;&gt;&lt;p&gt;\n&quot;</highlight><highlight class="normal">,<sp/>s,</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_CSRF_NAME,<sp/>csrf);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path_scopes<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>apr_psprintf(r-&gt;pool,</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s&lt;p&gt;&lt;input<sp/>type=\&quot;hidden\&quot;<sp/>name=\&quot;%s\&quot;<sp/>value=\&quot;%s\&quot;&gt;&lt;p&gt;\n&quot;</highlight><highlight class="normal">,<sp/>s,</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_DISC_SC_PARAM,<sp/>path_scopes);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path_auth_request_params<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>apr_psprintf(r-&gt;pool,</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s&lt;p&gt;&lt;input<sp/>type=\&quot;hidden\&quot;<sp/>name=\&quot;%s\&quot;<sp/>value=\&quot;%s\&quot;&gt;&lt;p&gt;\n&quot;</highlight><highlight class="normal">,<sp/>s,</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_DISC_AR_PARAM,<sp/>path_auth_request_params);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_psprintf(r-&gt;pool,</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s&lt;p&gt;Or<sp/>enter<sp/>your<sp/>account<sp/>name<sp/>(eg.<sp/>&amp;quot;mike@seed.gluu.org&amp;quot;,<sp/>or<sp/>an<sp/>IDP<sp/>identifier<sp/>(eg.<sp/>&amp;quot;mitreid.org&amp;quot;):&lt;/p&gt;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>apr_psprintf(r-&gt;pool,</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s&lt;p&gt;&lt;input<sp/>type=\&quot;text\&quot;<sp/>name=\&quot;%s\&quot;<sp/>value=\&quot;%s\&quot;&gt;&lt;/p&gt;\n&quot;</highlight><highlight class="normal">,<sp/>s,</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OIDC_DISC_OP_PARAM,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>apr_psprintf(r-&gt;pool,</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s&lt;p&gt;&lt;input<sp/>type=\&quot;submit\&quot;<sp/>value=\&quot;Submit\&quot;&gt;&lt;/p&gt;\n&quot;</highlight><highlight class="normal">,<sp/>s);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>apr_psprintf(r-&gt;pool,<sp/></highlight><highlight class="stringliteral">&quot;%s&lt;/form&gt;\n&quot;</highlight><highlight class="normal">,<sp/>s);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_util_set_cookie(r,<sp/>OIDC_CSRF_NAME,<sp/>csrf,<sp/>-1,</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg-&gt;cookie_same_site<sp/>?<sp/>OIDC_COOKIE_EXT_SAME_SITE_STRICT<sp/>:<sp/>NULL);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*javascript<sp/>=<sp/>NULL,<sp/>*javascript_method<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*html_head<sp/>=</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;style<sp/>type=\&quot;text/css\&quot;&gt;body<sp/>{text-align:<sp/>center}&lt;/style&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oidc_post_preserve_javascript(r,<sp/>NULL,<sp/>&amp;javascript,</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;javascript_method)<sp/>==<sp/>TRUE)</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>html_head<sp/>=<sp/>apr_psprintf(r-&gt;pool,<sp/></highlight><highlight class="stringliteral">&quot;%s%s&quot;</highlight><highlight class="normal">,<sp/>html_head,<sp/>javascript);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>now<sp/>send<sp/>the<sp/>HTML<sp/>contents<sp/>to<sp/>the<sp/>user<sp/>agent<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oidc_util_html_send(r,<sp/></highlight><highlight class="stringliteral">&quot;OpenID<sp/>Connect<sp/>Provider<sp/>Discovery&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>html_head,<sp/>javascript_method,<sp/>s,<sp/>DONE);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1609" refid="_c_w_e-79_8c_1ae2939eb43c3cbcd84a4f983fa915a7f8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_c_w_e-79_8c_1ae2939eb43c3cbcd84a4f983fa915a7f8" kindref="member">oidc_get_browser_state_hash</ref>(request_rec<sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nonce)<sp/>{</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_debug(r,<sp/></highlight><highlight class="stringliteral">&quot;enter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>helper<sp/>to<sp/>hold<sp/>to<sp/>header<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>hash<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>apr_sha1_ctx_t<sp/>sha1;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>hash<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>apr_sha1_init(&amp;sha1);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>X-FORWARDED-FOR<sp/>header<sp/>value<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref><sp/>=<sp/>oidc_util_hdr_in_x_forwarded_for_get(r);</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>we<sp/>have<sp/>a<sp/>value<sp/>for<sp/>this<sp/>header,<sp/>concat<sp/>it<sp/>to<sp/>the<sp/>hash<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_sha1_update(&amp;sha1,<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>,<sp/>strlen(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>));</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>USER-AGENT<sp/>header<sp/>value<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref><sp/>=<sp/>oidc_util_hdr_in_user_agent_get(r);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>we<sp/>have<sp/>a<sp/>value<sp/>for<sp/>this<sp/>header,<sp/>concat<sp/>it<sp/>to<sp/>the<sp/>hash<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_sha1_update(&amp;sha1,<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>,<sp/>strlen(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>));</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>remote<sp/>client<sp/>IP<sp/>address<sp/>or<sp/>host<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1635"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>remotehost_is_ip;</highlight></codeline>
<codeline lineno="1636"><highlight class="comment"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>ap_get_remote_host(r-&gt;connection,<sp/>r-&gt;per_dir_config,</highlight></codeline>
<codeline lineno="1637"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REMOTE_NOLOOKUP,<sp/>&amp;remotehost_is_ip);</highlight></codeline>
<codeline lineno="1638"><highlight class="comment"><sp/><sp/><sp/><sp/>apr_sha1_update(&amp;sha1,<sp/>value,<sp/>strlen(value));</highlight></codeline>
<codeline lineno="1639"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>concat<sp/>the<sp/>nonce<sp/>parameter<sp/>to<sp/>the<sp/>hash<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>apr_sha1_update(&amp;sha1,<sp/>nonce,<sp/>strlen(nonce));</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>concat<sp/>the<sp/>token<sp/>binding<sp/>ID<sp/>if<sp/>present<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref><sp/>=<sp/>oidc_util_get_provided_token_binding_id(r);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_debug(r,</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Provided<sp/>Token<sp/>Binding<sp/>ID<sp/>environment<sp/>variable<sp/>found;<sp/>adding<sp/>its<sp/>value<sp/>to<sp/>the<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_sha1_update(&amp;sha1,<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>,<sp/>strlen(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>));</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>finalize<sp/>the<sp/>hash<sp/>input<sp/>and<sp/>calculate<sp/>the<sp/>resulting<sp/>hash<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-787_8c_1ad74ed21140b565a25e2fcfe9d9cff7c4" kindref="member">hash</ref>[OIDC_SHA1_LEN];</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>apr_sha1_final(<ref refid="_c_w_e-787_8c_1ad74ed21140b565a25e2fcfe9d9cff7c4" kindref="member">hash</ref>,<sp/>&amp;sha1);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>base64url-encode<sp/>the<sp/>resulting<sp/>hash<sp/>and<sp/>return<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*result<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_base64url_encode(r,<sp/>&amp;result,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="_c_w_e-787_8c_1ad74ed21140b565a25e2fcfe9d9cff7c4" kindref="member">hash</ref>,<sp/>OIDC_SHA1_LEN,<sp/>TRUE);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1661" refid="_c_w_e-79_8c_1a2d9cae6aa994a49c90c8a10fecd9b9ad" refkind="member"><highlight class="normal">apr_byte_t<sp/><ref refid="_c_w_e-79_8c_1a2d9cae6aa994a49c90c8a10fecd9b9ad" kindref="member">oidc_get_provider_from_session</ref>(request_rec<sp/>*r,<sp/>oidc_cfg<sp/>*c,</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_session_t<sp/>*session,<sp/>oidc_provider_t<sp/>**provider)<sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_debug(r,<sp/></highlight><highlight class="stringliteral">&quot;enter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>issuer<sp/>value<sp/>from<sp/>the<sp/>session<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*issuer<sp/>=<sp/>oidc_session_get_issuer(r,<sp/>session);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(issuer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_error(r,<sp/></highlight><highlight class="stringliteral">&quot;session<sp/>corrupted:<sp/>no<sp/>issuer<sp/>found<sp/>in<sp/>session&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>provider<sp/>info<sp/>associated<sp/>with<sp/>the<sp/>issuer<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>oidc_provider_t<sp/>*<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref><sp/>=<sp/>oidc_get_provider_for_issuer(r,<sp/>c,<sp/>issuer,<sp/>FALSE);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_error(r,<sp/></highlight><highlight class="stringliteral">&quot;session<sp/>corrupted:<sp/>no<sp/>provider<sp/>found<sp/>for<sp/>issuer:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>issuer);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>*provider<sp/>=<sp/><ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1685" refid="_c_w_e-79_8c_1ada56cccc1a839510ef2fb374e900c7a3" refkind="member"><highlight class="normal">apr_byte_t<sp/><ref refid="_c_w_e-79_8c_1ada56cccc1a839510ef2fb374e900c7a3" kindref="member">oidc_get_remote_user</ref>(request_rec<sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*claim_name,</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*reg_exp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*replace,<sp/>json_t<sp/>*json,</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**request_user)<sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>claim<sp/>value<sp/>from<sp/>the<sp/>JSON<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>json_t<sp/>*username<sp/>=<sp/>json_object_get(json,<sp/>claim_name);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((username<sp/>==<sp/>NULL)<sp/>||<sp/>(!json_is_string(username)))<sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_warn(r,<sp/></highlight><highlight class="stringliteral">&quot;JSON<sp/>object<sp/>did<sp/>not<sp/>contain<sp/>a<sp/>\&quot;%s\&quot;<sp/>string&quot;</highlight><highlight class="normal">,<sp/>claim_name);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>*request_user<sp/>=<sp/>apr_pstrdup(r-&gt;pool,<sp/>json_string_value(username));</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reg_exp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error_str<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(replace<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oidc_util_regexp_first_match(r-&gt;pool,<sp/>*request_user,<sp/>reg_exp,</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>request_user,<sp/>&amp;error_str)<sp/>==<sp/>FALSE)<sp/>{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_error(r,<sp/></highlight><highlight class="stringliteral">&quot;oidc_util_regexp_first_match<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_str);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*request_user<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oidc_util_regexp_substitute(r-&gt;pool,<sp/>*request_user,<sp/>reg_exp,</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replace,<sp/>request_user,<sp/>&amp;error_str)<sp/>==<sp/>FALSE)<sp/>{</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oidc_error(r,<sp/></highlight><highlight class="stringliteral">&quot;oidc_util_regexp_substitute<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>error_str);</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*request_user<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1724" refid="_c_w_e-79_8c_1a91fcc5fc83318624a00f1f4fec481ada" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_c_w_e-79_8c_1a91fcc5fc83318624a00f1f4fec481ada" kindref="member">oidc_get_state_cookie_name</ref>(request_rec<sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*state)<sp/>{</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apr_psprintf(r-&gt;pool,<sp/></highlight><highlight class="stringliteral">&quot;%s%s&quot;</highlight><highlight class="normal">,<sp/>OIDC_STATE_COOKIE_PREFIX,<sp/>state);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowViews::Activate()<sp/>{</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/>window_-&gt;Activate();</highlight></codeline>
<codeline lineno="1729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShellWindowViews::CanMaximize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShellWindowViews::CanResize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowViews::Close()<sp/>{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/>window_-&gt;Close();</highlight></codeline>
<codeline lineno="1738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal">ShellWindow*<sp/>ShellWindow::CreateImpl(Profile*<sp/>profile,</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>extensions::Extension*<sp/><ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>,</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL&amp;<sp/>url,</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ShellWindow::CreateParams&amp;<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ShellWindowViews(profile,<sp/><ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>,<sp/>url,<sp/>params);</highlight></codeline>
<codeline lineno="1744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowViews::Deactivate()<sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/>window_-&gt;Deactivate();</highlight></codeline>
<codeline lineno="1747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowViews::DeleteDelegate()<sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/>OnNativeClose();</highlight></codeline>
<codeline lineno="1750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowViews::FlashFrame(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flash)<sp/>{</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/>window_-&gt;FlashFrame(flash);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal">gfx::Rect<sp/>ShellWindowViews::GetBounds()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window_-&gt;GetWindowScreenBounds();</highlight></codeline>
<codeline lineno="1756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal">std::string<sp/>ShellWindowFrameView::GetClassName()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kViewClassName;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal">views::View*<sp/>ShellWindowViews::GetContentsView()<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal">gfx::Size<sp/>ShellWindowViews::GetMaximumSize()<sp/>{</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maximum_size_;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal">gfx::Size<sp/>ShellWindowViews::GetMinimumSize()<sp/>{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>minimum_size_;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1769"><highlight class="normal">gfx::NativeWindow<sp/>ShellWindowViews::GetNativeWindow()<sp/>{</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window_-&gt;GetNativeWindow();</highlight></codeline>
<codeline lineno="1771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal">gfx::Size<sp/>ShellWindowFrameView::GetPreferredSize()<sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/>gfx::Size<sp/>pref<sp/>=<sp/>frame_-&gt;client_view()-&gt;GetPreferredSize();</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/>gfx::Rect<sp/>bounds(0,<sp/>0,<sp/>pref.width(),<sp/>pref.height());</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frame_-&gt;non_client_view()-&gt;GetWindowBoundsForClientBounds(</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bounds).size();</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1778"><highlight class="normal">gfx::Rect<sp/>ShellWindowViews::GetRestoredBounds()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window_-&gt;GetRestoredBounds();</highlight></codeline>
<codeline lineno="1780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal">views::Widget*<sp/>ShellWindowViews::GetWidget()<sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window_;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>views::Widget*<sp/>ShellWindowViews::GetWidget()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window_;</highlight></codeline>
<codeline lineno="1786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowFrameView::GetWindowMask(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gfx::Size&amp;<sp/><ref refid="_c_w_e-22_8c_1ac325ee2e130c33214318b5dea0073d47" kindref="member">size</ref>,</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfx::Path*<sp/>window_mask)<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1790"><highlight class="normal">string16<sp/>ShellWindowViews::GetWindowTitle()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetTitle();</highlight></codeline>
<codeline lineno="1792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShellWindowViews::IsActive()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window_-&gt;IsActive();</highlight></codeline>
<codeline lineno="1795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShellWindowViews::IsAlwaysOnTop()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShellWindowViews::IsFullscreen()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window_-&gt;IsFullscreen();</highlight></codeline>
<codeline lineno="1801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShellWindowViews::IsFullscreenOrPending()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_fullscreen_;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShellWindowViews::IsMaximized()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window_-&gt;IsMaximized();</highlight></codeline>
<codeline lineno="1807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShellWindowViews::IsMinimized()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window_-&gt;IsMinimized();</highlight></codeline>
<codeline lineno="1810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowViews::Layout()<sp/>{</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/>DCHECK(web_view_);</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/>web_view_-&gt;SetBounds(0,<sp/>0,<sp/>width(),<sp/>height());</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/>OnViewWasResized();</highlight></codeline>
<codeline lineno="1815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowViews::Minimize()<sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/>window_-&gt;Minimize();</highlight></codeline>
<codeline lineno="1818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ShellWindowFrameView::NonClientHitTest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gfx::Point&amp;<sp/>point)<sp/>{</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame_-&gt;IsFullscreen())</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTCLIENT;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USE_ASH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/>gfx::Rect<sp/>expanded_bounds<sp/>=<sp/>bounds();</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outside_bounds<sp/>=<sp/>ui::GetDisplayLayout()<sp/>==<sp/>ui::LAYOUT_TOUCH<sp/>?</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kResizeOutsideBoundsSizeTouch<sp/>:</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kResizeOutsideBoundsSize;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/>expanded_bounds.Inset(-outside_bounds,<sp/>-outside_bounds);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!expanded_bounds.Contains(point))</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTNOWHERE;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>can_ever_resize<sp/>=<sp/>frame_-&gt;widget_delegate()<sp/>?</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame_-&gt;widget_delegate()-&gt;CanResize()<sp/>:</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resize_border<sp/>=</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame_-&gt;IsMaximized()<sp/>||<sp/>frame_-&gt;IsFullscreen()<sp/>?<sp/>0<sp/>:</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kResizeInsideBoundsSize;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame_component<sp/>=<sp/>GetHTComponentForFrame(point,</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resize_border,</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resize_border,</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kResizeAreaCornerSize,</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kResizeAreaCornerSize,</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_ever_resize);</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame_component<sp/>!=<sp/>HTNOWHERE)</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frame_component;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>client_component<sp/>=<sp/>frame_-&gt;client_view()-&gt;NonClientHitTest(point);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(client_component<sp/>!=<sp/>HTNOWHERE)</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>client_component;</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(close_button_-&gt;visible()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>close_button_-&gt;GetMirroredBounds().Contains(point))</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTCLOSE;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTCAPTION;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowViews::OnViewWasResized()<sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)<sp/>&amp;&amp;<sp/>!defined(USE_AURA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/>DCHECK(window_);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/>DCHECK(web_view_);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/>gfx::Size<sp/>sz<sp/>=<sp/>web_view_-&gt;size();</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>sz.height(),<sp/>width<sp/>=<sp/>sz.width();</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/>gfx::Path<sp/>path;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window_-&gt;IsMaximized()<sp/>||<sp/>window_-&gt;IsFullscreen())<sp/>{</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>path.addRect(0,<sp/>0,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_custom_frame_)<sp/>{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path.moveTo(0,<sp/>radius);</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path.lineTo(radius,<sp/>0);</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path.lineTo(width<sp/>-<sp/>radius,<sp/>0);</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path.lineTo(width,<sp/>radius);</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path.moveTo(0,<sp/>0);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path.lineTo(width,<sp/>0);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>path.lineTo(width,<sp/>height<sp/>-<sp/>radius<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>path.lineTo(width<sp/>-<sp/>radius<sp/>-<sp/>1,<sp/>height);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/>path.lineTo(radius<sp/>+<sp/>1,<sp/>height);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>path.lineTo(0,<sp/>height<sp/>-<sp/>radius<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>path.close();</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/>SetWindowRgn(web_contents()-&gt;GetNativeView(),<sp/>path.CreateNativeRegion(),<sp/>1);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/>SkRegion*<sp/>rgn<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SkRegion;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!window_-&gt;IsFullscreen())<sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(caption_region_.Get())</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rgn-&gt;op(*caption_region_.Get(),<sp/>SkRegion::kUnion_Op);</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!window_-&gt;IsMaximized())<sp/>{</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_custom_frame_)</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rgn-&gt;op(0,<sp/>0,<sp/>width,<sp/>kResizeInsideBoundsSize,<sp/>SkRegion::kUnion_Op);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rgn-&gt;op(0,<sp/>0,<sp/>kResizeInsideBoundsSize,<sp/>height,<sp/>SkRegion::kUnion_Op);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rgn-&gt;op(width<sp/>-<sp/>kResizeInsideBoundsSize,<sp/>0,<sp/>width,<sp/>height,</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SkRegion::kUnion_Op);</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rgn-&gt;op(0,<sp/>height<sp/>-<sp/>kResizeInsideBoundsSize,<sp/>width,<sp/>height,</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SkRegion::kUnion_Op);</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/>web_contents()-&gt;GetRenderViewHost()-&gt;GetView()-&gt;SetClickthroughRegion(rgn);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowViews::Restore()<sp/>{</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/>window_-&gt;Restore();</highlight></codeline>
<codeline lineno="1905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowViews::SetBounds(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gfx::Rect&amp;<sp/>bounds)<sp/>{</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/>GetWidget()-&gt;SetBounds(bounds);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowViews::SetDraggableRegion(SkRegion*<sp/>region)<sp/>{</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/>caption_region_.Set(region);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/>OnViewWasResized();</highlight></codeline>
<codeline lineno="1912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowViews::SetFullscreen(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fullscreen)<sp/>{</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/>is_fullscreen_<sp/>=<sp/>fullscreen;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/>window_-&gt;SetFullscreen(fullscreen);</highlight></codeline>
<codeline lineno="1916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1917"><highlight class="normal">ShellWindowViews::ShellWindowViews(Profile*<sp/>profile,</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>extensions::Extension*<sp/><ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>,</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL&amp;<sp/>url,</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ShellWindow::CreateParams&amp;<sp/>win_params)</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>ShellWindow(profile,<sp/><ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>,<sp/>url),</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>web_view_(NULL),</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>is_fullscreen_(false),</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>use_custom_frame_(</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win_params.frame<sp/>==<sp/>ShellWindow::CreateParams::FRAME_NONE)<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/>window_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>views::Widget;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/>views::Widget::InitParams<sp/>params(views::Widget::InitParams::TYPE_WINDOW);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/>params.delegate<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/>params.remove_standard_frame<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/>minimum_size_<sp/>=<sp/>win_params.minimum_size;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/>maximum_size_<sp/>=<sp/>win_params.maximum_size;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/>window_-&gt;Init(params);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/>gfx::Rect<sp/>window_bounds<sp/>=</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>window_-&gt;non_client_view()-&gt;GetWindowBoundsForClientBounds(</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win_params.bounds);</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/>window_-&gt;SetBounds(window_bounds);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)<sp/>&amp;&amp;<sp/>!defined(USE_AURA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/>std::string<sp/>app_name<sp/>=<sp/>web_app::GenerateApplicationNameFromExtensionId(</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>-&gt;id());</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/>ui::win::SetAppIdForWindow(</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ShellIntegration::GetAppModelIdForProfile(UTF8ToWide(app_name),</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;GetPath()),</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetWidget()-&gt;GetTopLevelWidget()-&gt;GetNativeWindow());</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/>OnViewWasResized();</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/>window_-&gt;Show();</highlight></codeline>
<codeline lineno="1948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowViews::Show()<sp/>{</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window_-&gt;IsVisible())<sp/>{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/>window_-&gt;Activate();</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/>window_-&gt;Show();</highlight></codeline>
<codeline lineno="1956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowViews::ShowInactive()<sp/>{</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window_-&gt;IsVisible())</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/>window_-&gt;ShowInactive();</highlight></codeline>
<codeline lineno="1961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowViews::UpdateWindowTitle()<sp/>{</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/>window_-&gt;UpdateWindowTitle();</highlight></codeline>
<codeline lineno="1964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowViews::ViewHierarchyChanged(</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_add,<sp/>views::View<sp/>*parent,<sp/>views::View<sp/>*child)<sp/>{</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_add<sp/>&amp;&amp;<sp/>child<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>web_view_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>views::WebView(NULL);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/>AddChildView(web_view_);</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/>web_view_-&gt;SetWebContents(web_contents());</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/>ShellWindowFrameView::~ShellWindowFrameView()<sp/>{</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal">ShellWindowViews::~ShellWindowViews()<sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/>web_view_-&gt;SetWebContents(NULL);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UserActivityDetector::AddObserver(UserActivityObserver*<sp/>observer)<sp/>{</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/>observers_.AddObserver(observer);</highlight></codeline>
<codeline lineno="1980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1981"><highlight class="normal">ui::GestureStatus<sp/>UserActivityDetector::PreHandleGestureEvent(</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/>aura::Window*<sp/>target,</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/>aura::GestureEvent*<sp/>event)<sp/>{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/>MaybeNotify();</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::GESTURE_STATUS_UNKNOWN;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>UserActivityDetector::PreHandleKeyEvent(aura::Window*<sp/>target,</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aura::KeyEvent*<sp/>event)<sp/>{</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/>MaybeNotify();</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1992"><highlight class="normal">ui::TouchStatus<sp/>UserActivityDetector::PreHandleTouchEvent(</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>aura::Window*<sp/>target,</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/>aura::TouchEvent*<sp/>event)<sp/>{</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/>MaybeNotify();</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::TOUCH_STATUS_UNKNOWN;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UserActivityDetector::RemoveObserver(UserActivityObserver*<sp/>observer)<sp/>{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/>observers_.RemoveObserver(observer);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2001"><highlight class="normal">UserActivityDetector::UserActivityDetector()<sp/>{</highlight></codeline>
<codeline lineno="2002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2003"><highlight class="normal">UserActivityDetector::~UserActivityDetector()<sp/>{</highlight></codeline>
<codeline lineno="2004"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2005" refid="_c_w_e-79_8c_1a35e82b296d5566bb0ce02ddbfe9b27f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a35e82b296d5566bb0ce02ddbfe9b27f3" kindref="member">AdvanceTime</ref>(base::TimeDelta<sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>now_<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/>detector_-&gt;set_now_for_test(now_);</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2009" refid="_c_w_e-79_8c_1aa435057b3a088067e9358944524db81b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1aa435057b3a088067e9358944524db81b" kindref="member">VideoDetectorTest</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="2010" refid="_c_w_e-79_8c_1afb530d2b25a56843c5796031651f17e3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1afb530d2b25a56843c5796031651f17e3" kindref="member">num_invocations</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_invocations_;<sp/>}</highlight></codeline>
<codeline lineno="2011" refid="_c_w_e-79_8c_1a3a0f2873df1d7d2c10b2f98e90ebe58e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a3a0f2873df1d7d2c10b2f98e90ebe58e" kindref="member">reset_stats</ref>()<sp/>{<sp/>num_invocations_<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="2012" refid="_c_w_e-79_8c_1aff1a5f755378cfcfa49a39ba3122173a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aff1a5f755378cfcfa49a39ba3122173a" kindref="member">~VideoDetectorTest</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SSLErrorInfo::GetErrorsForCertStatus(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cert_id,</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net::CertStatus<sp/>cert_status,</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL&amp;<sp/>url,</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SSLErrorInfo&gt;*<sp/>errors)<sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>net::CertStatus<sp/>kErrorFlags[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/>net::CERT_STATUS_COMMON_NAME_INVALID,</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>net::CERT_STATUS_DATE_INVALID,</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/>net::CERT_STATUS_AUTHORITY_INVALID,</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>net::CERT_STATUS_NO_REVOCATION_MECHANISM,</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/>net::CERT_STATUS_UNABLE_TO_CHECK_REVOCATION,</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/>net::CERT_STATUS_REVOKED,</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/>net::CERT_STATUS_INVALID,</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/>net::CERT_STATUS_WEAK_SIGNATURE_ALGORITHM,</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/>net::CERT_STATUS_WEAK_KEY</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ErrorType<sp/>kErrorTypes[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/>CERT_COMMON_NAME_INVALID,</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>CERT_DATE_INVALID,</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/>CERT_AUTHORITY_INVALID,</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/>CERT_NO_REVOCATION_MECHANISM,</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/>CERT_UNABLE_TO_CHECK_REVOCATION,</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/>CERT_REVOKED,</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>CERT_INVALID,</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/>CERT_WEAK_SIGNATURE_ALGORITHM,</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/>CERT_WEAK_KEY</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/>DCHECK(arraysize(kErrorFlags)<sp/>==<sp/>arraysize(kErrorTypes));</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/>scoped_refptr&lt;net::X509Certificate&gt;<sp/>cert<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-20_8c_1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arraysize(kErrorFlags);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cert_status<sp/>&amp;<sp/>kErrorFlags[i])<sp/>{</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>++;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cert.get())<sp/>{</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>content::CertStore::GetInstance()-&gt;RetrieveCert(</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cert_id,<sp/>&amp;cert);</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCHECK(r);</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errors)</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errors-&gt;push_back(SSLErrorInfo::CreateError(kErrorTypes[i],<sp/>cert,<sp/>url));</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-20_8c_1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal">SSLErrorInfo::ErrorType<sp/>SSLErrorInfo::NetErrorToErrorType(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>net_error)<sp/>{</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(net_error)<sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>net::ERR_CERT_COMMON_NAME_INVALID:</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CERT_COMMON_NAME_INVALID;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>net::ERR_CERT_DATE_INVALID:</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CERT_DATE_INVALID;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>net::ERR_CERT_AUTHORITY_INVALID:</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CERT_AUTHORITY_INVALID;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>net::ERR_CERT_CONTAINS_ERRORS:</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CERT_CONTAINS_ERRORS;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>net::ERR_CERT_NO_REVOCATION_MECHANISM:</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CERT_NO_REVOCATION_MECHANISM;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>net::ERR_CERT_UNABLE_TO_CHECK_REVOCATION:</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CERT_UNABLE_TO_CHECK_REVOCATION;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>net::ERR_CERT_REVOKED:</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CERT_REVOKED;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>net::ERR_CERT_INVALID:</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CERT_INVALID;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>net::ERR_CERT_WEAK_SIGNATURE_ALGORITHM:</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CERT_WEAK_SIGNATURE_ALGORITHM;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>net::ERR_CERT_WEAK_KEY:</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CERT_WEAK_KEY;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NOTREACHED();</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNKNOWN;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2085"><highlight class="normal">SSLErrorInfo::SSLErrorInfo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>string16&amp;<sp/>title,</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>string16&amp;<sp/>details,</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>string16&amp;<sp/>short_description,</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;string16&gt;&amp;<sp/>extra_info)</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>title_(title),</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>details_(details),</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>short_description_(short_description),</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_information_(extra_info)<sp/>{</highlight></codeline>
<codeline lineno="2093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2094"><highlight class="normal">SSLErrorInfo::~SSLErrorInfo()<sp/>{</highlight></codeline>
<codeline lineno="2095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastDuplexView::ActivateCastView()<sp/>{</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/>select_view_-&gt;SetVisible(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/>cast_view_-&gt;SetVisible(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/>InvalidateLayout();</highlight></codeline>
<codeline lineno="2100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastDuplexView::ActivateSelectView()<sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/>select_view_-&gt;SetVisible(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/>cast_view_-&gt;SetVisible(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/>InvalidateLayout();</highlight></codeline>
<codeline lineno="2105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2106"><highlight class="normal">views::View*<sp/>CastDetailedView::AddToReceiverList(</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CastConfigDelegate::ReceiverAndActivity&amp;<sp/>receiverActivity)<sp/>{</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/>HoverHighlightView*<sp/>container<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>HoverHighlightView(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gfx::ImageSkia*<sp/>image<sp/>=</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ui::ResourceBundle::GetSharedInstance()</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.GetImageNamed(IDR_AURA_UBER_TRAY_CAST_DEVICE_ICON)</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToImageSkia();</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::string16&amp;<sp/>name<sp/>=<sp/>receiverActivity.receiver.name;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/>container-&gt;AddIndentedIconAndLabel(*image,<sp/>name,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/>scroll_content()-&gt;AddChildView(container);</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastDetailedView::AppendHeaderEntry()<sp/>{</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/>CreateSpecialRow(IDS_ASH_STATUS_TRAY_CAST,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastDetailedView::AppendSettingsEntries()<sp/>{</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>userAddingRunning<sp/>=<sp/>Shell::GetInstance()</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;session_state_delegate()</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;IsInSecondaryLoginScreen();</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(login_<sp/>==<sp/>user::LOGGED_IN_NONE<sp/>||<sp/>login_<sp/>==<sp/>user::LOGGED_IN_LOCKED<sp/>||</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>userAddingRunning)</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/>ui::ResourceBundle&amp;<sp/>rb<sp/>=<sp/>ui::ResourceBundle::GetSharedInstance();</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/>HoverHighlightView*<sp/>container<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>HoverHighlightView(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/>container-&gt;AddLabel(rb.GetLocalizedString(IDS_ASH_STATUS_TRAY_CAST_OPTIONS),</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfx::ALIGN_LEFT,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>highlight<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/>AddChildView(container);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/>options_<sp/>=<sp/>container;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2140"><highlight class="normal">base::WeakPtr&lt;CastTrayView&gt;<sp/>CastTrayView::AsWeakPtr()<sp/>{</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>weak_ptr_factory_.GetWeakPtr();</highlight></codeline>
<codeline lineno="2142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2143"><highlight class="normal">CastDetailedView::CastDetailedView(SystemTrayItem*<sp/>owner,</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CastConfigDelegate*<sp/>cast_config_delegate,</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user::LoginStatus<sp/>login)</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>TrayDetailsView(owner),</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cast_config_delegate_(cast_config_delegate),</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>login_(login),</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>options_(nullptr)<sp/>{</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/>CreateItems();</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/>UpdateReceiverList();</highlight></codeline>
<codeline lineno="2152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2153"><highlight class="normal">CastDuplexView::CastDuplexView(SystemTrayItem*<sp/>owner,</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CastConfigDelegate*<sp/>config_delegate,</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show_more)<sp/>{</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/>select_view_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CastSelectDefaultView(owner,<sp/>config_delegate,<sp/>show_more);</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/>cast_view_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CastCastView(config_delegate);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/>SetLayoutManager(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>views::FillLayout());</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/>AddChildView(select_view_);</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/>AddChildView(cast_view_);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/>ActivateSelectView();</highlight></codeline>
<codeline lineno="2163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2164"><highlight class="normal">CastSelectDefaultView::CastSelectDefaultView(</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/>SystemTrayItem*<sp/>owner,</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/>CastConfigDelegate*<sp/>cast_config_delegate,</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show_more)</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>TrayItemMore(owner,<sp/>show_more),</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cast_config_delegate_(cast_config_delegate)<sp/>{</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/>ui::ResourceBundle&amp;<sp/>rb<sp/>=<sp/>ui::ResourceBundle::GetSharedInstance();</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/>SetImage(rb.GetImageNamed(IDR_AURA_UBER_TRAY_CAST).ToImageSkia());</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/>SetLabel(rb.GetLocalizedString(IDS_ASH_STATUS_TRAY_CAST_NO_DEVICE));</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/>UpdateLabel();</highlight></codeline>
<codeline lineno="2175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2176"><highlight class="normal">CastTrayView::CastTrayView(SystemTrayItem*<sp/>tray_item)</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>TrayItemView(tray_item),<sp/>weak_ptr_factory_(this)<sp/>{</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/>CreateImageView();</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/>image_view()-&gt;SetImage(ui::ResourceBundle::GetSharedInstance()</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.GetImageNamed(IDR_AURA_UBER_TRAY_CAST_STATUS)</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToImageSkia());</highlight></codeline>
<codeline lineno="2183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal">views::View*<sp/>TrayCast::CreateDefaultView(user::LoginStatus<sp/>status)<sp/>{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/>CHECK(default_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/>default_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>tray::CastDuplexView(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>cast_config_delegate_,</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>!=<sp/>user::LOGGED_IN_LOCKED);</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/>UpdatePrimaryView();</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2191"><highlight class="normal">views::View*<sp/>TrayCast::CreateDetailedView(user::LoginStatus<sp/>status)<sp/>{</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/>Shell::GetInstance()-&gt;metrics()-&gt;RecordUserMetricsAction(</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ash::UMA_STATUS_AREA_DETAILED_CAST_VIEW);</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/>CHECK(detailed_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/>detailed_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>tray::CastDetailedView(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>cast_config_delegate_,<sp/>status);</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detailed_;</highlight></codeline>
<codeline lineno="2197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastDetailedView::CreateItems()<sp/>{</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/>CreateScrollableList();</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/>AppendSettingsEntries();</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/>AppendHeaderEntry();</highlight></codeline>
<codeline lineno="2202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2203"><highlight class="normal">views::View*<sp/>TrayCast::CreateTrayView(user::LoginStatus<sp/>status)<sp/>{</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/>CHECK(tray_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/>tray_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>tray::CastTrayView(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/>tray_-&gt;SetVisible(is_casting_);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tray_;</highlight></codeline>
<codeline lineno="2208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrayCast::DestroyDefaultView()<sp/>{</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/>default_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrayCast::DestroyDetailedView()<sp/>{</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/>detailed_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrayCast::DestroyTrayView()<sp/>{</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/>tray_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TrayCast::HasCastExtension()<sp/>{</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cast_config_delegate_<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cast_config_delegate_-&gt;HasCastExtension();</highlight></codeline>
<codeline lineno="2221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastCastView::Layout()<sp/>{</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/>views::View::Layout();</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/>gfx::Size<sp/>stop_size<sp/>=<sp/>stop_button_-&gt;GetPreferredSize();</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/>gfx::Rect<sp/>stop_bounds(stop_size);</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/>stop_bounds.set_x(width()<sp/>-<sp/>stop_size.width()<sp/>-<sp/>kStopButtonRightPadding);</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/>stop_bounds.set_y((height()<sp/>-<sp/>stop_size.height())<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/>stop_button_-&gt;SetBoundsRect(stop_bounds);</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label_container_-&gt;bounds().Intersects(stop_button_-&gt;bounds()))<sp/>{</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/>gfx::Rect<sp/>label_bounds<sp/>=<sp/>label_container_-&gt;bounds();</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/>label_bounds.set_width(stop_button_-&gt;x()<sp/>-<sp/>kTrayPopupPaddingBetweenItems<sp/>-</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>label_container_-&gt;x());</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/>label_container_-&gt;SetBoundsRect(label_bounds);</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>extra_height<sp/>=</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>height()<sp/>-<sp/>label_container_-&gt;GetPreferredSize().height();</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/>label_container_-&gt;SetY(extra_height<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastDuplexView::Layout()<sp/>{</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/>views::View::Layout();</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(select_view_-&gt;IsDrawn())</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>select_view_-&gt;SetBoundsRect(GetContentsBounds());</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cast_view_-&gt;IsDrawn())</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>cast_view_-&gt;SetBoundsRect(GetContentsBounds());</highlight></codeline>
<codeline lineno="2249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrayCast::OnCastingSessionStartedOrStopped(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>started)<sp/>{</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/>is_casting_<sp/>=<sp/>started;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/>UpdatePrimaryView();</highlight></codeline>
<codeline lineno="2253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastDetailedView::OnViewClicked(views::View*<sp/>sender)<sp/>{</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sender<sp/>==<sp/>footer()-&gt;content())<sp/>{</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/>TransitionToDefaultView();</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sender<sp/>==<sp/>options_)<sp/>{</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/>cast_config_delegate_-&gt;LaunchCastOptions();</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>receiver_activity_map_.find(sender);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>receiver_activity_map_.end())<sp/>{</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cast_config_delegate_-&gt;CastToReceiver(it-&gt;second);</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2266"><highlight class="normal">TrayCast::TrayCast(SystemTray*<sp/>system_tray)</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>SystemTrayItem(system_tray),</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cast_config_delegate_(ash::Shell::GetInstance()</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;system_tray_delegate()</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetCastConfigDelegate())<sp/>{</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/>Shell::GetInstance()-&gt;AddShellObserver(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrayCast::UpdateAfterShelfAlignmentChange(ShelfAlignment<sp/>alignment)<sp/>{</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tray_)</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/>tray_-&gt;UpdateAlignment(alignment);</highlight></codeline>
<codeline lineno="2276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastSelectDefaultView::UpdateLabel()<sp/>{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cast_config_delegate_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cast_config_delegate_-&gt;HasCastExtension()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/>cast_config_delegate_-&gt;GetReceiversAndActivities(base::Bind(</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;CastSelectDefaultView::UpdateLabelCallback,<sp/>base::Unretained(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastCastView::UpdateLabel()<sp/>{</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cast_config_delegate_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cast_config_delegate_-&gt;HasCastExtension()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/>cast_config_delegate_-&gt;GetReceiversAndActivities(</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::Bind(&amp;CastCastView::UpdateLabelCallback,<sp/>base::Unretained(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastSelectDefaultView::UpdateLabelCallback(</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CastConfigDelegate::ReceiversAndActivites&amp;<sp/>receivers_activities)<sp/>{</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::string16<sp/><ref refid="_c_w_e-476_8c_1a50c7fea6fa08fd1a261a1e801b5f633c" kindref="member">label</ref><sp/>=</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ui::ResourceBundle::GetSharedInstance().GetLocalizedString(</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>receivers_activities.empty()<sp/>?<sp/>IDS_ASH_STATUS_TRAY_CAST_NO_DEVICE</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>IDS_ASH_STATUS_TRAY_CAST_DESKTOP);</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/>SetLabel(<ref refid="_c_w_e-476_8c_1a50c7fea6fa08fd1a261a1e801b5f633c" kindref="member">label</ref>);</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/>SetAccessibleName(<ref refid="_c_w_e-476_8c_1a50c7fea6fa08fd1a261a1e801b5f633c" kindref="member">label</ref>);</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/>SetVisible(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrayCast::UpdatePrimaryView()<sp/>{</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasCastExtension()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(default_)</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_-&gt;SetVisible(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tray_)<sp/>{</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::MessageLoopForUI::current()-&gt;PostTask(</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FROM_HERE,<sp/>base::Bind(&amp;tray::CastTrayView::SetVisible,</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tray_-&gt;AsWeakPtr(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(default_)<sp/>{</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_casting_)</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_-&gt;ActivateCastView();</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_-&gt;ActivateSelectView();</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tray_)</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tray_-&gt;SetVisible(is_casting_);</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastDetailedView::UpdateReceiverList()<sp/>{</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/>cast_config_delegate_-&gt;GetReceiversAndActivities(base::Bind(</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;CastDetailedView::UpdateReceiverListCallback,<sp/>base::Unretained(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastDetailedView::UpdateReceiverListFromCachedData()<sp/>{</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/>receiver_activity_map_.clear();</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/>scroll_content()-&gt;RemoveAllChildViews(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>it<sp/>:<sp/>receivers_and_activities_)<sp/>{</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CastConfigDelegate::ReceiverAndActivity&amp;<sp/>receiver_activity<sp/>=</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it.second;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/>views::View*<sp/>container<sp/>=<sp/>AddToReceiverList(receiver_activity);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/>receiver_activity_map_[container]<sp/>=<sp/>it.first;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/>scroll_content()-&gt;SizeToPreferredSize();</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">views::View*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(scroller())-&gt;Layout();</highlight></codeline>
<codeline lineno="2341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2342" refid="_c_w_e-79_8c_1ad2654a232dbe9656c406209f49fc4211" refkind="member"><highlight class="normal"><sp/><sp/>CastCastView*<sp/><ref refid="_c_w_e-79_8c_1ad2654a232dbe9656c406209f49fc4211" kindref="member">cast_view</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cast_view_;<sp/>}</highlight></codeline>
<codeline lineno="2343" refid="_c_w_e-79_8c_1a7692e014d9cb19f32eeec6ca7b8b7b81" refkind="member"><highlight class="normal"><sp/><sp/>CastSelectDefaultView*<sp/><ref refid="_c_w_e-79_8c_1a7692e014d9cb19f32eeec6ca7b8b7b81" kindref="member">select_view</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>select_view_;<sp/>}</highlight></codeline>
<codeline lineno="2344"><highlight class="normal">CastCastView::~CastCastView()<sp/>{</highlight></codeline>
<codeline lineno="2345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2346"><highlight class="normal">CastDetailedView::~CastDetailedView()<sp/>{</highlight></codeline>
<codeline lineno="2347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2348"><highlight class="normal">CastDuplexView::~CastDuplexView()<sp/>{</highlight></codeline>
<codeline lineno="2349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2350"><highlight class="normal">CastSelectDefaultView::~CastSelectDefaultView()<sp/>{</highlight></codeline>
<codeline lineno="2351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2352"><highlight class="normal">CastTrayView::~CastTrayView()<sp/>{</highlight></codeline>
<codeline lineno="2353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2354"><highlight class="normal">TrayCast::~TrayCast()<sp/>{</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/>Shell::GetInstance()-&gt;RemoveShellObserver(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2357"><highlight class="normal">CastConfigDelegateChromeos::CastConfigDelegateChromeos()<sp/>{</highlight></codeline>
<codeline lineno="2358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastConfigDelegateChromeos::CastToReceiver(</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>receiver_id)<sp/>{</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1afd1b401cf4b3a4ab89a15e5bd5c29a3a" kindref="member">ExecuteJavaScript</ref>(</highlight><highlight class="stringliteral">&quot;backgroundSetup.launchDesktopMirroring(&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>receiver_id<sp/>+</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;);&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2364" refid="_c_w_e-79_8c_1afd1b401cf4b3a4ab89a15e5bd5c29a3a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1afd1b401cf4b3a4ab89a15e5bd5c29a3a" kindref="member">ExecuteJavaScript</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>javascript)<sp/>{</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rvh<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a538456d008711e011a10fd7037e02b04" kindref="member">GetRenderViewHost</ref>();</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rvh)</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/>rvh-&gt;GetMainFrame()-&gt;ExecuteJavaScript(base::UTF8ToUTF16(javascript));</highlight></codeline>
<codeline lineno="2369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2370" refid="_c_w_e-79_8c_1af341a7671a1ca6361b06f47cd2298c38" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1af341a7671a1ca6361b06f47cd2298c38" kindref="member">ExecuteJavaScriptWithCallback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>javascript,</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>JavaScriptResultCallback&amp;<sp/>callback)<sp/>{</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rvh<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a538456d008711e011a10fd7037e02b04" kindref="member">GetRenderViewHost</ref>();</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rvh)</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/>rvh-&gt;GetMainFrame()-&gt;ExecuteJavaScript(base::UTF8ToUTF16(javascript),</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callback);</highlight></codeline>
<codeline lineno="2377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2378" refid="_c_w_e-79_8c_1adf414f88ee4192e1a0762b60780b7c60" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>extensions::Extension*<sp/><ref refid="_c_w_e-79_8c_1adf414f88ee4192e1a0762b60780b7c60" kindref="member">FindCastExtension</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/>Profile*<sp/>profile<sp/>=<sp/>ProfileManager::GetActiveUserProfile();</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>extensions::ExtensionRegistry*<sp/>extension_registry<sp/>=</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extensions::ExtensionRegistry::Get(profile);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>extensions::ExtensionSet&amp;<sp/>enabled_extensions<sp/>=</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extension_registry-&gt;enabled_extensions();</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arraysize(extensions::kChromecastExtensionIds);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>extension_id(extensions::kChromecastExtensionIds[i]);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enabled_extensions.Contains(extension_id))<sp/>{</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>extension_registry-&gt;GetExtensionById(</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extension_id,<sp/>extensions::ExtensionRegistry::ENABLED);</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastConfigDelegateChromeos::GetReceiversAndActivities(</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ReceiversAndActivitesCallback&amp;<sp/>callback)<sp/>{</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1af341a7671a1ca6361b06f47cd2298c38" kindref="member">ExecuteJavaScriptWithCallback</ref>(</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;backgroundSetup.getMirrorCapableReceiversAndActivities();&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::Bind(&amp;<ref refid="_c_w_e-79_8c_1a43780de2a63e02d844aa5db8e433b729" kindref="member">GetReceiversAndActivitiesCallback</ref>,<sp/>callback));</highlight></codeline>
<codeline lineno="2399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2400" refid="_c_w_e-79_8c_1a43780de2a63e02d844aa5db8e433b729" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a43780de2a63e02d844aa5db8e433b729" kindref="member">GetReceiversAndActivitiesCallback</ref>(</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ash::CastConfigDelegate::ReceiversAndActivitesCallback&amp;<sp/>callback,</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::Value*<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/>ash::CastConfigDelegate::ReceiversAndActivites<sp/>receiver_activites;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::ListValue*<sp/>ra_list<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;GetAsList(&amp;ra_list))<sp/>{</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>ra_list-&gt;begin();<sp/>i<sp/>!=<sp/>ra_list-&gt;end();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::DictionaryValue*<sp/>ra_dict<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*i)-&gt;GetAsDictionary(&amp;ra_dict))<sp/>{</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::DictionaryValue*<sp/>receiver_dict(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*activity_dict(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ash::CastConfigDelegate::ReceiverAndActivity<sp/>receiver_activity;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ra_dict-&gt;GetDictionary(</highlight><highlight class="stringliteral">&quot;receiver&quot;</highlight><highlight class="normal">,<sp/>&amp;receiver_dict))<sp/>{</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>receiver_dict-&gt;GetString(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>&amp;receiver_activity.receiver.name);</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>receiver_dict-&gt;GetString(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/>&amp;receiver_activity.receiver.id);</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ra_dict-&gt;GetDictionary(</highlight><highlight class="stringliteral">&quot;activity&quot;</highlight><highlight class="normal">,<sp/>&amp;activity_dict)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!activity_dict-&gt;empty())<sp/>{</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>activity_dict-&gt;GetString(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">,<sp/>&amp;receiver_activity.activity.id);</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>activity_dict-&gt;GetString(</highlight><highlight class="stringliteral">&quot;title&quot;</highlight><highlight class="normal">,<sp/>&amp;receiver_activity.activity.title);</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>activity_dict-&gt;GetString(</highlight><highlight class="stringliteral">&quot;activityType&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;receiver_activity.activity.activity_type);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>activity_dict-&gt;GetBoolean(</highlight><highlight class="stringliteral">&quot;allowStop&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;receiver_activity.activity.allow_stop);</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>activity_dict-&gt;GetInteger(</highlight><highlight class="stringliteral">&quot;tabId&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;receiver_activity.activity.tab_id);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>receiver_activites[receiver_activity.receiver.id]<sp/>=<sp/>receiver_activity;</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/>callback.Run(receiver_activites);</highlight></codeline>
<codeline lineno="2432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2433" refid="_c_w_e-79_8c_1a538456d008711e011a10fd7037e02b04" refkind="member"><highlight class="normal">content::RenderViewHost*<sp/><ref refid="_c_w_e-79_8c_1a538456d008711e011a10fd7037e02b04" kindref="member">GetRenderViewHost</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>extensions::Extension*<sp/><ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref><sp/>=<sp/><ref refid="_c_w_e-79_8c_1adf414f88ee4192e1a0762b60780b7c60" kindref="member">FindCastExtension</ref>();</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>)</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/>Profile*<sp/>profile<sp/>=<sp/>ProfileManager::GetActiveUserProfile();</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!profile)</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/>extensions::ProcessManager*<sp/>pm<sp/>=<sp/>extensions::ProcessManager::Get(profile);</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pm-&gt;GetBackgroundHostForExtension(<ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>-&gt;id())-&gt;render_view_host();</highlight></codeline>
<codeline lineno="2442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CastConfigDelegateChromeos::HasCastExtension()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1adf414f88ee4192e1a0762b60780b7c60" kindref="member">FindCastExtension</ref>()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastConfigDelegateChromeos::LaunchCastOptions()<sp/>{</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/>chrome::NavigateParams<sp/>params(</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ProfileManager::GetActiveUserProfile(),</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1adf414f88ee4192e1a0762b60780b7c60" kindref="member">FindCastExtension</ref>()-&gt;GetResourceURL(</highlight><highlight class="stringliteral">&quot;options.html&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ui::PAGE_TRANSITION_LINK);</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/>params.disposition<sp/>=<sp/>NEW_FOREGROUND_TAB;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/>params.window_action<sp/>=<sp/>chrome::NavigateParams::SHOW_WINDOW;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/>chrome::Navigate(&amp;params);</highlight></codeline>
<codeline lineno="2454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2455"><highlight class="normal">CastConfigDelegateChromeos::~CastConfigDelegateChromeos()<sp/>{</highlight></codeline>
<codeline lineno="2456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8ContextNativeHandler::GetAvailability(</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/>CHECK_EQ(args.Length(),<sp/>1);</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>args.GetIsolate();</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/>std::string<sp/>api_name<sp/>=<sp/>*v8::String::Utf8Value(args[0]);</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/>Feature::Availability<sp/>availability<sp/>=<sp/>context_-&gt;GetAvailability(api_name);</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>ret<sp/>=<sp/>v8::Object::New(isolate);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/>ret-&gt;Set(v8::String::NewFromUtf8(isolate,<sp/></highlight><highlight class="stringliteral">&quot;is_available&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Boolean::New(isolate,<sp/>availability.is_available()));</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/>ret-&gt;Set(v8::String::NewFromUtf8(isolate,<sp/></highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::String::NewFromUtf8(isolate,<sp/>availability.message().c_str()));</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/>ret-&gt;Set(v8::String::NewFromUtf8(isolate,<sp/></highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Integer::New(isolate,<sp/>availability.result()));</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/>args.GetReturnValue().Set(ret);</highlight></codeline>
<codeline lineno="2472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8ContextNativeHandler::GetModuleSystem(</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/>CHECK_EQ(args.Length(),<sp/>1);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/>CHECK(args[0]-&gt;IsObject());</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Context&gt;<sp/>v8_context<sp/>=</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;::Cast(args[0])-&gt;CreationContext();</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/>ScriptContext*<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dispatcher_-&gt;script_context_set().GetByV8Context(v8_context);</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blink::WebFrame::scriptCanAccess(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;web_frame()))</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>args.GetReturnValue().Set(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;module_system()-&gt;NewInstance());</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="2484" refid="_c_w_e-79_8c_1a8ca3b9e319ea7526107a927e3369246a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LayoutRect<sp/><ref refid="_c_w_e-79_8c_1a8ca3b9e319ea7526107a927e3369246a" kindref="member">AbsoluteToLocal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutBox&amp;<sp/>box,<sp/>LayoutRect<sp/>rect)<sp/>{</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LayoutRect(</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>box.AbsoluteToLocalQuad(FloatQuad(FloatRect(rect)),<sp/>kUseTransforms)</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.BoundingBox());</highlight></codeline>
<codeline lineno="2488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2489" refid="_c_w_e-79_8c_1ab92a072305281d21253b7c6cb747740e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ab92a072305281d21253b7c6cb747740e" kindref="member">CanHaveOverflowScrollbars</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutBox&amp;<sp/>box)<sp/>{</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>box.GetDocument().ViewportDefiningElement()<sp/>!=<sp/>box.GetNode();</highlight></codeline>
<codeline lineno="2491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ClampScrollOffsetAfterOverflowChange()<sp/>{</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasBeenDisposed())</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DelayScrollOffsetClampScope::ClampingIsDelayed())<sp/>{</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/>DelayScrollOffsetClampScope::SetNeedsClamp(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/>UpdateScrollDimensions();</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ScrollOriginChanged())</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/>SetScrollOffsetUnconditionally(ClampScrollOffset(GetScrollOffset()));</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollableArea::SetScrollOffset(GetScrollOffset(),<sp/>kClampingScroll);</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/>SetNeedsScrollOffsetClamp(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/>ResetScrollOriginChanged();</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/>scrollbar_manager_.DestroyDetachedScrollbars();</highlight></codeline>
<codeline lineno="2511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2512" refid="_c_w_e-79_8c_1a114e8747768bfd453b304f7f375ce663" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a114e8747768bfd453b304f7f375ce663" kindref="member">ClampScrollableAreas</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>scrollable_area<sp/>:<sp/>NeedsClampList())</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/>scrollable_area-&gt;ClampScrollOffsetAfterOverflowChange();</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/>NeedsClampList().clear();</highlight></codeline>
<codeline lineno="2516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ClearPreviousVisualRects()<sp/>{</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/>SetHorizontalScrollbarVisualRect(LayoutRect());</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/>SetVerticalScrollbarVisualRect(LayoutRect());</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/>SetScrollCornerAndResizerVisualRect(LayoutRect());</highlight></codeline>
<codeline lineno="2521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ComputeNeedsCompositedScrolling(</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>layer_has_been_composited,</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PaintLayer*<sp/>layer)<sp/>{</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/>non_composited_main_thread_scrolling_reasons_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CompositingReasonFinder::RequiresCompositingForRootScroller(*layer))</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/>Node*<sp/>node<sp/>=<sp/>layer-&gt;GetLayoutObject().GetNode();</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!layer-&gt;ScrollsOverflow()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!ScrollTimeline::HasActiveScrollTimeline(node))<sp/>{</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layer-&gt;Size().IsEmpty())</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!layer_has_been_composited<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="_c_w_e-79_8c_1a17f9c42e8a407fda3e792baf74c8f8c2" kindref="member">LayerNodeMayNeedCompositedScrolling</ref>(layer))<sp/>{</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_composited_scrolling<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>background_supports_lcd_text<sp/>=</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;StyleRef().IsStackingContext()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;GetBackgroundPaintLocation(</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;non_composited_main_thread_scrolling_reasons_)<sp/>&amp;</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kBackgroundPaintInScrollingContents<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;BackgroundIsKnownToBeOpaqueInRect(</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ToLayoutBox(layer-&gt;GetLayoutObject()).PhysicalPaddingBoxRect(),</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!layer-&gt;CompositesWithTransform()<sp/>&amp;&amp;<sp/>!layer-&gt;CompositesWithOpacity();</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ScrollTimeline::HasActiveScrollTimeline(node)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!layer_has_been_composited<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!layer-&gt;Compositor()-&gt;PreferCompositingToLCDTextEnabled()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!background_supports_lcd_text)<sp/>{</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layer-&gt;CompositesWithOpacity())<sp/>{</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>non_composited_main_thread_scrolling_reasons_<sp/>|=</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MainThreadScrollingReason::kHasOpacityAndLCDText;</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layer-&gt;CompositesWithTransform())<sp/>{</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>non_composited_main_thread_scrolling_reasons_<sp/>|=</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MainThreadScrollingReason::kHasTransformAndLCDText;</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!layer-&gt;BackgroundIsKnownToBeOpaqueInRect(</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ToLayoutBox(layer-&gt;GetLayoutObject()).PhysicalPaddingBoxRect(),</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>non_composited_main_thread_scrolling_reasons_<sp/>|=</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MainThreadScrollingReason::kBackgroundNotOpaqueInRectAndLCDText;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!layer-&gt;GetLayoutObject().StyleRef().IsStackingContext())<sp/>{</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>non_composited_main_thread_scrolling_reasons_<sp/>|=</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MainThreadScrollingReason::kIsNotStackingContextAndLCDText;</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/>needs_composited_scrolling<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layer-&gt;GetLayoutObject().HasClip()<sp/>||</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;HasDescendantWithClipPath()<sp/>||<sp/>!!layer-&gt;ClipPathAncestor())<sp/>{</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/>non_composited_main_thread_scrolling_reasons_<sp/>|=</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MainThreadScrollingReason::kHasClipRelatedProperty;</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/>needs_composited_scrolling<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/>DCHECK(!(non_composited_main_thread_scrolling_reasons_<sp/>&amp;</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~MainThreadScrollingReason::kNonCompositedReasons));</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>needs_composited_scrolling;</highlight></codeline>
<codeline lineno="2592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ComputeScrollbarExistence(</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>needs_horizontal_scrollbar,</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>needs_vertical_scrollbar,</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/>ComputeScrollbarExistenceOption<sp/><ref refid="_c_w_e-22_8c_1ad0ea52f494382d0f33ba1744a01bf5ed" kindref="member">option</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/>DCHECK(GetLayoutBox()-&gt;GetFrame()-&gt;GetSettings());</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(VisualViewportSuppliesScrollbars()<sp/>||</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="_c_w_e-79_8c_1ab92a072305281d21253b7c6cb747740e" kindref="member">CanHaveOverflowScrollbars</ref>(*GetLayoutBox())<sp/>||</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;GetFrame()-&gt;GetSettings()-&gt;GetHideScrollbars())<sp/>{</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/>needs_horizontal_scrollbar<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/>needs_vertical_scrollbar<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/>needs_horizontal_scrollbar<sp/>=<sp/>GetLayoutBox()-&gt;ScrollsOverflowX();</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/>needs_vertical_scrollbar<sp/>=<sp/>GetLayoutBox()-&gt;ScrollsOverflowY();</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;HasAutoHorizontalScrollbar())<sp/>{</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-22_8c_1ad0ea52f494382d0f33ba1744a01bf5ed" kindref="member">option</ref><sp/>==<sp/>kForbidAddingAutoBars)</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_horizontal_scrollbar<sp/>&amp;=<sp/>HasHorizontalScrollbar();</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/>needs_horizontal_scrollbar<sp/>&amp;=</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;IsRooted()<sp/>&amp;&amp;<sp/>HasHorizontalOverflow()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VisibleContentRect(kIncludeScrollbars).Height();</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;HasAutoVerticalScrollbar())<sp/>{</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-22_8c_1ad0ea52f494382d0f33ba1744a01bf5ed" kindref="member">option</ref><sp/>==<sp/>kForbidAddingAutoBars)</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_vertical_scrollbar<sp/>&amp;=<sp/>HasVerticalScrollbar();</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/>needs_vertical_scrollbar<sp/>&amp;=<sp/>GetLayoutBox()-&gt;IsRooted()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasVerticalOverflow()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VisibleContentRect(kIncludeScrollbars).Width();</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;IsLayoutView())<sp/>{</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarMode<sp/>h_mode;</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarMode<sp/>v_mode;</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/>ToLayoutView(GetLayoutBox())-&gt;CalculateScrollbarModes(h_mode,<sp/>v_mode);</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"></highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_mode<sp/>==<sp/>kScrollbarAlwaysOn)</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_horizontal_scrollbar<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_mode<sp/>==<sp/>kScrollbarAlwaysOff)</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_horizontal_scrollbar<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v_mode<sp/>==<sp/>kScrollbarAlwaysOn)</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_vertical_scrollbar<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v_mode<sp/>==<sp/>kScrollbarAlwaysOff)</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_vertical_scrollbar<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ContentsResized()<sp/>{</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/>ScrollableArea::ContentsResized();</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/>GetLayoutBox()-&gt;SetNeedsPaintPropertyUpdate();</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/>Layer()-&gt;SetNeedsCompositingInputsUpdate();</highlight></codeline>
<codeline lineno="2644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2645"><highlight class="normal">IntSize<sp/>PaintLayerScrollableArea::ContentsSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/>LayoutPoint<sp/>offset(</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;ClientLeft()<sp/>+<sp/>GetLayoutBox()-&gt;Location().X(),</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;ClientTop()<sp/>+<sp/>GetLayoutBox()-&gt;Location().Y());</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PixelSnappedContentsSize(offset);</highlight></codeline>
<codeline lineno="2650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2651"><highlight class="normal">PaintLayerScrollableArea::ConvertFromContainingEmbeddedContentViewToScrollbar(</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scrollbar&amp;<sp/>scrollbar,</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntPoint&amp;<sp/>parent_point)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/>LayoutView*<sp/>view<sp/>=<sp/>GetLayoutBox()-&gt;View();</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!view)</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent_point;</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/>IntPoint<sp/>point<sp/>=<sp/>view-&gt;GetFrameView()-&gt;ConvertToLayoutObject(*GetLayoutBox(),</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_point);</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/>point.Move(-ScrollbarOffset(scrollbar));</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>point;</highlight></codeline>
<codeline lineno="2663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2664"><highlight class="normal">IntPoint<sp/>PaintLayerScrollableArea::ConvertFromRootFrame(</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntPoint&amp;<sp/>point_in_root_frame)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/>LayoutView*<sp/>view<sp/>=<sp/>GetLayoutBox()-&gt;View();</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!view)</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>point_in_root_frame;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>view-&gt;GetFrameView()-&gt;ConvertFromRootFrame(point_in_root_frame);</highlight></codeline>
<codeline lineno="2671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2672"><highlight class="normal">PaintLayerScrollableArea::ConvertFromScrollbarToContainingEmbeddedContentView(</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scrollbar&amp;<sp/>scrollbar,</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntRect&amp;<sp/>scrollbar_rect)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/>LayoutView*<sp/>view<sp/>=<sp/>GetLayoutBox()-&gt;View();</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!view)</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scrollbar_rect;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/>IntRect<sp/>rect<sp/>=<sp/>scrollbar_rect;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/>rect.Move(ScrollbarOffset(scrollbar));</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>view-&gt;GetFrameView()-&gt;ConvertFromLayoutObject(*GetLayoutBox(),<sp/>rect);</highlight></codeline>
<codeline lineno="2683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2684"><highlight class="normal">PaintLayerScrollableArea::ConvertFromScrollbarToContainingEmbeddedContentView(</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scrollbar&amp;<sp/>scrollbar,</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntPoint&amp;<sp/>scrollbar_point)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/>LayoutView*<sp/>view<sp/>=<sp/>GetLayoutBox()-&gt;View();</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!view)</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scrollbar_point;</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/>IntPoint<sp/>point<sp/>=<sp/>scrollbar_point;</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/>point.Move(ScrollbarOffset(scrollbar));</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>view-&gt;GetFrameView()-&gt;ConvertFromLayoutObject(*GetLayoutBox(),<sp/>point);</highlight></codeline>
<codeline lineno="2694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2695"><highlight class="normal">IntRect<sp/>PaintLayerScrollableArea::PaintLayerScrollableArea::CornerRect(</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntRect&amp;<sp/>bounds)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>horizontal_thickness;</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertical_thickness;</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!VerticalScrollbar()<sp/>&amp;&amp;<sp/>!HorizontalScrollbar())<sp/>{</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontal_thickness<sp/>=<sp/>GetPageScrollbarTheme().ScrollbarThickness();</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/>vertical_thickness<sp/>=<sp/>horizontal_thickness;</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(VerticalScrollbar()<sp/>&amp;&amp;<sp/>!HorizontalScrollbar())<sp/>{</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontal_thickness<sp/>=<sp/>VerticalScrollbar()-&gt;ScrollbarThickness();</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/>vertical_thickness<sp/>=<sp/>horizontal_thickness;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HorizontalScrollbar()<sp/>&amp;&amp;<sp/>!VerticalScrollbar())<sp/>{</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/>vertical_thickness<sp/>=<sp/>HorizontalScrollbar()-&gt;ScrollbarThickness();</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontal_thickness<sp/>=<sp/>vertical_thickness;</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontal_thickness<sp/>=<sp/>VerticalScrollbar()-&gt;ScrollbarThickness();</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/>vertical_thickness<sp/>=<sp/>HorizontalScrollbar()-&gt;ScrollbarThickness();</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntRect(<ref refid="_c_w_e-79_8c_1acb008d333bae0dba38a568da96638940" kindref="member">CornerStart</ref>(*GetLayoutBox(),<sp/>bounds.X(),<sp/>bounds.MaxX(),</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>horizontal_thickness),</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds.MaxY()<sp/>-<sp/>vertical_thickness<sp/>-</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;StyleRef().BorderBottomWidth(),</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>horizontal_thickness,<sp/>vertical_thickness);</highlight></codeline>
<codeline lineno="2717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2718" refid="_c_w_e-79_8c_1acb008d333bae0dba38a568da96638940" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1acb008d333bae0dba38a568da96638940" kindref="member">CornerStart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutBox&amp;<sp/>box,</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_x,</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_x,</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thickness)<sp/>{</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(box.ShouldPlaceBlockDirectionScrollbarOnLogicalLeft())</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_x<sp/>+<sp/>box.StyleRef().BorderLeftWidth();</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_x<sp/>-<sp/>thickness<sp/>-<sp/>box.StyleRef().BorderRightWidth();</highlight></codeline>
<codeline lineno="2725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2726"><highlight class="normal">Scrollbar*<sp/>PaintLayerScrollableArea::ScrollbarManager::CreateScrollbar(</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarOrientation<sp/>orientation)<sp/>{</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/>DCHECK(orientation<sp/>==<sp/>kHorizontalScrollbar<sp/>?<sp/>!h_bar_is_attached_</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>!v_bar_is_attached_);</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/>Scrollbar*<sp/>scrollbar<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutObject&amp;<sp/>style_source<sp/>=</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aa14fc222a7f1d75d7f2596336b2fb9c6" kindref="member">ScrollbarStyleSource</ref>(*ScrollableArea()-&gt;GetLayoutBox());</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_custom_scrollbar_style<sp/>=</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>style_source.StyleRef().HasPseudoStyle(kPseudoIdScrollbar);</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_custom_scrollbar_style)<sp/>{</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(style_source.GetNode()<sp/>&amp;&amp;<sp/>style_source.GetNode()-&gt;IsElementNode());</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/>scrollbar<sp/>=<sp/>LayoutScrollbar::CreateCustomScrollbar(</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScrollableArea(),<sp/>orientation,<sp/>ToElement(style_source.GetNode()));</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarControlSize<sp/>scrollbar_size<sp/>=<sp/>kRegularScrollbar;</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(style_source.StyleRef().HasAppearance())<sp/>{</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scrollbar_size<sp/>=<sp/>LayoutTheme::GetTheme().ScrollbarControlSizeForPart(</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style_source.StyleRef().Appearance());</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/>scrollbar<sp/>=<sp/><ref refid="_c_w_e-787_8c_1afab6f737b873d2fd9852d7f602763af3" kindref="member">Scrollbar::Create</ref>(ScrollableArea(),<sp/>orientation,<sp/>scrollbar_size,</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ScrollableArea()</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetLayoutBox()</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetFrame()</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetPage()</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetChromeClient());</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/>ScrollableArea()-&gt;GetLayoutBox()-&gt;GetDocument().View()-&gt;AddScrollbar(</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scrollbar);</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scrollbar;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2756"><highlight class="normal">PaintLayerScrollableArea::ScrollingBackgroundDisplayItemClient::DebugName()</highlight><highlight class="keyword"></highlight></codeline>
<codeline lineno="2757"><highlight class="keyword"><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Scrolling<sp/>background<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scrollable_area_-&gt;GetLayoutBox()-&gt;DebugName();</highlight></codeline>
<codeline lineno="2760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2761" refid="_c_w_e-79_8c_1a3c699dc49dbb0fb4c4dccf37f431f2a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a3c699dc49dbb0fb4c4dccf37f431f2a6" kindref="member">DelayScrollOffsetClampScope</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/>DCHECK(count_<sp/>&gt;<sp/>0<sp/>||<sp/>NeedsClampList().IsEmpty());</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/>count_++;</highlight></codeline>
<codeline lineno="2764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::DeregisterForAnimation()<sp/>{</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasBeenDisposed())</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LocalFrame*<sp/>frame<sp/>=<sp/>GetLayoutBox()-&gt;GetFrame())<sp/>{</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LocalFrameView*<sp/>frame_view<sp/>=<sp/>frame-&gt;View())</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame_view-&gt;RemoveAnimatingScrollableArea(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ScrollbarManager::DestroyDetachedScrollbars()<sp/>{</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/>DCHECK(!h_bar_is_attached_<sp/>||<sp/>h_bar_);</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/>DCHECK(!v_bar_is_attached_<sp/>||<sp/>v_bar_);</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_bar_<sp/>&amp;&amp;<sp/>!h_bar_is_attached_)</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/>DestroyScrollbar(kHorizontalScrollbar);</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v_bar_<sp/>&amp;&amp;<sp/>!v_bar_is_attached_)</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/>DestroyScrollbar(kVerticalScrollbar);</highlight></codeline>
<codeline lineno="2780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ScrollbarManager::DestroyScrollbar(</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarOrientation<sp/>orientation)<sp/>{</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/>Member&lt;Scrollbar&gt;&amp;<sp/>scrollbar<sp/>=</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>orientation<sp/>==<sp/>kHorizontalScrollbar<sp/>?<sp/>h_bar_<sp/>:<sp/>v_bar_;</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/>DCHECK(orientation<sp/>==<sp/>kHorizontalScrollbar<sp/>?<sp/>!h_bar_is_attached_</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>!v_bar_is_attached_);</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scrollbar)</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"></highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/>ScrollableArea()-&gt;SetScrollbarNeedsPaintInvalidation(orientation);</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(orientation<sp/>==<sp/>kHorizontalScrollbar)</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollableArea()-&gt;rebuild_horizontal_scrollbar_layer_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollableArea()-&gt;rebuild_vertical_scrollbar_layer_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"></highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scrollbar-&gt;IsCustomScrollbar())</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollableArea()-&gt;WillRemoveScrollbar(*scrollbar,<sp/>orientation);</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"></highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/>ScrollableArea()-&gt;GetLayoutBox()-&gt;GetDocument().View()-&gt;RemoveScrollbar(</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scrollbar);</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/>scrollbar-&gt;DisconnectFromScrollableArea();</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/>scrollbar<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::DidChangeGlobalRootScroller()<sp/>{</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;<ref refid="_c_w_e-79_8c_1a5a703a2f81e3ac28a451bf1b55919957" kindref="member">GetNode</ref>()-&gt;IsElementNode())<sp/>{</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/>ToElement(GetLayoutBox()-&gt;<ref refid="_c_w_e-79_8c_1a5a703a2f81e3ac28a451bf1b55919957" kindref="member">GetNode</ref>())-&gt;SetNeedsCompositingUpdate();</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;SetNeedsPaintPropertyUpdate();</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"></highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;GetFrame()-&gt;GetSettings()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;GetFrame()-&gt;GetSettings()-&gt;GetViewportEnabled())<sp/>{</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_horizontal_scrollbar;</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_vertical_scrollbar;</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/>ComputeScrollbarExistence(needs_horizontal_scrollbar,</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needs_vertical_scrollbar);</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/>SetHasHorizontalScrollbar(needs_horizontal_scrollbar);</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/>SetHasVerticalScrollbar(needs_vertical_scrollbar);</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::DidScroll(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FloatPoint&amp;<sp/>position)<sp/>{</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/>ScrollableArea::DidScroll(position);</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/>CHECK(!HasBeenDisposed());</highlight></codeline>
<codeline lineno="2823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::DidScrollWithScrollbar(</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarPart<sp/>part,</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarOrientation<sp/>orientation)<sp/>{</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/>WebFeature<sp/>scrollbar_use_uma;</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(part)<sp/>{</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kBackButtonStartPart:</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kForwardButtonStartPart:</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kBackButtonEndPart:</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kForwardButtonEndPart:</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scrollbar_use_uma<sp/>=</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(orientation<sp/>==<sp/>kVerticalScrollbar</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>WebFeature::kScrollbarUseVerticalScrollbarButton</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>WebFeature::kScrollbarUseHorizontalScrollbarButton);</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kThumbPart:</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scrollbar_use_uma<sp/>=</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(orientation<sp/>==<sp/>kVerticalScrollbar</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>WebFeature::kScrollbarUseVerticalScrollbarThumb</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>WebFeature::kScrollbarUseHorizontalScrollbarThumb);</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kBackTrackPart:</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kForwardTrackPart:</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scrollbar_use_uma<sp/>=</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(orientation<sp/>==<sp/>kVerticalScrollbar</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>WebFeature::kScrollbarUseVerticalScrollbarTrack</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>WebFeature::kScrollbarUseHorizontalScrollbarTrack);</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"></highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/>UseCounter::Count(GetLayoutBox()-&gt;GetDocument(),<sp/>scrollbar_use_uma);</highlight></codeline>
<codeline lineno="2856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::Dispose()<sp/>{</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InResizeMode()<sp/>&amp;&amp;<sp/>!GetLayoutBox()-&gt;DocumentBeingDestroyed())<sp/>{</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LocalFrame*<sp/>frame<sp/>=<sp/>GetLayoutBox()-&gt;GetFrame())</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;GetEventHandler().ResizeScrollableAreaDestroyed();</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LocalFrame*<sp/>frame<sp/>=<sp/>GetLayoutBox()-&gt;GetFrame())<sp/>{</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LocalFrameView*<sp/>frame_view<sp/>=<sp/>frame-&gt;View())<sp/>{</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame_view-&gt;RemoveScrollableArea(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame_view-&gt;RemoveAnimatingScrollableArea(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"></highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/>non_composited_main_thread_scrolling_reasons_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"></highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ScrollingCoordinator*<sp/>scrolling_coordinator<sp/>=<sp/>GetScrollingCoordinator())</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/>scrolling_coordinator-&gt;WillDestroyScrollableArea(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"></highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GetLayoutBox()-&gt;DocumentBeingDestroyed())<sp/>{</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/>Node*<sp/>node<sp/>=<sp/>GetLayoutBox()-&gt;GetNode();</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>&amp;&amp;<sp/>node-&gt;IsElementNode())</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ToElement(node)-&gt;SetSavedLayerScrollOffset(scroll_offset_);</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LocalFrame*<sp/>frame<sp/>=<sp/>GetLayoutBox()-&gt;GetFrame())<sp/>{</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LocalFrameView*<sp/>frame_view<sp/>=<sp/>frame-&gt;View())</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame_view-&gt;RemoveResizerArea(*GetLayoutBox());</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"></highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/>scroll_anchor_.Dispose();</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/>GetLayoutBox()</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetDocument()</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.GetPage()</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GlobalRootScrollerController()</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.DidDisposeScrollableArea(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/>scrollbar_manager_.Dispose();</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scroll_corner_)</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/>scroll_corner_-&gt;Destroy();</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resizer_)</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/>resizer_-&gt;Destroy();</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/>ClearScrollableArea();</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SmoothScrollSequencer*<sp/>sequencer<sp/>=<sp/>GetSmoothScrollSequencer())</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/>sequencer-&gt;DidDisposeScrollableArea(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/>layer_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ScrollbarManager::Dispose()<sp/>{</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/>h_bar_is_attached_<sp/>=<sp/>v_bar_is_attached_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/>DestroyScrollbar(kHorizontalScrollbar);</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/>DestroyScrollbar(kVerticalScrollbar);</highlight></codeline>
<codeline lineno="2912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2913"><highlight class="normal">ChromeClient*<sp/>PaintLayerScrollableArea::GetChromeClient()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasBeenDisposed())</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Page*<sp/>page<sp/>=<sp/>GetLayoutBox()-&gt;GetFrame()-&gt;GetPage())</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;page-&gt;GetChromeClient();</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2920"><highlight class="normal">CompositorAnimationHost*<sp/>PaintLayerScrollableArea::GetCompositorAnimationHost()</highlight><highlight class="keyword"></highlight></codeline>
<codeline lineno="2921"><highlight class="keyword"><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>layer_-&gt;GetLayoutObject().GetFrameView()-&gt;GetCompositorAnimationHost();</highlight></codeline>
<codeline lineno="2923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2924"><highlight class="normal">PaintLayerScrollableArea::GetCompositorAnimationTimeline()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>layer_-&gt;GetLayoutObject()</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.GetFrameView()</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetCompositorAnimationTimeline();</highlight></codeline>
<codeline lineno="2928"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2929"><highlight class="normal">CompositorElementId<sp/>PaintLayerScrollableArea::GetCompositorElementId()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CompositorElementIdFromUniqueObjectId(</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;UniqueId(),<sp/>CompositorElementIdNamespace::kScroll);</highlight></codeline>
<codeline lineno="2932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2933"><highlight class="normal">LayoutBox*<sp/>PaintLayerScrollableArea::GetLayoutBox()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>layer_<sp/>?<sp/>layer_-&gt;GetLayoutBox()<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2936"><highlight class="normal">ScrollbarTheme&amp;<sp/>PaintLayerScrollableArea::GetPageScrollbarTheme()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/>DCHECK(!HasBeenDisposed());</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"></highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/>Page*<sp/>page<sp/>=<sp/>GetLayoutBox()-&gt;GetFrame()-&gt;GetPage();</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/>DCHECK(page);</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>page-&gt;GetScrollbarTheme();</highlight></codeline>
<codeline lineno="2943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2944"><highlight class="normal">ScrollOffset<sp/>PaintLayerScrollableArea::GetScrollOffset()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scroll_offset_;</highlight></codeline>
<codeline lineno="2946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2947"><highlight class="normal">ScrollingCoordinator*<sp/>PaintLayerScrollableArea::GetScrollingCoordinator()</highlight><highlight class="keyword"></highlight></codeline>
<codeline lineno="2948"><highlight class="keyword"><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/>LocalFrame*<sp/>frame<sp/>=<sp/>GetLayoutBox()-&gt;GetFrame();</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!frame)</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/>Page*<sp/>page<sp/>=<sp/>frame-&gt;GetPage();</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!page)</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>page-&gt;GetScrollingCoordinator();</highlight></codeline>
<codeline lineno="2958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2959"><highlight class="normal">SmoothScrollSequencer*<sp/>PaintLayerScrollableArea::GetSmoothScrollSequencer()</highlight><highlight class="keyword"></highlight></codeline>
<codeline lineno="2960"><highlight class="keyword"><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasBeenDisposed())</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;GetLayoutBox()-&gt;GetFrame()-&gt;GetSmoothScrollSequencer();</highlight></codeline>
<codeline lineno="2965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::GetTickmarks(Vector&lt;IntRect&gt;&amp;<sp/>tickmarks)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layer_-&gt;IsRootLayer())</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/>tickmarks<sp/>=<sp/>ToLayoutView(GetLayoutBox())-&gt;GetTickmarks();</highlight></codeline>
<codeline lineno="2969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2970"><highlight class="normal">PaintLayerScrollableArea::GetTimerTaskRunner()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetLayoutBox()-&gt;GetFrame()-&gt;GetTaskRunner(TaskType::kInternalDefault);</highlight></codeline>
<codeline lineno="2972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::HasBeenDisposed()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!layer_;</highlight></codeline>
<codeline lineno="2975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::HasHorizontalOverflow()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/>LayoutUnit<sp/>client_width<sp/>=</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LayoutContentRect(kIncludeScrollbars).Width()<sp/>-</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VerticalScrollbarWidth(kIgnorePlatformAndCSSOverlayScrollbarSize);</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NeedsRelayout()<sp/>&amp;&amp;<sp/>!HadVerticalScrollbarBeforeRelayout())</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/>client_width<sp/>+=<sp/>VerticalScrollbarWidth();</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/>LayoutUnit<sp/>scroll_width(ScrollWidth());</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/>LayoutUnit<sp/>box_x<sp/>=<sp/>GetLayoutBox()-&gt;Location().X();</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SnapSizeToPixel(scroll_width,<sp/>box_x)<sp/>&gt;</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SnapSizeToPixel(client_width,<sp/>box_x);</highlight></codeline>
<codeline lineno="2986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::HasNonCompositedStickyDescendants()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PaintLayerScrollableAreaRareData*<sp/>d<sp/>=<sp/>RareData())<sp/>{</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PaintLayer*<sp/>sticky_layer<sp/>:<sp/>d-&gt;sticky_constraints_map_.Keys())<sp/>{</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sticky_layer-&gt;GetLayoutObject().IsSlowRepaintConstrainedObject())</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::HasStickyDescendants()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PaintLayerScrollableAreaRareData*<sp/>d<sp/>=<sp/>RareData())</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!d-&gt;sticky_constraints_map_.IsEmpty();</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::HasVerticalOverflow()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/>LayoutUnit<sp/>client_height<sp/>=</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LayoutContentRect(kIncludeScrollbars).Height()<sp/>-</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HorizontalScrollbarHeight(kIgnorePlatformAndCSSOverlayScrollbarSize);</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/>LayoutUnit<sp/>scroll_height(ScrollHeight());</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/>LayoutUnit<sp/>box_y<sp/>=<sp/>GetLayoutBox()-&gt;Location().Y();</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SnapSizeToPixel(scroll_height,<sp/>box_y)<sp/>&gt;</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SnapSizeToPixel(client_height,<sp/>box_y);</highlight></codeline>
<codeline lineno="3009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::HitTestOverflowControls(</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/>HitTestResult&amp;<sp/>result,</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntPoint&amp;<sp/>local_point)<sp/>{</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasScrollbar()<sp/>&amp;&amp;<sp/>!GetLayoutBox()-&gt;CanResize())</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"></highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/>IntRect<sp/>resize_control_rect;</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;StyleRef().Resize()<sp/>!=<sp/>EResize::kNone)<sp/>{</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_control_rect<sp/>=</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResizerCornerRect(GetLayoutBox()-&gt;PixelSnappedBorderBoxRect(</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Layer()-&gt;SubpixelAccumulation()),</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kResizerForPointer);</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resize_control_rect.Contains(local_point))</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resize_control_size<sp/>=<sp/><ref refid="_c_w_e-787_8c_1affe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref>(resize_control_rect.Height(),<sp/>0);</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/>IntRect<sp/>visible_rect<sp/>=<sp/>VisibleContentRect(kIncludeScrollbars);</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasVerticalScrollbar()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VerticalScrollbar()-&gt;ShouldParticipateInHitTesting())<sp/>{</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/>LayoutRect<sp/>v_bar_rect(</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VerticalScrollbarStart(0,<sp/>Layer()-&gt;PixelSnappedSize().Width()),</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;BorderTop().ToInt(),</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VerticalScrollbar()-&gt;ScrollbarThickness(),</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visible_rect.Height()<sp/>-</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(HasHorizontalScrollbar()</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>HorizontalScrollbar()-&gt;ScrollbarThickness()</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>resize_control_size));</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v_bar_rect.Contains(local_point))<sp/>{</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.SetScrollbar(VerticalScrollbar());</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/>resize_control_size<sp/>=<sp/><ref refid="_c_w_e-787_8c_1affe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref>(resize_control_rect.Width(),<sp/>0);</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasHorizontalScrollbar()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HorizontalScrollbar()-&gt;ShouldParticipateInHitTesting())<sp/>{</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h_scrollbar_thickness<sp/>=<sp/>HorizontalScrollbar()-&gt;ScrollbarThickness();</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/>LayoutRect<sp/>h_bar_rect(</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HorizontalScrollbarStart(0),</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;BorderTop().ToInt()<sp/>+<sp/>visible_rect.Height()<sp/>-</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_scrollbar_thickness,</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visible_rect.Width()<sp/>-<sp/>(HasVerticalScrollbar()</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>VerticalScrollbar()-&gt;ScrollbarThickness()</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>resize_control_size),</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_scrollbar_thickness);</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_bar_rect.Contains(local_point))<sp/>{</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.SetScrollbar(HorizontalScrollbar());</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"></highlight></codeline>
<codeline lineno="3063"><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::HitTestResizerInFragments(</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PaintLayerFragments&amp;<sp/>layer_fragments,</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HitTestLocation&amp;<sp/>hit_test_location)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GetLayoutBox()-&gt;CanResize())</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layer_fragments.IsEmpty())</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>layer_fragments.size()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PaintLayerFragment&amp;<sp/>fragment<sp/>=<sp/>layer_fragments.at(i);</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fragment.background_rect.Intersects(hit_test_location)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResizerCornerRect(PixelSnappedIntRect(fragment.layer_bounds),</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kResizerForPointer)</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Contains(hit_test_location.RoundedPoint()))</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::HorizontalScrollbarHeight(</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/>OverlayScrollbarClipBehavior<sp/>overlay_scrollbar_clip_behavior)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasHorizontalScrollbar())</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overlay_scrollbar_clip_behavior<sp/>==</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kIgnorePlatformAndCSSOverlayScrollbarSize<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;StyleRef().OverflowX()<sp/>==<sp/>EOverflow::kOverlay)<sp/>{</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((overlay_scrollbar_clip_behavior<sp/>==<sp/>kIgnorePlatformOverlayScrollbarSize<sp/>||</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlay_scrollbar_clip_behavior<sp/>==</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kIgnorePlatformAndCSSOverlayScrollbarSize<sp/>||</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!HorizontalScrollbar()-&gt;ShouldParticipateInHitTesting())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HorizontalScrollbar()-&gt;IsOverlayScrollbar())<sp/>{</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HorizontalScrollbar()-&gt;ScrollbarThickness();</highlight></codeline>
<codeline lineno="3103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::HorizontalScrollbarStart(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>min_x<sp/>+<sp/>GetLayoutBox()-&gt;BorderLeft().ToInt();</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;ShouldPlaceBlockDirectionScrollbarOnLogicalLeft())</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>HasVerticalScrollbar()</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>VerticalScrollbar()-&gt;ScrollbarThickness()</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ResizerCornerRect(GetLayoutBox()-&gt;PixelSnappedBorderBoxRect(</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Layer()-&gt;SubpixelAccumulation()),</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kResizerForPointer)</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Width();</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="3114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::HypotheticalScrollbarThickness(</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarOrientation<sp/>orientation)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/>Scrollbar*<sp/>scrollbar<sp/>=<sp/>orientation<sp/>==<sp/>kHorizontalScrollbar</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>HorizontalScrollbar()</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>VerticalScrollbar();</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scrollbar)</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scrollbar-&gt;ScrollbarThickness();</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"></highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutObject&amp;<sp/>style_source<sp/>=<sp/><ref refid="_c_w_e-79_8c_1aa14fc222a7f1d75d7f2596336b2fb9c6" kindref="member">ScrollbarStyleSource</ref>(*GetLayoutBox());</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_custom_scrollbar_style<sp/>=</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>style_source.StyleRef().HasPseudoStyle(kPseudoIdScrollbar);</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_custom_scrollbar_style)<sp/>{</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LayoutScrollbar::HypotheticalScrollbarThickness(</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orientation,<sp/>*GetLayoutBox(),<sp/>style_source);</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/>ScrollbarControlSize<sp/>scrollbar_size<sp/>=<sp/>kRegularScrollbar;</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(style_source.StyleRef().HasAppearance())<sp/>{</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/>scrollbar_size<sp/>=<sp/>LayoutTheme::GetTheme().ScrollbarControlSizeForPart(</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style_source.StyleRef().Appearance());</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/>ScrollbarTheme&amp;<sp/>theme<sp/>=<sp/>GetPageScrollbarTheme();</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(theme.UsesOverlayScrollbars())</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thickness<sp/>=<sp/>theme.ScrollbarThickness(scrollbar_size);</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetLayoutBox()</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetDocument()</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.GetPage()</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetChromeClient()</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WindowToViewportScalar(thickness);</highlight></codeline>
<codeline lineno="3145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3146"><highlight class="normal">uint64_t<sp/>PaintLayerScrollableArea::Id()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DOMNodeIds::IdForNode(GetLayoutBox()-&gt;<ref refid="_c_w_e-79_8c_1a5a703a2f81e3ac28a451bf1b55919957" kindref="member">GetNode</ref>());</highlight></codeline>
<codeline lineno="3148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::InvalidateAllStickyConstraints()<sp/>{</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PaintLayerScrollableAreaRareData*<sp/>d<sp/>=<sp/>RareData())<sp/>{</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PaintLayer*<sp/>sticky_layer<sp/>:<sp/>d-&gt;sticky_constraints_map_.Keys())<sp/>{</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sticky_layer-&gt;GetLayoutObject().StyleRef().GetPosition()<sp/>==</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EPosition::kSticky)<sp/>{</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sticky_layer-&gt;SetNeedsCompositingInputsUpdate();</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sticky_layer-&gt;GetLayoutObject().SetNeedsPaintPropertyUpdate();</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;sticky_constraints_map_.clear();</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::InvalidatePaintForScrollOffsetChange()<sp/>{</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/>InvalidatePaintForStickyDescendants();</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>box<sp/>=<sp/>GetLayoutBox();</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>frame_view<sp/>=<sp/>box-&gt;GetFrameView();</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/>frame_view-&gt;InvalidateBackgroundAttachmentFixedDescendantsOnScroll(*box);</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(box-&gt;IsLayoutView()<sp/>&amp;&amp;<sp/>frame_view-&gt;HasViewportConstrainedObjects()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!frame_view-&gt;InvalidateViewportConstrainedObjects())<sp/>{</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/>box-&gt;SetShouldDoFullPaintInvalidation();</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/>box-&gt;SetSubtreeShouldCheckForPaintInvalidation();</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Layer()-&gt;EnclosingPaginationLayer())</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/>box-&gt;SetSubtreeShouldCheckForPaintInvalidation();</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>background_paint_in_graphics_layer<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>background_paint_in_scrolling_contents<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RuntimeEnabledFeatures::CompositeAfterPaintEnabled()<sp/>||</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UsesCompositedScrolling())<sp/>{</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>background_paint_location<sp/>=<sp/>box-&gt;GetBackgroundPaintLocation();</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/>background_paint_in_graphics_layer<sp/>=</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>background_paint_location<sp/>&amp;<sp/>kBackgroundPaintInGraphicsLayer;</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/>background_paint_in_scrolling_contents<sp/>=</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>background_paint_location<sp/>&amp;<sp/>kBackgroundPaintInScrollingContents;</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>background_layers<sp/>=<sp/>box-&gt;StyleRef().BackgroundLayers();</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((background_layers.AnyLayerHasLocalAttachmentImage()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>background_paint_in_graphics_layer)<sp/>||</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(background_layers.AnyLayerHasDefaultAttachmentImage()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>background_paint_in_scrolling_contents))</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/>box-&gt;SetBackgroundNeedsFullPaintInvalidation();</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RuntimeEnabledFeatures::CompositeAfterPaintEnabled()<sp/>||</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!UsesCompositedScrolling())</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/>Layer()-&gt;SetNeedsRepaint();</highlight></codeline>
<codeline lineno="3198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::InvalidatePaintForStickyDescendants()<sp/>{</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PaintLayerScrollableAreaRareData*<sp/>d<sp/>=<sp/>RareData())<sp/>{</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(PaintLayer*<sp/>sticky_layer<sp/>:<sp/>d-&gt;sticky_constraints_map_.Keys())</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sticky_layer-&gt;GetLayoutObject().SetNeedsPaintPropertyUpdate();</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3205" refid="_c_w_e-79_8c_1a3b9e9a9dcac654659a8bcd2165396793" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a3b9e9a9dcac654659a8bcd2165396793" kindref="member">InvalidatePaintOfScrollControlIfNeeded</ref>(</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutRect&amp;<sp/>new_visual_rect,</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutRect&amp;<sp/>previous_visual_rect,</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_paint_invalidation,</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/>LayoutBox&amp;<sp/>box,</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutBoxModelObject&amp;<sp/>paint_invalidation_container)<sp/>{</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_invalidate_new_rect<sp/>=<sp/>needs_paint_invalidation;</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_visual_rect<sp/>!=<sp/>previous_visual_rect)<sp/>{</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/>should_invalidate_new_rect<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(previous_visual_rect.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(new_visual_rect.IsEmpty());</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/>should_invalidate_new_rect<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>should_invalidate_new_rect;</highlight></codeline>
<codeline lineno="3220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::InvalidatePaintOfScrollControlsIfNeeded(</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PaintInvalidatorContext&amp;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/>LayoutBox&amp;<sp/>box<sp/>=<sp/>*GetLayoutBox();</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/>SetHorizontalScrollbarVisualRect(<ref refid="_c_w_e-79_8c_1a963e0d0714c6b5234aa802216aa62824" kindref="member">InvalidatePaintOfScrollbarIfNeeded</ref>(</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HorizontalScrollbar(),<sp/>LayerForHorizontalScrollbar(),</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>horizontal_scrollbar_previously_was_overlay_,</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>horizontal_scrollbar_visual_rect_,</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HorizontalScrollbarNeedsPaintInvalidation(),<sp/>box,<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>));</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/>SetVerticalScrollbarVisualRect(<ref refid="_c_w_e-79_8c_1a963e0d0714c6b5234aa802216aa62824" kindref="member">InvalidatePaintOfScrollbarIfNeeded</ref>(</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VerticalScrollbar(),<sp/>LayerForVerticalScrollbar(),</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertical_scrollbar_previously_was_overlay_,</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertical_scrollbar_visual_rect_,</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VerticalScrollbarNeedsPaintInvalidation(),<sp/>box,<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>));</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/>LayoutRect<sp/>scroll_corner_and_resizer_visual_rect<sp/>=</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a81c4c21d3596064af4bfb2a9a4574248" kindref="member">ScrollControlVisualRect</ref>(ScrollCornerAndResizerRect(),<sp/>box,<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scroll_corner_and_resizer_visual_rect_);</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutBoxModelObject&amp;<sp/>paint_invalidation_container<sp/>=</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>.paint_invalidation_container;</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a3b9e9a9dcac654659a8bcd2165396793" kindref="member">InvalidatePaintOfScrollControlIfNeeded</ref>(</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scroll_corner_and_resizer_visual_rect,</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scroll_corner_and_resizer_visual_rect_,</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScrollCornerNeedsPaintInvalidation(),<sp/>box,</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paint_invalidation_container))<sp/>{</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/>SetScrollCornerAndResizerVisualRect(scroll_corner_and_resizer_visual_rect);</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LayoutScrollbarPart*<sp/>scroll_corner<sp/>=<sp/>ScrollCorner())<sp/>{</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ObjectPaintInvalidator(*scroll_corner)</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.InvalidateDisplayItemClientsIncludingNonCompositingDescendants(</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PaintInvalidationReason::kScrollControl);</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LayoutScrollbarPart*<sp/>resizer<sp/>=<sp/>Resizer())<sp/>{</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ObjectPaintInvalidator(*resizer)</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.InvalidateDisplayItemClientsIncludingNonCompositingDescendants(</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PaintInvalidationReason::kScrollControl);</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/>ClearNeedsPaintInvalidationForScrollControls();</highlight></codeline>
<codeline lineno="3259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3260" refid="_c_w_e-79_8c_1a963e0d0714c6b5234aa802216aa62824" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LayoutRect<sp/><ref refid="_c_w_e-79_8c_1a963e0d0714c6b5234aa802216aa62824" kindref="member">InvalidatePaintOfScrollbarIfNeeded</ref>(</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/>Scrollbar*<sp/>scrollbar,</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphicsLayer*<sp/>graphics_layer,</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>previously_was_overlay,</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutRect&amp;<sp/>previous_visual_rect,</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_paint_invalidation_arg,</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/>LayoutBox&amp;<sp/>box,</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PaintInvalidatorContext&amp;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_overlay<sp/>=<sp/>scrollbar<sp/>&amp;&amp;<sp/>scrollbar-&gt;IsOverlayScrollbar();</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/>LayoutRect<sp/>new_visual_rect;</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scrollbar<sp/>&amp;&amp;<sp/>!(graphics_layer<sp/>&amp;&amp;<sp/>is_overlay))<sp/>{</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/>new_visual_rect<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a81c4c21d3596064af4bfb2a9a4574248" kindref="member">ScrollControlVisualRect</ref>(scrollbar-&gt;FrameRect(),<sp/>box,</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>previous_visual_rect);</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_paint_invalidation<sp/>=<sp/>needs_paint_invalidation_arg;</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needs_paint_invalidation<sp/>&amp;&amp;<sp/>graphics_layer)<sp/>{</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/>needs_paint_invalidation<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(!graphics_layer-&gt;PaintsContentOrHitTest()<sp/>||</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphics_layer-&gt;GetPaintController().GetPaintArtifact().IsEmpty());</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutBoxModelObject&amp;<sp/>paint_invalidation_container<sp/>=</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>.paint_invalidation_container;</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/>LayoutSize<sp/>new_scrollbar_used_space_in_box;</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_overlay)</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/>new_scrollbar_used_space_in_box<sp/>=<sp/>new_visual_rect.Size();</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/>LayoutSize<sp/>previous_scrollbar_used_space_in_box;</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!previously_was_overlay)</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/>previous_scrollbar_used_space_in_box<sp/>=<sp/>previous_visual_rect.Size();</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(new_scrollbar_used_space_in_box.IsEmpty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous_scrollbar_used_space_in_box.IsEmpty())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_scrollbar_used_space_in_box<sp/>!=<sp/>previous_scrollbar_used_space_in_box)<sp/>{</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>.painting_layer-&gt;SetNeedsRepaint();</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/>ObjectPaintInvalidator(box).InvalidateDisplayItemClient(</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box,<sp/>PaintInvalidationReason::kGeometry);</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"></highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>invalidated<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a3b9e9a9dcac654659a8bcd2165396793" kindref="member">InvalidatePaintOfScrollControlIfNeeded</ref>(</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_visual_rect,<sp/>previous_visual_rect,<sp/>needs_paint_invalidation,<sp/>box,</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>paint_invalidation_container);</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"></highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/>previously_was_overlay<sp/>=<sp/>is_overlay;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"></highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!invalidated<sp/>||<sp/>!scrollbar<sp/>||<sp/>graphics_layer)</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_visual_rect;</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"></highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>.painting_layer-&gt;SetNeedsRepaint();</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/>ObjectPaintInvalidator(box).InvalidateDisplayItemClient(</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*scrollbar,<sp/>PaintInvalidationReason::kScrollControl);</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scrollbar-&gt;IsCustomScrollbar())<sp/>{</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/>ToLayoutScrollbar(scrollbar)</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;InvalidateDisplayItemClientsOfScrollbarParts();</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"></highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_visual_rect;</highlight></codeline>
<codeline lineno="3318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::InvalidateStickyConstraintsFor(</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/>PaintLayer*<sp/>layer,</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_compositing_update)<sp/>{</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PaintLayerScrollableAreaRareData*<sp/>d<sp/>=<sp/>RareData())<sp/>{</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;sticky_constraints_map_.erase(layer);</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needs_compositing_update<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;GetLayoutObject().StyleRef().HasStickyConstrainedPosition())<sp/>{</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;SetNeedsCompositingInputsUpdate();</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>layer-&gt;GetLayoutObject().SetNeedsPaintPropertyUpdate();</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::IsActive()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/>Page*<sp/>page<sp/>=<sp/>GetLayoutBox()-&gt;GetFrame()-&gt;GetPage();</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>page<sp/>&amp;&amp;<sp/>page-&gt;GetFocusController().IsActive();</highlight></codeline>
<codeline lineno="3334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::IsPointInResizeControl(</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntPoint&amp;<sp/>absolute_point,</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/>ResizerHitTestType<sp/>resizer_hit_test_type)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GetLayoutBox()-&gt;CanResize())</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"></highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/>IntPoint<sp/>local_point<sp/>=<sp/>RoundedIntPoint(GetLayoutBox()-&gt;<ref refid="_c_w_e-79_8c_1a8ca3b9e319ea7526107a927e3369246a" kindref="member">AbsoluteToLocal</ref>(</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FloatPoint(absolute_point),<sp/>kUseTransforms));</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/>IntRect<sp/>local_bounds(IntPoint(),<sp/>Layer()-&gt;PixelSnappedSize());</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ResizerCornerRect(local_bounds,<sp/>resizer_hit_test_type)</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Contains(local_point);</highlight></codeline>
<codeline lineno="3346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::IsScrollCornerVisible()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!ScrollCornerRect().IsEmpty();</highlight></codeline>
<codeline lineno="3349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::IsThrottled()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetLayoutBox()-&gt;GetFrame()-&gt;ShouldThrottleRendering();</highlight></codeline>
<codeline lineno="3352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3353"><highlight class="normal">IntPoint<sp/>PaintLayerScrollableArea::LastKnownMousePosition()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetLayoutBox()-&gt;GetFrame()<sp/>?<sp/>GetLayoutBox()</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetFrame()</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetEventHandler()</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.LastKnownMousePositionInRootFrame()</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>IntPoint();</highlight></codeline>
<codeline lineno="3359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3360"><highlight class="normal">PaintLayer*<sp/>PaintLayerScrollableArea::Layer()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>layer_;</highlight></codeline>
<codeline lineno="3362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3363"><highlight class="normal">GraphicsLayer*<sp/>PaintLayerScrollableArea::LayerForHorizontalScrollbar()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/>DisableCompositingQueryAsserts<sp/>disabler;</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Layer()-&gt;HasCompositedLayerMapping()</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>Layer()</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetCompositedLayerMapping()</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;LayerForHorizontalScrollbar()</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3372"><highlight class="normal">GraphicsLayer*<sp/>PaintLayerScrollableArea::LayerForScrollCorner()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/>DisableCompositingQueryAsserts<sp/>disabler;</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"></highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Layer()-&gt;HasCompositedLayerMapping()</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>Layer()-&gt;GetCompositedLayerMapping()-&gt;LayerForScrollCorner()</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3379"><highlight class="normal">GraphicsLayer*<sp/>PaintLayerScrollableArea::LayerForScrolling()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Layer()-&gt;HasCompositedLayerMapping()</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>Layer()-&gt;GetCompositedLayerMapping()-&gt;ScrollingContentsLayer()</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3384"><highlight class="normal">GraphicsLayer*<sp/>PaintLayerScrollableArea::LayerForVerticalScrollbar()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/>DisableCompositingQueryAsserts<sp/>disabler;</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"></highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Layer()-&gt;HasCompositedLayerMapping()</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>Layer()-&gt;GetCompositedLayerMapping()-&gt;LayerForVerticalScrollbar()</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3391" refid="_c_w_e-79_8c_1a17f9c42e8a407fda3e792baf74c8f8c2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a17f9c42e8a407fda3e792baf74c8f8c2" kindref="member">LayerNodeMayNeedCompositedScrolling</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PaintLayer*<sp/>layer)<sp/>{</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node*<sp/>node<sp/>=<sp/>layer-&gt;GetLayoutObject().GetNode())<sp/>{</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsHTMLSelectElement(node))</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TextControlElement*<sp/>text_control<sp/>=<sp/>EnclosingTextControl(node))<sp/>{</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsHTMLInputElement(text_control))<sp/>{</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3403"><highlight class="normal">LayoutRect<sp/>PaintLayerScrollableArea::LayoutContentRect(</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/>IncludeScrollbarsInRect<sp/>scrollbar_inclusion)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/>LayoutSize<sp/>layer_size(Layer()-&gt;Size());</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/>LayoutUnit<sp/>border_width<sp/>=<sp/>GetLayoutBox()-&gt;BorderWidth();</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/>LayoutUnit<sp/>border_height<sp/>=<sp/>GetLayoutBox()-&gt;BorderHeight();</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/>LayoutUnit<sp/>horizontal_scrollbar_height,<sp/>vertical_scrollbar_width;</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scrollbar_inclusion<sp/>==<sp/>kExcludeScrollbars)<sp/>{</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontal_scrollbar_height<sp/>=<sp/>LayoutUnit(</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HorizontalScrollbar()<sp/>&amp;&amp;<sp/>!HorizontalScrollbar()-&gt;IsOverlayScrollbar()</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>HorizontalScrollbar()-&gt;ScrollbarThickness()</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/>vertical_scrollbar_width<sp/>=<sp/>LayoutUnit(</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VerticalScrollbar()<sp/>&amp;&amp;<sp/>!VerticalScrollbar()-&gt;IsOverlayScrollbar()</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>VerticalScrollbar()-&gt;ScrollbarThickness()</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LayoutRect(</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LayoutPoint(ScrollPosition()),</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LayoutSize(</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer_size.Width()<sp/>-<sp/>border_width<sp/>-<sp/>vertical_scrollbar_width,</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layer_size.Height()<sp/>-<sp/>border_height<sp/>-<sp/>horizontal_scrollbar_height)</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ExpandedTo(LayoutSize()));</highlight></codeline>
<codeline lineno="3426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3427" refid="_c_w_e-79_8c_1acca9f6bb735ad83e9b7bc21bb6128691" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LayoutRect<sp/><ref refid="_c_w_e-79_8c_1acca9f6bb735ad83e9b7bc21bb6128691" kindref="member">LocalToAbsolute</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutBox&amp;<sp/>box,<sp/>LayoutRect<sp/>rect)<sp/>{</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LayoutRect(</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>box.LocalToAbsoluteQuad(FloatQuad(FloatRect(rect)),<sp/>kUseTransforms)</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.BoundingBox());</highlight></codeline>
<codeline lineno="3431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3432"><highlight class="normal">FloatQuad<sp/>PaintLayerScrollableArea::LocalToVisibleContentQuad(</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FloatQuad&amp;<sp/>quad,</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutObject*<sp/>local_object,</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/>MapCoordinatesFlags<sp/>flags)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/>LayoutBox*<sp/>box<sp/>=<sp/>GetLayoutBox();</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!box)</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>quad;</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/>DCHECK(local_object);</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>local_object-&gt;LocalToAncestorQuad(quad,<sp/>box,<sp/>flags);</highlight></codeline>
<codeline lineno="3441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3442"><highlight class="normal">IntSize<sp/>PaintLayerScrollableArea::MaximumScrollOffsetInt()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GetLayoutBox()<sp/>||<sp/>!GetLayoutBox()-&gt;HasOverflowClip())</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ToIntSize(-ScrollOrigin());</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"></highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/>IntSize<sp/>content_size<sp/>=<sp/>ContentsSize();</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/>Page*<sp/>page<sp/>=<sp/>GetLayoutBox()-&gt;GetDocument().GetPage();</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/>DCHECK(page);</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/>TopDocumentRootScrollerController&amp;<sp/>controller<sp/>=</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>page-&gt;GlobalRootScrollerController();</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"></highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/>IntSize<sp/>visible_size;</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>controller.RootScrollerArea())<sp/>{</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/>visible_size<sp/>=<sp/>controller.RootScrollerVisibleArea();</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/>visible_size<sp/>=</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PixelSnappedIntRect(GetLayoutBox()-&gt;OverflowClipRect(</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;Location(),</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kIgnorePlatformAndCSSOverlayScrollbarSize))</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Size();</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/>content_size<sp/>=<sp/>content_size.ExpandedTo(visible_size);</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ToIntSize(-ScrollOrigin()<sp/>+<sp/>(content_size<sp/>-<sp/>visible_size));</highlight></codeline>
<codeline lineno="3467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3468"><highlight class="normal">IntSize<sp/>PaintLayerScrollableArea::MinimumScrollOffsetInt()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ToIntSize(-ScrollOrigin());</highlight></codeline>
<codeline lineno="3470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3471"><highlight class="normal">LayoutSize<sp/>PaintLayerScrollableArea::MinimumSizeForResizing(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zoom_factor)<sp/>{</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/>LayoutUnit<sp/>min_width<sp/>=</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MinimumValueForLength(GetLayoutBox()-&gt;StyleRef().MinWidth(),</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;ContainingBlock()-&gt;Size().Width());</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/>LayoutUnit<sp/>min_height<sp/>=</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MinimumValueForLength(GetLayoutBox()-&gt;StyleRef().MinHeight(),</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;ContainingBlock()-&gt;Size().Height());</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/>min_width<sp/>=<sp/><ref refid="_c_w_e-787_8c_1affe776513b24d84b39af8ab0930fef7f" kindref="member">std::max</ref>(LayoutUnit(min_width<sp/>/<sp/>zoom_factor),</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayoutUnit(kDefaultMinimumWidthForResizing));</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/>min_height<sp/>=<sp/><ref refid="_c_w_e-787_8c_1affe776513b24d84b39af8ab0930fef7f" kindref="member">std::max</ref>(LayoutUnit(min_height<sp/>/<sp/>zoom_factor),</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayoutUnit(kDefaultMinimumHeightForResizing));</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LayoutSize(min_width,<sp/>min_height);</highlight></codeline>
<codeline lineno="3483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3484"><highlight class="normal">PaintLayerScrollableArea::DelayScrollOffsetClampScope::NeedsClampList()<sp/>{</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/>DEFINE_STATIC_LOCAL(</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Persistent&lt;HeapVector&lt;Member&lt;PaintLayerScrollableArea&gt;&gt;&gt;,</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_clamp_list,</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(MakeGarbageCollected&lt;HeapVector&lt;Member&lt;PaintLayerScrollableArea&gt;&gt;&gt;()));</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*needs_clamp_list;</highlight></codeline>
<codeline lineno="3490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3491"><highlight class="normal">PaintLayerScrollableArea::PreventRelayoutScope::NeedsRelayoutList()<sp/>{</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/>DEFINE_STATIC_LOCAL(</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Persistent&lt;HeapVector&lt;Member&lt;PaintLayerScrollableArea&gt;&gt;&gt;,</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_relayout_list,</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(MakeGarbageCollected&lt;HeapVector&lt;Member&lt;PaintLayerScrollableArea&gt;&gt;&gt;()));</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*needs_relayout_list;</highlight></codeline>
<codeline lineno="3497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::NeedsScrollbarReconstruction()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasScrollbar())</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"></highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutObject&amp;<sp/>style_source<sp/>=<sp/><ref refid="_c_w_e-79_8c_1aa14fc222a7f1d75d7f2596336b2fb9c6" kindref="member">ScrollbarStyleSource</ref>(*GetLayoutBox());</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_custom<sp/>=</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>style_source.IsBox()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>style_source.StyleRef().HasPseudoStyle(kPseudoIdScrollbar);</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"></highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/>Scrollbar*<sp/>scrollbars[]<sp/>=<sp/>{HorizontalScrollbar(),<sp/>VerticalScrollbar()};</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"></highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Scrollbar*<sp/>scrollbar<sp/>:<sp/>scrollbars)<sp/>{</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scrollbar)</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"></highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scrollbar-&gt;IsCustomScrollbar()<sp/>!=<sp/>needs_custom)</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needs_custom)<sp/>{</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DCHECK(scrollbar-&gt;IsCustomScrollbar());</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ToLayoutScrollbar(scrollbar)-&gt;StyleSource()-&gt;GetLayoutObject()<sp/>!=</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style_source)<sp/>{</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"></highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"></highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/>Page*<sp/>page<sp/>=<sp/>GetLayoutBox()-&gt;GetFrame()-&gt;LocalFrameRoot().GetPage();</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(page);</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarTheme*<sp/>current_theme<sp/>=<sp/>&amp;page-&gt;GetScrollbarTheme();</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"></highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_theme<sp/>!=<sp/>&amp;scrollbar-&gt;GetTheme())</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3535"><highlight class="normal">IntSize<sp/>PaintLayerScrollableArea::OffsetFromResizeCorner(</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntPoint&amp;<sp/>absolute_point)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/>IntSize<sp/>element_size<sp/>=<sp/>Layer()-&gt;PixelSnappedSize();</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;ShouldPlaceBlockDirectionScrollbarOnLogicalLeft())</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/>element_size.SetWidth(0);</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/>IntPoint<sp/>resizer_point<sp/>=<sp/>IntPoint(element_size);</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/>IntPoint<sp/>local_point<sp/>=<sp/>RoundedIntPoint(GetLayoutBox()-&gt;<ref refid="_c_w_e-79_8c_1a8ca3b9e319ea7526107a927e3369246a" kindref="member">AbsoluteToLocal</ref>(</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FloatPoint(absolute_point),<sp/>kUseTransforms));</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>local_point<sp/>-<sp/>resizer_point;</highlight></codeline>
<codeline lineno="3544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3545"><highlight class="normal">PaintLayerScrollableArea::ScrollingBackgroundDisplayItemClient::OwnerNodeId()</highlight><highlight class="keyword"></highlight></codeline>
<codeline lineno="3546"><highlight class="keyword"><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">DisplayItemClient*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(scrollable_area_-&gt;GetLayoutBox())</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;OwnerNodeId();</highlight></codeline>
<codeline lineno="3549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::PageStep(ScrollbarOrientation<sp/>orientation)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/>IntSize<sp/>snapport_size<sp/>=<sp/>VisibleScrollSnapportRect().PixelSnappedSize();</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>(orientation<sp/>==<sp/>kHorizontalScrollbar)<sp/>?<sp/>snapport_size.Width()</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>snapport_size.Height();</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_page_step<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(length)<sp/>*</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScrollableArea::MinFractionToStepWhenPaging();</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>page_step<sp/>=<sp/><ref refid="_c_w_e-787_8c_1affe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref>(min_page_step,<sp/>length<sp/>-<sp/>MaxOverlapBetweenPages());</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-787_8c_1affe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref>(page_step,<sp/>1);</highlight></codeline>
<codeline lineno="3558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3559"><highlight class="normal">PaintLayerScrollableArea::PaintLayerScrollableArea(PaintLayer&amp;<sp/>layer)</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>layer_(&amp;layer),</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in_resize_mode_(false),</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scrolls_overflow_(false),</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in_overflow_relayout_(false),</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>allow_second_overflow_relayout_(false),</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_composited_scrolling_(false),</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rebuild_horizontal_scrollbar_layer_(false),</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rebuild_vertical_scrollbar_layer_(false),</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_scroll_offset_clamp_(false),</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_relayout_(false),</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>had_horizontal_scrollbar_before_relayout_(false),</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>had_vertical_scrollbar_before_relayout_(false),</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scroll_origin_changed_(false),</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scrollbar_manager_(*this),</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scroll_corner_(nullptr),</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resizer_(nullptr),</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scroll_anchor_(this),</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>non_composited_main_thread_scrolling_reasons_(0),</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>horizontal_scrollbar_previously_was_overlay_(false),</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertical_scrollbar_previously_was_overlay_(false),</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scrolling_background_display_item_client_(*this)<sp/>{</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/>Node*<sp/>node<sp/>=<sp/>GetLayoutBox()-&gt;GetNode();</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>&amp;&amp;<sp/>node-&gt;IsElementNode())<sp/>{</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/>Element*<sp/>element<sp/>=<sp/>ToElement(node);</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/>scroll_offset_<sp/>=<sp/>element-&gt;SavedLayerScrollOffset();</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scroll_offset_.IsZero())</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetScrollAnimator().SetCurrentOffset(scroll_offset_);</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/>element-&gt;SetSavedLayerScrollOffset(ScrollOffset());</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/>UpdateResizerAreaSet();</highlight></codeline>
<codeline lineno="3590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3591" refid="_c_w_e-79_8c_1a9d46271da10581b6214b91fa2f6622cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a9d46271da10581b6214b91fa2f6622cc" kindref="member">PaintedOutputOfObjectHasNoEffectRegardlessOfSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scrollable_area_-&gt;GetLayoutBox()</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;PaintedOutputOfObjectHasNoEffectRegardlessOfSize();</highlight></codeline>
<codeline lineno="3594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3595"><highlight class="normal">IntSize<sp/>PaintLayerScrollableArea::PixelSnappedContentsSize(</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutPoint&amp;<sp/>paint_offset)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PixelSnappedIntSize(overflow_rect_.Size(),<sp/>paint_offset);</highlight></codeline>
<codeline lineno="3598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::PositionOverflowControls()<sp/>{</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasScrollbar()<sp/>&amp;&amp;<sp/>!GetLayoutBox()-&gt;CanResize())</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"></highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntRect<sp/>border_box<sp/>=</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;PixelSnappedBorderBoxRect(layer_-&gt;SubpixelAccumulation());</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"></highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Scrollbar*<sp/>vertical_scrollbar<sp/>=<sp/>VerticalScrollbar())</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/>vertical_scrollbar-&gt;SetFrameRect(RectForVerticalScrollbar(border_box));</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"></highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Scrollbar*<sp/>horizontal_scrollbar<sp/>=<sp/>HorizontalScrollbar())</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontal_scrollbar-&gt;SetFrameRect(RectForHorizontalScrollbar(border_box));</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"></highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntRect&amp;<sp/>scroll_corner<sp/>=<sp/>ScrollCornerRect();</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scroll_corner_)</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/>scroll_corner_-&gt;SetFrameRect(LayoutRect(scroll_corner));</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"></highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resizer_)</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/>resizer_-&gt;SetFrameRect(</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayoutRect(ResizerCornerRect(border_box,<sp/>kResizerForPointer)));</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Layer()-&gt;HasCompositedLayerMapping())</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/>Layer()-&gt;GetCompositedLayerMapping()-&gt;PositionOverflowControlsLayers();</highlight></codeline>
<codeline lineno="3622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3623"><highlight class="normal">PaintLayerScrollableArea::PreventRelayoutScope::PreventRelayoutScope(</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/>SubtreeLayoutScope&amp;<sp/>layout_scope)<sp/>{</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!count_)<sp/>{</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(!layout_scope_);</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(NeedsRelayoutList().IsEmpty());</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/>layout_scope_<sp/>=<sp/>&amp;layout_scope;</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/>count_++;</highlight></codeline>
<codeline lineno="3631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3632"><highlight class="normal">IntRect<sp/>PaintLayerScrollableArea::RectForHorizontalScrollbar(</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntRect&amp;<sp/>border_box_rect)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasHorizontalScrollbar())</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntRect();</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntRect&amp;<sp/>scroll_corner<sp/>=<sp/>ScrollCornerRect();</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"></highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntRect(</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HorizontalScrollbarStart(border_box_rect.X()),</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>border_box_rect.MaxY()<sp/>-<sp/>GetLayoutBox()-&gt;BorderBottom().ToInt()<sp/>-</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HorizontalScrollbar()-&gt;ScrollbarThickness(),</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>border_box_rect.Width()<sp/>-</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GetLayoutBox()-&gt;BorderLeft()<sp/>+<sp/>GetLayoutBox()-&gt;BorderRight())</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToInt()<sp/>-</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scroll_corner.Width(),</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HorizontalScrollbar()-&gt;ScrollbarThickness());</highlight></codeline>
<codeline lineno="3648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3649"><highlight class="normal">IntRect<sp/>PaintLayerScrollableArea::RectForVerticalScrollbar(</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntRect&amp;<sp/>border_box_rect)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasVerticalScrollbar())</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntRect();</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntRect&amp;<sp/>scroll_corner<sp/>=<sp/>ScrollCornerRect();</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"></highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntRect(</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VerticalScrollbarStart(border_box_rect.X(),<sp/>border_box_rect.MaxX()),</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>border_box_rect.Y()<sp/>+<sp/>GetLayoutBox()-&gt;BorderTop().ToInt(),</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VerticalScrollbar()-&gt;ScrollbarThickness(),</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>border_box_rect.Height()<sp/>-</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GetLayoutBox()-&gt;BorderTop()<sp/>+<sp/>GetLayoutBox()-&gt;BorderBottom())</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToInt()<sp/>-</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scroll_corner.Height());</highlight></codeline>
<codeline lineno="3664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::RegisterForAnimation()<sp/>{</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasBeenDisposed())</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LocalFrame*<sp/>frame<sp/>=<sp/>GetLayoutBox()-&gt;GetFrame())<sp/>{</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LocalFrameView*<sp/>frame_view<sp/>=<sp/>frame-&gt;View())</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame_view-&gt;AddAnimatingScrollableArea(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ResetRebuildScrollbarLayerFlags()<sp/>{</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/>rebuild_horizontal_scrollbar_layer_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/>rebuild_vertical_scrollbar_layer_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::PreventRelayoutScope::ResetRelayoutNeeded()<sp/>{</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/>DCHECK_EQ(count_,<sp/>0);</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/>DCHECK(NeedsRelayoutList().IsEmpty());</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/>relayout_needed_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::Resize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntPoint&amp;<sp/>pos,</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutSize&amp;<sp/>old_offset)<sp/>{</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!InResizeMode()<sp/>||<sp/>!GetLayoutBox()-&gt;CanResize()<sp/>||</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!GetLayoutBox()-&gt;<ref refid="_c_w_e-79_8c_1a5a703a2f81e3ac28a451bf1b55919957" kindref="member">GetNode</ref>())</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/>DCHECK(GetLayoutBox()-&gt;<ref refid="_c_w_e-79_8c_1a5a703a2f81e3ac28a451bf1b55919957" kindref="member">GetNode</ref>()-&gt;IsElementNode());</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/>Element*<sp/>element<sp/>=<sp/>ToElement(GetLayoutBox()-&gt;<ref refid="_c_w_e-79_8c_1a5a703a2f81e3ac28a451bf1b55919957" kindref="member">GetNode</ref>());</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"></highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/>Document&amp;<sp/>document<sp/>=<sp/>element-&gt;GetDocument();</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"></highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zoom_factor<sp/>=<sp/>GetLayoutBox()-&gt;StyleRef().EffectiveZoom();</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/>IntSize<sp/>new_offset<sp/>=</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OffsetFromResizeCorner(document.View()-&gt;ConvertFromRootFrame(pos));</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/>new_offset.SetWidth(new_offset.Width()<sp/>/<sp/>zoom_factor);</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/>new_offset.SetHeight(new_offset.Height()<sp/>/<sp/>zoom_factor);</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"></highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/>LayoutSize<sp/>current_size<sp/>=<sp/>GetLayoutBox()-&gt;Size();</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/>current_size.Scale(1<sp/>/<sp/>zoom_factor);</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/>LayoutSize<sp/>adjusted_old_offset<sp/>=<sp/>LayoutSize(</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>old_offset.Width()<sp/>/<sp/>zoom_factor,<sp/>old_offset.Height()<sp/>/<sp/>zoom_factor);</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;ShouldPlaceBlockDirectionScrollbarOnLogicalLeft())<sp/>{</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/>new_offset.SetWidth(-new_offset.Width());</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/>adjusted_old_offset.SetWidth(-adjusted_old_offset.Width());</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"></highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/>LayoutSize<sp/>difference((current_size<sp/>+<sp/>new_offset<sp/>-<sp/>adjusted_old_offset)</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ExpandedTo(MinimumSizeForResizing(zoom_factor))<sp/>-</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_size);</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"></highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_box_sizing_border<sp/>=</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;StyleRef().BoxSizing()<sp/>==<sp/>EBoxSizing::kBorderBox;</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"></highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/>EResize<sp/>resize<sp/>=</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResolvedResize(GetLayoutBox()-&gt;StyleRef(),</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;ContainingBlock()-&gt;StyleRef());</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resize<sp/>!=<sp/>EResize::kVertical<sp/>&amp;&amp;<sp/>difference.Width())<sp/>{</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element-&gt;IsFormControlElement())<sp/>{</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;SetInlineStyleProperty(</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CSSPropertyMarginLeft,<sp/>GetLayoutBox()-&gt;MarginLeft()<sp/>/<sp/>zoom_factor,</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CSSPrimitiveValue::UnitType::kPixels);</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;SetInlineStyleProperty(</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CSSPropertyMarginRight,<sp/>GetLayoutBox()-&gt;MarginRight()<sp/>/<sp/>zoom_factor,</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CSSPrimitiveValue::UnitType::kPixels);</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/>LayoutUnit<sp/>base_width<sp/>=</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;Size().Width()<sp/>-</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(is_box_sizing_border<sp/>?<sp/>LayoutUnit()</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>GetLayoutBox()-&gt;BorderAndPaddingWidth());</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/>base_width<sp/>=<sp/>LayoutUnit(base_width<sp/>/<sp/>zoom_factor);</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/>element-&gt;SetInlineStyleProperty(CSSPropertyWidth,</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RoundToInt(base_width<sp/>+<sp/>difference.Width()),</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CSSPrimitiveValue::UnitType::kPixels);</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"></highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resize<sp/>!=<sp/>EResize::kHorizontal<sp/>&amp;&amp;<sp/>difference.Height())<sp/>{</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element-&gt;IsFormControlElement())<sp/>{</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;SetInlineStyleProperty(CSSPropertyMarginTop,</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;MarginTop()<sp/>/<sp/>zoom_factor,</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CSSPrimitiveValue::UnitType::kPixels);</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;SetInlineStyleProperty(</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CSSPropertyMarginBottom,<sp/>GetLayoutBox()-&gt;MarginBottom()<sp/>/<sp/>zoom_factor,</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CSSPrimitiveValue::UnitType::kPixels);</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/>LayoutUnit<sp/>base_height<sp/>=</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;Size().Height()<sp/>-</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(is_box_sizing_border<sp/>?<sp/>LayoutUnit()</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>GetLayoutBox()-&gt;BorderAndPaddingHeight());</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/>base_height<sp/>=<sp/>LayoutUnit(base_height<sp/>/<sp/>zoom_factor);</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/>element-&gt;SetInlineStyleProperty(</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CSSPropertyHeight,<sp/>RoundToInt(base_height<sp/>+<sp/>difference.Height()),</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CSSPrimitiveValue::UnitType::kPixels);</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"></highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/>document.UpdateStyleAndLayout();</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"></highlight></codeline>
<codeline lineno="3760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3761"><highlight class="normal">IntRect<sp/>PaintLayerScrollableArea::ResizerCornerRect(</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntRect&amp;<sp/>bounds,</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/>ResizerHitTestType<sp/>resizer_hit_test_type)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;StyleRef().Resize()<sp/>==<sp/>EResize::kNone)</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntRect();</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/>IntRect<sp/>corner<sp/>=<sp/>CornerRect(bounds);</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"></highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resizer_hit_test_type<sp/>==<sp/>kResizerForTouch)<sp/>{</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expand_ratio<sp/>=<sp/>kResizerControlExpandRatioForTouch<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/>corner.Move(-corner.Width()<sp/>*<sp/>expand_ratio,</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-corner.Height()<sp/>*<sp/>expand_ratio);</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/>corner.Expand(corner.Width()<sp/>*<sp/>expand_ratio,</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corner.Height()<sp/>*<sp/>expand_ratio);</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"></highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>corner;</highlight></codeline>
<codeline lineno="3777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::RestoreScrollAnchor(</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SerializedAnchor&amp;<sp/>serialized_anchor)<sp/>{</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ShouldPerformScrollAnchoring()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scroll_anchor_.RestoreAnchor(serialized_anchor);</highlight></codeline>
<codeline lineno="3782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ScheduleAnimation()<sp/>{</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ChromeClient*<sp/>client<sp/>=<sp/>GetChromeClient())<sp/>{</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/>client-&gt;ScheduleAnimation(GetLayoutBox()-&gt;GetFrame()-&gt;View());</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ScrollAnimatorEnabled()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasBeenDisposed())</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Settings*<sp/>settings<sp/>=<sp/>GetLayoutBox()-&gt;GetFrame()-&gt;GetSettings())</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>settings-&gt;GetScrollAnimatorEnabled();</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3797"><highlight class="normal">ScrollBehavior<sp/>PaintLayerScrollableArea::ScrollBehaviorStyle()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetLayoutBox()-&gt;StyleRef().GetScrollBehavior();</highlight></codeline>
<codeline lineno="3799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3800" refid="_c_w_e-79_8c_1a81c4c21d3596064af4bfb2a9a4574248" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LayoutRect<sp/><ref refid="_c_w_e-79_8c_1a81c4c21d3596064af4bfb2a9a4574248" kindref="member">ScrollControlVisualRect</ref>(</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IntRect&amp;<sp/>scroll_control_rect,</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutBox&amp;<sp/>box,</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PaintInvalidatorContext&amp;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutRect&amp;<sp/>previous_visual_rect)<sp/>{</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/>LayoutRect<sp/>visual_rect(scroll_control_rect);</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DCHECK_IS_ON()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/>FindVisualRectNeedingUpdateScope<sp/>finder(box,<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>previous_visual_rect,</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visual_rect);</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>.NeedsVisualRectUpdate(box))</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>previous_visual_rect;</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"></highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visual_rect;</highlight></codeline>
<codeline lineno="3814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ScrollControlWasSetNeedsPaintInvalidation()<sp/>{</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/>GetLayoutBox()-&gt;SetShouldCheckForPaintInvalidation();</highlight></codeline>
<codeline lineno="3817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3818"><highlight class="normal">IntRect<sp/>PaintLayerScrollableArea::ScrollCornerAndResizerRect()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/>IntRect<sp/>scroll_corner_and_resizer<sp/>=<sp/>ScrollCornerRect();</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scroll_corner_and_resizer.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/>scroll_corner_and_resizer<sp/>=</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResizerCornerRect(GetLayoutBox()-&gt;PixelSnappedBorderBoxRect(</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Layer()-&gt;SubpixelAccumulation()),</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kResizerForPointer);</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scroll_corner_and_resizer;</highlight></codeline>
<codeline lineno="3827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3828"><highlight class="normal">IntRect<sp/>PaintLayerScrollableArea::ScrollCornerRect()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_horizontal_bar<sp/>=<sp/>HorizontalScrollbar();</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_vertical_bar<sp/>=<sp/>VerticalScrollbar();</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_resizer<sp/>=<sp/>GetLayoutBox()-&gt;StyleRef().Resize()<sp/>!=<sp/>EResize::kNone;</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((has_horizontal_bar<sp/>&amp;&amp;<sp/>has_vertical_bar)<sp/>||</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(has_resizer<sp/>&amp;&amp;<sp/>(has_horizontal_bar<sp/>||<sp/>has_vertical_bar)))<sp/>{</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CornerRect(GetLayoutBox()-&gt;PixelSnappedBorderBoxRect(</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Layer()-&gt;SubpixelAccumulation()));</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntRect();</highlight></codeline>
<codeline lineno="3838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3839"><highlight class="normal">LayoutUnit<sp/>PaintLayerScrollableArea::ScrollHeight()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>overflow_rect_.Height();</highlight></codeline>
<codeline lineno="3841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3842"><highlight class="normal">LayoutRect<sp/>PaintLayerScrollableArea::ScrollIntoView(</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutRect&amp;<sp/>absolute_rect,</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WebScrollIntoViewParams&amp;<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/>LayoutRect<sp/>local_expose_rect<sp/>=</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a8ca3b9e319ea7526107a927e3369246a" kindref="member">AbsoluteToLocal</ref>(*GetLayoutBox(),<sp/>absolute_rect);</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/>LayoutSize<sp/>border_origin_to_scroll_origin<sp/>=</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LayoutSize(-GetLayoutBox()-&gt;BorderLeft(),<sp/>-GetLayoutBox()-&gt;BorderTop())<sp/>+</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LayoutSize(GetScrollOffset());</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/>local_expose_rect.Move(border_origin_to_scroll_origin);</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/>LayoutRect<sp/>scroll_snapport_rect<sp/>=<sp/>VisibleScrollSnapportRect();</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"></highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/>ScrollOffset<sp/>target_offset<sp/>=<sp/>ScrollAlignment::GetScrollOffsetToExpose(</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scroll_snapport_rect,<sp/>local_expose_rect,<sp/>params.GetScrollAlignmentX(),</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>params.GetScrollAlignmentY(),<sp/>GetScrollOffset());</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/>ScrollOffset<sp/>new_scroll_offset(</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ClampScrollOffset(RoundedIntSize(target_offset)));</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"></highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/>ScrollOffset<sp/>old_scroll_offset<sp/>=<sp/>GetScrollOffset();</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(params.GetScrollType()<sp/>==<sp/>kUserScroll)<sp/>{</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!UserInputScrollable(kHorizontalScrollbar))</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_scroll_offset.SetWidth(old_scroll_offset.Width());</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!UserInputScrollable(kVerticalScrollbar))</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_scroll_offset.SetHeight(old_scroll_offset.Height());</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/>FloatPoint<sp/>end_point<sp/>=<sp/>ScrollOffsetToPosition(new_scroll_offset);</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;SnapSelectionStrategy&gt;<sp/>strategy<sp/>=</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SnapSelectionStrategy::CreateForEndPosition(gfx::ScrollOffset(end_point),</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/>end_point<sp/>=<sp/>GetLayoutBox()</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetDocument()</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.GetSnapCoordinator()</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetSnapPosition(*GetLayoutBox(),<sp/>*strategy)</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value_or(end_point);</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/>new_scroll_offset<sp/>=<sp/>ScrollPositionToOffset(end_point);</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"></highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(params.is_for_scroll_sequence)<sp/>{</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(params.GetScrollType()<sp/>==<sp/>kProgrammaticScroll<sp/>||</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params.GetScrollType()<sp/>==<sp/>kUserScroll);</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollBehavior<sp/>behavior<sp/>=</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DetermineScrollBehavior(params.GetScrollBehavior(),</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;StyleRef().GetScrollBehavior());</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/>GetSmoothScrollSequencer()-&gt;QueueAnimation(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>new_scroll_offset,</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>behavior);</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/>SetScrollOffset(new_scroll_offset,<sp/>params.GetScrollType(),</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kScrollBehaviorInstant);</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"></highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/>ScrollOffset<sp/>scroll_offset_difference<sp/>=<sp/>new_scroll_offset<sp/>-<sp/>old_scroll_offset;</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/>local_expose_rect.Move(-LayoutSize(scroll_offset_difference));</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/>local_expose_rect.Move(-border_origin_to_scroll_origin);</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/>scroll_snapport_rect.Move(-border_origin_to_scroll_origin);</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/>LayoutRect<sp/>intersect<sp/>=<sp/>Intersection(scroll_snapport_rect,<sp/>local_expose_rect);</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"></highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(intersect.IsEmpty()<sp/>&amp;&amp;<sp/>!scroll_snapport_rect.IsEmpty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!local_expose_rect.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1acca9f6bb735ad83e9b7bc21bb6128691" kindref="member">LocalToAbsolute</ref>(*GetLayoutBox(),<sp/>local_expose_rect);</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/>intersect<sp/>=<sp/><ref refid="_c_w_e-79_8c_1acca9f6bb735ad83e9b7bc21bb6128691" kindref="member">LocalToAbsolute</ref>(*GetLayoutBox(),<sp/>intersect);</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>intersect;</highlight></codeline>
<codeline lineno="3904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3905"><highlight class="normal">IntSize<sp/>PaintLayerScrollableArea::ScrollOffsetInt()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FlooredIntSize(scroll_offset_);</highlight></codeline>
<codeline lineno="3907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ScrollSize(</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarOrientation<sp/>orientation)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/>IntSize<sp/>scroll_dimensions<sp/>=</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MaximumScrollOffsetInt()<sp/>-<sp/>MinimumScrollOffsetInt();</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(orientation<sp/>==<sp/>kHorizontalScrollbar)<sp/>?<sp/>scroll_dimensions.Width()</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>scroll_dimensions.Height();</highlight></codeline>
<codeline lineno="3914"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3915"><highlight class="normal">LayoutUnit<sp/>PaintLayerScrollableArea::ScrollWidth()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>overflow_rect_.Width();</highlight></codeline>
<codeline lineno="3917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3918"><highlight class="normal">IntRect<sp/>PaintLayerScrollableArea::ScrollableAreaBoundingBox()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LocalFrame*<sp/>frame<sp/>=<sp/>GetLayoutBox()-&gt;GetFrame())<sp/>{</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LocalFrameView*<sp/>local_root<sp/>=<sp/>frame-&gt;LocalFrameRoot().View())<sp/>{</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>local_root-&gt;RootFrameToDocument(frame-&gt;View()-&gt;ConvertToRootFrame(</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;AbsoluteBoundingBoxRect(0)));</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntRect();</highlight></codeline>
<codeline lineno="3926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ScrollbarFrameRectChanged()<sp/>{</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasOverlayScrollbars())</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;SetNeedsPaintPropertyUpdate();</highlight></codeline>
<codeline lineno="3930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3931"><highlight class="normal">IntSize<sp/>PaintLayerScrollableArea::ScrollbarOffset(</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scrollbar&amp;<sp/>scrollbar)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;scrollbar<sp/>==<sp/>VerticalScrollbar())<sp/>{</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntSize(</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VerticalScrollbarStart(0,<sp/>Layer()-&gt;PixelSnappedSize().Width()),</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;BorderTop().ToInt());</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"></highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;scrollbar<sp/>==<sp/>HorizontalScrollbar())<sp/>{</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntSize(HorizontalScrollbarStart(0),</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;BorderTop().ToInt()<sp/>+</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VisibleContentRect(kIncludeScrollbars).Height()<sp/>-</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HorizontalScrollbar()-&gt;ScrollbarThickness());</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/>NOTREACHED();</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntSize();</highlight></codeline>
<codeline lineno="3948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3949" refid="_c_w_e-79_8c_1aa14fc222a7f1d75d7f2596336b2fb9c6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutObject&amp;<sp/><ref refid="_c_w_e-79_8c_1aa14fc222a7f1d75d7f2596336b2fb9c6" kindref="member">ScrollbarStyleSource</ref>(</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutBox&amp;<sp/>layout_box)<sp/>{</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layout_box.IsLayoutView())<sp/>{</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/>Document&amp;<sp/>doc<sp/>=<sp/>layout_box.GetDocument();</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Settings*<sp/>settings<sp/>=<sp/>doc.GetSettings())<sp/>{</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!settings-&gt;GetAllowCustomScrollbarInMainFrame()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout_box.GetFrame()<sp/>&amp;&amp;<sp/>layout_box.GetFrame()-&gt;IsMainFrame())</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>layout_box;</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"></highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/>Element*<sp/>body<sp/>=<sp/>doc.body();</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(body<sp/>&amp;&amp;<sp/>body-&gt;GetLayoutObject()<sp/>&amp;&amp;<sp/>body-&gt;GetLayoutObject()-&gt;IsBox()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body-&gt;GetLayoutObject()-&gt;StyleRef().HasPseudoStyle(kPseudoIdScrollbar))</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*body-&gt;GetLayoutObject();</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/>Element*<sp/>doc_element<sp/>=<sp/>doc.documentElement();</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doc_element<sp/>&amp;&amp;<sp/>doc_element-&gt;GetLayoutObject()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc_element-&gt;GetLayoutObject()-&gt;StyleRef().HasPseudoStyle(</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kPseudoIdScrollbar))</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*doc_element-&gt;GetLayoutObject();</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"></highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>layout_box;</highlight></codeline>
<codeline lineno="3972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ScrollbarVisibilityChanged()<sp/>{</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/>UpdateScrollbarEnabledState();</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/>layer_-&gt;GetLayoutObject().SetNeedsPaintPropertyUpdate();</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/>layer_-&gt;ClearClipRects();</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"></highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LayoutView*<sp/>view<sp/>=<sp/>GetLayoutBox()-&gt;View())</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/>view-&gt;ClearHitTestCache();</highlight></codeline>
<codeline lineno="3982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ScrollbarsCanBeActive()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/>LayoutView*<sp/>view<sp/>=<sp/>GetLayoutBox()-&gt;View();</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!view)</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"></highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/>LocalFrameView*<sp/>frame_view<sp/>=<sp/>view-&gt;GetFrameView();</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame_view<sp/>!=<sp/>frame_view-&gt;GetFrame().View())</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"></highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!!frame_view-&gt;GetFrame().GetDocument();</highlight></codeline>
<codeline lineno="3993"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::PreventRelayoutScope::SetBoxNeedsLayout(</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/>PaintLayerScrollableArea&amp;<sp/>scrollable_area,</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>had_horizontal_scrollbar,</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>had_vertical_scrollbar)<sp/>{</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/>DCHECK(count_);</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/>DCHECK(layout_scope_);</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scrollable_area.NeedsRelayout())</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/>scrollable_area.SetNeedsRelayout(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/>scrollable_area.SetHadHorizontalScrollbarBeforeRelayout(</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>had_horizontal_scrollbar);</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/>scrollable_area.SetHadVerticalScrollbarBeforeRelayout(had_vertical_scrollbar);</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"></highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/>relayout_needed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/>NeedsRelayoutList().push_back(&amp;scrollable_area);</highlight></codeline>
<codeline lineno="4009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::SetHasHorizontalScrollbar(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_scrollbar)<sp/>{</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FreezeScrollbarsScope::ScrollbarsAreFrozen())</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"></highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_scrollbar<sp/>==<sp/>HasHorizontalScrollbar())</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"></highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/>SetScrollbarNeedsPaintInvalidation(kHorizontalScrollbar);</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"></highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/>scrollbar_manager_.SetHasHorizontalScrollbar(has_scrollbar);</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"></highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/>UpdateScrollOrigin();</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"></highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasHorizontalScrollbar())</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/>HorizontalScrollbar()-&gt;StyleChanged();</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasVerticalScrollbar())</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/>VerticalScrollbar()-&gt;StyleChanged();</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"></highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/>SetScrollCornerNeedsPaintInvalidation();</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"></highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;GetDocument().HasAnnotatedRegions())</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;GetDocument().SetAnnotatedRegionsDirty(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ScrollbarManager::SetHasHorizontalScrollbar(</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_scrollbar)<sp/>{</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_scrollbar)<sp/>{</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/>DisableCompositingQueryAsserts<sp/>disabler;</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h_bar_)<sp/>{</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_bar_<sp/>=<sp/>CreateScrollbar(kHorizontalScrollbar);</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_bar_is_attached_<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!h_bar_-&gt;IsCustomScrollbar())</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScrollableArea()-&gt;DidAddScrollbar(*h_bar_,<sp/>kHorizontalScrollbar);</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_bar_is_attached_<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/>h_bar_is_attached_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!DelayScrollOffsetClampScope::ClampingIsDelayed())</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DestroyScrollbar(kHorizontalScrollbar);</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::SetHasVerticalScrollbar(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_scrollbar)<sp/>{</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FreezeScrollbarsScope::ScrollbarsAreFrozen())</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"></highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;GetDocument().IsVerticalScrollEnforced())<sp/>{</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"></highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_scrollbar<sp/>==<sp/>HasVerticalScrollbar())</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"></highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/>SetScrollbarNeedsPaintInvalidation(kVerticalScrollbar);</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"></highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/>scrollbar_manager_.SetHasVerticalScrollbar(has_scrollbar);</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"></highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/>UpdateScrollOrigin();</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"></highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasHorizontalScrollbar())</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/>HorizontalScrollbar()-&gt;StyleChanged();</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasVerticalScrollbar())</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/>VerticalScrollbar()-&gt;StyleChanged();</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"></highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/>SetScrollCornerNeedsPaintInvalidation();</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"></highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;GetDocument().HasAnnotatedRegions())</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;GetDocument().SetAnnotatedRegionsDirty(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ScrollbarManager::SetHasVerticalScrollbar(</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_scrollbar)<sp/>{</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_scrollbar)<sp/>{</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/>DisableCompositingQueryAsserts<sp/>disabler;</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v_bar_)<sp/>{</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v_bar_<sp/>=<sp/>CreateScrollbar(kVerticalScrollbar);</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v_bar_is_attached_<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v_bar_-&gt;IsCustomScrollbar())</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScrollableArea()-&gt;DidAddScrollbar(*v_bar_,<sp/>kVerticalScrollbar);</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v_bar_is_attached_<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/>v_bar_is_attached_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!DelayScrollOffsetClampScope::ClampingIsDelayed())</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DestroyScrollbar(kVerticalScrollbar);</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4097"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::SetHorizontalScrollbarVisualRect(</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutRect&amp;<sp/>rect)<sp/>{</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/>horizontal_scrollbar_visual_rect_<sp/>=<sp/>rect;</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Scrollbar*<sp/>scrollbar<sp/>=<sp/>HorizontalScrollbar())</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/>scrollbar-&gt;SetVisualRect(rect);</highlight></codeline>
<codeline lineno="4103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::DelayScrollOffsetClampScope::SetNeedsClamp(</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/>PaintLayerScrollableArea*<sp/>scrollable_area)<sp/>{</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scrollable_area-&gt;NeedsScrollOffsetClamp())<sp/>{</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/>scrollable_area-&gt;SetNeedsScrollOffsetClamp(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/>NeedsClampList().push_back(scrollable_area);</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::SetScrollCornerAndResizerVisualRect(</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutRect&amp;<sp/>rect)<sp/>{</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/>scroll_corner_and_resizer_visual_rect_<sp/>=<sp/>rect;</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LayoutScrollbarPart*<sp/>scroll_corner<sp/>=<sp/>ScrollCorner())</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/>scroll_corner-&gt;GetMutableForPainting().FirstFragment().SetVisualRect(rect);</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LayoutScrollbarPart*<sp/>resizer<sp/>=<sp/>Resizer())</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/>resizer-&gt;GetMutableForPainting().FirstFragment().SetVisualRect(rect);</highlight></codeline>
<codeline lineno="4118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::SetScrollOffsetUnconditionally(</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ScrollOffset&amp;<sp/>offset,</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollType<sp/>scroll_type)<sp/>{</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/>CancelScrollAnimation();</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/>ScrollOffsetChanged(offset,<sp/>scroll_type);</highlight></codeline>
<codeline lineno="4124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::SetVerticalScrollbarVisualRect(</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutRect&amp;<sp/>rect)<sp/>{</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/>vertical_scrollbar_visual_rect_<sp/>=<sp/>rect;</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Scrollbar*<sp/>scrollbar<sp/>=<sp/>VerticalScrollbar())</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/>scrollbar-&gt;SetVisualRect(rect);</highlight></codeline>
<codeline lineno="4130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ShouldPerformScrollAnchoring()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scroll_anchor_.HasScroller()<sp/>&amp;&amp;<sp/>GetLayoutBox()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;StyleRef().OverflowAnchor()<sp/>!=</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EOverflowAnchor::kNone<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!GetLayoutBox()-&gt;GetDocument().FinishingOrIsPrinting();</highlight></codeline>
<codeline lineno="4136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ShouldPlaceVerticalScrollbarOnLeft()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetLayoutBox()-&gt;ShouldPlaceBlockDirectionScrollbarOnLogicalLeft();</highlight></codeline>
<codeline lineno="4139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ShouldScrollOnMainThread()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasBeenDisposed())</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LocalFrame*<sp/>frame<sp/>=<sp/>GetLayoutBox()-&gt;GetFrame())<sp/>{</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame-&gt;View()-&gt;GetMainThreadScrollingReasons())</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasNonCompositedStickyDescendants())</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ScrollableArea::ShouldScrollOnMainThread();</highlight></codeline>
<codeline lineno="4150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::ShouldSuspendScrollAnimations()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasBeenDisposed())</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/>LayoutView*<sp/>view<sp/>=<sp/>GetLayoutBox()-&gt;View();</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!view)</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!GetLayoutBox()-&gt;GetDocument().LoadEventFinished();</highlight></codeline>
<codeline lineno="4158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::SnapAfterScrollbarScrolling(</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarOrientation<sp/>orientation)<sp/>{</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/>SnapCoordinator*<sp/>snap_coordinator<sp/>=</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;GetDocument().GetSnapCoordinator();</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!snap_coordinator)</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"></highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/>snap_coordinator-&gt;SnapAtCurrentPosition(*GetLayoutBox(),</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orientation<sp/>==<sp/>kHorizontalScrollbar,</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orientation<sp/>==<sp/>kVerticalScrollbar);</highlight></codeline>
<codeline lineno="4169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a0e270e5f7b7fb99081898069f0d9b2df" kindref="member">PaintLayerScrollableArea::Trace</ref>(blink::Visitor*<sp/>visitor)<sp/>{</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/>visitor-&gt;Trace(scrollbar_manager_);</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/>visitor-&gt;Trace(scroll_anchor_);</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/>visitor-&gt;Trace(scrolling_background_display_item_client_);</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a0e270e5f7b7fb99081898069f0d9b2df" kindref="member">ScrollableArea::Trace</ref>(visitor);</highlight></codeline>
<codeline lineno="4175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a0e270e5f7b7fb99081898069f0d9b2df" kindref="member">PaintLayerScrollableArea::ScrollbarManager::Trace</ref>(</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/>blink::Visitor*<sp/>visitor)<sp/>{</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/>visitor-&gt;Trace(scrollable_area_);</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/>visitor-&gt;Trace(h_bar_);</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/>visitor-&gt;Trace(v_bar_);</highlight></codeline>
<codeline lineno="4181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::TryRemovingAutoScrollbars(</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>needs_horizontal_scrollbar,</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>needs_vertical_scrollbar)<sp/>{</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/>DCHECK(!in_overflow_relayout_);</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"></highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!needs_horizontal_scrollbar<sp/>&amp;&amp;<sp/>!needs_vertical_scrollbar)</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;IsLayoutView())<sp/>{</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarMode<sp/>h_mode;</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarMode<sp/>v_mode;</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/>ToLayoutView(GetLayoutBox())-&gt;CalculateScrollbarModes(h_mode,<sp/>v_mode);</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_mode<sp/>!=<sp/>kScrollbarAuto<sp/>||<sp/>v_mode<sp/>!=<sp/>kScrollbarAuto)</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"></highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/>IntSize<sp/>visible_size_with_scrollbars<sp/>=</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VisibleContentRect(kIncludeScrollbars).Size();</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ScrollWidth()<sp/>&lt;=<sp/>visible_size_with_scrollbars.Width()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScrollHeight()<sp/>&lt;=<sp/>visible_size_with_scrollbars.Height())<sp/>{</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GetLayoutBox()-&gt;HasAutoVerticalScrollbar()<sp/>||</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!GetLayoutBox()-&gt;HasAutoHorizontalScrollbar())</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"></highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/>LayoutSize<sp/>client_size_with_scrollbars<sp/>=</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayoutContentRect(kIncludeScrollbars).Size();</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ScrollWidth()<sp/>&lt;=<sp/>client_size_with_scrollbars.Width()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScrollHeight()<sp/>&lt;=<sp/>client_size_with_scrollbars.Height())<sp/>{</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"></highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::UpdateAfterLayout()<sp/>{</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>scrollbars_are_frozen<sp/>=</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(in_overflow_relayout_<sp/>&amp;&amp;<sp/>!allow_second_overflow_relayout_)<sp/>||</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FreezeScrollbarsScope::ScrollbarsAreFrozen();</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/>allow_second_overflow_relayout_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NeedsScrollbarReconstruction())<sp/>{</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/>SetHasHorizontalScrollbar(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/>SetHasVerticalScrollbar(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"></highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/>UpdateScrollDimensions();</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"></highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>had_horizontal_scrollbar<sp/>=<sp/>HasHorizontalScrollbar();</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>had_vertical_scrollbar<sp/>=<sp/>HasVerticalScrollbar();</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_horizontal_scrollbar;</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_vertical_scrollbar;</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/>ComputeScrollbarExistence(needs_horizontal_scrollbar,</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needs_vertical_scrollbar);</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"></highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!in_overflow_relayout_<sp/>&amp;&amp;<sp/>!scrollbars_are_frozen<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TryRemovingAutoScrollbars(needs_horizontal_scrollbar,</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needs_vertical_scrollbar))<sp/>{</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/>needs_horizontal_scrollbar<sp/>=<sp/>needs_vertical_scrollbar<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/>allow_second_overflow_relayout_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"></highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>horizontal_scrollbar_should_change<sp/>=</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_horizontal_scrollbar<sp/>!=<sp/>had_horizontal_scrollbar;</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>vertical_scrollbar_should_change<sp/>=</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_vertical_scrollbar<sp/>!=<sp/>had_vertical_scrollbar;</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"></highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>scrollbars_will_change<sp/>=</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!scrollbars_are_frozen<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(horizontal_scrollbar_should_change<sp/>||<sp/>vertical_scrollbar_should_change);</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scrollbars_will_change)<sp/>{</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/>SetHasHorizontalScrollbar(needs_horizontal_scrollbar);</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/>SetHasVerticalScrollbar(needs_vertical_scrollbar);</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"></highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LocalFrameView*<sp/>frame_view<sp/>=<sp/>GetLayoutBox()-&gt;GetFrameView())<sp/>{</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>frame_view-&gt;LayoutViewport())<sp/>{</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetFrame()</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetPage()</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetVisualViewport()</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.SetNeedsPaintPropertyUpdate();</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"></highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasScrollbar())</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UpdateScrollCornerStyle();</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"></highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/>Layer()-&gt;UpdateSelfPaintingLayer();</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"></highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;GetDocument().HasAnnotatedRegions())</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;GetDocument().SetAnnotatedRegionsDirty(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"></highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((horizontal_scrollbar_should_change<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;StyleRef().OverflowX()<sp/>!=<sp/>EOverflow::kOverlay)<sp/>||</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vertical_scrollbar_should_change<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;StyleRef().OverflowY()<sp/>!=<sp/>EOverflow::kOverlay)))<sp/>{</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vertical_scrollbar_should_change<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;IsHorizontalWritingMode())<sp/>||</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(horizontal_scrollbar_should_change<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!GetLayoutBox()-&gt;IsHorizontalWritingMode()))<sp/>{</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;SetPreferredLogicalWidthsDirty();</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsManagedByLayoutNG(*GetLayoutBox()))<sp/>{</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateScrollDimensions();</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PreventRelayoutScope::RelayoutIsPrevented())<sp/>{</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;UpdateLogicalWidth();</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PreventRelayoutScope::SetBoxNeedsLayout(</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>had_horizontal_scrollbar,<sp/>had_vertical_scrollbar);</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_overflow_relayout_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SubtreeLayoutScope<sp/>layout_scope(*GetLayoutBox());</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout_scope.SetNeedsLayout(</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox(),<sp/>layout_invalidation_reason::kScrollbarChanged);</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;IsLayoutBlock())<sp/>{</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayoutBlock*<sp/>block<sp/>=<sp/>ToLayoutBlock(GetLayoutBox());</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;ScrollbarsChanged(horizontal_scrollbar_should_change,</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertical_scrollbar_should_change);</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;UpdateBlockLayout(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;UpdateLayout();</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_overflow_relayout_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scrollbar_manager_.DestroyDetachedScrollbars();</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayoutObject*<sp/>parent<sp/>=<sp/>GetLayoutBox()-&gt;Parent();</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent<sp/>&amp;&amp;<sp/>parent-&gt;IsFlexibleBox())<sp/>{</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ToLayoutFlexibleBox(parent)-&gt;ClearCachedMainSizeForChild(</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*GetLayoutBox());</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"></highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/>DisableCompositingQueryAsserts<sp/>disabler;</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"></highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateScrollbarEnabledState();</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"></highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateScrollbarProportions();</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"></highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scrollbars_are_frozen<sp/>&amp;&amp;<sp/>HasOverlayScrollbars())<sp/>{</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ScrollSize(kHorizontalScrollbar))</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetHasHorizontalScrollbar(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ScrollSize(kVerticalScrollbar))</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetHasVerticalScrollbar(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"></highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/>ClampScrollOffsetAfterOverflowChange();</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"></highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scrollbars_are_frozen)<sp/>{</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateScrollableAreaSet();</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"></highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/>DisableCompositingQueryAsserts<sp/>disabler;</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/>PositionOverflowControls();</highlight></codeline>
<codeline lineno="4341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::UpdateAfterOverflowRecalc()<sp/>{</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/>UpdateScrollDimensions();</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/>UpdateScrollbarProportions();</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"></highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_horizontal_scrollbar;</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_vertical_scrollbar;</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/>ComputeScrollbarExistence(needs_horizontal_scrollbar,</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needs_vertical_scrollbar);</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"></highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>horizontal_scrollbar_should_change<sp/>=</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_horizontal_scrollbar<sp/>!=<sp/>HasHorizontalScrollbar();</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>vertical_scrollbar_should_change<sp/>=</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_vertical_scrollbar<sp/>!=<sp/>HasVerticalScrollbar();</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"></highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((GetLayoutBox()-&gt;HasAutoHorizontalScrollbar()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>horizontal_scrollbar_should_change)<sp/>||</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(GetLayoutBox()-&gt;HasAutoVerticalScrollbar()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertical_scrollbar_should_change))<sp/>{</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;SetNeedsLayoutAndFullPaintInvalidation(</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout_invalidation_reason::kUnknown);</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"></highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/>ClampScrollOffsetAfterOverflowChange();</highlight></codeline>
<codeline lineno="4365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::UpdateAfterStyleChange(</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComputedStyle*<sp/>old_style)<sp/>{</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!OverflowRect().Size().IsZero())<sp/>{</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateScrollableAreaSet();</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"></highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/>Color<sp/>old_background;</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_style)<sp/>{</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/>old_background<sp/>=</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_style-&gt;VisitedDependentColor(GetCSSPropertyBackgroundColor());</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/>Color<sp/>new_background<sp/>=<sp/>GetLayoutBox()-&gt;StyleRef().VisitedDependentColor(</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetCSSPropertyBackgroundColor());</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"></highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_background<sp/>!=<sp/>old_background)<sp/>{</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/>RecalculateScrollbarOverlayColorTheme(new_background);</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"></highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_horizontal_scrollbar;</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_vertical_scrollbar;</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/>ComputeScrollbarExistence(needs_horizontal_scrollbar,</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needs_vertical_scrollbar,<sp/>kForbidAddingAutoBars);</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasScrollbar()<sp/>&amp;&amp;<sp/>!needs_horizontal_scrollbar<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!needs_vertical_scrollbar)</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"></highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>horizontal_scrollbar_changed<sp/>=</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetHasHorizontalScrollbar(needs_horizontal_scrollbar);</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>vertical_scrollbar_changed<sp/>=</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetHasVerticalScrollbar(needs_vertical_scrollbar);</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"></highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;IsLayoutBlock()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(horizontal_scrollbar_changed<sp/>||<sp/>vertical_scrollbar_changed))<sp/>{</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/>ToLayoutBlock(GetLayoutBox())</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;ScrollbarsChanged(horizontal_scrollbar_changed,</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertical_scrollbar_changed,</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayoutBlock::ScrollbarChangeContext::kStyleChange);</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"></highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasHorizontalScrollbar()<sp/>&amp;&amp;<sp/>old_style<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>old_style-&gt;OverflowX()<sp/>==<sp/>EOverflow::kScroll<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;StyleRef().OverflowX()<sp/>!=<sp/>EOverflow::kScroll)<sp/>{</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/>HorizontalScrollbar()-&gt;SetEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"></highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasVerticalScrollbar()<sp/>&amp;&amp;<sp/>old_style<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>old_style-&gt;OverflowY()<sp/>==<sp/>EOverflow::kScroll<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;StyleRef().OverflowY()<sp/>!=<sp/>EOverflow::kScroll)<sp/>{</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/>VerticalScrollbar()-&gt;SetEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"></highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HorizontalScrollbar())</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/>HorizontalScrollbar()-&gt;StyleChanged();</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(VerticalScrollbar())</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/>VerticalScrollbar()-&gt;StyleChanged();</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"></highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/>UpdateScrollCornerStyle();</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/>UpdateResizerAreaSet();</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/>UpdateResizerStyle(old_style);</highlight></codeline>
<codeline lineno="4426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::UpdateNeedsCompositedScrolling(</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>layer_has_been_composited)<sp/>{</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needs_composited_scrolling<sp/>=</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ComputeNeedsCompositedScrolling(layer_has_been_composited,<sp/>Layer());</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"></highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_cast&lt;bool&gt;(needs_composited_scrolling_)<sp/>!=</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>needs_composited_scrolling)<sp/>{</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/>needs_composited_scrolling_<sp/>=<sp/>needs_composited_scrolling;</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::UpdateResizerStyle(</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComputedStyle*<sp/>old_style)<sp/>{</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RuntimeEnabledFeatures::CompositeAfterPaintEnabled()<sp/>&amp;&amp;<sp/>old_style<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>old_style-&gt;Resize()<sp/>!=<sp/>GetLayoutBox()-&gt;StyleRef().Resize())<sp/>{</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>graphics_layer<sp/>=<sp/>LayerForScrollCorner())</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>graphics_layer-&gt;SetNeedsDisplay();</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resizer_<sp/>&amp;&amp;<sp/>!GetLayoutBox()-&gt;CanResize())</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"></highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutObject&amp;<sp/>style_source<sp/>=<sp/><ref refid="_c_w_e-79_8c_1aa14fc222a7f1d75d7f2596336b2fb9c6" kindref="member">ScrollbarStyleSource</ref>(*GetLayoutBox());</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/>scoped_refptr&lt;ComputedStyle&gt;<sp/>resizer<sp/>=</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;HasOverflowClip()</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>style_source.GetUncachedPseudoStyle(</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PseudoStyleRequest(kPseudoIdResizer),<sp/>style_source.Style())</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>scoped_refptr&lt;ComputedStyle&gt;(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resizer)<sp/>{</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resizer_)<sp/>{</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resizer_<sp/>=<sp/>LayoutScrollbarPart::CreateAnonymous(</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;GetLayoutBox()-&gt;GetDocument(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resizer_-&gt;SetDangerousOneWayParent(GetLayoutBox());</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/>resizer_-&gt;SetStyleWithWritingModeOfParent(std::move(resizer));</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resizer_)<sp/>{</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/>resizer_-&gt;Destroy();</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/>resizer_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::UpdateScrollCornerStyle()<sp/>{</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scroll_corner_<sp/>&amp;&amp;<sp/>!HasScrollbar())</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scroll_corner_<sp/>&amp;&amp;<sp/>HasOverlayScrollbars())</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"></highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LayoutObject&amp;<sp/>style_source<sp/>=<sp/><ref refid="_c_w_e-79_8c_1aa14fc222a7f1d75d7f2596336b2fb9c6" kindref="member">ScrollbarStyleSource</ref>(*GetLayoutBox());</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/>scoped_refptr&lt;ComputedStyle&gt;<sp/>corner<sp/>=</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;HasOverflowClip()</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>style_source.GetUncachedPseudoStyle(</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PseudoStyleRequest(kPseudoIdScrollbarCorner),</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style_source.Style())</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>scoped_refptr&lt;ComputedStyle&gt;(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(corner)<sp/>{</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scroll_corner_)<sp/>{</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scroll_corner_<sp/>=<sp/>LayoutScrollbarPart::CreateAnonymous(</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;GetLayoutBox()-&gt;GetDocument(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scroll_corner_-&gt;SetDangerousOneWayParent(GetLayoutBox());</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/><sp/><sp/>scroll_corner_-&gt;SetStyleWithWritingModeOfParent(std::move(corner));</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scroll_corner_)<sp/>{</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/>scroll_corner_-&gt;Destroy();</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/>scroll_corner_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::UpdateScrollDimensions()<sp/>{</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/>LayoutRect<sp/>new_overflow_rect<sp/>=<sp/>GetLayoutBox()-&gt;LayoutOverflowRect();</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/>GetLayoutBox()-&gt;FlipForWritingMode(new_overflow_rect);</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"></highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/>new_overflow_rect.Unite(</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LayoutRect(new_overflow_rect.Location(),</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayoutContentRect(kExcludeScrollbars).Size()));</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"></highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overflow_rect_.Size()<sp/>!=<sp/>new_overflow_rect.Size())</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/>ContentsResized();</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/>overflow_rect_<sp/>=<sp/>new_overflow_rect;</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/>UpdateScrollOrigin();</highlight></codeline>
<codeline lineno="4503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::UpdateScrollOrigin()<sp/>{</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(OverflowRect().IsEmpty())</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/>LayoutRect<sp/>scrollable_overflow(overflow_rect_);</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/>scrollable_overflow.Move(-GetLayoutBox()-&gt;BorderLeft(),</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-GetLayoutBox()-&gt;BorderTop());</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/>IntPoint<sp/>new_origin(FlooredIntPoint(-scrollable_overflow.Location())<sp/>+</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;OriginAdjustmentForScrollbars());</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_origin<sp/>!=<sp/>scroll_origin_)</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/>scroll_origin_changed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/>scroll_origin_<sp/>=<sp/>new_origin;</highlight></codeline>
<codeline lineno="4515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::UpdateScrollableAreaSet()<sp/>{</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/>LocalFrame*<sp/>frame<sp/>=<sp/>GetLayoutBox()-&gt;GetFrame();</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!frame)</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"></highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/>LocalFrameView*<sp/>frame_view<sp/>=<sp/>frame-&gt;View();</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!frame_view)</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"></highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_overflow<sp/>=</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!GetLayoutBox()-&gt;Size().IsZero()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((HasHorizontalOverflow()<sp/>&amp;&amp;<sp/>GetLayoutBox()-&gt;ScrollsOverflowX())<sp/>||</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(HasVerticalOverflow()<sp/>&amp;&amp;<sp/>GetLayoutBox()-&gt;ScrollsOverflowY()));</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"></highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_visible_to_hit_test<sp/>=</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;StyleRef().VisibleToHitTesting();</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>did_scroll_overflow<sp/>=<sp/>scrolls_overflow_;</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;IsLayoutView())<sp/>{</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarMode<sp/>h_mode;</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarMode<sp/>v_mode;</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/><sp/>ToLayoutView(GetLayoutBox())-&gt;CalculateScrollbarModes(h_mode,<sp/>v_mode);</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h_mode<sp/>==<sp/>kScrollbarAlwaysOff<sp/>&amp;&amp;<sp/>v_mode<sp/>==<sp/>kScrollbarAlwaysOff)</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>has_overflow<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/>scrolls_overflow_<sp/>=<sp/>has_overflow<sp/>&amp;&amp;<sp/>is_visible_to_hit_test;</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(did_scroll_overflow<sp/>==<sp/>ScrollsOverflow())</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"></highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RuntimeEnabledFeatures::ImplicitRootScrollerEnabled()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scrolls_overflow_)<sp/>{</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;IsLayoutView())<sp/>{</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Element*<sp/>owner<sp/>=<sp/>GetLayoutBox()-&gt;GetDocument().LocalOwner())<sp/>{</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>owner-&gt;GetDocument().GetRootScrollerController().ConsiderForImplicit(</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*owner);</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetDocument()</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.GetRootScrollerController()</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ConsiderForImplicit(*GetLayoutBox()-&gt;<ref refid="_c_w_e-79_8c_1a5a703a2f81e3ac28a451bf1b55919957" kindref="member">GetNode</ref>());</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"></highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/>GetLayoutBox()-&gt;SetNeedsPaintPropertyUpdate();</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"></highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scrolls_overflow_)<sp/>{</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(<ref refid="_c_w_e-79_8c_1ab92a072305281d21253b7c6cb747740e" kindref="member">CanHaveOverflowScrollbars</ref>(*GetLayoutBox()));</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/>frame_view-&gt;AddScrollableArea(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/><sp/><sp/>frame_view-&gt;RemoveScrollableArea(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"></highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/>layer_-&gt;DidUpdateScrollsOverflow();</highlight></codeline>
<codeline lineno="4569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::UpdateScrollbarEnabledState()<sp/>{</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>force_disable<sp/>=</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetPageScrollbarTheme().ShouldDisableInvisibleScrollbars()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ScrollbarsHiddenIfOverlay();</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"></highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HorizontalScrollbar())</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/>HorizontalScrollbar()-&gt;SetEnabled(HasHorizontalOverflow()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!force_disable);</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(VerticalScrollbar())</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/>VerticalScrollbar()-&gt;SetEnabled(HasVerticalOverflow()<sp/>&amp;&amp;<sp/>!force_disable);</highlight></codeline>
<codeline lineno="4580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::UpdateScrollbarProportions()<sp/>{</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Scrollbar*<sp/>horizontal_scrollbar<sp/>=<sp/>HorizontalScrollbar())</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontal_scrollbar-&gt;SetProportion(VisibleWidth(),<sp/>ContentsSize().Width());</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Scrollbar*<sp/>vertical_scrollbar<sp/>=<sp/>VerticalScrollbar())</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/>vertical_scrollbar-&gt;SetProportion(VisibleHeight(),<sp/>ContentsSize().Height());</highlight></codeline>
<codeline lineno="4586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::UserInputScrollable(</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarOrientation<sp/>orientation)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(orientation<sp/>==<sp/>kVerticalScrollbar<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;GetDocument().IsVerticalScrollEnforced())<sp/>{</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"></highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;IsIntrinsicallyScrollable(orientation))</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"></highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;IsLayoutView())<sp/>{</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/>Document&amp;<sp/>document<sp/>=<sp/>GetLayoutBox()-&gt;GetDocument();</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/>Element*<sp/>fullscreen_element<sp/>=<sp/>Fullscreen::FullscreenElementFrom(document);</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fullscreen_element<sp/>&amp;&amp;<sp/>fullscreen_element<sp/>!=<sp/>document.documentElement())</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"></highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarMode<sp/>h_mode;</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarMode<sp/>v_mode;</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/><sp/>ToLayoutView(GetLayoutBox())-&gt;CalculateScrollbarModes(h_mode,<sp/>v_mode);</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarMode<sp/>mode<sp/>=</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(orientation<sp/>==<sp/>kHorizontalScrollbar)<sp/>?<sp/>h_mode<sp/>:<sp/>v_mode;</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mode<sp/>==<sp/>kScrollbarAuto<sp/>||<sp/>mode<sp/>==<sp/>kScrollbarAlwaysOn;</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"></highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/>EOverflow<sp/>overflow_style<sp/>=<sp/>(orientation<sp/>==<sp/>kHorizontalScrollbar)</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>GetLayoutBox()-&gt;StyleRef().OverflowX()</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>GetLayoutBox()-&gt;StyleRef().OverflowY();</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(overflow_style<sp/>==<sp/>EOverflow::kScroll<sp/>||</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overflow_style<sp/>==<sp/>EOverflow::kAuto<sp/>||</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overflow_style<sp/>==<sp/>EOverflow::kOverlay);</highlight></codeline>
<codeline lineno="4617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::VerticalScrollbarStart(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_x,</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetLayoutBox()-&gt;ShouldPlaceBlockDirectionScrollbarOnLogicalLeft())</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_x<sp/>+<sp/>GetLayoutBox()-&gt;BorderLeft().ToInt();</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_x<sp/>-<sp/>GetLayoutBox()-&gt;BorderRight().ToInt()<sp/>-</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VerticalScrollbar()-&gt;ScrollbarThickness();</highlight></codeline>
<codeline lineno="4624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::VerticalScrollbarWidth(</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/>OverlayScrollbarClipBehavior<sp/>overlay_scrollbar_clip_behavior)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasVerticalScrollbar())</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overlay_scrollbar_clip_behavior<sp/>==</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kIgnorePlatformAndCSSOverlayScrollbarSize<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;StyleRef().OverflowY()<sp/>==<sp/>EOverflow::kOverlay)<sp/>{</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((overlay_scrollbar_clip_behavior<sp/>==<sp/>kIgnorePlatformOverlayScrollbarSize<sp/>||</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlay_scrollbar_clip_behavior<sp/>==</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kIgnorePlatformAndCSSOverlayScrollbarSize<sp/>||</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!VerticalScrollbar()-&gt;ShouldParticipateInHitTesting())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VerticalScrollbar()-&gt;IsOverlayScrollbar())<sp/>{</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VerticalScrollbar()-&gt;ScrollbarThickness();</highlight></codeline>
<codeline lineno="4642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4643"><highlight class="normal">IntRect<sp/>PaintLayerScrollableArea::VisibleContentRect(</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/>IncludeScrollbarsInRect<sp/>scrollbar_inclusion)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/>LayoutRect<sp/>layout_content_rect(LayoutContentRect(scrollbar_inclusion));</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntRect(FlooredIntPoint(layout_content_rect.Location()),</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PixelSnappedIntSize(layout_content_rect.Size(),</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;Location()));</highlight></codeline>
<codeline lineno="4649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4650"><highlight class="normal">LayoutRect<sp/>PaintLayerScrollableArea::VisibleScrollSnapportRect(</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/>IncludeScrollbarsInRect<sp/>scrollbar_inclusion)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComputedStyle*<sp/>style<sp/>=<sp/>GetLayoutBox()-&gt;Style();</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/>LayoutRect<sp/>layout_content_rect(LayoutContentRect(scrollbar_inclusion));</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/>layout_content_rect.MoveBy(LayoutPoint(-ScrollOrigin()));</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/>LayoutRectOutsets<sp/>padding(MinimumValueForLength(style-&gt;ScrollPaddingTop(),</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout_content_rect.Height()),</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MinimumValueForLength(style-&gt;ScrollPaddingRight(),</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout_content_rect.Width()),</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MinimumValueForLength(style-&gt;ScrollPaddingBottom(),</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout_content_rect.Height()),</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MinimumValueForLength(style-&gt;ScrollPaddingLeft(),</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout_content_rect.Width()));</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/>layout_content_rect.Contract(padding);</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>layout_content_rect;</highlight></codeline>
<codeline lineno="4665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::VisibleSizeChanged()<sp/>{</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/>ShowOverlayScrollbars();</highlight></codeline>
<codeline lineno="4668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4669"><highlight class="normal">PaintLayerScrollableArea::ScrollingBackgroundDisplayItemClient::VisualRect()</highlight><highlight class="keyword"></highlight></codeline>
<codeline lineno="4670"><highlight class="keyword"><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>box<sp/>=<sp/>scrollable_area_-&gt;GetLayoutBox();</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>paint_offset<sp/>=<sp/>box-&gt;FirstFragment().PaintOffset();</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>overflow_clip_rect<sp/>=</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PixelSnappedIntRect(box-&gt;OverflowClipRect(paint_offset));</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>scroll_size<sp/>=<sp/>scrollable_area_-&gt;PixelSnappedContentsSize(paint_offset);</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/>scroll_size<sp/>=<sp/>scroll_size.ExpandedTo(overflow_clip_rect.Size());</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/>LayoutRect<sp/>result(overflow_clip_rect.Location(),<sp/>scroll_size);</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DCHECK_IS_ON()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RuntimeEnabledFeatures::CompositeAfterPaintEnabled())<sp/>{</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK_EQ(result,</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scrollable_area_-&gt;layer_-&gt;GraphicsLayerBacking()-&gt;VisualRect());</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::VisualViewportSuppliesScrollbars()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/>LocalFrame*<sp/>frame<sp/>=<sp/>GetLayoutBox()-&gt;GetFrame();</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!frame<sp/>||<sp/>!frame-&gt;GetSettings())</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!frame-&gt;GetSettings()-&gt;GetViewportEnabled())</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"></highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TopDocumentRootScrollerController&amp;<sp/>controller<sp/>=</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetLayoutBox()-&gt;GetDocument().GetPage()-&gt;GlobalRootScrollerController();</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>controller.RootScrollerArea()<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::WillRemoveScrollbar(</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/>Scrollbar&amp;<sp/>scrollbar,</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/>ScrollbarOrientation<sp/>orientation)<sp/>{</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scrollbar.IsCustomScrollbar()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!(orientation<sp/>==<sp/>kHorizontalScrollbar<sp/>?<sp/>LayerForHorizontalScrollbar()</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>LayerForVerticalScrollbar()))<sp/>{</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/>ObjectPaintInvalidator(*GetLayoutBox())</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.SlowSetPaintingLayerNeedsRepaintAndInvalidateDisplayItemClient(</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scrollbar,<sp/>PaintInvalidationReason::kScrollControl);</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"></highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/>ScrollableArea::WillRemoveScrollbar(scrollbar,<sp/>orientation);</highlight></codeline>
<codeline lineno="4710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4711" refid="_c_w_e-79_8c_1ae8a734bd9476b778530a5c278809b5b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ae8a734bd9476b778530a5c278809b5b0" kindref="member">~DelayScrollOffsetClampScope</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--count_<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a114e8747768bfd453b304f7f375ce663" kindref="member">DelayScrollOffsetClampScope::ClampScrollableAreas</ref>();</highlight></codeline>
<codeline lineno="4714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4715"><highlight class="normal">PaintLayerScrollableArea::~PaintLayerScrollableArea()<sp/>{</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/>CHECK(HasBeenDisposed());</highlight></codeline>
<codeline lineno="4717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4718"><highlight class="normal">PaintLayerScrollableArea::PreventRelayoutScope::~PreventRelayoutScope()<sp/>{</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--count_<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(relayout_needed_)<sp/>{</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>scrollable_area<sp/>:<sp/>NeedsRelayoutList())<sp/>{</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCHECK(scrollable_area-&gt;NeedsRelayout());</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayoutBox*<sp/>box<sp/>=<sp/>scrollable_area-&gt;GetLayoutBox();</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout_scope_-&gt;SetNeedsLayout(</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>box,<sp/>layout_invalidation_reason::kScrollbarChanged);</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(box-&gt;IsLayoutBlock())<sp/>{</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>horizontal_scrollbar_changed<sp/>=</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scrollable_area-&gt;HasHorizontalScrollbar()<sp/>!=</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scrollable_area-&gt;HadHorizontalScrollbarBeforeRelayout();</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>vertical_scrollbar_changed<sp/>=</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scrollable_area-&gt;HasVerticalScrollbar()<sp/>!=</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scrollable_area-&gt;HadVerticalScrollbarBeforeRelayout();</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(horizontal_scrollbar_changed<sp/>||<sp/>vertical_scrollbar_changed)<sp/>{</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ToLayoutBlock(box)-&gt;ScrollbarsChanged(horizontal_scrollbar_changed,</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertical_scrollbar_changed);</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scrollable_area-&gt;SetNeedsRelayout(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"></highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NeedsRelayoutList().clear();</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/>layout_scope_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4746"><highlight class="normal">V8Console::CommandLineAPIScope::CommandLineAPIScope(v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8::Local&lt;v8::Object&gt;<sp/>commandLineAPI,<sp/>v8::Local&lt;v8::Object&gt;<sp/>global)</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_context(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>)</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_commandLineAPI(commandLineAPI)</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_global(global)</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_installedMethods(v8::<ref refid="_c_w_e-20_8c_1a9078f3a0f246c24961486f729b1aaa34" kindref="member">Set</ref>::New(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;GetIsolate()))</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_cleanup(false)</highlight></codeline>
<codeline lineno="4752"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Array&gt;<sp/>names;</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_commandLineAPI-&gt;GetOwnPropertyNames(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>).ToLocal(&amp;names))</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::External&gt;<sp/>externalThis<sp/>=<sp/>v8::External::New(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;GetIsolate(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>names-&gt;Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>name;</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!names-&gt;Get(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>i).ToLocal(&amp;name)<sp/>||<sp/>!name-&gt;IsName())</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_global-&gt;Has(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>name).FromMaybe(</highlight><highlight class="keyword">true</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_installedMethods-&gt;Add(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>name).ToLocal(&amp;m_installedMethods))</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_global-&gt;SetAccessor(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8::Local&lt;v8::Name&gt;::Cast(name),<sp/>CommandLineAPIScope::accessorGetterCallback,</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandLineAPIScope::accessorSetterCallback,<sp/>externalThis,</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::DEFAULT,<sp/>v8::DontEnum).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>removed<sp/>=<sp/>m_installedMethods-&gt;Delete(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>name).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCHECK(removed);</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::CommandLineAPIScope::accessorGetterCallback(v8::Local&lt;v8::Name&gt;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::PropertyCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="4775"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/>CommandLineAPIScope*<sp/>scope<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">CommandLineAPIScope*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(info.Data().As&lt;v8::External&gt;()-&gt;Value());</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(scope);</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"></highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=<sp/>info.GetIsolate()-&gt;GetCurrentContext();</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scope-&gt;m_cleanup)<sp/>{</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>removed<sp/>=<sp/>info.Holder()-&gt;Delete(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>name).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCHECK(removed);</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>commandLineAPI<sp/>=<sp/>scope-&gt;m_commandLineAPI;</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"></highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!commandLineAPI-&gt;Get(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>name).ToLocal(&amp;<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>))</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1ad300709e8d9e950fbc3fbf0698d047b7" kindref="member">isCommandLineAPIGetter</ref>(toProtocolStringWithTypeCheck(name)))<sp/>{</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCHECK(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsFunction());</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::MicrotasksScope<sp/>microtasks(info.GetIsolate(),<sp/>v8::MicrotasksScope::kDoNotRunMicrotasks);</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>.As&lt;v8::Function&gt;()-&gt;Call(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">).ToLocal(&amp;<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>))</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::CommandLineAPIScope::accessorSetterCallback(v8::Local&lt;v8::Name&gt;<sp/>name,<sp/>v8::Local&lt;v8::Value&gt;<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::PropertyCallbackInfo&lt;void&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="4800"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/>CommandLineAPIScope*<sp/>scope<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">CommandLineAPIScope*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(info.Data().As&lt;v8::External&gt;()-&gt;Value());</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=<sp/>info.GetIsolate()-&gt;GetCurrentContext();</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info.Holder()-&gt;Delete(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>name).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info.Holder()-&gt;CreateDataProperty(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>name,<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>removed<sp/>=<sp/>scope-&gt;m_installedMethods-&gt;Delete(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>name).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(removed);</highlight></codeline>
<codeline lineno="4809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::assertCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="4811"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper<sp/>helper(info);</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(helper.firstArgToBoolean(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"></highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;v8::Local&lt;v8::Value&gt;&gt;<sp/>arguments;</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>info.Length();<sp/>++i)</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arguments.push_back(info[i]);</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.Length()<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arguments.push_back(toV8String(info.GetIsolate(),<sp/>String16(</highlight><highlight class="stringliteral">&quot;console.assert&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/>helper.reportCall(ConsoleAPIType::kAssert,<sp/>arguments);</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"></highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(V8DebuggerAgentImpl*<sp/><ref refid="_c_w_e-79_8c_1a9ec7c35ae38d078bae575f9f127fee48" kindref="member">debuggerAgent</ref><sp/>=<sp/>helper.debuggerAgent())</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a9ec7c35ae38d078bae575f9f127fee48" kindref="member">debuggerAgent</ref>-&gt;breakProgramOnException(protocol::Debugger::Paused::ReasonEnum::Assert,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4826" refid="_c_w_e-79_8c_1a4de9823c973e64a58e9654b2ba10ada2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a4de9823c973e64a58e9654b2ba10ada2" kindref="member">checkAndSetPrivateFlagOnConsole</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>defaultValue)</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>console<sp/>=<sp/><ref refid="_c_w_e-79_8c_1ae18573ae56672288281713f5aebb32e0" kindref="member">ensureConsole</ref>();</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Private&gt;<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref><sp/>=<sp/>v8::Private::ForApi(m_isolate,<sp/>toV8StringInternalized(m_isolate,<sp/>name));</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>flagValue;</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!console-&gt;GetPrivate(m_context,<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>).ToLocal(&amp;flagValue))</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>defaultValue;</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCHECK(flagValue-&gt;IsUndefined()<sp/>||<sp/>flagValue-&gt;IsBoolean());</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flagValue-&gt;IsBoolean())<sp/>{</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCHECK(flagValue.As&lt;v8::Boolean&gt;()-&gt;Value());</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!console-&gt;SetPrivate(m_context,<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>,<sp/>v8::True(m_isolate)).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>defaultValue;</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::clearCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="4843"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper(info).reportCallWithDefaultArgument(ConsoleAPIType::kClear,<sp/>String16(</highlight><highlight class="stringliteral">&quot;console.clear&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::clearInspectedContextIfNeeded(v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8::Local&lt;v8::Object&gt;<sp/>console)</highlight></codeline>
<codeline lineno="4847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;GetIsolate();</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/>console-&gt;SetPrivate(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/><ref refid="_c_w_e-79_8c_1a67370beabf17ad54f38c306dd997d6ea" kindref="member">inspectedContextPrivateKey</ref>(isolate),<sp/>v8::External::New(isolate,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::copyCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="4852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/>inspectImpl(info,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::countCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="4856"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper<sp/>helper(info);</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"></highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/>String16<sp/>title<sp/>=<sp/>helper.firstArgToString(String16());</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/>String16<sp/>identifier;</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(title.isEmpty())<sp/>{</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;V8StackTraceImpl&gt;<sp/>stackTrace<sp/>=<sp/>V8StackTraceImpl::capture(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stackTrace)</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>identifier<sp/>=<sp/>stackTrace-&gt;topSourceURL()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>+<sp/>String16::fromInteger(stackTrace-&gt;topLineNumber());</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>identifier<sp/>=<sp/>title<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"></highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Map&gt;<sp/>countMap;</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!helper.privateMap(</highlight><highlight class="stringliteral">&quot;V8Console#countMap&quot;</highlight><highlight class="normal">).ToLocal(&amp;countMap))</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/><ref refid="_c_w_e-20_8c_1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref><sp/>=<sp/>helper.getIntFromMap(countMap,<sp/>identifier,<sp/>0)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/>helper.setIntOnMap(countMap,<sp/>identifier,<sp/><ref refid="_c_w_e-20_8c_1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>);</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/>helper.reportCallWithArgument(ConsoleAPIType::kCount,<sp/>title<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String16::fromInteger(<ref refid="_c_w_e-20_8c_1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>));</highlight></codeline>
<codeline lineno="4875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4876" refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8::Local&lt;v8::Object&gt;<sp/>console,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/>v8::FunctionCallback<sp/>callback,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4877"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::String&gt;<sp/>funcName<sp/>=<sp/>toV8StringInternalized(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;GetIsolate(),<sp/>name);</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/>func;</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!V8_FUNCTION_NEW_REMOVE_PROTOTYPE(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>callback,<sp/>console,<sp/>0).ToLocal(&amp;func))</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;SetName(funcName);</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(description)<sp/>{</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::String&gt;<sp/>returnValue<sp/>=<sp/>toV8String(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;GetIsolate(),<sp/>description);</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/>toStringFunction;</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(V8_FUNCTION_NEW_REMOVE_PROTOTYPE(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/><ref refid="_c_w_e-79_8c_1ad295777dfe6bee4c6c39aab43e332e3d" kindref="member">returnDataCallback</ref>,<sp/>returnValue,<sp/>0).ToLocal(&amp;toStringFunction))</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;Set(toV8StringInternalized(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;GetIsolate(),<sp/></highlight><highlight class="stringliteral">&quot;toString&quot;</highlight><highlight class="normal">),<sp/>toStringFunction);</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!console-&gt;Set(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>funcName,<sp/>func).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4892" refid="_c_w_e-79_8c_1ada0e5f821a7afd1fe0ea6730bb197492" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>V8InspectorSessionImpl*<sp/><ref refid="_c_w_e-79_8c_1ada0e5f821a7afd1fe0ea6730bb197492" kindref="member">currentSession</ref>()</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InspectedContext*<sp/>inspectedContext<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a7caa98120b81c90545a31c4794f1b019" kindref="member">ensureInspectedContext</ref>();</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inspectedContext)</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inspectedContext-&gt;inspector()-&gt;sessionForContextGroup(inspectedContext-&gt;contextGroupId());</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::debugCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="4900"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper(info).reportCall(ConsoleAPIType::kDebug);</highlight></codeline>
<codeline lineno="4902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::debugFunctionCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="4904"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper<sp/>helper(info);</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!helper.firstArgAsFunction().ToLocal(&amp;</highlight><highlight class="keyword">function</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aa1063dedacc1258211353b49b4f91cb6" kindref="member">setFunctionBreakpoint</ref>(helper,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>V8DebuggerAgentImpl::DebugCommandBreakpointSource,<sp/>String16(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4911" refid="_c_w_e-79_8c_1a9ec7c35ae38d078bae575f9f127fee48" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>V8DebuggerAgentImpl*<sp/><ref refid="_c_w_e-79_8c_1a9ec7c35ae38d078bae575f9f127fee48" kindref="member">debuggerAgent</ref>()</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(V8InspectorSessionImpl*<sp/>session<sp/>=<sp/><ref refid="_c_w_e-79_8c_1ada0e5f821a7afd1fe0ea6730bb197492" kindref="member">currentSession</ref>())<sp/>{</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(session<sp/>&amp;&amp;<sp/>session-&gt;debuggerAgent()-&gt;enabled())</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>session-&gt;debuggerAgent();</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::dirCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="4920"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper(info).reportCall(ConsoleAPIType::kDir);</highlight></codeline>
<codeline lineno="4922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::dirxmlCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="4924"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper(info).reportCall(ConsoleAPIType::kDirXML);</highlight></codeline>
<codeline lineno="4926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4927" refid="_c_w_e-79_8c_1ae18573ae56672288281713f5aebb32e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/><ref refid="_c_w_e-79_8c_1ae18573ae56672288281713f5aebb32e0" kindref="member">ensureConsole</ref>()</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_console.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCHECK(!m_info.Data().IsEmpty());</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCHECK(!m_info.Data()-&gt;IsUndefined());</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_console<sp/>=<sp/>m_info.Data().As&lt;v8::Object&gt;();</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_console;</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4936" refid="_c_w_e-79_8c_1a65e4a4bb85615d76a23c6029378c52e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>V8InspectorClient*<sp/><ref refid="_c_w_e-79_8c_1a65e4a4bb85615d76a23c6029378c52e7" kindref="member">ensureDebuggerClient</ref>()</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_inspectorClient)</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_inspectorClient;</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InspectedContext*<sp/>inspectedContext<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a7caa98120b81c90545a31c4794f1b019" kindref="member">ensureInspectedContext</ref>();</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inspectedContext)</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_inspectorClient<sp/>=<sp/>inspectedContext-&gt;inspector()-&gt;client();</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_inspectorClient;</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4946" refid="_c_w_e-79_8c_1a7caa98120b81c90545a31c4794f1b019" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>InspectedContext*<sp/><ref refid="_c_w_e-79_8c_1a7caa98120b81c90545a31c4794f1b019" kindref="member">ensureInspectedContext</ref>()</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_inspectedContext)</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_inspectedContext;</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>console<sp/>=<sp/><ref refid="_c_w_e-79_8c_1ae18573ae56672288281713f5aebb32e0" kindref="member">ensureConsole</ref>();</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"></highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Private&gt;<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref><sp/>=<sp/><ref refid="_c_w_e-79_8c_1a67370beabf17ad54f38c306dd997d6ea" kindref="member">inspectedContextPrivateKey</ref>(m_isolate);</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>inspectedContextValue;</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!console-&gt;GetPrivate(m_context,<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>).ToLocal(&amp;inspectedContextValue))</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCHECK(inspectedContextValue-&gt;IsExternal());</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_inspectedContext<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InspectedContext*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inspectedContextValue.As&lt;v8::External&gt;()-&gt;Value());</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_inspectedContext;</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::errorCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="4961"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper(info).reportCall(ConsoleAPIType::kError);</highlight></codeline>
<codeline lineno="4963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4964" refid="_c_w_e-79_8c_1a68bf80e1550c47cd7bae238671850008" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::MaybeLocal&lt;v8::Function&gt;<sp/><ref refid="_c_w_e-79_8c_1a68bf80e1550c47cd7bae238671850008" kindref="member">firstArgAsFunction</ref>()</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_info.Length()<sp/>&lt;<sp/>1<sp/>||<sp/>!m_info[0]-&gt;IsFunction())</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::MaybeLocal&lt;v8::Function&gt;();</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_info[0].As&lt;v8::Function&gt;();</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4970" refid="_c_w_e-79_8c_1aca055add3e4d96da693c0d2595fbc173" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::MaybeLocal&lt;v8::Object&gt;<sp/><ref refid="_c_w_e-79_8c_1aca055add3e4d96da693c0d2595fbc173" kindref="member">firstArgAsObject</ref>()</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_info.Length()<sp/>&lt;<sp/>1<sp/>||<sp/>!m_info[0]-&gt;IsObject())</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::MaybeLocal&lt;v8::Object&gt;();</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_info[0].As&lt;v8::Object&gt;();</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4976" refid="_c_w_e-79_8c_1a7180426c260e875d2494683c13a51b4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a7180426c260e875d2494683c13a51b4f" kindref="member">firstArgToBoolean</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>defaultValue)</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_info.Length()<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>defaultValue;</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_info[0]-&gt;IsBoolean())</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_info[0].As&lt;v8::Boolean&gt;()-&gt;Value();</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_info[0]-&gt;BooleanValue(m_context).FromMaybe(defaultValue);</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4984" refid="_c_w_e-79_8c_1a7de5269f0ad51809ed58d6c62e4cbbc9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>String16<sp/><ref refid="_c_w_e-79_8c_1a7de5269f0ad51809ed58d6c62e4cbbc9" kindref="member">firstArgToString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String16&amp;<sp/>defaultValue)</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_info.Length()<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>defaultValue;</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::String&gt;<sp/>titleValue;</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_info[0]-&gt;IsObject())<sp/>{</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_info[0].As&lt;v8::Object&gt;()-&gt;ObjectProtoToString(m_context).ToLocal(&amp;titleValue))</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>defaultValue;</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_info[0]-&gt;ToString(m_context).ToLocal(&amp;titleValue))</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>defaultValue;</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toProtocolString(titleValue);</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4998" refid="_c_w_e-79_8c_1a83f098d2cc7ba8a0bee28bdeb09297f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a83f098d2cc7ba8a0bee28bdeb09297f6" kindref="member">getDoubleFromMap</ref>(v8::Local&lt;v8::Map&gt;<sp/>map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String16&amp;<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>defaultValue)</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::String&gt;<sp/>v8Key<sp/>=<sp/>toV8String(m_isolate,<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!map-&gt;Has(m_context,<sp/>v8Key).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>defaultValue;</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>intValue;</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!map-&gt;Get(m_context,<sp/>v8Key).ToLocal(&amp;intValue))</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>defaultValue;</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>intValue.As&lt;v8::Number&gt;()-&gt;Value();</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5008" refid="_c_w_e-79_8c_1a5baa628a9c29bbab6f37770ffe3743e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/><ref refid="_c_w_e-79_8c_1a5baa628a9c29bbab6f37770ffe3743e4" kindref="member">getIntFromMap</ref>(v8::Local&lt;v8::Map&gt;<sp/>map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String16&amp;<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>,<sp/>int64_t<sp/>defaultValue)</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::String&gt;<sp/>v8Key<sp/>=<sp/>toV8String(m_isolate,<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!map-&gt;Has(m_context,<sp/>v8Key).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>defaultValue;</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>intValue;</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!map-&gt;Get(m_context,<sp/>v8Key).ToLocal(&amp;intValue))</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>defaultValue;</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>intValue.As&lt;v8::Integer&gt;()-&gt;Value();</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::groupCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5019"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper(info).reportCallWithDefaultArgument(ConsoleAPIType::kStartGroup,<sp/>String16(</highlight><highlight class="stringliteral">&quot;console.group&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5021"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::groupCollapsedCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5023"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper(info).reportCallWithDefaultArgument(ConsoleAPIType::kStartGroupCollapsed,<sp/>String16(</highlight><highlight class="stringliteral">&quot;console.groupCollapsed&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::groupEndCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5027"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper(info).reportCallWithDefaultArgument(ConsoleAPIType::kEndGroup,<sp/>String16(</highlight><highlight class="stringliteral">&quot;console.groupEnd&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::infoCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5031"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper(info).reportCall(ConsoleAPIType::kInfo);</highlight></codeline>
<codeline lineno="5033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::inspectCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5035"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/>inspectImpl(info,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5038" refid="_c_w_e-79_8c_1a67370beabf17ad54f38c306dd997d6ea" refkind="member"><highlight class="normal">v8::Local&lt;v8::Private&gt;<sp/><ref refid="_c_w_e-79_8c_1a67370beabf17ad54f38c306dd997d6ea" kindref="member">inspectedContextPrivateKey</ref>(v8::Isolate*<sp/>isolate)</highlight></codeline>
<codeline lineno="5039"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Private::ForApi(isolate,<sp/>toV8StringInternalized(isolate,<sp/></highlight><highlight class="stringliteral">&quot;V8Console#InspectedContext&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::inspectedObject(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-22_8c_1a352d2fe346a8b5836919d2c8c152c091" kindref="member">num</ref>)</highlight></codeline>
<codeline lineno="5043"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(<ref refid="_c_w_e-22_8c_1a352d2fe346a8b5836919d2c8c152c091" kindref="member">num</ref><sp/>&lt;<sp/>V8InspectorSessionImpl::kInspectedObjectBufferSize);</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper<sp/>helper(info);</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(V8InspectorSessionImpl*<sp/>session<sp/>=<sp/>helper.currentSession())<sp/>{</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V8InspectorSession::Inspectable*<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>session-&gt;inspectedObject(<ref refid="_c_w_e-22_8c_1a352d2fe346a8b5836919d2c8c152c091" kindref="member">num</ref>);</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>info.GetIsolate();</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(<ref refid="_c_w_e-20_8c_1a8dd9089ff728178de93a49a1b1af8bd7" kindref="member">object</ref>-&gt;get(isolate-&gt;GetCurrentContext()));</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(v8::Undefined(isolate));</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5054"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5055" refid="_c_w_e-79_8c_1ad300709e8d9e950fbc3fbf0698d047b7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ad300709e8d9e950fbc3fbf0698d047b7" kindref="member">isCommandLineAPIGetter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String16&amp;<sp/>name)</highlight></codeline>
<codeline lineno="5056"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.length()<sp/>!=<sp/>2)</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>((name[1]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>name[1]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">)<sp/>||<sp/>name[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::keysCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>info.GetIsolate();</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(v8::Array::New(isolate));</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"></highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper<sp/>helper(info);</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>obj;</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!helper.firstArgAsObject().ToLocal(&amp;obj))</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Array&gt;<sp/>names;</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj-&gt;GetOwnPropertyNames(isolate-&gt;GetCurrentContext()).ToLocal(&amp;names))</highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(names);</highlight></codeline>
<codeline lineno="5074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::lastEvaluationResultCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5076"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper<sp/>helper(info);</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/>InspectedContext*<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=<sp/>helper.ensureInspectedContext();</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>)</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InjectedScript*<sp/>injectedScript<sp/>=<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;getInjectedScript())</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(injectedScript-&gt;lastEvaluationResult());</highlight></codeline>
<codeline lineno="5083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::logCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5085"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper(info).reportCall(ConsoleAPIType::kLog);</highlight></codeline>
<codeline lineno="5087"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::markTimelineCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5089"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper(info).reportDeprecatedCall(</highlight><highlight class="stringliteral">&quot;V8Console#markTimelineDeprecated&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&apos;console.markTimeline&apos;<sp/>is<sp/>deprecated.<sp/>Please<sp/>use<sp/>&apos;console.timeStamp&apos;<sp/>instead.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStampCallback(info);</highlight></codeline>
<codeline lineno="5092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::memoryGetterCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5094"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(V8InspectorClient*<sp/>client<sp/>=<sp/>ConsoleHelper(info).<ref refid="_c_w_e-79_8c_1a65e4a4bb85615d76a23c6029378c52e7" kindref="member">ensureDebuggerClient</ref>())<sp/>{</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>memoryValue;</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!client-&gt;memoryInfo(info.GetIsolate(),<sp/>info.GetIsolate()-&gt;GetCurrentContext()).ToLocal(&amp;memoryValue))</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(memoryValue);</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::memorySetterCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::monitorFunctionCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper<sp/>helper(info);</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!helper.firstArgAsFunction().ToLocal(&amp;</highlight><highlight class="keyword">function</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>name<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">-&gt;GetName();</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name-&gt;IsString()<sp/>||<sp/>!v8::Local&lt;v8::String&gt;::Cast(name)-&gt;Length())</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>function-&gt;GetInferredName();</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/>String16<sp/>functionName<sp/>=<sp/>toProtocolStringWithTypeCheck(name);</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/><sp/><sp/>String16Builder<sp/>builder;</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.append(</highlight><highlight class="stringliteral">&quot;console.log(\&quot;function<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(functionName.isEmpty())</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder.append(</highlight><highlight class="stringliteral">&quot;(anonymous<sp/>function)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder.append(functionName);</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.append(</highlight><highlight class="stringliteral">&quot;<sp/>called\&quot;<sp/>+<sp/>(arguments.length<sp/>&gt;<sp/>0<sp/>?<sp/>\&quot;<sp/>with<sp/>arguments:<sp/>\&quot;<sp/>+<sp/>Array.prototype.join.call(arguments,<sp/>\&quot;,<sp/>\&quot;)<sp/>:<sp/>\&quot;\&quot;))<sp/>&amp;&amp;<sp/>false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aa1063dedacc1258211353b49b4f91cb6" kindref="member">setFunctionBreakpoint</ref>(helper,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>V8DebuggerAgentImpl::MonitorCommandBreakpointSource,<sp/>builder.toString(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5124" refid="_c_w_e-79_8c_1a09bc7577c1e6e5ce99641dd37d101326" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::MaybeLocal&lt;v8::Map&gt;<sp/><ref refid="_c_w_e-79_8c_1a09bc7577c1e6e5ce99641dd37d101326" kindref="member">privateMap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>console<sp/>=<sp/><ref refid="_c_w_e-79_8c_1ae18573ae56672288281713f5aebb32e0" kindref="member">ensureConsole</ref>();</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Private&gt;<sp/>privateKey<sp/>=<sp/>v8::Private::ForApi(m_isolate,<sp/>toV8StringInternalized(m_isolate,<sp/>name));</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>mapValue;</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!console-&gt;GetPrivate(m_context,<sp/>privateKey).ToLocal(&amp;mapValue))</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::MaybeLocal&lt;v8::Map&gt;();</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapValue-&gt;IsUndefined())<sp/>{</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Map&gt;<sp/>map<sp/>=<sp/>v8::Map::New(m_isolate);</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!console-&gt;SetPrivate(m_context,<sp/>privateKey,<sp/>map).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::MaybeLocal&lt;v8::Map&gt;();</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map;</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mapValue-&gt;IsMap()<sp/>?<sp/>mapValue.As&lt;v8::Map&gt;()<sp/>:<sp/>v8::MaybeLocal&lt;v8::Map&gt;();</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::profileCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper<sp/>helper(info);</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(V8ProfilerAgentImpl*<sp/><ref refid="_c_w_e-79_8c_1a345a8291112b2c729143978bbcc04a03" kindref="member">profilerAgent</ref><sp/>=<sp/>helper.profilerAgent())</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a345a8291112b2c729143978bbcc04a03" kindref="member">profilerAgent</ref>-&gt;consoleProfile(helper.firstArgToString(String16()));</highlight></codeline>
<codeline lineno="5144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::profileEndCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper<sp/>helper(info);</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(V8ProfilerAgentImpl*<sp/><ref refid="_c_w_e-79_8c_1a345a8291112b2c729143978bbcc04a03" kindref="member">profilerAgent</ref><sp/>=<sp/>helper.profilerAgent())</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a345a8291112b2c729143978bbcc04a03" kindref="member">profilerAgent</ref>-&gt;consoleProfileEnd(helper.firstArgToString(String16()));</highlight></codeline>
<codeline lineno="5150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5151" refid="_c_w_e-79_8c_1a345a8291112b2c729143978bbcc04a03" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>V8ProfilerAgentImpl*<sp/><ref refid="_c_w_e-79_8c_1a345a8291112b2c729143978bbcc04a03" kindref="member">profilerAgent</ref>()</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(V8InspectorSessionImpl*<sp/>session<sp/>=<sp/><ref refid="_c_w_e-79_8c_1ada0e5f821a7afd1fe0ea6730bb197492" kindref="member">currentSession</ref>())<sp/>{</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(session<sp/>&amp;&amp;<sp/>session-&gt;profilerAgent()-&gt;enabled())</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>session-&gt;profilerAgent();</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5159" refid="_c_w_e-79_8c_1a83288decb1ad25fec9563fa822463b38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a83288decb1ad25fec9563fa822463b38" kindref="member">reportCall</ref>(ConsoleAPIType<sp/>type)</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_info.Length())</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;v8::Local&lt;v8::Value&gt;&gt;<sp/>arguments;</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_info.Length();<sp/>++i)</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arguments.push_back(m_info[i]);</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a83288decb1ad25fec9563fa822463b38" kindref="member">reportCall</ref>(type,<sp/>arguments);</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5168" refid="_c_w_e-79_8c_1ae52a4414ae75fea34999325d9ab60c50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a83288decb1ad25fec9563fa822463b38" kindref="member">reportCall</ref>(ConsoleAPIType<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;v8::Local&lt;v8::Value&gt;&gt;&amp;<sp/>arguments)</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InspectedContext*<sp/>inspectedContext<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a7caa98120b81c90545a31c4794f1b019" kindref="member">ensureInspectedContext</ref>();</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inspectedContext)</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V8InspectorImpl*<sp/>inspector<sp/>=<sp/>inspectedContext-&gt;inspector();</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;V8ConsoleMessage&gt;<sp/>message<sp/>=<sp/>V8ConsoleMessage::createForConsoleAPI(inspector-&gt;client()-&gt;currentTimeMS(),<sp/>type,<sp/>arguments,<sp/>inspector-&gt;debugger()-&gt;captureStackTrace(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>inspectedContext);</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inspector-&gt;ensureConsoleMessageStorage(inspectedContext-&gt;contextGroupId())-&gt;addMessage(std::move(message));</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5177" refid="_c_w_e-79_8c_1a906ae658e7881f1a3ce7e278c9915455" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a906ae658e7881f1a3ce7e278c9915455" kindref="member">reportCallWithArgument</ref>(ConsoleAPIType<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String16&amp;<sp/>message)</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;v8::Local&lt;v8::Value&gt;&gt;<sp/>arguments(1,<sp/>toV8String(m_isolate,<sp/>message));</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a83288decb1ad25fec9563fa822463b38" kindref="member">reportCall</ref>(type,<sp/>arguments);</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5182" refid="_c_w_e-79_8c_1af15a1048bb49abacc2531d6611a21d9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1af15a1048bb49abacc2531d6611a21d9c" kindref="member">reportCallWithDefaultArgument</ref>(ConsoleAPIType<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String16&amp;<sp/>message)</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;v8::Local&lt;v8::Value&gt;&gt;<sp/>arguments;</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_info.Length();<sp/>++i)</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arguments.push_back(m_info[i]);</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_info.Length())</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arguments.push_back(toV8String(m_isolate,<sp/>message));</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a83288decb1ad25fec9563fa822463b38" kindref="member">reportCall</ref>(type,<sp/>arguments);</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5191" refid="_c_w_e-79_8c_1aa0c8977d7081b502e68985076649b108" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aa0c8977d7081b502e68985076649b108" kindref="member">reportDeprecatedCall</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String16&amp;<sp/>message)</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a4de9823c973e64a58e9654b2ba10ada2" kindref="member">checkAndSetPrivateFlagOnConsole</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;v8::Local&lt;v8::Value&gt;&gt;<sp/>arguments(1,<sp/>toV8String(m_isolate,<sp/>message));</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a83288decb1ad25fec9563fa822463b38" kindref="member">reportCall</ref>(ConsoleAPIType::kWarning,<sp/>arguments);</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5198" refid="_c_w_e-79_8c_1ad295777dfe6bee4c6c39aab43e332e3d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ad295777dfe6bee4c6c39aab43e332e3d" kindref="member">returnDataCallback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(info.Data());</highlight></codeline>
<codeline lineno="5201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5202" refid="_c_w_e-79_8c_1aede5594cab9decbfe2b2b243abbae35c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aede5594cab9decbfe2b2b243abbae35c" kindref="member">setDoubleOnMap</ref>(v8::Local&lt;v8::Map&gt;<sp/>map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String16&amp;<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::String&gt;<sp/>v8Key<sp/>=<sp/>toV8String(m_isolate,<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!map-&gt;Set(m_context,<sp/>v8Key,<sp/>v8::Number::New(m_isolate,<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>)).ToLocal(&amp;map))</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5208" refid="_c_w_e-79_8c_1aa1063dedacc1258211353b49b4f91cb6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aa1063dedacc1258211353b49b4f91cb6" kindref="member">setFunctionBreakpoint</ref>(ConsoleHelper&amp;<sp/>helper,<sp/>v8::Local&lt;v8::Function&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>V8DebuggerAgentImpl::BreakpointSource<sp/>source,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String16&amp;<sp/>condition,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="5209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/><sp/><sp/>V8DebuggerAgentImpl*<sp/><ref refid="_c_w_e-79_8c_1a9ec7c35ae38d078bae575f9f127fee48" kindref="member">debuggerAgent</ref><sp/>=<sp/>helper.debuggerAgent();</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-79_8c_1a9ec7c35ae38d078bae575f9f127fee48" kindref="member">debuggerAgent</ref>)</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/><sp/><sp/>String16<sp/>scriptId<sp/>=<sp/>String16::fromInteger(function-&gt;ScriptId());</highlight></codeline>
<codeline lineno="5214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineNumber<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">-&gt;GetScriptLineNumber();</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>columnNumber<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">-&gt;GetScriptColumnNumber();</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lineNumber<sp/>==<sp/>v8::Function::kLineOffsetNotFound<sp/>||<sp/>columnNumber<sp/>==<sp/>v8::Function::kLineOffsetNotFound)</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a9ec7c35ae38d078bae575f9f127fee48" kindref="member">debuggerAgent</ref>-&gt;setBreakpointAt(scriptId,<sp/>lineNumber,<sp/>columnNumber,<sp/>source,<sp/>condition);</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a9ec7c35ae38d078bae575f9f127fee48" kindref="member">debuggerAgent</ref>-&gt;removeBreakpointAt(scriptId,<sp/>lineNumber,<sp/>columnNumber,<sp/>source);</highlight></codeline>
<codeline lineno="5222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5223" refid="_c_w_e-79_8c_1aeeda4320226a5110c06b71694efd1da9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aeeda4320226a5110c06b71694efd1da9" kindref="member">setIntOnMap</ref>(v8::Local&lt;v8::Map&gt;<sp/>map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String16&amp;<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>,<sp/>int64_t<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::String&gt;<sp/>v8Key<sp/>=<sp/>toV8String(m_isolate,<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!map-&gt;Set(m_context,<sp/>v8Key,<sp/>v8::Integer::New(m_isolate,<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>)).ToLocal(&amp;map))</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::tableCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper(info).reportCall(ConsoleAPIType::kTable);</highlight></codeline>
<codeline lineno="5232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::timeCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ab6a84e08397ba8e6a20b261c941f4c36" kindref="member">timeFunction</ref>(info,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::timeEndCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a2b94d67860cedab171f35938a31a852d" kindref="member">timeEndFunction</ref>(info,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5241" refid="_c_w_e-79_8c_1a2b94d67860cedab171f35938a31a852d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a2b94d67860cedab171f35938a31a852d" kindref="member">timeEndFunction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>timelinePrefix)</highlight></codeline>
<codeline lineno="5242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper<sp/>helper(info);</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(V8InspectorClient*<sp/>client<sp/>=<sp/>helper.ensureDebuggerClient())<sp/>{</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String16<sp/>protocolTitle<sp/>=<sp/>helper.firstArgToString(</highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timelinePrefix)</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>protocolTitle<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Timeline<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>protocolTitle<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client-&gt;consoleTimeEnd(protocolTitle);</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"></highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Map&gt;<sp/>timeMap;</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!helper.privateMap(</highlight><highlight class="stringliteral">&quot;V8Console#timeMap&quot;</highlight><highlight class="normal">).ToLocal(&amp;timeMap))</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>elapsed<sp/>=<sp/>client-&gt;currentTimeMS()<sp/>-<sp/>helper.getDoubleFromMap(timeMap,<sp/>protocolTitle,<sp/>0.0);</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String16<sp/>message<sp/>=<sp/>protocolTitle<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String16::fromDoublePrecision3(elapsed)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;ms&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>helper.reportCallWithArgument(ConsoleAPIType::kTimeEnd,<sp/>message);</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5258" refid="_c_w_e-79_8c_1ab6a84e08397ba8e6a20b261c941f4c36" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ab6a84e08397ba8e6a20b261c941f4c36" kindref="member">timeFunction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>timelinePrefix)</highlight></codeline>
<codeline lineno="5259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper<sp/>helper(info);</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(V8InspectorClient*<sp/>client<sp/>=<sp/>helper.ensureDebuggerClient())<sp/>{</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String16<sp/>protocolTitle<sp/>=<sp/>helper.firstArgToString(</highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timelinePrefix)</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>protocolTitle<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Timeline<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>protocolTitle<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client-&gt;consoleTime(protocolTitle);</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"></highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Map&gt;<sp/>timeMap;</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!helper.privateMap(</highlight><highlight class="stringliteral">&quot;V8Console#timeMap&quot;</highlight><highlight class="normal">).ToLocal(&amp;timeMap))</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>helper.setDoubleOnMap(timeMap,<sp/>protocolTitle,<sp/>client-&gt;currentTimeMS());</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::timeStampCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper<sp/>helper(info);</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(V8InspectorClient*<sp/>client<sp/>=<sp/>helper.ensureDebuggerClient())</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client-&gt;consoleTimeStamp(helper.firstArgToString(String16()));</highlight></codeline>
<codeline lineno="5278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::timelineCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper(info).reportDeprecatedCall(</highlight><highlight class="stringliteral">&quot;V8Console#timeline&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&apos;console.timeline&apos;<sp/>is<sp/>deprecated.<sp/>Please<sp/>use<sp/>&apos;console.time&apos;<sp/>instead.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ab6a84e08397ba8e6a20b261c941f4c36" kindref="member">timeFunction</ref>(info,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::timelineEndCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper(info).reportDeprecatedCall(</highlight><highlight class="stringliteral">&quot;V8Console#timelineEnd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&apos;console.timelineEnd&apos;<sp/>is<sp/>deprecated.<sp/>Please<sp/>use<sp/>&apos;console.timeEnd&apos;<sp/>instead.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a2b94d67860cedab171f35938a31a852d" kindref="member">timeEndFunction</ref>(info,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::traceCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper(info).reportCallWithDefaultArgument(ConsoleAPIType::kTrace,<sp/>String16(</highlight><highlight class="stringliteral">&quot;console.trace&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::undebugFunctionCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper<sp/>helper(info);</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!helper.firstArgAsFunction().ToLocal(&amp;</highlight><highlight class="keyword">function</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aa1063dedacc1258211353b49b4f91cb6" kindref="member">setFunctionBreakpoint</ref>(helper,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>V8DebuggerAgentImpl::DebugCommandBreakpointSource,<sp/>String16(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::unmonitorFunctionCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper<sp/>helper(info);</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!helper.firstArgAsFunction().ToLocal(&amp;</highlight><highlight class="keyword">function</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aa1063dedacc1258211353b49b4f91cb6" kindref="member">setFunctionBreakpoint</ref>(helper,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>V8DebuggerAgentImpl::MonitorCommandBreakpointSource,<sp/>String16(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::valuesCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>info.GetIsolate();</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(v8::Array::New(isolate));</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"></highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper<sp/>helper(info);</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>obj;</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!helper.firstArgAsObject().ToLocal(&amp;obj))</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Array&gt;<sp/>names;</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=<sp/>isolate-&gt;GetCurrentContext();</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj-&gt;GetOwnPropertyNames(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>).ToLocal(&amp;names))</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Array&gt;<sp/>values<sp/>=<sp/>v8::Array::New(isolate,<sp/>names-&gt;Length());</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>names-&gt;Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!names-&gt;Get(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>i).ToLocal(&amp;<ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>))</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj-&gt;Get(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>).ToLocal(&amp;<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>))</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!values-&gt;Set(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>i,<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(values);</highlight></codeline>
<codeline lineno="5334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Console::warnCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleHelper(info).reportCall(ConsoleAPIType::kWarning);</highlight></codeline>
<codeline lineno="5338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5339"><highlight class="normal">V8Console::CommandLineAPIScope::~CommandLineAPIScope()</highlight></codeline>
<codeline lineno="5340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/><sp/><sp/>m_cleanup<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Array&gt;<sp/>names<sp/>=<sp/>m_installedMethods-&gt;AsArray();</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>names-&gt;Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>name;</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!names-&gt;Get(m_context,<sp/>i).ToLocal(&amp;name)<sp/>||<sp/>!name-&gt;IsName())</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name-&gt;IsString())<sp/>{</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>descriptor;</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/>m_global-&gt;GetOwnPropertyDescriptor(m_context,<sp/>v8::Local&lt;v8::String&gt;::Cast(name)).ToLocal(&amp;descriptor);</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCHECK(success);</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5354"><highlight class="normal">V8Debugger::V8Debugger(v8::Isolate*<sp/>isolate,<sp/>V8InspectorImpl*<sp/>inspector)</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_isolate(isolate)</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_inspector(inspector)</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_lastContextId(0)</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_enableCount(0)</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_breakpointsActivated(true)</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_runningNestedMessageLoop(false)</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_ignoreScriptParsedEventsCounter(0)</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_maxAsyncCallStackDepth(0)</highlight></codeline>
<codeline lineno="5363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::allAsyncTasksCanceled()</highlight></codeline>
<codeline lineno="5366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/>m_asyncTaskStacks.clear();</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/>m_recurringTasks.clear();</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/><sp/>m_currentStacks.clear();</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/>m_currentTasks.clear();</highlight></codeline>
<codeline lineno="5371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::asyncTaskCanceled(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>task)</highlight></codeline>
<codeline lineno="5373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_maxAsyncCallStackDepth)</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/>m_asyncTaskStacks.erase(task);</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/>m_recurringTasks.erase(task);</highlight></codeline>
<codeline lineno="5378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::asyncTaskFinished(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>task)</highlight></codeline>
<codeline lineno="5380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_maxAsyncCallStackDepth)</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_currentStacks.size())</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"></highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(m_currentTasks.back()<sp/>==<sp/>task);</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/>m_currentTasks.pop_back();</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"></highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/><sp/><sp/>m_currentStacks.pop_back();</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_recurringTasks.find(task)<sp/>==<sp/>m_recurringTasks.end())</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_asyncTaskStacks.erase(task);</highlight></codeline>
<codeline lineno="5392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::asyncTaskStarted(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>task)</highlight></codeline>
<codeline lineno="5394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_maxAsyncCallStackDepth)</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/>m_currentTasks.push_back(task);</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a5f563e7ca7060023ac9f38e435f4e1e0" kindref="member">AsyncTaskToStackTrace::iterator</ref><sp/>stackIt<sp/>=<sp/>m_asyncTaskStacks.find(task);</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;V8StackTraceImpl&gt;<sp/>stack;</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stackIt<sp/>!=<sp/>m_asyncTaskStacks.end()<sp/>&amp;&amp;<sp/>stackIt-&gt;second)</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack<sp/>=<sp/>stackIt-&gt;second-&gt;cloneImpl();</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/>m_currentStacks.push_back(std::move(stack));</highlight></codeline>
<codeline lineno="5403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::breakProgram()</highlight></codeline>
<codeline lineno="5405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isPaused())<sp/>{</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCHECK(!m_runningNestedMessageLoop);</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>exception;</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Array&gt;<sp/>hitBreakpoints;</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleProgramBreak(m_pausedContext,<sp/>m_executionState,<sp/>exception,<sp/>hitBreakpoints);</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"></highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!canBreakProgram())</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"></highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>scope(m_isolate);</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/>breakFunction;</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!V8_FUNCTION_NEW_REMOVE_PROTOTYPE(m_isolate-&gt;GetCurrentContext(),<sp/>&amp;V8Debugger::breakProgramCallback,<sp/>v8::External::New(m_isolate,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">),<sp/>0).ToLocal(&amp;breakFunction))</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Debug::Call(debuggerContext(),<sp/>breakFunction).ToLocalChecked();</highlight></codeline>
<codeline lineno="5422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::breakProgramCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK_EQ(info.Length(),<sp/>2);</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/>V8Debugger*<sp/>thisPtr<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a0ce0176a3c3f50d922a92cfd0858fe7c" kindref="member">toV8Debugger</ref>(info.Data());</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!thisPtr-&gt;enabled())</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Context&gt;<sp/>pausedContext<sp/>=<sp/>thisPtr-&gt;m_isolate-&gt;GetCurrentContext();</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>exception;</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Array&gt;<sp/>hitBreakpoints;</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/>thisPtr-&gt;handleProgramBreak(pausedContext,<sp/>v8::Local&lt;v8::Object&gt;::Cast(info[0]),<sp/>exception,<sp/>hitBreakpoints);</highlight></codeline>
<codeline lineno="5433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5434"><highlight class="normal">v8::MaybeLocal&lt;v8::Value&gt;<sp/>V8Debugger::callDebuggerMethod(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>functionName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[])</highlight></codeline>
<codeline lineno="5435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::MicrotasksScope<sp/>microtasks(m_isolate,<sp/>v8::MicrotasksScope::kDoNotRunMicrotasks);</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>debuggerScript<sp/>=<sp/>m_debuggerScript.Get(m_isolate);</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>=<sp/>v8::Local&lt;v8::Function&gt;::Cast(debuggerScript-&gt;Get(toV8StringInternalized(m_isolate,<sp/>functionName)));</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(m_isolate-&gt;InContext());</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">-&gt;Call(m_isolate-&gt;GetCurrentContext(),<sp/>debuggerScript,<sp/>argc,<sp/>argv);</highlight></codeline>
<codeline lineno="5441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5442"><highlight class="normal">v8::Local&lt;v8::Value&gt;<sp/>V8Debugger::callInternalGetterFunction(v8::Local&lt;v8::Object&gt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>functionName)</highlight></codeline>
<codeline lineno="5443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::MicrotasksScope<sp/>microtasks(m_isolate,<sp/>v8::MicrotasksScope::kDoNotRunMicrotasks);</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>getterValue<sp/>=<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">-&gt;Get(toV8StringInternalized(m_isolate,<sp/>functionName));</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(!getterValue.IsEmpty()<sp/>&amp;&amp;<sp/>getterValue-&gt;IsFunction());</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Function&gt;::Cast(getterValue)-&gt;Call(m_isolate-&gt;GetCurrentContext(),<sp/><ref refid="_c_w_e-20_8c_1a8dd9089ff728178de93a49a1b1af8bd7" kindref="member">object</ref>,<sp/>0,<sp/>0).ToLocalChecked();</highlight></codeline>
<codeline lineno="5448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>V8Debugger::canBreakProgram()</highlight></codeline>
<codeline lineno="5450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_breakpointsActivated)</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_isolate-&gt;InContext();</highlight></codeline>
<codeline lineno="5454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5455"><highlight class="normal">std::unique_ptr&lt;V8StackTraceImpl&gt;<sp/>V8Debugger::captureStackTrace(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fullStack)</highlight></codeline>
<codeline lineno="5456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_isolate-&gt;InContext())</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"></highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>handles(m_isolate);</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>contextGroupId<sp/>=<sp/>getGroupId(m_isolate-&gt;GetCurrentContext());</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!contextGroupId)</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"></highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stackSize<sp/>=<sp/>fullStack<sp/>?<sp/>V8StackTraceImpl::maxCallStackSizeToCapture<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_inspector-&gt;enabledRuntimeAgentForGroup(contextGroupId))</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stackSize<sp/>=<sp/>V8StackTraceImpl::maxCallStackSizeToCapture;</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"></highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>V8StackTraceImpl::capture(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>contextGroupId,<sp/>stackSize);</highlight></codeline>
<codeline lineno="5470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::clearBreakpoints()</highlight></codeline>
<codeline lineno="5472"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>scope(m_isolate);</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Context::Scope<sp/>contextScope(debuggerContext());</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"></highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/>clearBreakpoints<sp/>=<sp/>v8::Local&lt;v8::Function&gt;::Cast(m_debuggerScript.Get(m_isolate)-&gt;Get(toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;clearBreakpoints&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Debug::Call(debuggerContext(),<sp/>clearBreakpoints).ToLocalChecked();</highlight></codeline>
<codeline lineno="5478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::clearStepping()</highlight></codeline>
<codeline lineno="5480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(enabled());</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>scope(m_isolate);</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Context::Scope<sp/>contextScope(debuggerContext());</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"></highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{<sp/>v8::Undefined(m_isolate)<sp/>};</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/>callDebuggerMethod(</highlight><highlight class="stringliteral">&quot;clearStepping&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>argv);</highlight></codeline>
<codeline lineno="5487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::compileDebuggerScript()</highlight></codeline>
<codeline lineno="5489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_debuggerScript.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOTREACHED();</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"></highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>scope(m_isolate);</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Context::Scope<sp/>contextScope(debuggerContext());</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"></highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::String&gt;<sp/>scriptValue<sp/>=<sp/>v8::String::NewFromUtf8(m_isolate,<sp/>DebuggerScript_js,<sp/>v8::NewStringType::kInternalized,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(DebuggerScript_js)).ToLocalChecked();</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_inspector-&gt;compileAndRunInternalScript(debuggerContext(),<sp/>scriptValue).ToLocal(&amp;<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>))<sp/>{</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOTREACHED();</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsObject());</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/>m_debuggerScript.Reset(m_isolate,<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>.As&lt;v8::Object&gt;());</highlight></codeline>
<codeline lineno="5506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>V8Debugger::contextId(v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>)</highlight></codeline>
<codeline lineno="5508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref><sp/>=<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;GetEmbedderData(static_cast&lt;int&gt;(v8::Context::kDebugIdIndex));</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>.IsEmpty()<sp/>||<sp/>!<ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>-&gt;IsString())</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/>String16<sp/>dataString<sp/>=<sp/>toProtocolString(<ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>.As&lt;v8::String&gt;());</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dataString.isEmpty())</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>commaPos<sp/>=<sp/>dataString.find(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(commaPos<sp/>==<sp/>String16::kNotFound)</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>commaPos2<sp/>=<sp/>dataString.find(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">,<sp/>commaPos<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(commaPos2<sp/>==<sp/>String16::kNotFound)</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dataString.substring(commaPos<sp/>+<sp/>1,<sp/>commaPos2<sp/>-<sp/>commaPos<sp/>-<sp/>1).toInteger();</highlight></codeline>
<codeline lineno="5522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::continueProgram()</highlight></codeline>
<codeline lineno="5524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isPaused())</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_inspector-&gt;client()-&gt;quitMessageLoopOnPause();</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pausedContext.Clear();</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/>m_executionState.Clear();</highlight></codeline>
<codeline lineno="5529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5530"><highlight class="normal">std::unique_ptr&lt;V8StackTraceImpl&gt;<sp/>V8Debugger::createStackTrace(v8::Local&lt;v8::StackTrace&gt;<sp/>stackTrace)</highlight></codeline>
<codeline lineno="5531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>contextGroupId<sp/>=<sp/>m_isolate-&gt;InContext()<sp/>?<sp/>getGroupId(m_isolate-&gt;GetCurrentContext())<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>V8StackTraceImpl::create(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>contextGroupId,<sp/>stackTrace,<sp/>V8StackTraceImpl::maxCallStackSizeToCapture);</highlight></codeline>
<codeline lineno="5534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5535"><highlight class="normal">V8StackTraceImpl*<sp/>V8Debugger::currentAsyncCallChain()</highlight></codeline>
<codeline lineno="5536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_currentStacks.size())</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_currentStacks.back().get();</highlight></codeline>
<codeline lineno="5540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5541"><highlight class="normal">JavaScriptCallFrames<sp/>V8Debugger::currentCallFrames(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit)</highlight></codeline>
<codeline lineno="5542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_isolate-&gt;InContext())</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>JavaScriptCallFrames();</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>currentCallFramesV8;</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_executionState.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/>currentCallFramesFunction<sp/>=<sp/>v8::Local&lt;v8::Function&gt;::Cast(m_debuggerScript.Get(m_isolate)-&gt;Get(toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;currentCallFrames&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentCallFramesV8<sp/>=<sp/>v8::Debug::Call(debuggerContext(),<sp/>currentCallFramesFunction,<sp/>v8::Integer::New(m_isolate,<sp/>limit)).ToLocalChecked();</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{<sp/>m_executionState,<sp/>v8::Integer::New(m_isolate,<sp/>limit)<sp/>};</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentCallFramesV8<sp/>=<sp/>callDebuggerMethod(</highlight><highlight class="stringliteral">&quot;currentCallFrames&quot;</highlight><highlight class="normal">,<sp/>PROTOCOL_ARRAY_LENGTH(argv),<sp/>argv).ToLocalChecked();</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(!currentCallFramesV8.IsEmpty());</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!currentCallFramesV8-&gt;IsArray())</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>JavaScriptCallFrames();</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Array&gt;<sp/>callFramesArray<sp/>=<sp/>currentCallFramesV8.As&lt;v8::Array&gt;();</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/><sp/><sp/>JavaScriptCallFrames<sp/>callFrames;</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>callFramesArray-&gt;Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>callFrameValue;</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!callFramesArray-&gt;Get(debuggerContext(),<sp/>i).ToLocal(&amp;callFrameValue))</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>JavaScriptCallFrames();</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!callFrameValue-&gt;IsObject())</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>JavaScriptCallFrames();</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>callFrameObject<sp/>=<sp/>callFrameValue.As&lt;v8::Object&gt;();</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callFrames.push_back(JavaScriptCallFrame::create(debuggerContext(),<sp/>v8::Local&lt;v8::Object&gt;::Cast(callFrameObject)));</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>callFrames;</highlight></codeline>
<codeline lineno="5568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5569"><highlight class="normal">v8::Local&lt;v8::Context&gt;<sp/>V8Debugger::debuggerContext()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5570"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(!m_debuggerContext.IsEmpty());</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_debuggerContext.Get(m_isolate);</highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::disable()</highlight></codeline>
<codeline lineno="5575"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--m_enableCount)</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(enabled());</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/><sp/><sp/>clearBreakpoints();</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/>m_debuggerScript.Reset();</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/>m_debuggerContext.Reset();</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/>allAsyncTasksCanceled();</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Debug::SetDebugEventListener(m_isolate,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5585"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::enable()</highlight></codeline>
<codeline lineno="5586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_enableCount++)</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(!enabled());</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>scope(m_isolate);</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Debug::SetDebugEventListener(m_isolate,<sp/>&amp;V8Debugger::v8DebugEventCallback,<sp/>v8::External::New(m_isolate,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/>m_debuggerContext.Reset(m_isolate,<sp/>v8::Debug::GetDebugContext(m_isolate));</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/>compileDebuggerScript();</highlight></codeline>
<codeline lineno="5594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5595"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>V8Debugger::enabled()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5596"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!m_debuggerScript.IsEmpty();</highlight></codeline>
<codeline lineno="5598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::getCompiledScripts(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>contextGroupId,<sp/>std::vector&lt;std::unique_ptr&lt;V8DebuggerScript&gt;&gt;&amp;<sp/>result)</highlight></codeline>
<codeline lineno="5600"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>scope(m_isolate);</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::MicrotasksScope<sp/>microtasks(m_isolate,<sp/>v8::MicrotasksScope::kDoNotRunMicrotasks);</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>debuggerScript<sp/>=<sp/>m_debuggerScript.Get(m_isolate);</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(!debuggerScript-&gt;IsUndefined());</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/>getScriptsFunction<sp/>=<sp/>v8::Local&lt;v8::Function&gt;::Cast(debuggerScript-&gt;Get(toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;getScripts&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{<sp/>v8::Integer::New(m_isolate,<sp/>contextGroupId)<sp/>};</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getScriptsFunction-&gt;Call(debuggerContext(),<sp/>debuggerScript,<sp/>PROTOCOL_ARRAY_LENGTH(argv),<sp/>argv).ToLocal(&amp;<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>))</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsArray());</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Array&gt;<sp/>scriptsArray<sp/>=<sp/>v8::Local&lt;v8::Array&gt;::Cast(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/><sp/><sp/>result.reserve(scriptsArray-&gt;Length());</highlight></codeline>
<codeline lineno="5613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>scriptsArray-&gt;Length();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>scriptObject<sp/>=<sp/>v8::Local&lt;v8::Object&gt;::Cast(scriptsArray-&gt;Get(v8::Integer::New(m_isolate,<sp/>i)));</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(wrapUnique(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>V8DebuggerScript(m_isolate,<sp/>scriptObject,<sp/>inLiveEditScope)));</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>V8Debugger::getGroupId(v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>)</highlight></codeline>
<codeline lineno="5619"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref><sp/>=<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;GetEmbedderData(static_cast&lt;int&gt;(v8::Context::kDebugIdIndex));</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>.IsEmpty()<sp/>||<sp/>!<ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>-&gt;IsString())</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/>String16<sp/>dataString<sp/>=<sp/>toProtocolString(<ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>.As&lt;v8::String&gt;());</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dataString.isEmpty())</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>commaPos<sp/>=<sp/>dataString.find(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(commaPos<sp/>==<sp/>String16::kNotFound)</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dataString.substring(0,<sp/>commaPos).toInteger();</highlight></codeline>
<codeline lineno="5630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5631"><highlight class="normal">V8Debugger::PauseOnExceptionsState<sp/>V8Debugger::getPauseOnExceptionsState()</highlight></codeline>
<codeline lineno="5632"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(enabled());</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>scope(m_isolate);</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Context::Scope<sp/>contextScope(debuggerContext());</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"></highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{<sp/>v8::Undefined(m_isolate)<sp/>};</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>result<sp/>=<sp/>callDebuggerMethod(</highlight><highlight class="stringliteral">&quot;pauseOnExceptionsState&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>argv).ToLocalChecked();</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">V8Debugger::PauseOnExceptionsState</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result-&gt;Int32Value());</highlight></codeline>
<codeline lineno="5640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::handleV8AsyncTaskEvent(v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8::Local&lt;v8::Object&gt;<sp/>executionState,<sp/>v8::Local&lt;v8::Object&gt;<sp/>eventData)</highlight></codeline>
<codeline lineno="5642"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_maxAsyncCallStackDepth)</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"></highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/><sp/><sp/>String16<sp/>type<sp/>=<sp/>toProtocolStringWithTypeCheck(callInternalGetterFunction(eventData,<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/>String16<sp/>name<sp/>=<sp/>toProtocolStringWithTypeCheck(callInternalGetterFunction(eventData,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>callInternalGetterFunction(eventData,<sp/></highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">)-&gt;ToInteger(m_isolate)-&gt;Value();</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>*<sp/>4<sp/>+<sp/>(name[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;P&apos;</highlight><highlight class="normal"><sp/>?<sp/>2<sp/>:<sp/>0)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>v8AsyncTaskEventEnqueue)</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asyncTaskScheduled(name,<sp/>ptr,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>v8AsyncTaskEventWillHandle)</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asyncTaskStarted(ptr);</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>v8AsyncTaskEventDidHandle)</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asyncTaskFinished(ptr);</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOTREACHED();</highlight></codeline>
<codeline lineno="5658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::handleV8DebugEvent(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Debug::EventDetails&amp;<sp/>eventDetails)</highlight></codeline>
<codeline lineno="5660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!enabled())</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5663"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::DebugEvent<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/>eventDetails.GetEvent();</highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event<sp/>!=<sp/>v8::AsyncTaskEvent<sp/>&amp;&amp;<sp/>event<sp/>!=<sp/>v8::Break<sp/>&amp;&amp;<sp/>event<sp/>!=<sp/>v8::Exception<sp/>&amp;&amp;<sp/>event<sp/>!=<sp/>v8::AfterCompile<sp/>&amp;&amp;<sp/>event<sp/>!=<sp/>v8::BeforeCompile<sp/>&amp;&amp;<sp/>event<sp/>!=<sp/>v8::CompileError)</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"></highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Context&gt;<sp/>eventContext<sp/>=<sp/>eventDetails.GetEventContext();</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(!eventContext.IsEmpty());</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"></highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event<sp/>==<sp/>v8::AsyncTaskEvent)<sp/>{</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>scope(m_isolate);</highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleV8AsyncTaskEvent(eventContext,<sp/>eventDetails.GetExecutionState(),<sp/>eventDetails.GetEventData());</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"></highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/><sp/><sp/>V8DebuggerAgentImpl*<sp/>agent<sp/>=<sp/>m_inspector-&gt;enabledDebuggerAgentForGroup(getGroupId(eventContext));</highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(agent)<sp/>{</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>scope(m_isolate);</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_ignoreScriptParsedEventsCounter<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>(event<sp/>==<sp/>v8::AfterCompile<sp/>||<sp/>event<sp/>==<sp/>v8::CompileError))<sp/>{</highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Context::Scope<sp/>contextScope(debuggerContext());</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{<sp/>eventDetails.GetEventData()<sp/>};</highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref><sp/>=<sp/>callDebuggerMethod(</highlight><highlight class="stringliteral">&quot;getAfterCompileScript&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>argv).ToLocalChecked();</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsNull())</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCHECK(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsObject());</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>scriptObject<sp/>=<sp/>v8::Local&lt;v8::Object&gt;::Cast(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agent-&gt;didParseSource(wrapUnique(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>V8DebuggerScript(m_isolate,<sp/>scriptObject,<sp/>inLiveEditScope)),<sp/>event<sp/>==<sp/>v8::AfterCompile);</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event<sp/>==<sp/>v8::Exception)<sp/>{</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>eventData<sp/>=<sp/>eventDetails.GetEventData();</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>exception<sp/>=<sp/>callInternalGetterFunction(eventData,<sp/></highlight><highlight class="stringliteral">&quot;exception&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>promise<sp/>=<sp/>callInternalGetterFunction(eventData,<sp/></highlight><highlight class="stringliteral">&quot;promise&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPromiseRejection<sp/>=<sp/>!promise.IsEmpty()<sp/>&amp;&amp;<sp/>promise-&gt;IsObject();</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleProgramBreak(eventContext,<sp/>eventDetails.GetExecutionState(),<sp/>exception,<sp/>v8::Local&lt;v8::Array&gt;(),<sp/>isPromiseRejection);</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event<sp/>==<sp/>v8::Break)<sp/>{</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{<sp/>eventDetails.GetEventData()<sp/>};</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>hitBreakpoints<sp/>=<sp/>callDebuggerMethod(</highlight><highlight class="stringliteral">&quot;getBreakpointNumbers&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>argv).ToLocalChecked();</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DCHECK(hitBreakpoints-&gt;IsArray());</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleProgramBreak(eventContext,<sp/>eventDetails.GetExecutionState(),<sp/>v8::Local&lt;v8::Value&gt;(),<sp/>hitBreakpoints.As&lt;v8::Array&gt;());</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>V8Debugger::isPaused()</highlight></codeline>
<codeline lineno="5703"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!m_pausedContext.IsEmpty();</highlight></codeline>
<codeline lineno="5705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>V8Debugger::markContext(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V8ContextInfo&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5707"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(info.context-&gt;GetIsolate()<sp/>==<sp/>m_isolate);</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>contextId<sp/>=<sp/>++m_lastContextId;</highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/><sp/><sp/>String16<sp/>debugData<sp/>=<sp/>String16::fromInteger(info.contextGroupId)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>String16::fromInteger(contextId)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>+<sp/>info.auxData;</highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Context::Scope<sp/>contextScope(info.context);</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/><sp/><sp/>info.context-&gt;SetEmbedderData(static_cast&lt;int&gt;(v8::Context::kDebugIdIndex),<sp/>toV8String(m_isolate,<sp/>debugData));</highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contextId;</highlight></codeline>
<codeline lineno="5714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5715"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::muteScriptParsedEvents()</highlight></codeline>
<codeline lineno="5716"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5717"><highlight class="normal"><sp/><sp/><sp/><sp/>++m_ignoreScriptParsedEventsCounter;</highlight></codeline>
<codeline lineno="5718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::removeBreakpoint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String16&amp;<sp/>breakpointId)</highlight></codeline>
<codeline lineno="5720"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>scope(m_isolate);</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Context::Scope<sp/>contextScope(debuggerContext());</highlight></codeline>
<codeline lineno="5723"><highlight class="normal"></highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>info<sp/>=<sp/>v8::Object::New(m_isolate);</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;Set(toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;breakpointId&quot;</highlight><highlight class="normal">),<sp/>toV8String(m_isolate,<sp/>breakpointId));</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"></highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/>removeBreakpointFunction<sp/>=<sp/>v8::Local&lt;v8::Function&gt;::Cast(m_debuggerScript.Get(m_isolate)-&gt;Get(toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;removeBreakpoint&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Debug::Call(debuggerContext(),<sp/>removeBreakpointFunction,<sp/>info).ToLocalChecked();</highlight></codeline>
<codeline lineno="5729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::setAsyncCallStackDepth(V8DebuggerAgentImpl*<sp/>agent,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline lineno="5731"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(depth<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_maxAsyncCallStackDepthMap.erase(agent);</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_maxAsyncCallStackDepthMap[agent]<sp/>=<sp/>depth;</highlight></codeline>
<codeline lineno="5736"><highlight class="normal"></highlight></codeline>
<codeline lineno="5737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxAsyncCallStackDepth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pair<sp/>:<sp/>m_maxAsyncCallStackDepthMap)<sp/>{</highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pair.second<sp/>&gt;<sp/>maxAsyncCallStackDepth)</highlight></codeline>
<codeline lineno="5740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxAsyncCallStackDepth<sp/>=<sp/>pair.second;</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5742"><highlight class="normal"></highlight></codeline>
<codeline lineno="5743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_maxAsyncCallStackDepth<sp/>==<sp/>maxAsyncCallStackDepth)</highlight></codeline>
<codeline lineno="5744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/><sp/><sp/>m_maxAsyncCallStackDepth<sp/>=<sp/>maxAsyncCallStackDepth;</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!maxAsyncCallStackDepth)</highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allAsyncTasksCanceled();</highlight></codeline>
<codeline lineno="5748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5749"><highlight class="normal">String16<sp/>V8Debugger::setBreakpoint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String16&amp;<sp/>sourceID,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ScriptBreakpoint&amp;<sp/>scriptBreakpoint,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>actualLineNumber,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>actualColumnNumber)</highlight></codeline>
<codeline lineno="5750"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>scope(m_isolate);</highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Context::Scope<sp/>contextScope(debuggerContext());</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"></highlight></codeline>
<codeline lineno="5754"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>info<sp/>=<sp/>v8::Object::New(m_isolate);</highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;Set(toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;sourceID&quot;</highlight><highlight class="normal">),<sp/>toV8String(m_isolate,<sp/>sourceID));</highlight></codeline>
<codeline lineno="5756"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;Set(toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;lineNumber&quot;</highlight><highlight class="normal">),<sp/>v8::Integer::New(m_isolate,<sp/>scriptBreakpoint.lineNumber));</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;Set(toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;columnNumber&quot;</highlight><highlight class="normal">),<sp/>v8::Integer::New(m_isolate,<sp/>scriptBreakpoint.columnNumber));</highlight></codeline>
<codeline lineno="5758"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;Set(toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;condition&quot;</highlight><highlight class="normal">),<sp/>toV8String(m_isolate,<sp/>scriptBreakpoint.condition));</highlight></codeline>
<codeline lineno="5759"><highlight class="normal"></highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/>setBreakpointFunction<sp/>=<sp/>v8::Local&lt;v8::Function&gt;::Cast(m_debuggerScript.Get(m_isolate)-&gt;Get(toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;setBreakpoint&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>breakpointId<sp/>=<sp/>v8::Debug::Call(debuggerContext(),<sp/>setBreakpointFunction,<sp/>info).ToLocalChecked();</highlight></codeline>
<codeline lineno="5762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!breakpointId-&gt;IsString())</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/><sp/><sp/>*actualLineNumber<sp/>=<sp/>info-&gt;Get(toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;lineNumber&quot;</highlight><highlight class="normal">))-&gt;Int32Value();</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/><sp/>*actualColumnNumber<sp/>=<sp/>info-&gt;Get(toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;columnNumber&quot;</highlight><highlight class="normal">))-&gt;Int32Value();</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toProtocolString(breakpointId.As&lt;v8::String&gt;());</highlight></codeline>
<codeline lineno="5767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5768"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::setBreakpointsActivated(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>activated)</highlight></codeline>
<codeline lineno="5769"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!enabled())<sp/>{</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOTREACHED();</highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>scope(m_isolate);</highlight></codeline>
<codeline lineno="5775"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Context::Scope<sp/>contextScope(debuggerContext());</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"></highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>info<sp/>=<sp/>v8::Object::New(m_isolate);</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/><sp/><sp/>info-&gt;Set(toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;enabled&quot;</highlight><highlight class="normal">),<sp/>v8::Boolean::New(m_isolate,<sp/>activated));</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/>setBreakpointsActivated<sp/>=<sp/>v8::Local&lt;v8::Function&gt;::Cast(m_debuggerScript.Get(m_isolate)-&gt;Get(toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;setBreakpointsActivated&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Debug::Call(debuggerContext(),<sp/>setBreakpointsActivated,<sp/>info).ToLocalChecked();</highlight></codeline>
<codeline lineno="5781"><highlight class="normal"></highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/><sp/><sp/>m_breakpointsActivated<sp/>=<sp/>activated;</highlight></codeline>
<codeline lineno="5783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5784"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::setPauseOnExceptionsState(PauseOnExceptionsState<sp/>pauseOnExceptionsState)</highlight></codeline>
<codeline lineno="5785"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5786"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(enabled());</highlight></codeline>
<codeline lineno="5787"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>scope(m_isolate);</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Context::Scope<sp/>contextScope(debuggerContext());</highlight></codeline>
<codeline lineno="5789"><highlight class="normal"></highlight></codeline>
<codeline lineno="5790"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{<sp/>v8::Int32::New(m_isolate,<sp/>pauseOnExceptionsState)<sp/>};</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"><sp/><sp/><sp/><sp/>callDebuggerMethod(</highlight><highlight class="stringliteral">&quot;setPauseOnExceptionsState&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>argv);</highlight></codeline>
<codeline lineno="5792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5793"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::setPauseOnNextStatement(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pause)</highlight></codeline>
<codeline lineno="5794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_runningNestedMessageLoop)</highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pause)</highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Debug::DebugBreak(m_isolate);</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Debug::CancelDebugBreak(m_isolate);</highlight></codeline>
<codeline lineno="5801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>V8Debugger::setScriptSource(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String16&amp;<sp/>sourceID,<sp/>v8::Local&lt;v8::String&gt;<sp/>newSource,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dryRun,<sp/>ErrorString*<sp/>error,<sp/>Maybe&lt;protocol::Runtime::ExceptionDetails&gt;*<sp/>exceptionDetails,<sp/>JavaScriptCallFrames*<sp/>newCallFrames,<sp/>Maybe&lt;bool&gt;*<sp/>stackChanged)</highlight></codeline>
<codeline lineno="5803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EnableLiveEditScope<sp/>{</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>EnableLiveEditScope(v8::Isolate*<sp/>isolate)<sp/>:<sp/>m_isolate(isolate)</highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Debug::SetLiveEditEnabled(m_isolate,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inLiveEditScope<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~EnableLiveEditScope()</highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Debug::SetLiveEditEnabled(m_isolate,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inLiveEditScope<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Isolate*<sp/>m_isolate;</highlight></codeline>
<codeline lineno="5818"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"></highlight></codeline>
<codeline lineno="5820"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(enabled());</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>scope(m_isolate);</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"></highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;v8::Context::Scope&gt;<sp/>contextScope;</highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isPaused())</highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contextScope<sp/>=<sp/>wrapUnique(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>v8::Context::Scope(debuggerContext()));</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"></highlight></codeline>
<codeline lineno="5827"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{<sp/>toV8String(m_isolate,<sp/>sourceID),<sp/>newSource,<sp/><ref refid="_c_w_e-79_8c_1a2a92818f268e3305470d937415ce4c9d" kindref="member">v8Boolean</ref>(dryRun,<sp/>m_isolate)<sp/>};</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"></highlight></codeline>
<codeline lineno="5829"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>v8result;</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnableLiveEditScope<sp/>enableLiveEditScope(m_isolate);</highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::TryCatch<sp/>tryCatch(m_isolate);</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tryCatch.SetVerbose(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::MaybeLocal&lt;v8::Value&gt;<sp/>maybeResult<sp/>=<sp/>callDebuggerMethod(</highlight><highlight class="stringliteral">&quot;liveEditScriptSource&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>argv);</highlight></codeline>
<codeline lineno="5835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tryCatch.HasCaught())<sp/>{</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Message&gt;<sp/>message<sp/>=<sp/>tryCatch.Message();</highlight></codeline>
<codeline lineno="5837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!message.IsEmpty())</highlight></codeline>
<codeline lineno="5838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>toProtocolStringWithTypeCheck(message-&gt;Get());</highlight></codeline>
<codeline lineno="5839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>error.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8result<sp/>=<sp/>maybeResult.ToLocalChecked();</highlight></codeline>
<codeline lineno="5844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(!v8result.IsEmpty());</highlight></codeline>
<codeline lineno="5846"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>resultTuple<sp/>=<sp/>v8result-&gt;ToObject(m_isolate);</highlight></codeline>
<codeline lineno="5847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(resultTuple-&gt;Get(0)-&gt;ToInteger(m_isolate)-&gt;Value());</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(code)<sp/>{</highlight></codeline>
<codeline lineno="5849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="5850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stackChanged<sp/>=<sp/>resultTuple-&gt;Get(1)-&gt;BooleanValue();</highlight></codeline>
<codeline lineno="5852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dryRun<sp/>&amp;&amp;<sp/>isPaused())<sp/>{</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JavaScriptCallFrames<sp/>frames<sp/>=<sp/>currentCallFrames();</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCallFrames-&gt;swap(frames);</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="5859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*exceptionDetails<sp/>=<sp/>protocol::Runtime::ExceptionDetails::create()</highlight></codeline>
<codeline lineno="5861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.setText(toProtocolStringWithTypeCheck(resultTuple-&gt;Get(2)))</highlight></codeline>
<codeline lineno="5862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.setScriptId(String16(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.setLineNumber(resultTuple-&gt;Get(3)-&gt;ToInteger(m_isolate)-&gt;Value()<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.setColumnNumber(resultTuple-&gt;Get(4)-&gt;ToInteger(m_isolate)-&gt;Value()<sp/>-<sp/>1).build();</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/><sp/><sp/>*error<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>error.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::stepIntoStatement()</highlight></codeline>
<codeline lineno="5872"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(isPaused());</highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(!m_executionState.IsEmpty());</highlight></codeline>
<codeline lineno="5875"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>handleScope(m_isolate);</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{<sp/>m_executionState<sp/>};</highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/><sp/><sp/>callDebuggerMethod(stepIntoV8MethodName,<sp/>1,<sp/>argv);</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/><sp/><sp/>continueProgram();</highlight></codeline>
<codeline lineno="5879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::stepOutOfFunction()</highlight></codeline>
<codeline lineno="5881"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(isPaused());</highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(!m_executionState.IsEmpty());</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>handleScope(m_isolate);</highlight></codeline>
<codeline lineno="5885"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{<sp/>m_executionState<sp/>};</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/>callDebuggerMethod(stepOutV8MethodName,<sp/>1,<sp/>argv);</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/><sp/><sp/>continueProgram();</highlight></codeline>
<codeline lineno="5888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::stepOverStatement()</highlight></codeline>
<codeline lineno="5890"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(isPaused());</highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(!m_executionState.IsEmpty());</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>handleScope(m_isolate);</highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{<sp/>m_executionState<sp/>};</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/><sp/><sp/>callDebuggerMethod(</highlight><highlight class="stringliteral">&quot;stepOverStatement&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>argv);</highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/><sp/><sp/>continueProgram();</highlight></codeline>
<codeline lineno="5897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5898" refid="_c_w_e-79_8c_1a0ce0176a3c3f50d922a92cfd0858fe7c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>V8Debugger*<sp/><ref refid="_c_w_e-79_8c_1a0ce0176a3c3f50d922a92cfd0858fe7c" kindref="member">toV8Debugger</ref>(v8::Local&lt;v8::Value&gt;<sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="5899"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref><sp/>=<sp/>v8::Local&lt;v8::External&gt;::Cast(<ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>)-&gt;Value();</highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">V8Debugger*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="5902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5903"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::unmuteScriptParsedEvents()</highlight></codeline>
<codeline lineno="5904"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5905"><highlight class="normal"><sp/><sp/><sp/><sp/>--m_ignoreScriptParsedEventsCounter;</highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK_GE(m_ignoreScriptParsedEventsCounter,<sp/>0);</highlight></codeline>
<codeline lineno="5907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5908" refid="_c_w_e-79_8c_1a2a92818f268e3305470d937415ce4c9d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Boolean&gt;<sp/><ref refid="_c_w_e-79_8c_1a2a92818f268e3305470d937415ce4c9d" kindref="member">v8Boolean</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>,<sp/>v8::Isolate*<sp/>isolate)</highlight></codeline>
<codeline lineno="5909"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref><sp/>?<sp/>v8::True(isolate)<sp/>:<sp/>v8::False(isolate);</highlight></codeline>
<codeline lineno="5911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5912"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8Debugger::v8DebugEventCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::Debug::EventDetails&amp;<sp/>eventDetails)</highlight></codeline>
<codeline lineno="5913"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/><sp/><sp/>V8Debugger*<sp/>thisPtr<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a0ce0176a3c3f50d922a92cfd0858fe7c" kindref="member">toV8Debugger</ref>(eventDetails.GetCallbackData());</highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/><sp/><sp/>thisPtr-&gt;handleV8DebugEvent(eventDetails);</highlight></codeline>
<codeline lineno="5916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8InjectedScriptHost::bindCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5918"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.Length()<sp/>&lt;<sp/>2<sp/>||<sp/>!info[1]-&gt;IsString())</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/><sp/><sp/>InjectedScriptNative*<sp/>injectedScriptNative<sp/>=<sp/>InjectedScriptNative::fromInjectedScriptHost(info.Holder());</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!injectedScriptNative)</highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"></highlight></codeline>
<codeline lineno="5925"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::String&gt;<sp/>v8groupName<sp/>=<sp/>info[1]-&gt;ToString(info.GetIsolate());</highlight></codeline>
<codeline lineno="5926"><highlight class="normal"><sp/><sp/><sp/><sp/>String16<sp/>groupName<sp/>=<sp/>toProtocolStringWithTypeCheck(v8groupName);</highlight></codeline>
<codeline lineno="5927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>injectedScriptNative-&gt;bind(info[0],<sp/>groupName);</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8InjectedScriptHost::formatAccessorsAsProperties(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5931"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK_EQ(info.Length(),<sp/>2);</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info[1]-&gt;IsFunction())</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info[1].As&lt;v8::Function&gt;()-&gt;ScriptId()<sp/>!=<sp/>v8::UnboundScript::kNoScriptId)</highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(<ref refid="_c_w_e-79_8c_1aa30fc467eb824727e2c19749d28fd240" kindref="member">unwrapInspector</ref>(info)-&gt;client()-&gt;formatAccessorsAsProperties(info[0]));</highlight></codeline>
<codeline lineno="5939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5940"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8InjectedScriptHost::getInternalPropertiesCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5941"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.Length()<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Array&gt;<sp/>properties;</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1aa30fc467eb824727e2c19749d28fd240" kindref="member">unwrapInspector</ref>(info)-&gt;debugger()-&gt;internalProperties(info.GetIsolate()-&gt;GetCurrentContext(),<sp/>info[0]).ToLocal(&amp;properties))</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(properties);</highlight></codeline>
<codeline lineno="5947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8InjectedScriptHost::internalConstructorNameCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5949"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.Length()<sp/>&lt;<sp/>1<sp/>||<sp/>!info[0]-&gt;IsObject())</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"></highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>info[0].As&lt;v8::Object&gt;();</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(<ref refid="_c_w_e-20_8c_1a8dd9089ff728178de93a49a1b1af8bd7" kindref="member">object</ref>-&gt;GetConstructorName());</highlight></codeline>
<codeline lineno="5955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8InjectedScriptHost::objectHasOwnPropertyCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5957"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.Length()<sp/>&lt;<sp/>2<sp/>||<sp/>!info[0]-&gt;IsObject()<sp/>||<sp/>!info[1]-&gt;IsString())</highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>info[0].As&lt;v8::Object&gt;()-&gt;HasOwnProperty(info.GetIsolate()-&gt;GetCurrentContext(),<sp/>v8::Local&lt;v8::String&gt;::Cast(info[1])).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(v8::Boolean::New(info.GetIsolate(),<sp/>result));</highlight></codeline>
<codeline lineno="5962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8InjectedScriptHost::proxyTargetValueCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5964"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.Length()<sp/>!=<sp/>1<sp/>||<sp/>!info[0]-&gt;IsProxy())<sp/>{</highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOTREACHED();</highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>target<sp/>=<sp/>info[0].As&lt;v8::Proxy&gt;();</highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(target-&gt;IsProxy())</highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/>v8::Local&lt;v8::Proxy&gt;::Cast(target)-&gt;GetTarget();</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(target);</highlight></codeline>
<codeline lineno="5973"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5974" refid="_c_w_e-79_8c_1a4984b5587b1733239c3887072df545c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a4984b5587b1733239c3887072df545c9" kindref="member">setFunctionProperty</ref>(v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8::Local&lt;v8::Object&gt;<sp/>obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/>v8::FunctionCallback<sp/>callback,<sp/>v8::Local&lt;v8::External&gt;<sp/>external)</highlight></codeline>
<codeline lineno="5975"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::String&gt;<sp/>funcName<sp/>=<sp/>toV8StringInternalized(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;GetIsolate(),<sp/>name);</highlight></codeline>
<codeline lineno="5977"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/>func;</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!V8_FUNCTION_NEW_REMOVE_PROTOTYPE(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>callback,<sp/>external,<sp/>0).ToLocal(&amp;func))</highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;SetName(funcName);</highlight></codeline>
<codeline lineno="5981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj-&gt;Set(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>funcName,<sp/>func).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5983"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5984"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8InjectedScriptHost::subtypeCallback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="5985"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.Length()<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="5987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5988"><highlight class="normal"></highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>info.GetIsolate();</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref><sp/>=<sp/>info[0];</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsObject())<sp/>{</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>internalType<sp/>=<sp/>v8InternalValueTypeFrom(isolate-&gt;GetCurrentContext(),<sp/>v8::Local&lt;v8::Object&gt;::Cast(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>));</highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(internalType-&gt;IsString())<sp/>{</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(internalType);</highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsArray()<sp/>||<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsArgumentsObject())<sp/>{</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(toV8StringInternalized(isolate,<sp/></highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsTypedArray())<sp/>{</highlight></codeline>
<codeline lineno="6003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(toV8StringInternalized(isolate,<sp/></highlight><highlight class="stringliteral">&quot;typedarray&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6005"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsDate())<sp/>{</highlight></codeline>
<codeline lineno="6007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(toV8StringInternalized(isolate,<sp/></highlight><highlight class="stringliteral">&quot;date&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsRegExp())<sp/>{</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(toV8StringInternalized(isolate,<sp/></highlight><highlight class="stringliteral">&quot;regexp&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsMap()<sp/>||<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsWeakMap())<sp/>{</highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(toV8StringInternalized(isolate,<sp/></highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsSet()<sp/>||<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsWeakSet())<sp/>{</highlight></codeline>
<codeline lineno="6019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(toV8StringInternalized(isolate,<sp/></highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsMapIterator()<sp/>||<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsSetIterator())<sp/>{</highlight></codeline>
<codeline lineno="6023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(toV8StringInternalized(isolate,<sp/></highlight><highlight class="stringliteral">&quot;iterator&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6025"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsGeneratorObject())<sp/>{</highlight></codeline>
<codeline lineno="6027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(toV8StringInternalized(isolate,<sp/></highlight><highlight class="stringliteral">&quot;generator&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6029"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsNativeError())<sp/>{</highlight></codeline>
<codeline lineno="6031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(toV8StringInternalized(isolate,<sp/></highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsProxy())<sp/>{</highlight></codeline>
<codeline lineno="6035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(toV8StringInternalized(isolate,<sp/></highlight><highlight class="stringliteral">&quot;proxy&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6037"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsPromise())<sp/>{</highlight></codeline>
<codeline lineno="6039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(toV8StringInternalized(isolate,<sp/></highlight><highlight class="stringliteral">&quot;promise&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6041"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6042"><highlight class="normal"><sp/><sp/><sp/><sp/>String16<sp/>subtype<sp/>=<sp/><ref refid="_c_w_e-79_8c_1aa30fc467eb824727e2c19749d28fd240" kindref="member">unwrapInspector</ref>(info)-&gt;client()-&gt;valueSubtype(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="6043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!subtype.isEmpty())<sp/>{</highlight></codeline>
<codeline lineno="6044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.GetReturnValue().Set(toV8String(isolate,<sp/>subtype));</highlight></codeline>
<codeline lineno="6045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6048" refid="_c_w_e-79_8c_1aa30fc467eb824727e2c19749d28fd240" refkind="member"><highlight class="normal">V8InspectorImpl*<sp/><ref refid="_c_w_e-79_8c_1aa30fc467eb824727e2c19749d28fd240" kindref="member">unwrapInspector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>info)</highlight></codeline>
<codeline lineno="6049"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(!info.Data().IsEmpty());</highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(info.Data()-&gt;IsExternal());</highlight></codeline>
<codeline lineno="6052"><highlight class="normal"><sp/><sp/><sp/><sp/>V8InspectorImpl*<sp/>inspector<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">V8InspectorImpl*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(info.Data().As&lt;v8::External&gt;()-&gt;Value());</highlight></codeline>
<codeline lineno="6053"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(inspector);</highlight></codeline>
<codeline lineno="6054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inspector;</highlight></codeline>
<codeline lineno="6055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6056" refid="_c_w_e-79_8c_1a1a538e2dbf23591193748014456489e0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a1a538e2dbf23591193748014456489e0" kindref="member">AndroidIncognitoObserver</ref>(ChromeMetricsServiceClient*<sp/>parent)</highlight></codeline>
<codeline lineno="6057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>parent_(parent)<sp/>{</highlight></codeline>
<codeline lineno="6058"><highlight class="normal"><sp/><sp/><sp/><sp/>TabModelList::AddObserver(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6059"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6060" refid="_c_w_e-79_8c_1a790a55db90fb44cde5078cbcd0c3af0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a790a55db90fb44cde5078cbcd0c3af0d" kindref="member">AreNotificationListenersEnabledOnAllProfiles</ref>()<sp/>{</highlight></codeline>
<codeline lineno="6061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_notification_listeners_failed)</highlight></codeline>
<codeline lineno="6062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>notification_listeners_active_;</highlight></codeline>
<codeline lineno="6064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6065"><highlight class="normal">ChromeMetricsServiceClient::ChromeMetricsServiceClient(</highlight></codeline>
<codeline lineno="6066"><highlight class="normal"><sp/><sp/><sp/><sp/>metrics::MetricsStateManager*<sp/>state_manager)</highlight></codeline>
<codeline lineno="6067"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>metrics_state_manager_(state_manager),</highlight></codeline>
<codeline lineno="6068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>waiting_for_collect_final_metrics_step_(false),</highlight></codeline>
<codeline lineno="6069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_async_histogram_fetches_in_progress_(0),</highlight></codeline>
<codeline lineno="6070"><highlight class="normal">#<ref refid="_c_w_e-20_8c_1a7734f8b2c328f4fd387908b604be6d73" kindref="member">if</ref><sp/>BUILDFLAG(ENABLE_PLUGINS)</highlight></codeline>
<codeline lineno="6071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>plugin_metrics_provider_(nullptr),</highlight></codeline>
<codeline lineno="6072"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="6073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>weak_ptr_factory_(this)<sp/>{</highlight></codeline>
<codeline lineno="6074"><highlight class="normal"><sp/><sp/>DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);</highlight></codeline>
<codeline lineno="6075"><highlight class="normal"><sp/><sp/>RecordCommandLineMetrics();</highlight></codeline>
<codeline lineno="6076"><highlight class="normal"><sp/><sp/>notification_listeners_active_<sp/>=<sp/>RegisterForNotifications();</highlight></codeline>
<codeline lineno="6077"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_ANDROID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6078"><highlight class="normal"><sp/><sp/>incognito_observer_<sp/>=<sp/>std::make_unique&lt;AndroidIncognitoObserver&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6079"><highlight class="normal"><sp/><sp/>notification_listeners_active_<sp/>&amp;=<sp/>(incognito_observer_<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6080"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6081"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6082"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::CollectFinalHistograms()<sp/>{</highlight></codeline>
<codeline lineno="6083"><highlight class="normal"><sp/><sp/>DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);</highlight></codeline>
<codeline lineno="6084"><highlight class="normal"></highlight></codeline>
<codeline lineno="6085"><highlight class="normal"><sp/><sp/>DCHECK(!waiting_for_collect_final_metrics_step_);</highlight></codeline>
<codeline lineno="6086"><highlight class="normal"><sp/><sp/>waiting_for_collect_final_metrics_step_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6087"><highlight class="normal"></highlight></codeline>
<codeline lineno="6088"><highlight class="normal"><sp/><sp/>base::Closure<sp/>callback<sp/>=</highlight></codeline>
<codeline lineno="6089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::Bind(&amp;ChromeMetricsServiceClient::OnMemoryDetailCollectionDone,</highlight></codeline>
<codeline lineno="6090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weak_ptr_factory_.GetWeakPtr());</highlight></codeline>
<codeline lineno="6091"><highlight class="normal"></highlight></codeline>
<codeline lineno="6092"><highlight class="normal"><sp/><sp/>scoped_refptr&lt;MetricsMemoryDetails&gt;<sp/>details(</highlight></codeline>
<codeline lineno="6093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MetricsMemoryDetails(callback));</highlight></codeline>
<codeline lineno="6094"><highlight class="normal"><sp/><sp/>details-&gt;StartFetch();</highlight></codeline>
<codeline lineno="6095"><highlight class="normal"></highlight></codeline>
<codeline lineno="6096"><highlight class="normal"><sp/><sp/>scoped_refptr&lt;ProcessMemoryMetricsEmitter&gt;<sp/>emitter(</highlight></codeline>
<codeline lineno="6097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ProcessMemoryMetricsEmitter);</highlight></codeline>
<codeline lineno="6098"><highlight class="normal"><sp/><sp/>emitter-&gt;FetchAndEmitProcessMemoryMetrics();</highlight></codeline>
<codeline lineno="6099"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::CollectFinalMetricsForLog(</highlight></codeline>
<codeline lineno="6101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::Closure&amp;<sp/>done_callback)<sp/>{</highlight></codeline>
<codeline lineno="6102"><highlight class="normal"><sp/><sp/>DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);</highlight></codeline>
<codeline lineno="6103"><highlight class="normal"></highlight></codeline>
<codeline lineno="6104"><highlight class="normal"><sp/><sp/>collect_final_metrics_done_callback_<sp/>=<sp/>done_callback;</highlight></codeline>
<codeline lineno="6105"><highlight class="normal"><sp/><sp/>CollectFinalHistograms();</highlight></codeline>
<codeline lineno="6106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6107"><highlight class="normal">std::unique_ptr&lt;ChromeMetricsServiceClient&gt;<sp/><ref refid="_c_w_e-787_8c_1afab6f737b873d2fd9852d7f602763af3" kindref="member">ChromeMetricsServiceClient::Create</ref>(</highlight></codeline>
<codeline lineno="6108"><highlight class="normal"><sp/><sp/><sp/><sp/>metrics::MetricsStateManager*<sp/>state_manager)<sp/>{</highlight></codeline>
<codeline lineno="6109"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;ChromeMetricsServiceClient&gt;<sp/>client(</highlight></codeline>
<codeline lineno="6110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient(state_manager));</highlight></codeline>
<codeline lineno="6111"><highlight class="normal"><sp/><sp/>client-&gt;Initialize();</highlight></codeline>
<codeline lineno="6112"><highlight class="normal"></highlight></codeline>
<codeline lineno="6113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>client;</highlight></codeline>
<codeline lineno="6114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6115" refid="_c_w_e-79_8c_1a6d78dc2b50690b16ceb7daad67570ae1" refkind="member"><highlight class="normal">std::unique_ptr&lt;metrics::FileMetricsProvider&gt;<sp/><ref refid="_c_w_e-79_8c_1a6d78dc2b50690b16ceb7daad67570ae1" kindref="member">CreateFileMetricsProvider</ref>(</highlight></codeline>
<codeline lineno="6116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>metrics_reporting_enabled)<sp/>{</highlight></codeline>
<codeline lineno="6117"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;metrics::FileMetricsProvider&gt;<sp/>file_metrics_provider(</highlight></codeline>
<codeline lineno="6118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>metrics::FileMetricsProvider(g_browser_process-&gt;local_state()));</highlight></codeline>
<codeline lineno="6119"><highlight class="normal"></highlight></codeline>
<codeline lineno="6120"><highlight class="normal"><sp/><sp/>base::FilePath<sp/>user_data_dir;</highlight></codeline>
<codeline lineno="6121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base::PathService::Get(chrome::DIR_USER_DATA,<sp/>&amp;user_data_dir))<sp/>{</highlight></codeline>
<codeline lineno="6122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ad6b48676850af468881f1baad4a66f90" kindref="member">RegisterOrRemovePreviousRunMetricsFile</ref>(</highlight></codeline>
<codeline lineno="6123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics_reporting_enabled,<sp/>user_data_dir,</highlight></codeline>
<codeline lineno="6124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kCrashpadHistogramAllocatorName,</highlight></codeline>
<codeline lineno="6125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics::FileMetricsProvider::</highlight></codeline>
<codeline lineno="6126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSOCIATE_INTERNAL_PROFILE_OR_PREVIOUS_RUN,</highlight></codeline>
<codeline lineno="6127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_metrics_provider.get());</highlight></codeline>
<codeline lineno="6128"><highlight class="normal"></highlight></codeline>
<codeline lineno="6129"><highlight class="normal"><sp/><sp/><sp/><sp/>base::FilePath<sp/>browser_metrics_upload_dir<sp/>=</highlight></codeline>
<codeline lineno="6130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user_data_dir.AppendASCII(kBrowserMetricsName);</highlight></codeline>
<codeline lineno="6131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(metrics_reporting_enabled)<sp/>{</highlight></codeline>
<codeline lineno="6132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metrics::FileMetricsProvider::Params<sp/>browser_metrics_params(</highlight></codeline>
<codeline lineno="6133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>browser_metrics_upload_dir,</highlight></codeline>
<codeline lineno="6134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics::FileMetricsProvider::SOURCE_HISTOGRAMS_ATOMIC_DIR,</highlight></codeline>
<codeline lineno="6135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics::FileMetricsProvider::ASSOCIATE_INTERNAL_PROFILE,</highlight></codeline>
<codeline lineno="6136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kBrowserMetricsName);</highlight></codeline>
<codeline lineno="6137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>browser_metrics_params.max_dir_kib<sp/>=<sp/>kMaxHistogramStorageKiB;</highlight></codeline>
<codeline lineno="6138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>browser_metrics_params.filter<sp/>=<sp/>base::BindRepeating(</highlight></codeline>
<codeline lineno="6139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ChromeMetricsServiceClient::FilterBrowserMetricsFiles);</highlight></codeline>
<codeline lineno="6140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file_metrics_provider-&gt;RegisterSource(browser_metrics_params);</highlight></codeline>
<codeline lineno="6141"><highlight class="normal"></highlight></codeline>
<codeline lineno="6142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::FilePath<sp/>active_path;</highlight></codeline>
<codeline lineno="6143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::GlobalHistogramAllocator::ConstructFilePaths(</highlight></codeline>
<codeline lineno="6144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user_data_dir,<sp/>kCrashpadHistogramAllocatorName,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;active_path,</highlight></codeline>
<codeline lineno="6145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file_metrics_provider-&gt;RegisterSource(</highlight></codeline>
<codeline lineno="6147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics::FileMetricsProvider::Params(</highlight></codeline>
<codeline lineno="6148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_path,</highlight></codeline>
<codeline lineno="6149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics::FileMetricsProvider::SOURCE_HISTOGRAMS_ACTIVE_FILE,</highlight></codeline>
<codeline lineno="6150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics::FileMetricsProvider::ASSOCIATE_CURRENT_RUN));</highlight></codeline>
<codeline lineno="6151"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::PostTaskWithTraits(</highlight></codeline>
<codeline lineno="6153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FROM_HERE,</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{base::MayBlock(),<sp/>base::TaskPriority::BEST_EFFORT,</highlight></codeline>
<codeline lineno="6155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::TaskShutdownBehavior::SKIP_ON_SHUTDOWN},</highlight></codeline>
<codeline lineno="6156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::BindOnce(base::IgnoreResult(&amp;base::DeleteFile),</highlight></codeline>
<codeline lineno="6157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(browser_metrics_upload_dir),</highlight></codeline>
<codeline lineno="6158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*recursive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6161"><highlight class="normal"></highlight></codeline>
<codeline lineno="6162"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6163"><highlight class="normal"><sp/><sp/>base::FilePath<sp/>program_dir;</highlight></codeline>
<codeline lineno="6164"><highlight class="normal"><sp/><sp/>base::PathService::Get(base::DIR_EXE,<sp/>&amp;program_dir);</highlight></codeline>
<codeline lineno="6165"><highlight class="normal"><sp/><sp/>file_metrics_provider-&gt;RegisterSource(metrics::FileMetricsProvider::Params(</highlight></codeline>
<codeline lineno="6166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>program_dir.AppendASCII(installer::kSetupHistogramAllocatorName),</highlight></codeline>
<codeline lineno="6167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metrics::FileMetricsProvider::SOURCE_HISTOGRAMS_ATOMIC_DIR,</highlight></codeline>
<codeline lineno="6168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metrics::FileMetricsProvider::ASSOCIATE_CURRENT_RUN,</highlight></codeline>
<codeline lineno="6169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>installer::kSetupHistogramAllocatorName));</highlight></codeline>
<codeline lineno="6170"><highlight class="normal"></highlight></codeline>
<codeline lineno="6171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!user_data_dir.empty())<sp/>{</highlight></codeline>
<codeline lineno="6172"><highlight class="normal"><sp/><sp/><sp/><sp/>base::FilePath<sp/>notification_helper_metrics_upload_dir<sp/>=</highlight></codeline>
<codeline lineno="6173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user_data_dir.AppendASCII(</highlight></codeline>
<codeline lineno="6174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notification_helper::kNotificationHelperHistogramAllocatorName);</highlight></codeline>
<codeline lineno="6175"><highlight class="normal"></highlight></codeline>
<codeline lineno="6176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(metrics_reporting_enabled)<sp/>{</highlight></codeline>
<codeline lineno="6177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file_metrics_provider-&gt;RegisterSource(</highlight></codeline>
<codeline lineno="6178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics::FileMetricsProvider::Params(</highlight></codeline>
<codeline lineno="6179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notification_helper_metrics_upload_dir,</highlight></codeline>
<codeline lineno="6180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics::FileMetricsProvider::SOURCE_HISTOGRAMS_ATOMIC_DIR,</highlight></codeline>
<codeline lineno="6181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics::FileMetricsProvider::ASSOCIATE_CURRENT_RUN,</highlight></codeline>
<codeline lineno="6182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notification_helper::kNotificationHelperHistogramAllocatorName));</highlight></codeline>
<codeline lineno="6183"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::PostTaskWithTraits(</highlight></codeline>
<codeline lineno="6185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FROM_HERE,</highlight></codeline>
<codeline lineno="6186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{base::MayBlock(),<sp/>base::TaskPriority::BEST_EFFORT,</highlight></codeline>
<codeline lineno="6187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::TaskShutdownBehavior::CONTINUE_ON_SHUTDOWN},</highlight></codeline>
<codeline lineno="6188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::BindOnce(base::IgnoreResult(&amp;base::DeleteFile),</highlight></codeline>
<codeline lineno="6189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(notification_helper_metrics_upload_dir),</highlight></codeline>
<codeline lineno="6190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*recursive=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6194"><highlight class="normal"></highlight></codeline>
<codeline lineno="6195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file_metrics_provider;</highlight></codeline>
<codeline lineno="6196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6197"><highlight class="normal">ChromeMetricsServiceClient::CreateUploader(</highlight></codeline>
<codeline lineno="6198"><highlight class="normal"><sp/><sp/><sp/><sp/>base::StringPiece<sp/>server_url,</highlight></codeline>
<codeline lineno="6199"><highlight class="normal"><sp/><sp/><sp/><sp/>base::StringPiece<sp/>insecure_server_url,</highlight></codeline>
<codeline lineno="6200"><highlight class="normal"><sp/><sp/><sp/><sp/>base::StringPiece<sp/>mime_type,</highlight></codeline>
<codeline lineno="6201"><highlight class="normal"><sp/><sp/><sp/><sp/>metrics::MetricsLogUploader::MetricServiceType<sp/>service_type,</highlight></codeline>
<codeline lineno="6202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>metrics::MetricsLogUploader::UploadCallback&amp;<sp/>on_upload_complete)<sp/>{</highlight></codeline>
<codeline lineno="6203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;metrics::NetMetricsLogUploader&gt;(</highlight></codeline>
<codeline lineno="6204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_browser_process-&gt;shared_url_loader_factory(),<sp/>server_url,</highlight></codeline>
<codeline lineno="6205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>insecure_server_url,<sp/>mime_type,<sp/>service_type,<sp/>on_upload_complete);</highlight></codeline>
<codeline lineno="6206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6207"><highlight class="normal">ChromeMetricsServiceClient::FilterBrowserMetricsFiles(</highlight></codeline>
<codeline lineno="6208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>path)<sp/>{</highlight></codeline>
<codeline lineno="6209"><highlight class="normal"><sp/><sp/>base::ProcessId<sp/>pid;</highlight></codeline>
<codeline lineno="6210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!base::GlobalHistogramAllocator::ParseFilePath(path,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;pid))<sp/>{</highlight></codeline>
<codeline lineno="6212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>metrics::FileMetricsProvider::FILTER_PROCESS_FILE;</highlight></codeline>
<codeline lineno="6213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6214"><highlight class="normal"></highlight></codeline>
<codeline lineno="6215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pid<sp/>==<sp/>base::GetCurrentProcId())</highlight></codeline>
<codeline lineno="6216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>metrics::FileMetricsProvider::FILTER_ACTIVE_THIS_PID;</highlight></codeline>
<codeline lineno="6217"><highlight class="normal"></highlight></codeline>
<codeline lineno="6218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsProcessRunning(pid))</highlight></codeline>
<codeline lineno="6219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>metrics::FileMetricsProvider::FILTER_TRY_LATER;</highlight></codeline>
<codeline lineno="6220"><highlight class="normal"></highlight></codeline>
<codeline lineno="6221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>metrics::FileMetricsProvider::FILTER_PROCESS_FILE;</highlight></codeline>
<codeline lineno="6222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6223"><highlight class="normal">std::string<sp/>ChromeMetricsServiceClient::GetAppPackageName()<sp/>{</highlight></codeline>
<codeline lineno="6224"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_ANDROID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base::android::BuildInfo::GetInstance()-&gt;package_name();</highlight></codeline>
<codeline lineno="6226"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="6228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6229"><highlight class="normal">std::string<sp/>ChromeMetricsServiceClient::GetApplicationLocale()<sp/>{</highlight></codeline>
<codeline lineno="6230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_browser_process-&gt;GetApplicationLocale();</highlight></codeline>
<codeline lineno="6231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6232"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::GetBrand(std::string*<sp/>brand_code)<sp/>{</highlight></codeline>
<codeline lineno="6233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>google_brand::GetBrand(brand_code);</highlight></codeline>
<codeline lineno="6234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6235"><highlight class="normal">metrics::SystemProfileProto::Channel<sp/>ChromeMetricsServiceClient::GetChannel()<sp/>{</highlight></codeline>
<codeline lineno="6236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>metrics::AsProtobufChannel(chrome::GetChannel());</highlight></codeline>
<codeline lineno="6237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6238" refid="_c_w_e-79_8c_1af8b821770e0d04bb34e1be3ba3359bd3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1af8b821770e0d04bb34e1be3ba3359bd3" kindref="member">GetExecutableVersionDetails</ref>(base::string16*<sp/>product_name,</highlight></codeline>
<codeline lineno="6239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::string16*<sp/>version_number,</highlight></codeline>
<codeline lineno="6240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::string16*<sp/>channel_name)<sp/>{</highlight></codeline>
<codeline lineno="6241"><highlight class="normal"><sp/><sp/>DCHECK_NE(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>product_name);</highlight></codeline>
<codeline lineno="6242"><highlight class="normal"><sp/><sp/>DCHECK_NE(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>version_number);</highlight></codeline>
<codeline lineno="6243"><highlight class="normal"><sp/><sp/>DCHECK_NE(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>channel_name);</highlight></codeline>
<codeline lineno="6244"><highlight class="normal"></highlight></codeline>
<codeline lineno="6245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>exe_file[MAX_PATH]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="6246"><highlight class="normal"><sp/><sp/>CHECK(::GetModuleFileName(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>exe_file,<sp/>arraysize(exe_file)));</highlight></codeline>
<codeline lineno="6247"><highlight class="normal"></highlight></codeline>
<codeline lineno="6248"><highlight class="normal"><sp/><sp/>base::string16<sp/>unused_special_build;</highlight></codeline>
<codeline lineno="6249"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1af8b821770e0d04bb34e1be3ba3359bd3" kindref="member">install_static::GetExecutableVersionDetails</ref>(</highlight></codeline>
<codeline lineno="6250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exe_file,<sp/>product_name,<sp/>version_number,<sp/>&amp;unused_special_build,</highlight></codeline>
<codeline lineno="6251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>channel_name);</highlight></codeline>
<codeline lineno="6252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6253"><highlight class="normal">ChromeMetricsServiceClient::GetMetricsReportingDefaultState()<sp/>{</highlight></codeline>
<codeline lineno="6254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>metrics::GetMetricsReportingDefaultState(</highlight></codeline>
<codeline lineno="6255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_browser_process-&gt;local_state());</highlight></codeline>
<codeline lineno="6256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6257"><highlight class="normal">int32_t<sp/>ChromeMetricsServiceClient::GetProduct()<sp/>{</highlight></codeline>
<codeline lineno="6258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>metrics::ChromeUserMetricsExtension::CHROME;</highlight></codeline>
<codeline lineno="6259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6260"><highlight class="normal">ukm::UkmService*<sp/>ChromeMetricsServiceClient::GetUkmService()<sp/>{</highlight></codeline>
<codeline lineno="6261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ukm_service_.get();</highlight></codeline>
<codeline lineno="6262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6263"><highlight class="normal">std::string<sp/>ChromeMetricsServiceClient::GetVersionString()<sp/>{</highlight></codeline>
<codeline lineno="6264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>metrics::GetVersionString();</highlight></codeline>
<codeline lineno="6265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-787_8c_1a98b1050f09da390896f964fb7a892391" kindref="member">ChromeMetricsServiceClient::Initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="6267"><highlight class="normal"><sp/><sp/>PrefService*<sp/>local_state<sp/>=<sp/>g_browser_process-&gt;local_state();</highlight></codeline>
<codeline lineno="6268"><highlight class="normal"></highlight></codeline>
<codeline lineno="6269"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_ANDROID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6270"><highlight class="normal"><sp/><sp/>local_state-&gt;ClearPref(prefs::kCrashReportingEnabled);</highlight></codeline>
<codeline lineno="6271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6272"><highlight class="normal"></highlight></codeline>
<codeline lineno="6273"><highlight class="normal"><sp/><sp/>metrics_service_.reset(</highlight></codeline>
<codeline lineno="6274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>metrics::MetricsService(metrics_state_manager_,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>local_state));</highlight></codeline>
<codeline lineno="6275"><highlight class="normal"></highlight></codeline>
<codeline lineno="6276"><highlight class="normal"><sp/><sp/>RegisterMetricsServiceProviders();</highlight></codeline>
<codeline lineno="6277"><highlight class="normal"></highlight></codeline>
<codeline lineno="6278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsMetricsReportingForceEnabled()<sp/>||</highlight></codeline>
<codeline lineno="6279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::FeatureList::IsEnabled(ukm::kUkmFeature))<sp/>{</highlight></codeline>
<codeline lineno="6280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>restrict_to_whitelist_entries<sp/>=<sp/>!IsMetricsReportingForceEnabled();</highlight></codeline>
<codeline lineno="6281"><highlight class="normal"><sp/><sp/><sp/><sp/>ukm_service_.reset(</highlight></codeline>
<codeline lineno="6282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ukm::UkmService(local_state,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>restrict_to_whitelist_entries));</highlight></codeline>
<codeline lineno="6283"><highlight class="normal"><sp/><sp/><sp/><sp/>ukm_service_-&gt;SetIsWebstoreExtensionCallback(</highlight></codeline>
<codeline lineno="6284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::BindRepeating(&amp;IsWebstoreExtension));</highlight></codeline>
<codeline lineno="6285"><highlight class="normal"><sp/><sp/><sp/><sp/>RegisterUKMProviders();</highlight></codeline>
<codeline lineno="6286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6288"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::IsMetricsReportingForceEnabled()<sp/>{</highlight></codeline>
<codeline lineno="6289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base::CommandLine::ForCurrentProcess()-&gt;HasSwitch(</highlight></codeline>
<codeline lineno="6290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metrics::switches::kForceEnableMetricsReporting);</highlight></codeline>
<codeline lineno="6291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6292"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::IsReportingPolicyManaged()<sp/>{</highlight></codeline>
<codeline lineno="6293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsMetricsReportingPolicyManaged();</highlight></codeline>
<codeline lineno="6294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6295"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::IsUMACellularUploadLogicEnabled()<sp/>{</highlight></codeline>
<codeline lineno="6296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>metrics::IsCellularLogicEnabled();</highlight></codeline>
<codeline lineno="6297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6298"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::IsWebstoreExtension(base::StringPiece<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6299"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BUILDFLAG(ENABLE_EXTENSIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matched<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6301"><highlight class="normal"><sp/><sp/>ProfileManager*<sp/>profile_manager<sp/>=<sp/>g_browser_process-&gt;profile_manager();</highlight></codeline>
<codeline lineno="6302"><highlight class="normal"><sp/><sp/>DCHECK(profile_manager);</highlight></codeline>
<codeline lineno="6303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>profiles<sp/>=<sp/>profile_manager-&gt;GetLoadedProfiles();</highlight></codeline>
<codeline lineno="6304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Profile*<sp/>profile<sp/>:<sp/>profiles)<sp/>{</highlight></codeline>
<codeline lineno="6305"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(profile);</highlight></codeline>
<codeline lineno="6306"><highlight class="normal"><sp/><sp/><sp/><sp/>extensions::ExtensionRegistry*<sp/>registry<sp/>=</highlight></codeline>
<codeline lineno="6307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extensions::ExtensionRegistry::Get(profile);</highlight></codeline>
<codeline lineno="6308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!registry)</highlight></codeline>
<codeline lineno="6309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>extensions::Extension*<sp/><ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref><sp/>=<sp/>registry-&gt;GetExtensionById(</highlight></codeline>
<codeline lineno="6311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.as_string(),<sp/>extensions::ExtensionRegistry::ENABLED);</highlight></codeline>
<codeline lineno="6312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>)</highlight></codeline>
<codeline lineno="6313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>-&gt;from_webstore())</highlight></codeline>
<codeline lineno="6315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6316"><highlight class="normal"><sp/><sp/><sp/><sp/>matched<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matched;</highlight></codeline>
<codeline lineno="6319"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6323"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::Observe(</highlight></codeline>
<codeline lineno="6324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,</highlight></codeline>
<codeline lineno="6325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>content::NotificationSource&amp;<sp/>source,</highlight></codeline>
<codeline lineno="6326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>content::NotificationDetails&amp;<sp/>details)<sp/>{</highlight></codeline>
<codeline lineno="6327"><highlight class="normal"><sp/><sp/>DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);</highlight></codeline>
<codeline lineno="6328"><highlight class="normal"></highlight></codeline>
<codeline lineno="6329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="6330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>chrome::NOTIFICATION_BROWSER_OPENED:</highlight></codeline>
<codeline lineno="6331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UpdateRunningServices();</highlight></codeline>
<codeline lineno="6332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metrics_service_-&gt;OnApplicationNotIdle();</highlight></codeline>
<codeline lineno="6333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>chrome::NOTIFICATION_BROWSER_CLOSED:</highlight></codeline>
<codeline lineno="6335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>chrome::NOTIFICATION_TAB_PARENTED:</highlight></codeline>
<codeline lineno="6336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>chrome::NOTIFICATION_TAB_CLOSING:</highlight></codeline>
<codeline lineno="6337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>content::NOTIFICATION_LOAD_STOP:</highlight></codeline>
<codeline lineno="6338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>content::NOTIFICATION_LOAD_START:</highlight></codeline>
<codeline lineno="6339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>content::NOTIFICATION_RENDERER_PROCESS_CLOSED:</highlight></codeline>
<codeline lineno="6340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>content::NOTIFICATION_RENDER_WIDGET_HOST_HANG:</highlight></codeline>
<codeline lineno="6341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metrics_service_-&gt;OnApplicationNotIdle();</highlight></codeline>
<codeline lineno="6342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6343"><highlight class="normal"></highlight></codeline>
<codeline lineno="6344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>chrome::NOTIFICATION_PROFILE_ADDED:<sp/>{</highlight></codeline>
<codeline lineno="6345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=</highlight></codeline>
<codeline lineno="6346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RegisterForProfileEvents(content::Source&lt;Profile&gt;(source).ptr());</highlight></codeline>
<codeline lineno="6347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!success<sp/>&amp;&amp;<sp/>notification_listeners_active_)<sp/>{</highlight></codeline>
<codeline lineno="6348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notification_listeners_active_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateRunningServices();</highlight></codeline>
<codeline lineno="6350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>chrome::NOTIFICATION_PROFILE_DESTROYED:</highlight></codeline>
<codeline lineno="6354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UpdateRunningServices();</highlight></codeline>
<codeline lineno="6355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6356"><highlight class="normal"></highlight></codeline>
<codeline lineno="6357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NOTREACHED();</highlight></codeline>
<codeline lineno="6359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6361"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::OnEnvironmentUpdate(std::string*<sp/>environment)<sp/>{</highlight></codeline>
<codeline lineno="6362"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)<sp/>||<sp/>defined(OS_MACOSX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6363"><highlight class="normal"><sp/><sp/>DCHECK(environment);</highlight></codeline>
<codeline lineno="6364"><highlight class="normal"></highlight></codeline>
<codeline lineno="6365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_environment_for_crash_reporter.Get().empty())</highlight></codeline>
<codeline lineno="6366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6367"><highlight class="normal"></highlight></codeline>
<codeline lineno="6368"><highlight class="normal"><sp/><sp/>g_environment_for_crash_reporter.Get()<sp/>=<sp/>std::move(*environment);</highlight></codeline>
<codeline lineno="6369"><highlight class="normal"></highlight></codeline>
<codeline lineno="6370"><highlight class="normal"><sp/><sp/>crashpad::CrashpadInfo::GetCrashpadInfo()-&gt;AddUserDataMinidumpStream(</highlight></codeline>
<codeline lineno="6371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kSystemProfileMinidumpStreamType,</highlight></codeline>
<codeline lineno="6372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reinterpret_cast&lt;const<sp/>void*&gt;(</highlight></codeline>
<codeline lineno="6373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_environment_for_crash_reporter.Get().data()),</highlight></codeline>
<codeline lineno="6374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_environment_for_crash_reporter.Get().size());</highlight></codeline>
<codeline lineno="6375"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>OS_WIN<sp/>||<sp/>OS_MACOSX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6377"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::OnHistogramSynchronizationDone()<sp/>{</highlight></codeline>
<codeline lineno="6378"><highlight class="normal"><sp/><sp/>DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);</highlight></codeline>
<codeline lineno="6379"><highlight class="normal"></highlight></codeline>
<codeline lineno="6380"><highlight class="normal"><sp/><sp/>DCHECK(waiting_for_collect_final_metrics_step_);</highlight></codeline>
<codeline lineno="6381"><highlight class="normal"><sp/><sp/>DCHECK_GT(num_async_histogram_fetches_in_progress_,<sp/>0);</highlight></codeline>
<codeline lineno="6382"><highlight class="normal"></highlight></codeline>
<codeline lineno="6383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--num_async_histogram_fetches_in_progress_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="6384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6385"><highlight class="normal"></highlight></codeline>
<codeline lineno="6386"><highlight class="normal"><sp/><sp/>waiting_for_collect_final_metrics_step_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6387"><highlight class="normal"><sp/><sp/>collect_final_metrics_done_callback_.Run();</highlight></codeline>
<codeline lineno="6388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6389"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::OnHistoryDeleted()<sp/>{</highlight></codeline>
<codeline lineno="6390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ukm_service_)</highlight></codeline>
<codeline lineno="6391"><highlight class="normal"><sp/><sp/><sp/><sp/>ukm_service_-&gt;Purge();</highlight></codeline>
<codeline lineno="6392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::OnLogCleanShutdown()<sp/>{</highlight></codeline>
<codeline lineno="6394"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6395"><highlight class="normal"><sp/><sp/>base::FilePath<sp/>user_data_dir;</highlight></codeline>
<codeline lineno="6396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base::PathService::Get(chrome::DIR_USER_DATA,<sp/>&amp;user_data_dir))</highlight></codeline>
<codeline lineno="6397"><highlight class="normal"><sp/><sp/><sp/><sp/>browser_watcher::MarkOwnStabilityFileDeleted(user_data_dir);</highlight></codeline>
<codeline lineno="6398"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>OS_WIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6400"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::OnMemoryDetailCollectionDone()<sp/>{</highlight></codeline>
<codeline lineno="6401"><highlight class="normal"><sp/><sp/>DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);</highlight></codeline>
<codeline lineno="6402"><highlight class="normal"></highlight></codeline>
<codeline lineno="6403"><highlight class="normal"><sp/><sp/>DCHECK(waiting_for_collect_final_metrics_step_);</highlight></codeline>
<codeline lineno="6404"><highlight class="normal"></highlight></codeline>
<codeline lineno="6405"><highlight class="normal"><sp/><sp/>base::Closure<sp/>callback<sp/>=<sp/>base::Bind(</highlight></codeline>
<codeline lineno="6406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ChromeMetricsServiceClient::OnHistogramSynchronizationDone,</highlight></codeline>
<codeline lineno="6407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>weak_ptr_factory_.GetWeakPtr());</highlight></codeline>
<codeline lineno="6408"><highlight class="normal"></highlight></codeline>
<codeline lineno="6409"><highlight class="normal"><sp/><sp/>base::TimeDelta<sp/>timeout<sp/>=</highlight></codeline>
<codeline lineno="6410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::TimeDelta::FromMilliseconds(kMaxHistogramGatheringWaitDuration);</highlight></codeline>
<codeline lineno="6411"><highlight class="normal"></highlight></codeline>
<codeline lineno="6412"><highlight class="normal"><sp/><sp/>DCHECK_EQ(num_async_histogram_fetches_in_progress_,<sp/>0);</highlight></codeline>
<codeline lineno="6413"><highlight class="normal"></highlight></codeline>
<codeline lineno="6414"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BUILDFLAG(ENABLE_PRINT_PREVIEW)<sp/>&amp;&amp;<sp/>!defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6415"><highlight class="normal"><sp/><sp/>num_async_histogram_fetches_in_progress_<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="6416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ServiceProcessControl::GetInstance()-&gt;GetHistograms(callback,<sp/>timeout))<sp/>{</highlight></codeline>
<codeline lineno="6417"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK_EQ(num_async_histogram_fetches_in_progress_,<sp/>3);</highlight></codeline>
<codeline lineno="6418"><highlight class="normal"><sp/><sp/><sp/><sp/>--num_async_histogram_fetches_in_progress_;</highlight></codeline>
<codeline lineno="6419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6420"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6421"><highlight class="normal"><sp/><sp/>num_async_histogram_fetches_in_progress_<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="6422"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6423"><highlight class="normal"></highlight></codeline>
<codeline lineno="6424"><highlight class="normal"><sp/><sp/>base::PostTaskWithTraitsAndReply(</highlight></codeline>
<codeline lineno="6425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FROM_HERE,<sp/>{content::BrowserThread::UI},</highlight></codeline>
<codeline lineno="6426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::BindOnce(&amp;base::StatisticsRecorder::ImportProvidedHistograms),</highlight></codeline>
<codeline lineno="6427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>callback);</highlight></codeline>
<codeline lineno="6428"><highlight class="normal"></highlight></codeline>
<codeline lineno="6429"><highlight class="normal"><sp/><sp/>content::FetchHistogramsAsynchronously(base::ThreadTaskRunnerHandle::Get(),</highlight></codeline>
<codeline lineno="6430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callback,<sp/>timeout);</highlight></codeline>
<codeline lineno="6431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6432"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::OnPluginLoadingError(</highlight></codeline>
<codeline lineno="6433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>plugin_path)<sp/>{</highlight></codeline>
<codeline lineno="6434"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BUILDFLAG(ENABLE_PLUGINS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6435"><highlight class="normal"><sp/><sp/>plugin_metrics_provider_-&gt;LogPluginLoadingError(plugin_path);</highlight></codeline>
<codeline lineno="6436"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6437"><highlight class="normal"><sp/><sp/>NOTREACHED();</highlight></codeline>
<codeline lineno="6438"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>BUILDFLAG(ENABLE_PLUGINS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6440"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::OnSyncPrefsChanged(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>must_purge)<sp/>{</highlight></codeline>
<codeline lineno="6441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ukm_service_)</highlight></codeline>
<codeline lineno="6442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(must_purge)<sp/>{</highlight></codeline>
<codeline lineno="6444"><highlight class="normal"><sp/><sp/><sp/><sp/>ukm_service_-&gt;Purge();</highlight></codeline>
<codeline lineno="6445"><highlight class="normal"><sp/><sp/><sp/><sp/>ukm_service_-&gt;ResetClientState(ukm::ResetReason::kOnSyncPrefsChanged);</highlight></codeline>
<codeline lineno="6446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6447"><highlight class="normal"><sp/><sp/>UpdateRunningServices();</highlight></codeline>
<codeline lineno="6448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6449"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::OnURLOpenedFromOmnibox(OmniboxLog*<sp/>log)<sp/>{</highlight></codeline>
<codeline lineno="6450"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;OnApplicationNotIdle();</highlight></codeline>
<codeline lineno="6451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6452"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::RecordCommandLineMetrics()<sp/>{</highlight></codeline>
<codeline lineno="6453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::CommandLine*<sp/>command_line(base::CommandLine::ForCurrentProcess());</highlight></codeline>
<codeline lineno="6454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>common_commands<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command_line-&gt;HasSwitch(switches::kUserDataDir))<sp/>{</highlight></codeline>
<codeline lineno="6456"><highlight class="normal"><sp/><sp/><sp/><sp/>++common_commands;</highlight></codeline>
<codeline lineno="6457"><highlight class="normal"><sp/><sp/><sp/><sp/>UMA_HISTOGRAM_COUNTS_100(</highlight><highlight class="stringliteral">&quot;Chrome.CommandLineDatDirCount&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="6458"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6459"><highlight class="normal"></highlight></codeline>
<codeline lineno="6460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command_line-&gt;HasSwitch(switches::kApp))<sp/>{</highlight></codeline>
<codeline lineno="6461"><highlight class="normal"><sp/><sp/><sp/><sp/>++common_commands;</highlight></codeline>
<codeline lineno="6462"><highlight class="normal"><sp/><sp/><sp/><sp/>UMA_HISTOGRAM_COUNTS_100(</highlight><highlight class="stringliteral">&quot;Chrome.CommandLineAppModeCount&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="6463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6464"><highlight class="normal"></highlight></codeline>
<codeline lineno="6465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>switch_count<sp/>=<sp/>command_line-&gt;GetSwitches().size();</highlight></codeline>
<codeline lineno="6466"><highlight class="normal"><sp/><sp/>UMA_HISTOGRAM_COUNTS_100(</highlight><highlight class="stringliteral">&quot;Chrome.CommandLineFlagCount&quot;</highlight><highlight class="normal">,<sp/>switch_count);</highlight></codeline>
<codeline lineno="6467"><highlight class="normal"><sp/><sp/>UMA_HISTOGRAM_COUNTS_100(</highlight><highlight class="stringliteral">&quot;Chrome.CommandLineUncommonFlagCount&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch_count<sp/>-<sp/>common_commands);</highlight></codeline>
<codeline lineno="6469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6470" refid="_c_w_e-79_8c_1a04c204acd31451b19a8c34bedba6c1dd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a04c204acd31451b19a8c34bedba6c1dd" kindref="member">RegisterFileMetricsPreferences</ref>(PrefRegistrySimple*<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="6471"><highlight class="normal"><sp/><sp/>metrics::FileMetricsProvider::RegisterPrefs(registry,<sp/>kBrowserMetricsName);</highlight></codeline>
<codeline lineno="6472"><highlight class="normal"></highlight></codeline>
<codeline lineno="6473"><highlight class="normal"><sp/><sp/>metrics::FileMetricsProvider::RegisterPrefs(registry,</highlight></codeline>
<codeline lineno="6474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kCrashpadHistogramAllocatorName);</highlight></codeline>
<codeline lineno="6475"><highlight class="normal"></highlight></codeline>
<codeline lineno="6476"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6477"><highlight class="normal"><sp/><sp/>metrics::FileMetricsProvider::RegisterPrefs(</highlight></codeline>
<codeline lineno="6478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>registry,<sp/>installer::kSetupHistogramAllocatorName);</highlight></codeline>
<codeline lineno="6479"><highlight class="normal"></highlight></codeline>
<codeline lineno="6480"><highlight class="normal"><sp/><sp/>metrics::FileMetricsProvider::RegisterPrefs(</highlight></codeline>
<codeline lineno="6481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>registry,<sp/>notification_helper::kNotificationHelperHistogramAllocatorName);</highlight></codeline>
<codeline lineno="6482"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6484"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::RegisterForNotifications()<sp/>{</highlight></codeline>
<codeline lineno="6485"><highlight class="normal"><sp/><sp/>registrar_.Add(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>chrome::NOTIFICATION_BROWSER_OPENED,</highlight></codeline>
<codeline lineno="6486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content::NotificationService::AllBrowserContextsAndSources());</highlight></codeline>
<codeline lineno="6487"><highlight class="normal"><sp/><sp/>registrar_.Add(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>chrome::NOTIFICATION_BROWSER_CLOSED,</highlight></codeline>
<codeline lineno="6488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content::NotificationService::AllSources());</highlight></codeline>
<codeline lineno="6489"><highlight class="normal"><sp/><sp/>registrar_.Add(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>chrome::NOTIFICATION_TAB_PARENTED,</highlight></codeline>
<codeline lineno="6490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content::NotificationService::AllSources());</highlight></codeline>
<codeline lineno="6491"><highlight class="normal"><sp/><sp/>registrar_.Add(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>chrome::NOTIFICATION_TAB_CLOSING,</highlight></codeline>
<codeline lineno="6492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content::NotificationService::AllSources());</highlight></codeline>
<codeline lineno="6493"><highlight class="normal"><sp/><sp/>registrar_.Add(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>content::NOTIFICATION_LOAD_START,</highlight></codeline>
<codeline lineno="6494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content::NotificationService::AllSources());</highlight></codeline>
<codeline lineno="6495"><highlight class="normal"><sp/><sp/>registrar_.Add(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>content::NOTIFICATION_LOAD_STOP,</highlight></codeline>
<codeline lineno="6496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content::NotificationService::AllSources());</highlight></codeline>
<codeline lineno="6497"><highlight class="normal"><sp/><sp/>registrar_.Add(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>content::NOTIFICATION_RENDERER_PROCESS_CLOSED,</highlight></codeline>
<codeline lineno="6498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content::NotificationService::AllSources());</highlight></codeline>
<codeline lineno="6499"><highlight class="normal"><sp/><sp/>registrar_.Add(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>content::NOTIFICATION_RENDER_WIDGET_HOST_HANG,</highlight></codeline>
<codeline lineno="6500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content::NotificationService::AllSources());</highlight></codeline>
<codeline lineno="6501"><highlight class="normal"></highlight></codeline>
<codeline lineno="6502"><highlight class="normal"><sp/><sp/>omnibox_url_opened_subscription_<sp/>=</highlight></codeline>
<codeline lineno="6503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OmniboxEventGlobalTracker::GetInstance()-&gt;RegisterCallback(</highlight></codeline>
<codeline lineno="6504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::Bind(&amp;ChromeMetricsServiceClient::OnURLOpenedFromOmnibox,</highlight></codeline>
<codeline lineno="6505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::Unretained(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="6506"><highlight class="normal"></highlight></codeline>
<codeline lineno="6507"><highlight class="normal"><sp/><sp/>registrar_.Add(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>chrome::NOTIFICATION_PROFILE_ADDED,</highlight></codeline>
<codeline lineno="6508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content::NotificationService::AllBrowserContextsAndSources());</highlight></codeline>
<codeline lineno="6509"><highlight class="normal"><sp/><sp/>registrar_.Add(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>chrome::NOTIFICATION_PROFILE_DESTROYED,</highlight></codeline>
<codeline lineno="6510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content::NotificationService::AllBrowserContextsAndSources());</highlight></codeline>
<codeline lineno="6511"><highlight class="normal"></highlight></codeline>
<codeline lineno="6512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>all_profiles_succeeded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Profile*<sp/>profile<sp/>:</highlight></codeline>
<codeline lineno="6514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_browser_process-&gt;profile_manager()-&gt;GetLoadedProfiles())<sp/>{</highlight></codeline>
<codeline lineno="6515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RegisterForProfileEvents(profile))<sp/>{</highlight></codeline>
<codeline lineno="6516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>all_profiles_succeeded<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6518"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>all_profiles_succeeded;</highlight></codeline>
<codeline lineno="6520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6521"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::RegisterForProfileEvents(Profile*<sp/>profile)<sp/>{</highlight></codeline>
<codeline lineno="6522"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chromeos::ProfileHelper::IsSigninProfile(profile)<sp/>||</highlight></codeline>
<codeline lineno="6524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chromeos::ProfileHelper::IsLockScreenAppProfile(profile))<sp/>{</highlight></codeline>
<codeline lineno="6525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6526"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6527"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6528"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)<sp/>||<sp/>defined(OS_MACOSX)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="6529"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(defined(OS_LINUX)<sp/>&amp;&amp;<sp/>!defined(OS_CHROMEOS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6530"><highlight class="normal"><sp/><sp/>metrics::DesktopProfileSessionDurationsServiceFactory::GetForBrowserContext(</highlight></codeline>
<codeline lineno="6531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>profile);</highlight></codeline>
<codeline lineno="6532"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6533"><highlight class="normal"></highlight></codeline>
<codeline lineno="6534"><highlight class="normal"><sp/><sp/>history::HistoryService*<sp/>history_service<sp/>=</highlight></codeline>
<codeline lineno="6535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HistoryServiceFactory::GetForProfile(profile,</highlight></codeline>
<codeline lineno="6536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ServiceAccessType::IMPLICIT_ACCESS);</highlight></codeline>
<codeline lineno="6537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!history_service)<sp/>{</highlight></codeline>
<codeline lineno="6538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6540"><highlight class="normal"></highlight></codeline>
<codeline lineno="6541"><highlight class="normal"><sp/><sp/>ObserveServiceForDeletions(history_service);</highlight></codeline>
<codeline lineno="6542"><highlight class="normal"></highlight></codeline>
<codeline lineno="6543"><highlight class="normal"><sp/><sp/>syncer::SyncService*<sp/>sync<sp/>=</highlight></codeline>
<codeline lineno="6544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ProfileSyncServiceFactory::GetSyncServiceForBrowserContext(profile);</highlight></codeline>
<codeline lineno="6545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sync)<sp/>{</highlight></codeline>
<codeline lineno="6546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6548"><highlight class="normal"><sp/><sp/>ObserveServiceForSyncDisables(sync,<sp/>profile-&gt;GetPrefs());</highlight></codeline>
<codeline lineno="6549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6551" refid="_c_w_e-79_8c_1ad6b48676850af468881f1baad4a66f90" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ad6b48676850af468881f1baad4a66f90" kindref="member">RegisterOrRemovePreviousRunMetricsFile</ref>(</highlight></codeline>
<codeline lineno="6552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>metrics_reporting_enabled,</highlight></codeline>
<codeline lineno="6553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>dir,</highlight></codeline>
<codeline lineno="6554"><highlight class="normal"><sp/><sp/><sp/><sp/>base::StringPiece<sp/>metrics_name,</highlight></codeline>
<codeline lineno="6555"><highlight class="normal"><sp/><sp/><sp/><sp/>metrics::FileMetricsProvider::SourceAssociation<sp/>association,</highlight></codeline>
<codeline lineno="6556"><highlight class="normal"><sp/><sp/><sp/><sp/>metrics::FileMetricsProvider*<sp/>file_metrics_provider)<sp/>{</highlight></codeline>
<codeline lineno="6557"><highlight class="normal"><sp/><sp/>base::FilePath<sp/>metrics_file;</highlight></codeline>
<codeline lineno="6558"><highlight class="normal"><sp/><sp/>base::GlobalHistogramAllocator::ConstructFilePaths(</highlight></codeline>
<codeline lineno="6559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dir,<sp/>metrics_name,<sp/>&amp;metrics_file,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6560"><highlight class="normal"></highlight></codeline>
<codeline lineno="6561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(metrics_reporting_enabled)<sp/>{</highlight></codeline>
<codeline lineno="6562"><highlight class="normal"><sp/><sp/><sp/><sp/>file_metrics_provider-&gt;RegisterSource(metrics::FileMetricsProvider::Params(</highlight></codeline>
<codeline lineno="6563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics_file,</highlight></codeline>
<codeline lineno="6564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics::FileMetricsProvider::SOURCE_HISTOGRAMS_ATOMIC_FILE,</highlight></codeline>
<codeline lineno="6565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>association,<sp/>metrics_name));</highlight></codeline>
<codeline lineno="6566"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6567"><highlight class="normal"><sp/><sp/><sp/><sp/>base::PostTaskWithTraits(</highlight></codeline>
<codeline lineno="6568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FROM_HERE,</highlight></codeline>
<codeline lineno="6569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{base::MayBlock(),<sp/>base::TaskPriority::BEST_EFFORT,</highlight></codeline>
<codeline lineno="6570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::TaskShutdownBehavior::CONTINUE_ON_SHUTDOWN},</highlight></codeline>
<codeline lineno="6571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::BindOnce(base::IgnoreResult(&amp;base::DeleteFile),<sp/>metrics_file,</highlight></codeline>
<codeline lineno="6572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*recursive=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="6573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6575"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::RegisterPrefs(PrefRegistrySimple*<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="6576"><highlight class="normal"><sp/><sp/>metrics::MetricsService::RegisterPrefs(registry);</highlight></codeline>
<codeline lineno="6577"><highlight class="normal"><sp/><sp/>ukm::UkmService::RegisterPrefs(registry);</highlight></codeline>
<codeline lineno="6578"><highlight class="normal"><sp/><sp/>metrics::StabilityMetricsHelper::RegisterPrefs(registry);</highlight></codeline>
<codeline lineno="6579"><highlight class="normal"></highlight></codeline>
<codeline lineno="6580"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a04c204acd31451b19a8c34bedba6c1dd" kindref="member">RegisterFileMetricsPreferences</ref>(registry);</highlight></codeline>
<codeline lineno="6581"><highlight class="normal"></highlight></codeline>
<codeline lineno="6582"><highlight class="normal"><sp/><sp/>metrics::RegisterMetricsReportingStatePrefs(registry);</highlight></codeline>
<codeline lineno="6583"><highlight class="normal"></highlight></codeline>
<codeline lineno="6584"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BUILDFLAG(ENABLE_PLUGINS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6585"><highlight class="normal"><sp/><sp/>PluginMetricsProvider::RegisterPrefs(registry);</highlight></codeline>
<codeline lineno="6586"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>BUILDFLAG(ENABLE_PLUGINS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6588"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::SetIsProcessRunningForTesting(</highlight></codeline>
<codeline lineno="6589"><highlight class="normal"><sp/><sp/><sp/><sp/>ChromeMetricsServiceClient::IsProcessRunningFunction<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="6590"><highlight class="normal"><sp/><sp/>g_is_process_running<sp/>=<sp/>func;</highlight></codeline>
<codeline lineno="6591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6592"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::SetMetricsClientId(</highlight></codeline>
<codeline lineno="6593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>client_id)<sp/>{</highlight></codeline>
<codeline lineno="6594"><highlight class="normal"><sp/><sp/>crash_keys::SetMetricsClientIdFromGUID(client_id);</highlight></codeline>
<codeline lineno="6595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6596"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::SetNotificationListenerSetupFailedForTesting(</highlight></codeline>
<codeline lineno="6597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>simulate_failure)<sp/>{</highlight></codeline>
<codeline lineno="6598"><highlight class="normal"><sp/><sp/>g_notification_listeners_failed<sp/>=<sp/>simulate_failure;</highlight></codeline>
<codeline lineno="6599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6600"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::SyncStateAllowsExtensionUkm()<sp/>{</highlight></codeline>
<codeline lineno="6601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SyncDisableObserver::SyncStateAllowsExtensionUkm();</highlight></codeline>
<codeline lineno="6602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6603"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::SyncStateAllowsUkm()<sp/>{</highlight></codeline>
<codeline lineno="6604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SyncDisableObserver::SyncStateAllowsUkm();</highlight></codeline>
<codeline lineno="6605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6606"><highlight class="normal">ChromeMetricsServiceClient::~ChromeMetricsServiceClient()<sp/>{</highlight></codeline>
<codeline lineno="6607"><highlight class="normal"><sp/><sp/>DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);</highlight></codeline>
<codeline lineno="6608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6609"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsLog::CloseLog()<sp/>{</highlight></codeline>
<codeline lineno="6610"><highlight class="normal"><sp/><sp/>DCHECK(!closed_);</highlight></codeline>
<codeline lineno="6611"><highlight class="normal"><sp/><sp/>closed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6613"><highlight class="normal">int64_t<sp/>MetricsLog::GetBuildTime()<sp/>{</highlight></codeline>
<codeline lineno="6614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int64_t<sp/>integral_build_time<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!integral_build_time)</highlight></codeline>
<codeline lineno="6616"><highlight class="normal"><sp/><sp/><sp/><sp/>integral_build_time<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(base::GetBuildTime().ToTimeT());</highlight></codeline>
<codeline lineno="6617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>integral_build_time;</highlight></codeline>
<codeline lineno="6618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6619"><highlight class="normal">int64_t<sp/>MetricsLog::GetCurrentTime()<sp/>{</highlight></codeline>
<codeline lineno="6620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(base::TimeTicks::Now()<sp/>-<sp/>base::TimeTicks()).InSeconds();</highlight></codeline>
<codeline lineno="6621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6622"><highlight class="normal">uint64_t<sp/>MetricsLog::Hash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="6623"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="_c_w_e-787_8c_1ad74ed21140b565a25e2fcfe9d9cff7c4" kindref="member">hash</ref><sp/>=<sp/>base::HashMetricName(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="6624"><highlight class="normal"></highlight></codeline>
<codeline lineno="6625"><highlight class="normal"><sp/><sp/>DVLOG(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Metrics:<sp/>Hash<sp/>numeric<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]=[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="_c_w_e-787_8c_1ad74ed21140b565a25e2fcfe9d9cff7c4" kindref="member">hash</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6626"><highlight class="normal"></highlight></codeline>
<codeline lineno="6627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-787_8c_1ad74ed21140b565a25e2fcfe9d9cff7c4" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="6628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6629" refid="_c_w_e-79_8c_1a5a555c2f4bfc92c333468aa66a943c0f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a5a555c2f4bfc92c333468aa66a943c0f" kindref="member">IndependentFlattener</ref>(MetricsLog*<sp/>log)<sp/>:<sp/>log_(log)<sp/>{}</highlight></codeline>
<codeline lineno="6630"><highlight class="normal">MetricsLog::IndependentMetricsLoader::IndependentMetricsLoader(</highlight></codeline>
<codeline lineno="6631"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;MetricsLog&gt;<sp/>log)</highlight></codeline>
<codeline lineno="6632"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>log_(std::move(log)),</highlight></codeline>
<codeline lineno="6633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flattener_(new<sp/><ref refid="_c_w_e-79_8c_1a5a555c2f4bfc92c333468aa66a943c0f" kindref="member">IndependentFlattener</ref>(log_.get())),</highlight></codeline>
<codeline lineno="6634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snapshot_manager_(new<sp/>base::HistogramSnapshotManager(flattener_.get()))<sp/>{}</highlight></codeline>
<codeline lineno="6635" refid="_c_w_e-79_8c_1ad4b42943a2fce5e8cc1e7e97857921a0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ad4b42943a2fce5e8cc1e7e97857921a0" kindref="member">IsTestingID</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.size()<sp/>&lt;<sp/>16;</highlight></codeline>
<codeline lineno="6637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6638"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MetricsLog::LoadSavedEnvironmentFromPrefs(PrefService*<sp/>local_state,</highlight></codeline>
<codeline lineno="6639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string*<sp/>app_version)<sp/>{</highlight></codeline>
<codeline lineno="6640"><highlight class="normal"><sp/><sp/>DCHECK(!has_environment_);</highlight></codeline>
<codeline lineno="6641"><highlight class="normal"><sp/><sp/>has_environment_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6642"><highlight class="normal"><sp/><sp/>app_version-&gt;clear();</highlight></codeline>
<codeline lineno="6643"><highlight class="normal"></highlight></codeline>
<codeline lineno="6644"><highlight class="normal"><sp/><sp/>SystemProfileProto*<sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref><sp/>=<sp/><ref refid="_c_w_e-79_8c_1ac8d66430b59f81077b7e1f9e4869e508" kindref="member">uma_proto</ref>()-&gt;mutable_system_profile();</highlight></codeline>
<codeline lineno="6645"><highlight class="normal"><sp/><sp/>EnvironmentRecorder<sp/>recorder(local_state);</highlight></codeline>
<codeline lineno="6646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/>recorder.LoadEnvironmentFromPrefs(<ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>);</highlight></codeline>
<codeline lineno="6647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success)</highlight></codeline>
<codeline lineno="6648"><highlight class="normal"><sp/><sp/><sp/><sp/>*app_version<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>-&gt;app_version();</highlight></codeline>
<codeline lineno="6649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="6650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6651"><highlight class="normal">MetricsLog::MetricsLog(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>client_id,</highlight></codeline>
<codeline lineno="6652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>session_id,</highlight></codeline>
<codeline lineno="6653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogType<sp/>log_type,</highlight></codeline>
<codeline lineno="6654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MetricsServiceClient*<sp/>client)</highlight></codeline>
<codeline lineno="6655"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>closed_(false),</highlight></codeline>
<codeline lineno="6656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log_type_(log_type),</highlight></codeline>
<codeline lineno="6657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>client_(client),</highlight></codeline>
<codeline lineno="6658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>creation_time_(base::TimeTicks::Now()),</highlight></codeline>
<codeline lineno="6659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>has_environment_(false)<sp/>{</highlight></codeline>
<codeline lineno="6660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1ad4b42943a2fce5e8cc1e7e97857921a0" kindref="member">IsTestingID</ref>(client_id))</highlight></codeline>
<codeline lineno="6661"><highlight class="normal"><sp/><sp/><sp/><sp/>uma_proto_.set_client_id(0);</highlight></codeline>
<codeline lineno="6662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6663"><highlight class="normal"><sp/><sp/><sp/><sp/>uma_proto_.set_client_id(Hash(client_id));</highlight></codeline>
<codeline lineno="6664"><highlight class="normal"></highlight></codeline>
<codeline lineno="6665"><highlight class="normal"><sp/><sp/>uma_proto_.set_session_id(session_id);</highlight></codeline>
<codeline lineno="6666"><highlight class="normal"></highlight></codeline>
<codeline lineno="6667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>product<sp/>=<sp/>client_-&gt;GetProduct();</highlight></codeline>
<codeline lineno="6668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(product<sp/>!=<sp/>uma_proto_.product())</highlight></codeline>
<codeline lineno="6669"><highlight class="normal"><sp/><sp/><sp/><sp/>uma_proto_.set_product(product);</highlight></codeline>
<codeline lineno="6670"><highlight class="normal"></highlight></codeline>
<codeline lineno="6671"><highlight class="normal"><sp/><sp/>SystemProfileProto*<sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref><sp/>=<sp/><ref refid="_c_w_e-79_8c_1ac8d66430b59f81077b7e1f9e4869e508" kindref="member">uma_proto</ref>()-&gt;mutable_system_profile();</highlight></codeline>
<codeline lineno="6672"><highlight class="normal"><sp/><sp/>RecordCoreSystemProfile(client_,<sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>);</highlight></codeline>
<codeline lineno="6673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6674"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsLog::RecordCoreSystemProfile(MetricsServiceClient*<sp/>client,</highlight></codeline>
<codeline lineno="6675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SystemProfileProto*<sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>)<sp/>{</highlight></codeline>
<codeline lineno="6676"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>-&gt;set_build_timestamp(metrics::MetricsLog::GetBuildTime());</highlight></codeline>
<codeline lineno="6677"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>-&gt;set_app_version(client-&gt;GetVersionString());</highlight></codeline>
<codeline lineno="6678"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>-&gt;set_channel(client-&gt;GetChannel());</highlight></codeline>
<codeline lineno="6679"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>-&gt;set_application_locale(client-&gt;GetApplicationLocale());</highlight></codeline>
<codeline lineno="6680"><highlight class="normal"></highlight></codeline>
<codeline lineno="6681"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ADDRESS_SANITIZER)<sp/>||<sp/>DCHECK_IS_ON()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6682"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>-&gt;set_is_instrumented_build(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6683"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6684"><highlight class="normal"></highlight></codeline>
<codeline lineno="6685"><highlight class="normal"><sp/><sp/>metrics::SystemProfileProto::Hardware*<sp/>hardware<sp/>=</highlight></codeline>
<codeline lineno="6686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>-&gt;mutable_hardware();</highlight></codeline>
<codeline lineno="6687"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(OS_IOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6688"><highlight class="normal"><sp/><sp/>hardware-&gt;set_cpu_architecture(base::SysInfo::OperatingSystemArchitecture());</highlight></codeline>
<codeline lineno="6689"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6690"><highlight class="normal"><sp/><sp/>hardware-&gt;set_system_ram_mb(base::SysInfo::AmountOfPhysicalMemoryMB());</highlight></codeline>
<codeline lineno="6691"><highlight class="normal"><sp/><sp/>hardware-&gt;set_hardware_class(base::SysInfo::HardwareModelName());</highlight></codeline>
<codeline lineno="6692"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6693"><highlight class="normal"><sp/><sp/>hardware-&gt;set_dll_base(reinterpret_cast&lt;uint64_t&gt;(CURRENT_MODULE()));</highlight></codeline>
<codeline lineno="6694"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6695"><highlight class="normal"></highlight></codeline>
<codeline lineno="6696"><highlight class="normal"><sp/><sp/>metrics::SystemProfileProto::OS*<sp/>os<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>-&gt;mutable_os();</highlight></codeline>
<codeline lineno="6697"><highlight class="normal"><sp/><sp/>os-&gt;set_name(base::SysInfo::OperatingSystemName());</highlight></codeline>
<codeline lineno="6698"><highlight class="normal"><sp/><sp/>os-&gt;set_version(base::SysInfo::OperatingSystemVersion());</highlight></codeline>
<codeline lineno="6699"><highlight class="normal"></highlight></codeline>
<codeline lineno="6700"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6701"><highlight class="normal"><sp/><sp/>os-&gt;set_kernel_version(base::SysInfo::KernelVersion());</highlight></codeline>
<codeline lineno="6702"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6703"><highlight class="normal"><sp/><sp/>os-&gt;set_kernel_version(base::SysInfo::OperatingSystemVersion());</highlight></codeline>
<codeline lineno="6704"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6705"><highlight class="normal"></highlight></codeline>
<codeline lineno="6706"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_ANDROID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6707"><highlight class="normal"><sp/><sp/>os-&gt;set_build_fingerprint(</highlight></codeline>
<codeline lineno="6708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::android::BuildInfo::GetInstance()-&gt;android_build_fp());</highlight></codeline>
<codeline lineno="6709"><highlight class="normal"><sp/><sp/>std::string<sp/>package_name<sp/>=<sp/>client-&gt;GetAppPackageName();</highlight></codeline>
<codeline lineno="6710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!package_name.empty()<sp/>&amp;&amp;<sp/>package_name<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;com.android.chrome&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6711"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>-&gt;set_app_package_name(package_name);</highlight></codeline>
<codeline lineno="6712"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6714"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsLog::RecordCurrentSessionData(</highlight></codeline>
<codeline lineno="6715"><highlight class="normal"><sp/><sp/><sp/><sp/>DelegatingProvider*<sp/>delegating_provider,</highlight></codeline>
<codeline lineno="6716"><highlight class="normal"><sp/><sp/><sp/><sp/>base::TimeDelta<sp/>incremental_uptime,</highlight></codeline>
<codeline lineno="6717"><highlight class="normal"><sp/><sp/><sp/><sp/>base::TimeDelta<sp/>uptime)<sp/>{</highlight></codeline>
<codeline lineno="6718"><highlight class="normal"><sp/><sp/>DCHECK(!closed_);</highlight></codeline>
<codeline lineno="6719"><highlight class="normal"><sp/><sp/>DCHECK(has_environment_);</highlight></codeline>
<codeline lineno="6720"><highlight class="normal"></highlight></codeline>
<codeline lineno="6721"><highlight class="normal"><sp/><sp/>WriteRealtimeStabilityAttributes(incremental_uptime,<sp/>uptime);</highlight></codeline>
<codeline lineno="6722"><highlight class="normal"></highlight></codeline>
<codeline lineno="6723"><highlight class="normal"><sp/><sp/>delegating_provider-&gt;ProvideCurrentSessionData(<ref refid="_c_w_e-79_8c_1ac8d66430b59f81077b7e1f9e4869e508" kindref="member">uma_proto</ref>());</highlight></codeline>
<codeline lineno="6724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6725"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsLog::RecordHistogramDelta(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>histogram_name,</highlight></codeline>
<codeline lineno="6726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::HistogramSamples&amp;<sp/>snapshot)<sp/>{</highlight></codeline>
<codeline lineno="6727"><highlight class="normal"><sp/><sp/>DCHECK(!closed_);</highlight></codeline>
<codeline lineno="6728"><highlight class="normal"><sp/><sp/>EncodeHistogramDelta(histogram_name,<sp/>snapshot,<sp/>&amp;uma_proto_);</highlight></codeline>
<codeline lineno="6729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6730"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsLog::RecordPreviousSessionData(</highlight></codeline>
<codeline lineno="6731"><highlight class="normal"><sp/><sp/><sp/><sp/>DelegatingProvider*<sp/>delegating_provider)<sp/>{</highlight></codeline>
<codeline lineno="6732"><highlight class="normal"><sp/><sp/>delegating_provider-&gt;ProvidePreviousSessionData(<ref refid="_c_w_e-79_8c_1ac8d66430b59f81077b7e1f9e4869e508" kindref="member">uma_proto</ref>());</highlight></codeline>
<codeline lineno="6733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6734"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsLog::RegisterPrefs(PrefRegistrySimple*<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="6735"><highlight class="normal"><sp/><sp/>EnvironmentRecorder::RegisterPrefs(registry);</highlight></codeline>
<codeline lineno="6736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6737"><highlight class="normal">std::unique_ptr&lt;MetricsLog&gt;<sp/>MetricsLog::IndependentMetricsLoader::ReleaseLog()<sp/>{</highlight></codeline>
<codeline lineno="6738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(log_);</highlight></codeline>
<codeline lineno="6739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6740"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsLog::TruncateEvents()<sp/>{</highlight></codeline>
<codeline lineno="6741"><highlight class="normal"><sp/><sp/>DCHECK(!closed_);</highlight></codeline>
<codeline lineno="6742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uma_proto_.user_action_event_size()<sp/>&gt;<sp/>internal::kUserActionEventLimit)<sp/>{</highlight></codeline>
<codeline lineno="6743"><highlight class="normal"><sp/><sp/><sp/><sp/>UMA_HISTOGRAM_COUNTS_100000(</highlight><highlight class="stringliteral">&quot;UMA.TruncatedEvents.UserAction&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uma_proto_.user_action_event_size());</highlight></codeline>
<codeline lineno="6745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>internal::kUserActionEventLimit;</highlight></codeline>
<codeline lineno="6746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>&lt;<sp/>uma_proto_.user_action_event_size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::UmaHistogramSparse(</highlight></codeline>
<codeline lineno="6748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;UMA.TruncatedEvents.UserAction.Type&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uma_proto_.user_action_event(i).name_hash()<sp/>&amp;<sp/>0x7fffffff);</highlight></codeline>
<codeline lineno="6750"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6751"><highlight class="normal"><sp/><sp/><sp/><sp/>uma_proto_.mutable_user_action_event()-&gt;DeleteSubrange(</highlight></codeline>
<codeline lineno="6752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::kUserActionEventLimit,</highlight></codeline>
<codeline lineno="6753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uma_proto_.user_action_event_size()<sp/>-<sp/>internal::kUserActionEventLimit);</highlight></codeline>
<codeline lineno="6754"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6755"><highlight class="normal"></highlight></codeline>
<codeline lineno="6756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uma_proto_.omnibox_event_size()<sp/>&gt;<sp/>internal::kOmniboxEventLimit)<sp/>{</highlight></codeline>
<codeline lineno="6757"><highlight class="normal"><sp/><sp/><sp/><sp/>UMA_HISTOGRAM_COUNTS_100000(</highlight><highlight class="stringliteral">&quot;UMA.TruncatedEvents.Omnibox&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uma_proto_.omnibox_event_size());</highlight></codeline>
<codeline lineno="6759"><highlight class="normal"><sp/><sp/><sp/><sp/>uma_proto_.mutable_omnibox_event()-&gt;DeleteSubrange(</highlight></codeline>
<codeline lineno="6760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::kOmniboxEventLimit,</highlight></codeline>
<codeline lineno="6761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uma_proto_.omnibox_event_size()<sp/>-<sp/>internal::kOmniboxEventLimit);</highlight></codeline>
<codeline lineno="6762"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6764"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsLog::WriteMetricsEnableDefault(EnableMetricsDefault<sp/>metrics_default,</highlight></codeline>
<codeline lineno="6765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SystemProfileProto*<sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>)<sp/>{</highlight></codeline>
<codeline lineno="6766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(client_-&gt;IsReportingPolicyManaged())<sp/>{</highlight></codeline>
<codeline lineno="6767"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>-&gt;set_uma_default_state(</highlight></codeline>
<codeline lineno="6768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SystemProfileProto_UmaDefaultState_POLICY_FORCED_ENABLED);</highlight></codeline>
<codeline lineno="6769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6771"><highlight class="normal"></highlight></codeline>
<codeline lineno="6772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(metrics_default)<sp/>{</highlight></codeline>
<codeline lineno="6773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EnableMetricsDefault::DEFAULT_UNKNOWN:</highlight></codeline>
<codeline lineno="6774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EnableMetricsDefault::OPT_IN:</highlight></codeline>
<codeline lineno="6776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>-&gt;set_uma_default_state(</highlight></codeline>
<codeline lineno="6777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SystemProfileProto_UmaDefaultState_OPT_IN);</highlight></codeline>
<codeline lineno="6778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EnableMetricsDefault::OPT_OUT:</highlight></codeline>
<codeline lineno="6780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>-&gt;set_uma_default_state(</highlight></codeline>
<codeline lineno="6781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SystemProfileProto_UmaDefaultState_OPT_OUT);</highlight></codeline>
<codeline lineno="6782"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6784"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsLog::WriteRealtimeStabilityAttributes(</highlight></codeline>
<codeline lineno="6785"><highlight class="normal"><sp/><sp/><sp/><sp/>base::TimeDelta<sp/>incremental_uptime,</highlight></codeline>
<codeline lineno="6786"><highlight class="normal"><sp/><sp/><sp/><sp/>base::TimeDelta<sp/>uptime)<sp/>{</highlight></codeline>
<codeline lineno="6787"><highlight class="normal"></highlight></codeline>
<codeline lineno="6788"><highlight class="normal"><sp/><sp/>SystemProfileProto::Stability*<sp/>stability<sp/>=</highlight></codeline>
<codeline lineno="6789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ac8d66430b59f81077b7e1f9e4869e508" kindref="member">uma_proto</ref>()-&gt;mutable_system_profile()-&gt;mutable_stability();</highlight></codeline>
<codeline lineno="6790"><highlight class="normal"></highlight></codeline>
<codeline lineno="6791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>incremental_uptime_sec<sp/>=<sp/>incremental_uptime.InSeconds();</highlight></codeline>
<codeline lineno="6792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(incremental_uptime_sec)</highlight></codeline>
<codeline lineno="6793"><highlight class="normal"><sp/><sp/><sp/><sp/>stability-&gt;set_incremental_uptime_sec(incremental_uptime_sec);</highlight></codeline>
<codeline lineno="6794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>uptime_sec<sp/>=<sp/>uptime.InSeconds();</highlight></codeline>
<codeline lineno="6795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uptime_sec)</highlight></codeline>
<codeline lineno="6796"><highlight class="normal"><sp/><sp/><sp/><sp/>stability-&gt;set_uptime_sec(uptime_sec);</highlight></codeline>
<codeline lineno="6797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6798"><highlight class="normal">MetricsLog::~MetricsLog()<sp/>{</highlight></codeline>
<codeline lineno="6799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6800" refid="_c_w_e-79_8c_1ac0fdf8d267e6b11d30a38acc803bbe37" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ac0fdf8d267e6b11d30a38acc803bbe37" kindref="member">CheckSystemProfile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SystemProfileProto&amp;<sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>)<sp/>{</highlight></codeline>
<codeline lineno="6801"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(TestMetricsServiceClient::kBrandForTesting,</highlight></codeline>
<codeline lineno="6802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>.brand_code());</highlight></codeline>
<codeline lineno="6803"><highlight class="normal"></highlight></codeline>
<codeline lineno="6804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SystemProfileProto::Hardware&amp;<sp/>hardware<sp/>=</highlight></codeline>
<codeline lineno="6805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>.hardware();</highlight></codeline>
<codeline lineno="6806"><highlight class="normal"></highlight></codeline>
<codeline lineno="6807"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(hardware.has_cpu());</highlight></codeline>
<codeline lineno="6808"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(hardware.cpu().has_vendor_name());</highlight></codeline>
<codeline lineno="6809"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(hardware.cpu().has_signature());</highlight></codeline>
<codeline lineno="6810"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(hardware.cpu().has_num_cores());</highlight></codeline>
<codeline lineno="6811"><highlight class="normal"></highlight></codeline>
<codeline lineno="6812"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6813" refid="_c_w_e-79_8c_1a606ac755cd2a9d6c69210d58be9a316a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a606ac755cd2a9d6c69210d58be9a316a" kindref="member">MetricsLogTest</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="6814" refid="_c_w_e-79_8c_1a50a220655ca1945d941c3d916184dec8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a50a220655ca1945d941c3d916184dec8" kindref="member">TestMetricsLog</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>client_id,</highlight></codeline>
<codeline lineno="6815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>session_id,</highlight></codeline>
<codeline lineno="6816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogType<sp/>log_type,</highlight></codeline>
<codeline lineno="6817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MetricsServiceClient*<sp/>client)</highlight></codeline>
<codeline lineno="6818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>MetricsLog(client_id,<sp/>session_id,<sp/>log_type,<sp/>client)<sp/>{}</highlight></codeline>
<codeline lineno="6819" refid="_c_w_e-79_8c_1a038111a2859b95220edf1d23776abd74" refkind="member"><highlight class="normal"><sp/><sp/>ChromeUserMetricsExtension*<sp/><ref refid="_c_w_e-79_8c_1a038111a2859b95220edf1d23776abd74" kindref="member">mutable_uma_proto</ref>()<sp/>{</highlight></codeline>
<codeline lineno="6820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ac8d66430b59f81077b7e1f9e4869e508" kindref="member">MetricsLog::uma_proto</ref>();</highlight></codeline>
<codeline lineno="6821"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6822" refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SystemProfileProto&amp;<sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ac8d66430b59f81077b7e1f9e4869e508" kindref="member">uma_proto</ref>().system_profile();</highlight></codeline>
<codeline lineno="6824"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6825" refid="_c_w_e-79_8c_1ac8d66430b59f81077b7e1f9e4869e508" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ChromeUserMetricsExtension&amp;<sp/><ref refid="_c_w_e-79_8c_1ac8d66430b59f81077b7e1f9e4869e508" kindref="member">uma_proto</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="_c_w_e-79_8c_1ac8d66430b59f81077b7e1f9e4869e508" kindref="member">MetricsLog::uma_proto</ref>();</highlight></codeline>
<codeline lineno="6827"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6828" refid="_c_w_e-79_8c_1a25d0e49f6c8a61ab56034685bfb55102" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Object&gt;<sp/><ref refid="_c_w_e-79_8c_1a25d0e49f6c8a61ab56034685bfb55102" kindref="member">classObjectOfPrivateScript</ref>(ScriptState*<sp/>scriptState,<sp/>String<sp/>className)</highlight></codeline>
<codeline lineno="6829"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6830"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(scriptState-&gt;perContextData());</highlight></codeline>
<codeline lineno="6831"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(scriptState-&gt;getExecutionContext());</highlight></codeline>
<codeline lineno="6832"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>scriptState-&gt;isolate();</highlight></codeline>
<codeline lineno="6833"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>compiledClass<sp/>=<sp/>scriptState-&gt;perContextData()-&gt;compiledPrivateScript(className);</highlight></codeline>
<codeline lineno="6834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compiledClass.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="6835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>installedClasses<sp/>=<sp/>scriptState-&gt;perContextData()-&gt;compiledPrivateScript(</highlight><highlight class="stringliteral">&quot;PrivateScriptRunner&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(installedClasses.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="6837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>installedClasses<sp/>=<sp/><ref refid="_c_w_e-79_8c_1ae55a2d2968dda83858240e1392eb2599" kindref="member">installPrivateScriptRunner</ref>(isolate);</highlight></codeline>
<codeline lineno="6838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scriptState-&gt;perContextData()-&gt;setCompiledPrivateScript(</highlight><highlight class="stringliteral">&quot;PrivateScriptRunner&quot;</highlight><highlight class="normal">,<sp/>installedClasses);</highlight></codeline>
<codeline lineno="6839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_ASSERT(!installedClasses.IsEmpty());</highlight></codeline>
<codeline lineno="6841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_ASSERT(installedClasses-&gt;IsObject());</highlight></codeline>
<codeline lineno="6842"><highlight class="normal"></highlight></codeline>
<codeline lineno="6843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ac18195aa4776e27774d244e8ecb4a020" kindref="member">installPrivateScript</ref>(isolate,<sp/>className);</highlight></codeline>
<codeline lineno="6844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiledClass<sp/>=<sp/>v8::Local&lt;v8::Object&gt;::Cast(installedClasses)-&gt;Get(scriptState-&gt;context(),<sp/>v8String(isolate,<sp/>className)).ToLocalChecked();</highlight></codeline>
<codeline lineno="6845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_ASSERT(compiledClass-&gt;IsObject());</highlight></codeline>
<codeline lineno="6846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scriptState-&gt;perContextData()-&gt;setCompiledPrivateScript(className,<sp/>compiledClass);</highlight></codeline>
<codeline lineno="6847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Object&gt;::Cast(compiledClass);</highlight></codeline>
<codeline lineno="6849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6850" refid="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Value&gt;<sp/><ref refid="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" kindref="member">compileAndRunPrivateScript</ref>(ScriptState*<sp/>scriptState,<sp/>String<sp/>scriptClassName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>source,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-22_8c_1ac325ee2e130c33214318b5dea0073d47" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="6851"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6852"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>scriptState-&gt;isolate();</highlight></codeline>
<codeline lineno="6853"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::TryCatch<sp/>block(isolate);</highlight></codeline>
<codeline lineno="6854"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>sourceString(source,<sp/><ref refid="_c_w_e-22_8c_1ac325ee2e130c33214318b5dea0073d47" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="6855"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>fileName<sp/>=<sp/>scriptClassName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.js&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6856"><highlight class="normal"></highlight></codeline>
<codeline lineno="6857"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=<sp/>scriptState-&gt;context();</highlight></codeline>
<codeline lineno="6858"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>global<sp/>=<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;Global();</highlight></codeline>
<codeline lineno="6859"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>privateScriptController<sp/>=<sp/>global-&gt;Get(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8String(isolate,<sp/></highlight><highlight class="stringliteral">&quot;privateScriptController&quot;</highlight><highlight class="normal">)).ToLocalChecked();</highlight></codeline>
<codeline lineno="6860"><highlight class="normal"><sp/><sp/><sp/><sp/>RELEASE_ASSERT(privateScriptController-&gt;IsUndefined()<sp/>||<sp/>privateScriptController-&gt;IsObject());</highlight></codeline>
<codeline lineno="6861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(privateScriptController-&gt;IsObject())<sp/>{</highlight></codeline>
<codeline lineno="6862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>privateScriptControllerObject<sp/>=<sp/>privateScriptController.As&lt;v8::Object&gt;();</highlight></codeline>
<codeline lineno="6863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>importFunctionValue<sp/>=<sp/>privateScriptControllerObject-&gt;Get(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8String(isolate,<sp/></highlight><highlight class="stringliteral">&quot;import&quot;</highlight><highlight class="normal">)).ToLocalChecked();</highlight></codeline>
<codeline lineno="6864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(importFunctionValue-&gt;IsUndefined())<sp/>{</highlight></codeline>
<codeline lineno="6865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v8::FunctionTemplate::New(isolate,<sp/><ref refid="_c_w_e-79_8c_1a3529938c16e0e3ebfefefa994878c111" kindref="member">importFunction</ref>)-&gt;GetFunction(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>).ToLocal(&amp;</highlight><highlight class="keyword">function</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!v8CallBoolean(privateScriptControllerObject-&gt;Set(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8String(isolate,<sp/></highlight><highlight class="stringliteral">&quot;import&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="6868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Setting<sp/>import<sp/>function<sp/>failed.<sp/>(Class<sp/>name<sp/>=<sp/>%s)\n&quot;</highlight><highlight class="normal">,<sp/>scriptClassName.utf8().data());</highlight></codeline>
<codeline lineno="6869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" kindref="member">dumpV8Message</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>block.Message());</highlight></codeline>
<codeline lineno="6870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_NOTREACHED();</highlight></codeline>
<codeline lineno="6871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6874"><highlight class="normal"></highlight></codeline>
<codeline lineno="6875"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Script&gt;<sp/>script;</highlight></codeline>
<codeline lineno="6876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v8Call(V8ScriptRunner::compileScript(v8String(isolate,<sp/>sourceString),<sp/>fileName,<sp/>String(),<sp/>TextPosition::minimumPosition(),<sp/>isolate,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>NotSharableCrossOrigin),<sp/>script,<sp/>block))<sp/>{</highlight></codeline>
<codeline lineno="6877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Compile<sp/>failed.<sp/>(Class<sp/>name<sp/>=<sp/>%s)\n&quot;</highlight><highlight class="normal">,<sp/>scriptClassName.utf8().data());</highlight></codeline>
<codeline lineno="6878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" kindref="member">dumpV8Message</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>block.Message());</highlight></codeline>
<codeline lineno="6879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_NOTREACHED();</highlight></codeline>
<codeline lineno="6880"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6881"><highlight class="normal"></highlight></codeline>
<codeline lineno="6882"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>result;</highlight></codeline>
<codeline lineno="6883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v8Call(V8ScriptRunner::runCompiledInternalScript(isolate,<sp/>script),<sp/>result,<sp/>block))<sp/>{</highlight></codeline>
<codeline lineno="6884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>installClass()<sp/>failed.<sp/>(Class<sp/>name<sp/>=<sp/>%s)\n&quot;</highlight><highlight class="normal">,<sp/>scriptClassName.utf8().data());</highlight></codeline>
<codeline lineno="6885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" kindref="member">dumpV8Message</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>block.Message());</highlight></codeline>
<codeline lineno="6886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_NOTREACHED();</highlight></codeline>
<codeline lineno="6887"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6890" refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" kindref="member">dumpV8Message</ref>(v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8::Local&lt;v8::Message&gt;<sp/>message)</highlight></codeline>
<codeline lineno="6891"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message.IsEmpty())</highlight></codeline>
<codeline lineno="6893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6894"><highlight class="normal"></highlight></codeline>
<codeline lineno="6895"><highlight class="normal"><sp/><sp/><sp/><sp/>message-&gt;GetScriptOrigin();</highlight></codeline>
<codeline lineno="6896"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Maybe&lt;int&gt;<sp/>unused<sp/>=<sp/>message-&gt;GetLineNumber(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>);</highlight></codeline>
<codeline lineno="6897"><highlight class="normal"><sp/><sp/><sp/><sp/>ALLOW_UNUSED_LOCAL(unused);</highlight></codeline>
<codeline lineno="6898"><highlight class="normal"></highlight></codeline>
<codeline lineno="6899"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>resourceName<sp/>=<sp/>message-&gt;GetScriptOrigin().ResourceName();</highlight></codeline>
<codeline lineno="6900"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>fileName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>JavaScript<sp/>file&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resourceName.IsEmpty()<sp/>&amp;&amp;<sp/>resourceName-&gt;IsString())</highlight></codeline>
<codeline lineno="6902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileName<sp/>=<sp/>toCoreString(v8::Local&lt;v8::String&gt;::Cast(resourceName));</highlight></codeline>
<codeline lineno="6903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineNumber<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6904"><highlight class="normal"><sp/><sp/><sp/><sp/>v8Call(message-&gt;GetLineNumber(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>),<sp/>lineNumber);</highlight></codeline>
<codeline lineno="6905"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::String&gt;<sp/>errorMessage<sp/>=<sp/>message-&gt;Get();</highlight></codeline>
<codeline lineno="6906"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>(line<sp/>%d):<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>fileName.utf8().data(),<sp/>lineNumber,<sp/>toCoreString(errorMessage).utf8().data());</highlight></codeline>
<codeline lineno="6907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6908" refid="_c_w_e-79_8c_1a3529938c16e0e3ebfefefa994878c111" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a3529938c16e0e3ebfefefa994878c111" kindref="member">importFunction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>args)</highlight></codeline>
<codeline lineno="6909"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6910"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>args.GetIsolate();</highlight></codeline>
<codeline lineno="6911"><highlight class="normal"><sp/><sp/><sp/><sp/>RELEASE_ASSERT(isolate<sp/>&amp;&amp;<sp/>(args.Length()<sp/>&gt;=<sp/>1));</highlight></codeline>
<codeline lineno="6912"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>resourceFileName<sp/>=<sp/>toCoreString(args[0]-&gt;ToString(isolate-&gt;GetCurrentContext()).ToLocalChecked());</highlight></codeline>
<codeline lineno="6913"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>resourceData<sp/>=<sp/>loadResourceAsASCIIString(resourceFileName.utf8().data());</highlight></codeline>
<codeline lineno="6914"><highlight class="normal"><sp/><sp/><sp/><sp/>RELEASE_ASSERT(resourceData.length());</highlight></codeline>
<codeline lineno="6915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compileAndRunScript<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args.Length()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="6917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_ASSERT(args[1]-&gt;IsBoolean());</highlight></codeline>
<codeline lineno="6918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compileAndRunScript<sp/>=<sp/>args[1].As&lt;v8::Boolean&gt;()-&gt;Value();</highlight></codeline>
<codeline lineno="6919"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6920"><highlight class="normal"></highlight></codeline>
<codeline lineno="6921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resourceFileName.endsWith(</highlight><highlight class="stringliteral">&quot;.js&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>compileAndRunScript)</highlight></codeline>
<codeline lineno="6922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" kindref="member">compileAndRunPrivateScript</ref>(ScriptState::current(isolate),<sp/>resourceFileName.replace(</highlight><highlight class="stringliteral">&quot;.js&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/>resourceData.utf8().data(),<sp/>resourceData.length());</highlight></codeline>
<codeline lineno="6923"><highlight class="normal"><sp/><sp/><sp/><sp/>args.GetReturnValue().Set(v8String(isolate,<sp/>resourceData));</highlight></codeline>
<codeline lineno="6924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6925"><highlight class="normal">v8::Local&lt;v8::Value&gt;<sp/>PrivateScriptRunner::installClassIfNeeded(Document*<sp/>document,<sp/>String<sp/>className)</highlight></codeline>
<codeline lineno="6926"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!document-&gt;contextDocument()-&gt;frame())</highlight></codeline>
<codeline lineno="6928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Value&gt;();</highlight></codeline>
<codeline lineno="6929"><highlight class="normal"></highlight></codeline>
<codeline lineno="6930"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::HandleScope<sp/>handleScope(toIsolate(document));</highlight></codeline>
<codeline lineno="6931"><highlight class="normal"><sp/><sp/><sp/><sp/>ScriptState*<sp/>scriptState<sp/>=<sp/>ScriptState::forWorld(document-&gt;contextDocument()-&gt;frame(),<sp/>DOMWrapperWorld::privateScriptIsolatedWorld());</highlight></codeline>
<codeline lineno="6932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scriptState)</highlight></codeline>
<codeline lineno="6933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Value&gt;();</highlight></codeline>
<codeline lineno="6934"><highlight class="normal"></highlight></codeline>
<codeline lineno="6935"><highlight class="normal"><sp/><sp/><sp/><sp/>ScriptState::Scope<sp/>scope(scriptState);</highlight></codeline>
<codeline lineno="6936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a25d0e49f6c8a61ab56034685bfb55102" kindref="member">classObjectOfPrivateScript</ref>(scriptState,<sp/>className);</highlight></codeline>
<codeline lineno="6937"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6938" refid="_c_w_e-79_8c_1ac18195aa4776e27774d244e8ecb4a020" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ac18195aa4776e27774d244e8ecb4a020" kindref="member">installPrivateScript</ref>(v8::Isolate*<sp/>isolate,<sp/>String<sp/>className)</highlight></codeline>
<codeline lineno="6939"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6940"><highlight class="normal"><sp/><sp/><sp/><sp/>ScriptState*<sp/>scriptState<sp/>=<sp/>ScriptState::current(isolate);</highlight></codeline>
<codeline lineno="6941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compiledScriptCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6942"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>WTF_ARRAY_LENGTH(kPrivateScriptSourcesForTesting);<sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="6944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(className<sp/>==<sp/>kPrivateScriptSourcesForTesting[index].className)<sp/>{</highlight></codeline>
<codeline lineno="6945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" kindref="member">compileAndRunPrivateScript</ref>(scriptState,<sp/>kPrivateScriptSourcesForTesting[index].scriptClassName,<sp/>kPrivateScriptSourcesForTesting[index].source,<sp/>kPrivateScriptSourcesForTesting[index].<ref refid="_c_w_e-22_8c_1ac325ee2e130c33214318b5dea0073d47" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="6946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiledScriptCount++;</highlight></codeline>
<codeline lineno="6947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6948"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6949"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6950"><highlight class="normal"></highlight></codeline>
<codeline lineno="6951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>WTF_ARRAY_LENGTH(kPrivateScriptSources);<sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="6952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(className<sp/>==<sp/>kPrivateScriptSources[index].className)<sp/>{</highlight></codeline>
<codeline lineno="6953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>resourceData<sp/>=<sp/>loadResourceAsASCIIString(kPrivateScriptSources[index].resourceFile);</highlight></codeline>
<codeline lineno="6954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" kindref="member">compileAndRunPrivateScript</ref>(scriptState,<sp/>kPrivateScriptSources[index].scriptClassName,<sp/>resourceData.utf8().data(),<sp/>resourceData.length());</highlight></codeline>
<codeline lineno="6955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiledScriptCount++;</highlight></codeline>
<codeline lineno="6956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6958"><highlight class="normal"></highlight></codeline>
<codeline lineno="6959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!compiledScriptCount)<sp/>{</highlight></codeline>
<codeline lineno="6960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Target<sp/>source<sp/>code<sp/>was<sp/>not<sp/>found.<sp/>(Class<sp/>name<sp/>=<sp/>%s)\n&quot;</highlight><highlight class="normal">,<sp/>className.utf8().data());</highlight></codeline>
<codeline lineno="6961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_NOTREACHED();</highlight></codeline>
<codeline lineno="6962"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6964" refid="_c_w_e-79_8c_1ae55a2d2968dda83858240e1392eb2599" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Value&gt;<sp/><ref refid="_c_w_e-79_8c_1ae55a2d2968dda83858240e1392eb2599" kindref="member">installPrivateScriptRunner</ref>(v8::Isolate*<sp/>isolate)</highlight></codeline>
<codeline lineno="6965"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>className<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PrivateScriptRunner&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="6968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>WTF_ARRAY_LENGTH(kPrivateScriptSources);<sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="6969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(className<sp/>==<sp/>kPrivateScriptSources[index].className)</highlight></codeline>
<codeline lineno="6970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>==<sp/>WTF_ARRAY_LENGTH(kPrivateScriptSources))<sp/>{</highlight></codeline>
<codeline lineno="6973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Target<sp/>source<sp/>code<sp/>was<sp/>not<sp/>found.<sp/>(Class<sp/>name<sp/>=<sp/>%s)\n&quot;</highlight><highlight class="normal">,<sp/>className.utf8().data());</highlight></codeline>
<codeline lineno="6974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_NOTREACHED();</highlight></codeline>
<codeline lineno="6975"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>resourceData<sp/>=<sp/>loadResourceAsASCIIString(kPrivateScriptSources[index].resourceFile);</highlight></codeline>
<codeline lineno="6977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" kindref="member">compileAndRunPrivateScript</ref>(ScriptState::current(isolate),<sp/>className,<sp/>resourceData.utf8().data(),<sp/>resourceData.length());</highlight></codeline>
<codeline lineno="6978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6979" refid="_c_w_e-79_8c_1a097ff2ae9deb0314990702671c978cb1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a097ff2ae9deb0314990702671c978cb1" kindref="member">rethrowExceptionInPrivateScript</ref>(v8::Isolate*<sp/>isolate,<sp/>v8::TryCatch&amp;<sp/>block,<sp/>ScriptState*<sp/>scriptStateInUserScript,<sp/>ExceptionState::ContextType<sp/>errorContext,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>propertyName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>interfaceName)</highlight></codeline>
<codeline lineno="6980"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6981"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=<sp/>scriptStateInUserScript-&gt;context();</highlight></codeline>
<codeline lineno="6982"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>exception<sp/>=<sp/>block.Exception();</highlight></codeline>
<codeline lineno="6983"><highlight class="normal"><sp/><sp/><sp/><sp/>RELEASE_ASSERT(!exception.IsEmpty()<sp/>&amp;&amp;<sp/>exception-&gt;IsObject());</highlight></codeline>
<codeline lineno="6984"><highlight class="normal"></highlight></codeline>
<codeline lineno="6985"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>exceptionObject<sp/>=<sp/>v8::Local&lt;v8::Object&gt;::Cast(exception);</highlight></codeline>
<codeline lineno="6986"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>name<sp/>=<sp/>exceptionObject-&gt;Get(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8String(isolate,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">)).ToLocalChecked();</highlight></codeline>
<codeline lineno="6987"><highlight class="normal"><sp/><sp/><sp/><sp/>RELEASE_ASSERT(name-&gt;IsString());</highlight></codeline>
<codeline lineno="6988"><highlight class="normal"></highlight></codeline>
<codeline lineno="6989"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Message&gt;<sp/>tryCatchMessage<sp/>=<sp/>block.Message();</highlight></codeline>
<codeline lineno="6990"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>message;</highlight></codeline>
<codeline lineno="6991"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>messageString;</highlight></codeline>
<codeline lineno="6992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exceptionObject-&gt;Get(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8String(isolate,<sp/></highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">)).ToLocal(&amp;message)<sp/>&amp;&amp;<sp/>message-&gt;IsString())</highlight></codeline>
<codeline lineno="6993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messageString<sp/>=<sp/>toCoreString(v8::Local&lt;v8::String&gt;::Cast(message));</highlight></codeline>
<codeline lineno="6994"><highlight class="normal"></highlight></codeline>
<codeline lineno="6995"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>exceptionName<sp/>=<sp/>toCoreString(v8::Local&lt;v8::String&gt;::Cast(name));</highlight></codeline>
<codeline lineno="6996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exceptionName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;PrivateScriptException&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>code<sp/>=<sp/>exceptionObject-&gt;Get(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8String(isolate,<sp/></highlight><highlight class="stringliteral">&quot;code&quot;</highlight><highlight class="normal">)).ToLocalChecked();</highlight></codeline>
<codeline lineno="6998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_ASSERT(code-&gt;IsInt32());</highlight></codeline>
<codeline lineno="6999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exceptionCode<sp/>=<sp/>code.As&lt;v8::Int32&gt;()-&gt;Value();</highlight></codeline>
<codeline lineno="7000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScriptState::Scope<sp/>scope(scriptStateInUserScript);</highlight></codeline>
<codeline lineno="7001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExceptionState<sp/>exceptionState(errorContext,<sp/>propertyName,<sp/>interfaceName,<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;Global(),<sp/>scriptStateInUserScript-&gt;isolate());</highlight></codeline>
<codeline lineno="7002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exceptionState.throwDOMException(exceptionCode,<sp/>messageString);</highlight></codeline>
<codeline lineno="7003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7004"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7005"><highlight class="normal"></highlight></codeline>
<codeline lineno="7006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exceptionName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>messageString.contains(</highlight><highlight class="stringliteral">&quot;Maximum<sp/>call<sp/>stack<sp/>size<sp/>exceeded&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="7007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScriptState::Scope<sp/>scope(scriptStateInUserScript);</highlight></codeline>
<codeline lineno="7008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExceptionState<sp/>exceptionState(errorContext,<sp/>propertyName,<sp/>interfaceName,<sp/>scriptStateInUserScript-&gt;context()-&gt;Global(),<sp/>scriptStateInUserScript-&gt;isolate());</highlight></codeline>
<codeline lineno="7009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exceptionState.throwDOMException(V8RangeError,<sp/>messageString);</highlight></codeline>
<codeline lineno="7010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7012"><highlight class="normal"></highlight></codeline>
<codeline lineno="7013"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>%s<sp/>was<sp/>thrown.\n&quot;</highlight><highlight class="normal">,<sp/>exceptionName.utf8().data());</highlight></codeline>
<codeline lineno="7014"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" kindref="member">dumpV8Message</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>tryCatchMessage);</highlight></codeline>
<codeline lineno="7015"><highlight class="normal"><sp/><sp/><sp/><sp/>RELEASE_NOTREACHED();</highlight></codeline>
<codeline lineno="7016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7017" refid="_c_w_e-79_8c_1a9364c0586bcea75f3c4bbecb7c5b2f4a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a9364c0586bcea75f3c4bbecb7c5b2f4a" kindref="member">GetBookmarkDragOperation</ref>(content::BrowserContext*<sp/>browser_context,</highlight></codeline>
<codeline lineno="7018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BookmarkNode*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="7019"><highlight class="normal"><sp/><sp/>PrefService*<sp/>prefs<sp/>=<sp/>user_prefs::UserPrefs::Get(browser_context);</highlight></codeline>
<codeline lineno="7020"><highlight class="normal"><sp/><sp/>BookmarkModel*<sp/>model<sp/>=</highlight></codeline>
<codeline lineno="7021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BookmarkModelFactory::GetForBrowserContext(browser_context);</highlight></codeline>
<codeline lineno="7022"><highlight class="normal"></highlight></codeline>
<codeline lineno="7023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>move<sp/>=<sp/>ui::DragDropTypes::DRAG_MOVE;</highlight></codeline>
<codeline lineno="7024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!prefs-&gt;GetBoolean(bookmarks::prefs::kEditBookmarksEnabled)<sp/>||</highlight></codeline>
<codeline lineno="7025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!model-&gt;client()-&gt;CanBeEditedByUser(node))<sp/>{</highlight></codeline>
<codeline lineno="7026"><highlight class="normal"><sp/><sp/><sp/><sp/>move<sp/>=<sp/>ui::DragDropTypes::DRAG_NONE;</highlight></codeline>
<codeline lineno="7027"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;is_url())</highlight></codeline>
<codeline lineno="7029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::DragDropTypes::DRAG_COPY<sp/>|<sp/>ui::DragDropTypes::DRAG_LINK<sp/>|<sp/>move;</highlight></codeline>
<codeline lineno="7030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::DragDropTypes::DRAG_COPY<sp/>|<sp/>move;</highlight></codeline>
<codeline lineno="7031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7032" refid="_c_w_e-79_8c_1ac321770cb84203ffacb0cc3ba96fad61" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ac321770cb84203ffacb0cc3ba96fad61" kindref="member">GetBookmarkDropOperation</ref>(Profile*<sp/>profile,</highlight></codeline>
<codeline lineno="7033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ui::DropTargetEvent&amp;<sp/>event,</highlight></codeline>
<codeline lineno="7034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bookmarks::BookmarkNodeData&amp;<sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="7035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BookmarkNode*<sp/>parent,</highlight></codeline>
<codeline lineno="7036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="7037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>profile_path<sp/>=<sp/>profile-&gt;GetPath();</highlight></codeline>
<codeline lineno="7038"><highlight class="normal"></highlight></codeline>
<codeline lineno="7039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>.IsFromProfilePath(profile_path)<sp/>&amp;&amp;<sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="7040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::DragDropTypes::DRAG_NONE;</highlight></codeline>
<codeline lineno="7041"><highlight class="normal"></highlight></codeline>
<codeline lineno="7042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-79_8c_1a5503f87ba21a1dc99f56c0065d76a463" kindref="member">IsValidBookmarkDropLocation</ref>(profile,<sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>,<sp/>parent,<sp/>index))</highlight></codeline>
<codeline lineno="7043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::DragDropTypes::DRAG_NONE;</highlight></codeline>
<codeline lineno="7044"><highlight class="normal"></highlight></codeline>
<codeline lineno="7045"><highlight class="normal"><sp/><sp/>BookmarkModel*<sp/>model<sp/>=<sp/>BookmarkModelFactory::GetForBrowserContext(profile);</highlight></codeline>
<codeline lineno="7046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!model-&gt;client()-&gt;CanBeEditedByUser(parent))</highlight></codeline>
<codeline lineno="7047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::DragDropTypes::DRAG_NONE;</highlight></codeline>
<codeline lineno="7048"><highlight class="normal"></highlight></codeline>
<codeline lineno="7049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BookmarkNode*<sp/>dragged_node<sp/>=</highlight></codeline>
<codeline lineno="7050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>.GetFirstNode(model,<sp/>profile-&gt;GetPath());</highlight></codeline>
<codeline lineno="7051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dragged_node)<sp/>{</highlight></codeline>
<codeline lineno="7052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!model-&gt;client()-&gt;CanBeEditedByUser(dragged_node))<sp/>{</highlight></codeline>
<codeline lineno="7053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::DragDropTypes::DRAG_COPY;</highlight></codeline>
<codeline lineno="7054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::DragDropTypes::DRAG_MOVE;</highlight></codeline>
<codeline lineno="7056"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7057"><highlight class="normal"></highlight></codeline>
<codeline lineno="7058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a28358b93a2d7dbcd0b5cfd3e6cfbcf7e" kindref="member">GetPreferredBookmarkDropOperation</ref>(event.source_operations(),</highlight></codeline>
<codeline lineno="7059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ui::DragDropTypes::DRAG_COPY<sp/>|<sp/>ui::DragDropTypes::DRAG_LINK);</highlight></codeline>
<codeline lineno="7060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7061" refid="_c_w_e-79_8c_1a8ddd518c8dfbf5532cb9b1ec149c27a9" refkind="member"><highlight class="normal">gfx::ImageSkia<sp/><ref refid="_c_w_e-79_8c_1a8ddd518c8dfbf5532cb9b1ec149c27a9" kindref="member">GetBookmarkFolderIcon</ref>(SkColor<sp/>text_color)<sp/>{</highlight></codeline>
<codeline lineno="7062"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ui::ResourceBundle::GetSharedInstance().GetImageSkiaNamed(</highlight></codeline>
<codeline lineno="7064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IDR_BOOKMARK_BAR_FOLDER);</highlight></codeline>
<codeline lineno="7065"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a0999e87a41b730deb4522abef9abd561" kindref="member">GetFolderIcon</ref>(gfx::VectorIconId::FOLDER,<sp/>text_color);</highlight></codeline>
<codeline lineno="7067"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7069" refid="_c_w_e-79_8c_1a63979ff18be39fa1cb9a47391fa72aab" refkind="member"><highlight class="normal">gfx::ImageSkia<sp/><ref refid="_c_w_e-79_8c_1a63979ff18be39fa1cb9a47391fa72aab" kindref="member">GetBookmarkManagedFolderIcon</ref>(SkColor<sp/>text_color)<sp/>{</highlight></codeline>
<codeline lineno="7070"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ui::ResourceBundle::GetSharedInstance().GetImageSkiaNamed(</highlight></codeline>
<codeline lineno="7072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IDR_BOOKMARK_BAR_FOLDER_MANAGED);</highlight></codeline>
<codeline lineno="7073"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a0999e87a41b730deb4522abef9abd561" kindref="member">GetFolderIcon</ref>(gfx::VectorIconId::FOLDER_MANAGED,<sp/>text_color);</highlight></codeline>
<codeline lineno="7075"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7077" refid="_c_w_e-79_8c_1a5119f9e73271f9c113b0e23e38de0eb9" refkind="member"><highlight class="normal">BookmarkShortcutDisposition<sp/><ref refid="_c_w_e-79_8c_1a5119f9e73271f9c113b0e23e38de0eb9" kindref="member">GetBookmarkShortcutDisposition</ref>(Profile*<sp/>profile)<sp/>{</highlight></codeline>
<codeline lineno="7078"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ENABLE_EXTENSIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7079"><highlight class="normal"><sp/><sp/>extensions::CommandService*<sp/>command_service<sp/>=</highlight></codeline>
<codeline lineno="7080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extensions::CommandService::Get(profile);</highlight></codeline>
<codeline lineno="7081"><highlight class="normal"></highlight></codeline>
<codeline lineno="7082"><highlight class="normal"><sp/><sp/>extensions::ExtensionRegistry*<sp/>registry<sp/>=</highlight></codeline>
<codeline lineno="7083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extensions::ExtensionRegistry::Get(profile);</highlight></codeline>
<codeline lineno="7084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!registry)</highlight></codeline>
<codeline lineno="7085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BOOKMARK_SHORTCUT_DISPOSITION_UNCHANGED;</highlight></codeline>
<codeline lineno="7086"><highlight class="normal"></highlight></codeline>
<codeline lineno="7087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>extensions::ExtensionSet&amp;<sp/>extension_set<sp/>=</highlight></codeline>
<codeline lineno="7088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>registry-&gt;enabled_extensions();</highlight></codeline>
<codeline lineno="7089"><highlight class="normal"></highlight></codeline>
<codeline lineno="7090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>removed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(extensions::ExtensionSet::const_iterator<sp/>i<sp/>=<sp/>extension_set.begin();</highlight></codeline>
<codeline lineno="7092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>!=<sp/>extension_set.end();</highlight></codeline>
<codeline lineno="7093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command_service-&gt;RequestsBookmarkShortcutOverride(i-&gt;get()))</highlight></codeline>
<codeline lineno="7095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BOOKMARK_SHORTCUT_DISPOSITION_OVERRIDE_REQUESTED;</highlight></codeline>
<codeline lineno="7096"><highlight class="normal"></highlight></codeline>
<codeline lineno="7097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!removed<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extensions::CommandService::RemovesBookmarkShortcut(i-&gt;get()))<sp/>{</highlight></codeline>
<codeline lineno="7099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>removed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7102"><highlight class="normal"></highlight></codeline>
<codeline lineno="7103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(removed)</highlight></codeline>
<codeline lineno="7104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BOOKMARK_SHORTCUT_DISPOSITION_REMOVED;</highlight></codeline>
<codeline lineno="7105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BOOKMARK_SHORTCUT_DISPOSITION_UNCHANGED;</highlight></codeline>
<codeline lineno="7107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7108" refid="_c_w_e-79_8c_1aee0f8dbd4216d1cad8b4673fcf3a71e7" refkind="member"><highlight class="normal">gfx::ImageSkia<sp/><ref refid="_c_w_e-79_8c_1aee0f8dbd4216d1cad8b4673fcf3a71e7" kindref="member">GetBookmarkSupervisedFolderIcon</ref>(SkColor<sp/>text_color)<sp/>{</highlight></codeline>
<codeline lineno="7109"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ui::ResourceBundle::GetSharedInstance().GetImageSkiaNamed(</highlight></codeline>
<codeline lineno="7111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IDR_BOOKMARK_BAR_FOLDER_SUPERVISED);</highlight></codeline>
<codeline lineno="7112"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a0999e87a41b730deb4522abef9abd561" kindref="member">GetFolderIcon</ref>(gfx::VectorIconId::FOLDER_SUPERVISED,<sp/>text_color);</highlight></codeline>
<codeline lineno="7114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7116" refid="_c_w_e-79_8c_1a0999e87a41b730deb4522abef9abd561" refkind="member"><highlight class="normal">gfx::ImageSkia<sp/><ref refid="_c_w_e-79_8c_1a0999e87a41b730deb4522abef9abd561" kindref="member">GetFolderIcon</ref>(gfx::VectorIconId<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>SkColor<sp/>text_color)<sp/>{</highlight></codeline>
<codeline lineno="7117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfx::CreateVectorIcon(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color_utils::DeriveDefaultIconColor(text_color));</highlight></codeline>
<codeline lineno="7119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7120" refid="_c_w_e-79_8c_1a28358b93a2d7dbcd0b5cfd3e6cfbcf7e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a28358b93a2d7dbcd0b5cfd3e6cfbcf7e" kindref="member">GetPreferredBookmarkDropOperation</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>source_operations,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operations)<sp/>{</highlight></codeline>
<codeline lineno="7121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>common_ops<sp/>=<sp/>(source_operations<sp/>&amp;<sp/>operations);</highlight></codeline>
<codeline lineno="7122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!common_ops)</highlight></codeline>
<codeline lineno="7123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::DragDropTypes::DRAG_NONE;</highlight></codeline>
<codeline lineno="7124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ui::DragDropTypes::DRAG_COPY<sp/>&amp;<sp/>common_ops)</highlight></codeline>
<codeline lineno="7125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::DragDropTypes::DRAG_COPY;</highlight></codeline>
<codeline lineno="7126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ui::DragDropTypes::DRAG_LINK<sp/>&amp;<sp/>common_ops)</highlight></codeline>
<codeline lineno="7127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::DragDropTypes::DRAG_LINK;</highlight></codeline>
<codeline lineno="7128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ui::DragDropTypes::DRAG_MOVE<sp/>&amp;<sp/>common_ops)</highlight></codeline>
<codeline lineno="7129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::DragDropTypes::DRAG_MOVE;</highlight></codeline>
<codeline lineno="7130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::DragDropTypes::DRAG_NONE;</highlight></codeline>
<codeline lineno="7131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7132" refid="_c_w_e-79_8c_1a499220ec9ceb0680d3865e2aa45186a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a499220ec9ceb0680d3865e2aa45186a5" kindref="member">GetURLAndTitleToBookmark</ref>(content::WebContents*<sp/>web_contents,</highlight></codeline>
<codeline lineno="7133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GURL*<sp/>url,</highlight></codeline>
<codeline lineno="7134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::string16*<sp/>title)<sp/>{</highlight></codeline>
<codeline lineno="7135"><highlight class="normal"><sp/><sp/>*url<sp/>=<sp/><ref refid="_c_w_e-79_8c_1aa8d904c778b1a954349ee24984f967c5" kindref="member">GetURLToBookmark</ref>(web_contents);</highlight></codeline>
<codeline lineno="7136"><highlight class="normal"><sp/><sp/>*title<sp/>=<sp/>web_contents-&gt;GetTitle();</highlight></codeline>
<codeline lineno="7137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7138" refid="_c_w_e-79_8c_1aa8d904c778b1a954349ee24984f967c5" refkind="member"><highlight class="normal">GURL<sp/><ref refid="_c_w_e-79_8c_1aa8d904c778b1a954349ee24984f967c5" kindref="member">GetURLToBookmark</ref>(content::WebContents*<sp/>web_contents)<sp/>{</highlight></codeline>
<codeline lineno="7139"><highlight class="normal"><sp/><sp/>DCHECK(web_contents);</highlight></codeline>
<codeline lineno="7140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>search::IsInstantNTP(web_contents)<sp/>?<sp/>GURL(kChromeUINewTabURL)</highlight></codeline>
<codeline lineno="7141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>web_contents-&gt;GetURL();</highlight></codeline>
<codeline lineno="7142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7143" refid="_c_w_e-79_8c_1afa5e833b45dd130f3f94abbcc3b163a2" refkind="member"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1afa5e833b45dd130f3f94abbcc3b163a2" kindref="member">IsAppsShortcutEnabled</ref>(Profile*<sp/>profile)<sp/>{</highlight></codeline>
<codeline lineno="7144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile-&gt;IsLegacySupervised())</highlight></codeline>
<codeline lineno="7145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7146"><highlight class="normal"></highlight></codeline>
<codeline lineno="7147"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USE_ASH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7149"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>search::IsInstantExtendedAPIEnabled()<sp/>&amp;&amp;<sp/>!profile-&gt;IsOffTheRecord();</highlight></codeline>
<codeline lineno="7151"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7153" refid="_c_w_e-79_8c_1a5503f87ba21a1dc99f56c0065d76a463" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a5503f87ba21a1dc99f56c0065d76a463" kindref="member">IsValidBookmarkDropLocation</ref>(Profile*<sp/>profile,</highlight></codeline>
<codeline lineno="7154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bookmarks::BookmarkNodeData&amp;<sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="7155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BookmarkNode*<sp/>drop_parent,</highlight></codeline>
<codeline lineno="7156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="7157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!drop_parent-&gt;is_folder())<sp/>{</highlight></codeline>
<codeline lineno="7158"><highlight class="normal"><sp/><sp/><sp/><sp/>NOTREACHED();</highlight></codeline>
<codeline lineno="7159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7161"><highlight class="normal"></highlight></codeline>
<codeline lineno="7162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>.is_valid())</highlight></codeline>
<codeline lineno="7163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7164"><highlight class="normal"></highlight></codeline>
<codeline lineno="7165"><highlight class="normal"><sp/><sp/>BookmarkModel*<sp/>model<sp/>=<sp/>BookmarkModelFactory::GetForBrowserContext(profile);</highlight></codeline>
<codeline lineno="7166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!model-&gt;client()-&gt;CanBeEditedByUser(drop_parent))</highlight></codeline>
<codeline lineno="7167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7168"><highlight class="normal"></highlight></codeline>
<codeline lineno="7169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>profile_path<sp/>=<sp/>profile-&gt;GetPath();</highlight></codeline>
<codeline lineno="7170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>.IsFromProfilePath(profile_path))<sp/>{</highlight></codeline>
<codeline lineno="7171"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>BookmarkNode*&gt;<sp/>nodes<sp/>=<sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>.GetNodes(model,<sp/>profile_path);</highlight></codeline>
<codeline lineno="7172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nodes.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BookmarkNode*<sp/>node<sp/>=<sp/>nodes[i];</highlight></codeline>
<codeline lineno="7174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_index<sp/>=<sp/>(drop_parent<sp/>==<sp/>node-&gt;parent())<sp/>?</highlight></codeline>
<codeline lineno="7175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drop_parent-&gt;GetIndexOf(nodes[i])<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="7176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_index<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>(index<sp/>==<sp/>node_index<sp/>||<sp/>index<sp/>==<sp/>node_index<sp/>+<sp/>1))</highlight></codeline>
<codeline lineno="7177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7178"><highlight class="normal"></highlight></codeline>
<codeline lineno="7179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(drop_parent-&gt;HasAncestor(node))</highlight></codeline>
<codeline lineno="7180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7186" refid="_c_w_e-79_8c_1aa731830e2fe03fc05e5188191a701b51" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aa731830e2fe03fc05e5188191a701b51" kindref="member">ShouldRemoveBookmarkOpenPagesUI</ref>(Profile*<sp/>profile)<sp/>{</highlight></codeline>
<codeline lineno="7187"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ENABLE_EXTENSIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7188"><highlight class="normal"><sp/><sp/>extensions::ExtensionRegistry*<sp/>registry<sp/>=</highlight></codeline>
<codeline lineno="7189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extensions::ExtensionRegistry::Get(profile);</highlight></codeline>
<codeline lineno="7190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!registry)</highlight></codeline>
<codeline lineno="7191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7192"><highlight class="normal"></highlight></codeline>
<codeline lineno="7193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>extensions::ExtensionSet&amp;<sp/>extension_set<sp/>=</highlight></codeline>
<codeline lineno="7194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>registry-&gt;enabled_extensions();</highlight></codeline>
<codeline lineno="7195"><highlight class="normal"></highlight></codeline>
<codeline lineno="7196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(extensions::ExtensionSet::const_iterator<sp/>i<sp/>=<sp/>extension_set.begin();</highlight></codeline>
<codeline lineno="7197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>!=<sp/>extension_set.end();</highlight></codeline>
<codeline lineno="7198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extensions::CommandService::RemovesBookmarkOpenPagesShortcut(i-&gt;get()))</highlight></codeline>
<codeline lineno="7200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7203"><highlight class="normal"></highlight></codeline>
<codeline lineno="7204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7206" refid="_c_w_e-79_8c_1add85323596fb2be95ae4b0fbb37b0be5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1add85323596fb2be95ae4b0fbb37b0be5" kindref="member">ShouldRemoveBookmarkThisPageUI</ref>(Profile*<sp/>profile)<sp/>{</highlight></codeline>
<codeline lineno="7207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a5119f9e73271f9c113b0e23e38de0eb9" kindref="member">GetBookmarkShortcutDisposition</ref>(profile)<sp/>==</highlight></codeline>
<codeline lineno="7208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOKMARK_SHORTCUT_DISPOSITION_REMOVED;</highlight></codeline>
<codeline lineno="7209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7210" refid="_c_w_e-79_8c_1ac688e81717df1b09b344013132aa1473" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ac688e81717df1b09b344013132aa1473" kindref="member">ShouldShowAppsShortcutInBookmarkBar</ref>(Profile*<sp/>profile)<sp/>{</highlight></codeline>
<codeline lineno="7211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1afa5e833b45dd130f3f94abbcc3b163a2" kindref="member">IsAppsShortcutEnabled</ref>(profile)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;GetPrefs()-&gt;GetBoolean(</highlight></codeline>
<codeline lineno="7213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bookmarks::prefs::kShowAppsShortcutInBookmarkBar);</highlight></codeline>
<codeline lineno="7214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7215" refid="_c_w_e-79_8c_1aea1f04474d34ac4881af2da4b28170a3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aea1f04474d34ac4881af2da4b28170a3" kindref="member">ToggleBookmarkBarWhenVisible</ref>(content::BrowserContext*<sp/>browser_context)<sp/>{</highlight></codeline>
<codeline lineno="7216"><highlight class="normal"><sp/><sp/>PrefService*<sp/>prefs<sp/>=<sp/>user_prefs::UserPrefs::Get(browser_context);</highlight></codeline>
<codeline lineno="7217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>always_show<sp/>=</highlight></codeline>
<codeline lineno="7218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!prefs-&gt;GetBoolean(bookmarks::prefs::kShowBookmarkBar);</highlight></codeline>
<codeline lineno="7219"><highlight class="normal"></highlight></codeline>
<codeline lineno="7220"><highlight class="normal"><sp/><sp/>prefs-&gt;SetBoolean(bookmarks::prefs::kShowBookmarkBar,<sp/>always_show);</highlight></codeline>
<codeline lineno="7221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7222" refid="_c_w_e-79_8c_1a535d8eb98497053522cfcfde712a108f" refkind="member"><highlight class="normal"><sp/><sp/>BookmarkEditorView::EditorNode*<sp/><ref refid="_c_w_e-79_8c_1a535d8eb98497053522cfcfde712a108f" kindref="member">AddNewFolder</ref>(</highlight></codeline>
<codeline lineno="7223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BookmarkEditorView::EditorNode*<sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="7224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>editor_-&gt;AddNewFolder(parent);</highlight></codeline>
<codeline lineno="7225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7226" refid="_c_w_e-79_8c_1ab0bb8af538a546e5e1641b963921a3a0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ab0bb8af538a546e5e1641b963921a3a0" kindref="member">AddTestData</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BookmarkNode*<sp/>bb_node<sp/>=<sp/>model_-&gt;bookmark_bar_node();</highlight></codeline>
<codeline lineno="7228"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>test_base<sp/>=<sp/><ref refid="_c_w_e-79_8c_1aef501a4d35fb6a4c822509e1f951982a" kindref="member">base_path</ref>();</highlight></codeline>
<codeline lineno="7229"><highlight class="normal"><sp/><sp/><sp/><sp/>model_-&gt;AddURL(bb_node,<sp/>0,<sp/>ASCIIToUTF16(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/>GURL(test_base<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BookmarkNode*<sp/>f1<sp/>=<sp/>model_-&gt;AddFolder(bb_node,<sp/>1,<sp/>ASCIIToUTF16(</highlight><highlight class="stringliteral">&quot;F1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7231"><highlight class="normal"><sp/><sp/><sp/><sp/>model_-&gt;AddURL(f1,<sp/>0,<sp/>ASCIIToUTF16(</highlight><highlight class="stringliteral">&quot;f1a&quot;</highlight><highlight class="normal">),<sp/>GURL(test_base<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;f1a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BookmarkNode*<sp/>f11<sp/>=<sp/>model_-&gt;AddFolder(f1,<sp/>1,<sp/>ASCIIToUTF16(</highlight><highlight class="stringliteral">&quot;F11&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7233"><highlight class="normal"><sp/><sp/><sp/><sp/>model_-&gt;AddURL(f11,<sp/>0,<sp/>ASCIIToUTF16(</highlight><highlight class="stringliteral">&quot;f11a&quot;</highlight><highlight class="normal">),<sp/>GURL(test_base<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;f11a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7234"><highlight class="normal"><sp/><sp/><sp/><sp/>model_-&gt;AddFolder(bb_node,<sp/>2,<sp/>ASCIIToUTF16(</highlight><highlight class="stringliteral">&quot;F2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7235"><highlight class="normal"></highlight></codeline>
<codeline lineno="7236"><highlight class="normal"><sp/><sp/><sp/><sp/>model_-&gt;AddURL(model_-&gt;other_node(),<sp/>0,<sp/>ASCIIToUTF16(</highlight><highlight class="stringliteral">&quot;oa&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="7237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GURL(test_base<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;oa&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BookmarkNode*<sp/>of1<sp/>=</highlight></codeline>
<codeline lineno="7239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model_-&gt;AddFolder(model_-&gt;other_node(),<sp/>1,<sp/>ASCIIToUTF16(</highlight><highlight class="stringliteral">&quot;OF1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7240"><highlight class="normal"><sp/><sp/><sp/><sp/>model_-&gt;AddURL(of1,<sp/>0,<sp/>ASCIIToUTF16(</highlight><highlight class="stringliteral">&quot;of1a&quot;</highlight><highlight class="normal">),<sp/>GURL(test_base<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;of1a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7242" refid="_c_w_e-79_8c_1a799475e9025c1dd3e4cba783455bdced" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a799475e9025c1dd3e4cba783455bdced" kindref="member">ApplyEdits</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>editor_-&gt;ApplyEdits();</highlight></codeline>
<codeline lineno="7244"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7245" refid="_c_w_e-79_8c_1a473dc638f6a16dd34f5ee64ea2717bc5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a799475e9025c1dd3e4cba783455bdced" kindref="member">ApplyEdits</ref>(BookmarkEditorView::EditorNode*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="7246"><highlight class="normal"><sp/><sp/><sp/><sp/>editor_-&gt;ApplyEdits(node);</highlight></codeline>
<codeline lineno="7247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7248" refid="_c_w_e-79_8c_1a5e98a3eff96310b151916e8a640b4c17" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a5e98a3eff96310b151916e8a640b4c17" kindref="member">BookmarkEditorViewTest</ref>()<sp/>:<sp/>model_(nullptr)<sp/>{}</highlight></codeline>
<codeline lineno="7249" refid="_c_w_e-79_8c_1a5f1428d28a63884d81dbacb11f50d7fe" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a5f1428d28a63884d81dbacb11f50d7fe" kindref="member">CreateEditor</ref>(Profile*<sp/>profile,</highlight></codeline>
<codeline lineno="7250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BookmarkNode*<sp/>parent,</highlight></codeline>
<codeline lineno="7251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BookmarkEditor::EditDetails&amp;<sp/>details,</highlight></codeline>
<codeline lineno="7252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BookmarkEditor::Configuration<sp/>configuration)<sp/>{</highlight></codeline>
<codeline lineno="7253"><highlight class="normal"><sp/><sp/><sp/><sp/>editor_.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>BookmarkEditorView(profile,<sp/>parent,<sp/>details,</highlight></codeline>
<codeline lineno="7254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configuration));</highlight></codeline>
<codeline lineno="7255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7256" refid="_c_w_e-79_8c_1a15d474bc3a8286b601b40b46b2278684" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a15d474bc3a8286b601b40b46b2278684" kindref="member">ExpandAndSelect</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7257"><highlight class="normal"><sp/><sp/><sp/><sp/>editor_-&gt;ExpandAndSelect();</highlight></codeline>
<codeline lineno="7258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7259" refid="_c_w_e-79_8c_1aa392ed55ced9a2c375322d8e7bbd475c" refkind="member"><highlight class="normal"><sp/><sp/>BookmarkNode*<sp/><ref refid="_c_w_e-79_8c_1aa392ed55ced9a2c375322d8e7bbd475c" kindref="member">GetMutableNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="7260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">BookmarkNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="_c_w_e-79_8c_1a5a703a2f81e3ac28a451bf1b55919957" kindref="member">GetNode</ref>(name));</highlight></codeline>
<codeline lineno="7261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7262" refid="_c_w_e-79_8c_1a5a703a2f81e3ac28a451bf1b55919957" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BookmarkNode*<sp/><ref refid="_c_w_e-79_8c_1a5a703a2f81e3ac28a451bf1b55919957" kindref="member">GetNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="7263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>model_-&gt;GetMostRecentlyAddedUserNodeForURL(GURL(<ref refid="_c_w_e-79_8c_1aef501a4d35fb6a4c822509e1f951982a" kindref="member">base_path</ref>()<sp/>+<sp/>name));</highlight></codeline>
<codeline lineno="7264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7265" refid="_c_w_e-79_8c_1aa2ae69d244d4592af9094242e4978096" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aa2ae69d244d4592af9094242e4978096" kindref="member">NewFolder</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>editor_-&gt;NewFolder();</highlight></codeline>
<codeline lineno="7267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7268" refid="_c_w_e-79_8c_1a23941640d1011752d544713b8a25d43a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a23941640d1011752d544713b8a25d43a" kindref="member">SetTitleText</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::string16&amp;<sp/>title)<sp/>{</highlight></codeline>
<codeline lineno="7269"><highlight class="normal"><sp/><sp/><sp/><sp/>editor_-&gt;title_tf_-&gt;SetText(title);</highlight></codeline>
<codeline lineno="7270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7271" refid="_c_w_e-79_8c_1a657c98748ac0dd73991353e59de03b26" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a657c98748ac0dd73991353e59de03b26" kindref="member">SetURLText</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::string16&amp;<sp/>text)<sp/>{</highlight></codeline>
<codeline lineno="7272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(editor_-&gt;details_.type<sp/>!=<sp/>BookmarkEditor::EditDetails::NEW_FOLDER)</highlight></codeline>
<codeline lineno="7273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>editor_-&gt;url_tf_-&gt;SetText(text);</highlight></codeline>
<codeline lineno="7274"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7275" refid="_c_w_e-79_8c_1a7053ffcd633baff8bf68078afdbebcb4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a7053ffcd633baff8bf68078afdbebcb4" kindref="member">URLTFHasParent</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(editor_-&gt;details_.type<sp/>==<sp/>BookmarkEditor::EditDetails::NEW_FOLDER)</highlight></codeline>
<codeline lineno="7277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>editor_-&gt;url_tf_-&gt;parent();</highlight></codeline>
<codeline lineno="7279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7280" refid="_c_w_e-79_8c_1aef501a4d35fb6a4c822509e1f951982a" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="_c_w_e-79_8c_1aef501a4d35fb6a4c822509e1f951982a" kindref="member">base_path</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;file:///c:/tmp/&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="7281" refid="_c_w_e-79_8c_1a7fa678964c0966e459a0916e8c498426" refkind="member"><highlight class="normal"><sp/><sp/>BookmarkEditorView::EditorTreeModel*<sp/><ref refid="_c_w_e-79_8c_1a7fa678964c0966e459a0916e8c498426" kindref="member">editor_tree_model</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>editor_-&gt;tree_model_.get();</highlight></codeline>
<codeline lineno="7283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7284"><highlight class="normal">BrandcodeConfigFetcher::BrandcodeConfigFetcher(</highlight></codeline>
<codeline lineno="7285"><highlight class="normal"><sp/><sp/><sp/><sp/>network::mojom::URLLoaderFactory*<sp/>url_loader_factory,</highlight></codeline>
<codeline lineno="7286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FetchCallback&amp;<sp/>callback,</highlight></codeline>
<codeline lineno="7287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL&amp;<sp/>url,</highlight></codeline>
<codeline lineno="7288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>brandcode)</highlight></codeline>
<codeline lineno="7289"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>fetch_callback_(callback)<sp/>{</highlight></codeline>
<codeline lineno="7290"><highlight class="normal"><sp/><sp/>DCHECK(!brandcode.empty());</highlight></codeline>
<codeline lineno="7291"><highlight class="normal"><sp/><sp/>net::NetworkTrafficAnnotationTag<sp/>traffic_annotation<sp/>=</highlight></codeline>
<codeline lineno="7292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>net::DefineNetworkTrafficAnnotation(</highlight><highlight class="stringliteral">&quot;brandcode_config&quot;</highlight><highlight class="normal">,<sp/>R</highlight><highlight class="stringliteral">&quot;(</highlight></codeline>
<codeline lineno="7293"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semantics<sp/>{</highlight></codeline>
<codeline lineno="7294"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sender:<sp/>&quot;Brandcode<sp/>Configuration<sp/>Fetcher&quot;</highlight></codeline>
<codeline lineno="7295"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description:</highlight></codeline>
<codeline lineno="7296"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Chrome<sp/>installation<sp/>can<sp/>be<sp/>non-organic.<sp/>That<sp/>means<sp/>that<sp/>Chrome<sp/>&quot;</highlight></codeline>
<codeline lineno="7297"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;is<sp/>distributed<sp/>by<sp/>partners<sp/>and<sp/>it<sp/>has<sp/>a<sp/>brand<sp/>code<sp/>associated<sp/>&quot;</highlight></codeline>
<codeline lineno="7298"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;with<sp/>that<sp/>partner.<sp/>For<sp/>the<sp/>settings<sp/>reset<sp/>operation,<sp/>Chrome<sp/>needs<sp/>&quot;</highlight></codeline>
<codeline lineno="7299"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;to<sp/>know<sp/>the<sp/>default<sp/>settings<sp/>which<sp/>are<sp/>partner<sp/>specific.&quot;</highlight></codeline>
<codeline lineno="7300"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger:<sp/>&quot;&apos;Reset<sp/>Settings&apos;<sp/>invocation<sp/>from<sp/>Chrome<sp/>settings.&quot;</highlight></codeline>
<codeline lineno="7301"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>&quot;Brandcode.&quot;</highlight></codeline>
<codeline lineno="7302"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destination:<sp/>GOOGLE_OWNED_SERVICE</highlight></codeline>
<codeline lineno="7303"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7304"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>policy<sp/>{</highlight></codeline>
<codeline lineno="7305"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cookies_allowed:<sp/>NO</highlight></codeline>
<codeline lineno="7306"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setting:</highlight></codeline>
<codeline lineno="7307"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;This<sp/>feature<sp/>cannot<sp/>be<sp/>disabled<sp/>and<sp/>is<sp/>only<sp/>invoked<sp/>by<sp/>user<sp/>&quot;</highlight></codeline>
<codeline lineno="7308"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;request.&quot;</highlight></codeline>
<codeline lineno="7309"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>policy_exception_justification:</highlight></codeline>
<codeline lineno="7310"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Not<sp/>implemented,<sp/>considered<sp/>not<sp/>useful<sp/>as<sp/>enterprises<sp/>don&apos;t<sp/>need<sp/>&quot;</highlight></codeline>
<codeline lineno="7311"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;to<sp/>install<sp/>Chrome<sp/>in<sp/>a<sp/>non-organic<sp/>fashion.&quot;</highlight></codeline>
<codeline lineno="7312"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})&quot;);</highlight></codeline>
<codeline lineno="7313"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resource_request<sp/>=<sp/>std::make_unique&lt;network::ResourceRequest&gt;();</highlight></codeline>
<codeline lineno="7314"><highlight class="normal"><sp/><sp/>resource_request-&gt;url<sp/>=<sp/>url;</highlight></codeline>
<codeline lineno="7315"><highlight class="normal"><sp/><sp/>resource_request-&gt;load_flags<sp/>=<sp/>net::LOAD_DO_NOT_SEND_COOKIES<sp/>|</highlight></codeline>
<codeline lineno="7316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net::LOAD_DO_NOT_SAVE_COOKIES<sp/>|</highlight></codeline>
<codeline lineno="7317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net::LOAD_DISABLE_CACHE;</highlight></codeline>
<codeline lineno="7318"><highlight class="normal"><sp/><sp/>resource_request-&gt;method<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;POST&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7319"><highlight class="normal"><sp/><sp/>resource_request-&gt;headers.SetHeader(</highlight><highlight class="stringliteral">&quot;Accept&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;text/xml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7320"><highlight class="normal"><sp/><sp/>simple_url_loader_<sp/>=<sp/><ref refid="_c_w_e-787_8c_1afab6f737b873d2fd9852d7f602763af3" kindref="member">network::SimpleURLLoader::Create</ref>(</highlight></codeline>
<codeline lineno="7321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move(resource_request),<sp/>traffic_annotation);</highlight></codeline>
<codeline lineno="7322"><highlight class="normal"><sp/><sp/>simple_url_loader_-&gt;AttachStringForUpload(<ref refid="_c_w_e-79_8c_1a53522aa297007b22a828ac79ff8ff416" kindref="member">GetUploadData</ref>(brandcode),</highlight></codeline>
<codeline lineno="7323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;text/xml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7324"><highlight class="normal"><sp/><sp/>simple_url_loader_-&gt;DownloadToStringOfUnboundedSizeUntilCrashAndDie(</highlight></codeline>
<codeline lineno="7325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>url_loader_factory,</highlight></codeline>
<codeline lineno="7326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::BindOnce(&amp;BrandcodeConfigFetcher::OnSimpleLoaderComplete,</highlight></codeline>
<codeline lineno="7327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::Unretained(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="7328"><highlight class="normal"><sp/><sp/>download_timer_.Start(FROM_HERE,</highlight></codeline>
<codeline lineno="7329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::TimeDelta::FromSeconds(kDownloadTimeoutSec),</highlight></codeline>
<codeline lineno="7330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;BrandcodeConfigFetcher::OnDownloadTimeout);</highlight></codeline>
<codeline lineno="7332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7333"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlConfigParser::CharactersImpl(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xmlChar*<sp/>ch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="7334"><highlight class="normal"><sp/><sp/>XmlConfigParser*<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=<sp/>FromContext(ctx);</highlight></codeline>
<codeline lineno="7335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;IsParsingData())<sp/>{</highlight></codeline>
<codeline lineno="7336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;master_prefs_<sp/>+=</highlight></codeline>
<codeline lineno="7337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(reinterpret_cast&lt;const<sp/>char*&gt;(ch),<sp/>len);</highlight></codeline>
<codeline lineno="7338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlConfigParser::EndElementImpl(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xmlChar*<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="7341"><highlight class="normal"><sp/><sp/>XmlConfigParser*<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=<sp/>FromContext(ctx);</highlight></codeline>
<codeline lineno="7342"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;elements_.pop_back();</highlight></codeline>
<codeline lineno="7343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7344"><highlight class="normal">XmlConfigParser*<sp/>XmlConfigParser::FromContext(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ctx)<sp/>{</highlight></codeline>
<codeline lineno="7345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">XmlConfigParser*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ctx);</highlight></codeline>
<codeline lineno="7346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7347"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XmlConfigParser::IsParsingData()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>data_path[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;response&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;app&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="7349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elements_.size()<sp/>==<sp/>arraysize(data_path)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::equal(elements_.begin(),<sp/>elements_.end(),<sp/>data_path);</highlight></codeline>
<codeline lineno="7351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlConfigParser::Parse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>input_buffer,</highlight></codeline>
<codeline lineno="7353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string*<sp/>output_buffer)<sp/>{</highlight></codeline>
<codeline lineno="7354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>logging::LOG_WARNING;</highlight></codeline>
<codeline lineno="7355"><highlight class="normal"></highlight></codeline>
<codeline lineno="7356"><highlight class="normal"><sp/><sp/>DCHECK(output_buffer);</highlight></codeline>
<codeline lineno="7357"><highlight class="normal"><sp/><sp/>xmlSAXHandler<sp/>sax_handler<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="7358"><highlight class="normal"><sp/><sp/>sax_handler.startElement<sp/>=<sp/>&amp;XmlConfigParser::StartElementImpl;</highlight></codeline>
<codeline lineno="7359"><highlight class="normal"><sp/><sp/>sax_handler.endElement<sp/>=<sp/>&amp;XmlConfigParser::EndElementImpl;</highlight></codeline>
<codeline lineno="7360"><highlight class="normal"><sp/><sp/>sax_handler.characters<sp/>=<sp/>&amp;XmlConfigParser::CharactersImpl;</highlight></codeline>
<codeline lineno="7361"><highlight class="normal"><sp/><sp/>XmlConfigParser<sp/>parser;</highlight></codeline>
<codeline lineno="7362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>xmlSAXUserParseMemory(&amp;sax_handler,</highlight></codeline>
<codeline lineno="7363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;parser,</highlight></codeline>
<codeline lineno="7364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_buffer.c_str(),</highlight></codeline>
<codeline lineno="7365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_buffer.size());</highlight></codeline>
<codeline lineno="7366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)<sp/>{</highlight></codeline>
<codeline lineno="7367"><highlight class="normal"><sp/><sp/><sp/><sp/>VLOG(LOG_WARNING)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>brandcoded<sp/>master<sp/>prefs,<sp/>err=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error;</highlight></codeline>
<codeline lineno="7368"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7369"><highlight class="normal"><sp/><sp/><sp/><sp/>output_buffer-&gt;swap(parser.master_prefs_);</highlight></codeline>
<codeline lineno="7370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7372"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlConfigParser::StartElementImpl(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ctx,</highlight></codeline>
<codeline lineno="7373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xmlChar*<sp/>name,</highlight></codeline>
<codeline lineno="7374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xmlChar**<sp/>atts)<sp/>{</highlight></codeline>
<codeline lineno="7375"><highlight class="normal"><sp/><sp/>std::string<sp/>node_name(XMLCharToString(name));</highlight></codeline>
<codeline lineno="7376"><highlight class="normal"><sp/><sp/>XmlConfigParser*<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=<sp/>FromContext(ctx);</highlight></codeline>
<codeline lineno="7377"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;elements_.push_back(node_name);</highlight></codeline>
<codeline lineno="7378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;IsParsingData())</highlight></codeline>
<codeline lineno="7379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;master_prefs_.clear();</highlight></codeline>
<codeline lineno="7380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7381"><highlight class="normal">std::string<sp/>XmlConfigParser::XMLCharToString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xmlChar*<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(reinterpret_cast&lt;const<sp/>char*&gt;(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>));</highlight></codeline>
<codeline lineno="7383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7384"><highlight class="normal">XmlConfigParser::XmlConfigParser()<sp/>{}</highlight></codeline>
<codeline lineno="7385"><highlight class="normal">XmlConfigParser::~XmlConfigParser()<sp/>{}</highlight></codeline>
<codeline lineno="7386" refid="_c_w_e-79_8c_1a3a5eea318d1ad84bd99f382c4b048bf2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a3a5eea318d1ad84bd99f382c4b048bf2" kindref="member">ActivateProfile</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile_to_activate_)<sp/>{</highlight></codeline>
<codeline lineno="7388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Browser*<sp/><ref refid="_c_w_e-79_8c_1ad08fd70a885a650dfed64c57ed85082c" kindref="member">browser</ref><sp/>=<sp/>chrome::FindBrowserWithProfile(profile_to_activate_);</highlight></codeline>
<codeline lineno="7389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1ad08fd70a885a650dfed64c57ed85082c" kindref="member">browser</ref>)</highlight></codeline>
<codeline lineno="7390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ad08fd70a885a650dfed64c57ed85082c" kindref="member">browser</ref>-&gt;window()-&gt;Activate();</highlight></codeline>
<codeline lineno="7391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>profile_to_activate_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7393"><highlight class="normal"><sp/><sp/><sp/><sp/>activated_profile_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7395"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StartupBrowserCreator::ActivatedProfile()<sp/>{</highlight></codeline>
<codeline lineno="7396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>profile_launch_observer.Get().activated_profile();</highlight></codeline>
<codeline lineno="7397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7398"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StartupBrowserCreator::AddFirstRunTab(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL&amp;<sp/>url)<sp/>{</highlight></codeline>
<codeline lineno="7399"><highlight class="normal"><sp/><sp/>first_run_tabs_.push_back(url);</highlight></codeline>
<codeline lineno="7400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7401" refid="_c_w_e-79_8c_1abf1cc88042b50dc4f491922ce30a8272" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1abf1cc88042b50dc4f491922ce30a8272" kindref="member">AddLaunched</ref>(Profile*<sp/>profile)<sp/>{</highlight></codeline>
<codeline lineno="7402"><highlight class="normal"><sp/><sp/><sp/><sp/>launched_profiles_.insert(profile);</highlight></codeline>
<codeline lineno="7403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chrome::FindBrowserWithProfile(profile))<sp/>{</highlight></codeline>
<codeline lineno="7404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>opened_profiles_.insert(profile);</highlight></codeline>
<codeline lineno="7405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7407" refid="_c_w_e-79_8c_1a0461459310023e2c619aa2066de931d2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a0461459310023e2c619aa2066de931d2" kindref="member">CanOpenProfileOnStartup</ref>(Profile*<sp/>profile)<sp/>{</highlight></codeline>
<codeline lineno="7408"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7410"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7411"><highlight class="normal"><sp/><sp/>ProfileAttributesEntry*<sp/>entry<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_browser_process-&gt;profile_manager()</highlight></codeline>
<codeline lineno="7413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetProfileAttributesStorage()</highlight></codeline>
<codeline lineno="7414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.GetProfileAttributesWithPath(profile-&gt;GetPath(),<sp/>&amp;entry)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entry-&gt;IsSigninRequired())<sp/>{</highlight></codeline>
<codeline lineno="7416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7418"><highlight class="normal"></highlight></codeline>
<codeline lineno="7419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!profile-&gt;IsGuestSession()<sp/>&amp;&amp;<sp/>!profile-&gt;IsSystemProfile())<sp/>||</highlight></codeline>
<codeline lineno="7420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(chrome::GetBrowserCount(profile-&gt;GetOffTheRecordProfile())<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="7421"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7423" refid="_c_w_e-79_8c_1aa71d36872f416feaa853788a7a7a7ef8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aa71d36872f416feaa853788a7a7a7ef8" kindref="member">Clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7424"><highlight class="normal"><sp/><sp/><sp/><sp/>launched_profiles_.clear();</highlight></codeline>
<codeline lineno="7425"><highlight class="normal"><sp/><sp/><sp/><sp/>opened_profiles_.clear();</highlight></codeline>
<codeline lineno="7426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7427" refid="_c_w_e-79_8c_1a94cc45c270cb398c7515f42ad4480d3e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a94cc45c270cb398c7515f42ad4480d3e" kindref="member">DumpBrowserHistograms</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>output_file)<sp/>{</highlight></codeline>
<codeline lineno="7428"><highlight class="normal"><sp/><sp/>std::string<sp/>output_string(</highlight></codeline>
<codeline lineno="7429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::StatisticsRecorder::ToJSON(base::JSON_VERBOSITY_LEVEL_FULL));</highlight></codeline>
<codeline lineno="7430"><highlight class="normal"></highlight></codeline>
<codeline lineno="7431"><highlight class="normal"><sp/><sp/>base::ScopedBlockingCall<sp/>scoped_blocking_call(FROM_HERE,</highlight></codeline>
<codeline lineno="7432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::BlockingType::MAY_BLOCK);</highlight></codeline>
<codeline lineno="7433"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-22_8c_1a55a1a69e6128ea62ed2420381eb7ab85" kindref="member">base::WriteFile</ref>(output_file,<sp/>output_string.data(),</highlight></codeline>
<codeline lineno="7434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(output_string.size()));</highlight></codeline>
<codeline lineno="7435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7436" refid="_c_w_e-79_8c_1a65f53bf7104be1327e2eee180253739f" refkind="member"><highlight class="normal">Profile*<sp/><ref refid="_c_w_e-79_8c_1a65f53bf7104be1327e2eee180253739f" kindref="member">GetFallbackStartupProfile</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7437"><highlight class="normal"><sp/><sp/>ProfileManager*<sp/>profile_manager<sp/>=<sp/>g_browser_process-&gt;profile_manager();</highlight></codeline>
<codeline lineno="7438"><highlight class="normal"></highlight></codeline>
<codeline lineno="7439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>storage<sp/>=<sp/>&amp;profile_manager-&gt;GetProfileAttributesStorage();</highlight></codeline>
<codeline lineno="7440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Profile*<sp/>profile<sp/>:<sp/>ProfileManager::GetLastOpenedProfiles())<sp/>{</highlight></codeline>
<codeline lineno="7441"><highlight class="normal"><sp/><sp/><sp/><sp/>ProfileAttributesEntry*<sp/>entry;</highlight></codeline>
<codeline lineno="7442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_entry<sp/>=<sp/>storage-&gt;GetProfileAttributesWithPath(profile-&gt;GetPath(),</highlight></codeline>
<codeline lineno="7443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;entry);</highlight></codeline>
<codeline lineno="7444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_entry<sp/>||<sp/>!entry-&gt;IsSigninRequired())</highlight></codeline>
<codeline lineno="7445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>profile;</highlight></codeline>
<codeline lineno="7446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7447"><highlight class="normal"></highlight></codeline>
<codeline lineno="7448"><highlight class="normal"><sp/><sp/>Profile*<sp/>guest_profile<sp/>=</highlight></codeline>
<codeline lineno="7449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>profile_manager-&gt;GetProfile(ProfileManager::GetGuestProfilePath());</highlight></codeline>
<codeline lineno="7450"><highlight class="normal"><sp/><sp/>Profile*<sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref><sp/>=</highlight></codeline>
<codeline lineno="7451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>profile_manager-&gt;GetProfile(ProfileManager::GetSystemProfilePath());</highlight></codeline>
<codeline lineno="7452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(guest_profile<sp/>&amp;&amp;<sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>)</highlight></codeline>
<codeline lineno="7453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>guest_profile;</highlight></codeline>
<codeline lineno="7454"><highlight class="normal"></highlight></codeline>
<codeline lineno="7455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ProfileAttributesEntry*<sp/>entry<sp/>:<sp/>storage-&gt;GetAllProfilesAttributes())<sp/>{</highlight></codeline>
<codeline lineno="7456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entry-&gt;IsSigninRequired())<sp/>{</highlight></codeline>
<codeline lineno="7457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Profile*<sp/>profile<sp/>=<sp/>profile_manager-&gt;GetProfile(entry-&gt;GetPath());</highlight></codeline>
<codeline lineno="7458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile)</highlight></codeline>
<codeline lineno="7459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>profile;</highlight></codeline>
<codeline lineno="7460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7462"><highlight class="normal"></highlight></codeline>
<codeline lineno="7463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7465" refid="_c_w_e-79_8c_1a2da8a76e03b50546c1e9983ab198635b" refkind="member"><highlight class="normal">Profile*<sp/><ref refid="_c_w_e-79_8c_1a2da8a76e03b50546c1e9983ab198635b" kindref="member">GetStartupProfile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>user_data_dir,</highlight></codeline>
<codeline lineno="7466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::CommandLine&amp;<sp/>command_line)<sp/>{</highlight></codeline>
<codeline lineno="7467"><highlight class="normal"><sp/><sp/>ProfileManager*<sp/>profile_manager<sp/>=<sp/>g_browser_process-&gt;profile_manager();</highlight></codeline>
<codeline lineno="7468"><highlight class="normal"></highlight></codeline>
<codeline lineno="7469"><highlight class="normal"><sp/><sp/>base::FilePath<sp/>profile_path<sp/>=</highlight></codeline>
<codeline lineno="7470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a1084f5304152cad3d582f0560042eede" kindref="member">GetStartupProfilePath</ref>(user_data_dir,<sp/>command_line);</highlight></codeline>
<codeline lineno="7471"><highlight class="normal"><sp/><sp/>Profile*<sp/>profile<sp/>=<sp/>profile_manager-&gt;GetProfile(profile_path);</highlight></codeline>
<codeline lineno="7472"><highlight class="normal"></highlight></codeline>
<codeline lineno="7473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>storage<sp/>=<sp/>&amp;profile_manager-&gt;GetProfileAttributesStorage();</highlight></codeline>
<codeline lineno="7474"><highlight class="normal"><sp/><sp/>ProfileAttributesEntry*<sp/>entry;</highlight></codeline>
<codeline lineno="7475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_entry<sp/>=<sp/>storage-&gt;GetProfileAttributesWithPath(profile_path,<sp/>&amp;entry);</highlight></codeline>
<codeline lineno="7476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_entry<sp/>&amp;&amp;<sp/>(!entry-&gt;IsSigninRequired()<sp/>||<sp/>!profile))<sp/>{</highlight></codeline>
<codeline lineno="7477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>profile;</highlight></codeline>
<codeline lineno="7478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7479"><highlight class="normal"></highlight></codeline>
<codeline lineno="7480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>profile_manager-&gt;GetProfile(ProfileManager::GetSystemProfilePath())<sp/>?</highlight></codeline>
<codeline lineno="7481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile_manager-&gt;GetProfile(ProfileManager::GetGuestProfilePath())<sp/>:</highlight></codeline>
<codeline lineno="7482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7484" refid="_c_w_e-79_8c_1a1084f5304152cad3d582f0560042eede" refkind="member"><highlight class="normal">base::FilePath<sp/><ref refid="_c_w_e-79_8c_1a1084f5304152cad3d582f0560042eede" kindref="member">GetStartupProfilePath</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>user_data_dir,</highlight></codeline>
<codeline lineno="7485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::CommandLine&amp;<sp/>command_line)<sp/>{</highlight></codeline>
<codeline lineno="7486"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command_line.HasSwitch(switches::kNotificationLaunchId))<sp/>{</highlight></codeline>
<codeline lineno="7488"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>profile_id<sp/>=<sp/>NotificationLaunchId::GetProfileIdFromLaunchId(</highlight></codeline>
<codeline lineno="7489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>command_line.GetSwitchValueNative(switches::kNotificationLaunchId));</highlight></codeline>
<codeline lineno="7490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!profile_id.empty())<sp/>{</highlight></codeline>
<codeline lineno="7491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>user_data_dir.Append(</highlight></codeline>
<codeline lineno="7492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::FilePath(base::UTF8ToUTF16(profile_id)));</highlight></codeline>
<codeline lineno="7493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7495"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7496"><highlight class="normal"></highlight></codeline>
<codeline lineno="7497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1add0f89767741bb2713880593d9a3b94a" kindref="member">IsGuestModeEnforced</ref>(command_line,<sp/></highlight><highlight class="comment">/*<sp/>show_warning=<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="7498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>profiles::GetDefaultProfileDir(user_data_dir);</highlight></codeline>
<codeline lineno="7499"><highlight class="normal"></highlight></codeline>
<codeline lineno="7500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command_line.HasSwitch(switches::kProfileDirectory))<sp/>{</highlight></codeline>
<codeline lineno="7501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>user_data_dir.Append(</highlight></codeline>
<codeline lineno="7502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>command_line.GetSwitchValuePath(switches::kProfileDirectory));</highlight></codeline>
<codeline lineno="7503"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7504"><highlight class="normal"></highlight></codeline>
<codeline lineno="7505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_browser_process-&gt;profile_manager()-&gt;GetLastUsedProfileDir(</highlight></codeline>
<codeline lineno="7506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>user_data_dir);</highlight></codeline>
<codeline lineno="7507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7508"><highlight class="normal">std::vector&lt;GURL&gt;<sp/>StartupBrowserCreator::GetURLsFromCommandLine(</highlight></codeline>
<codeline lineno="7509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::CommandLine&amp;<sp/>command_line,</highlight></codeline>
<codeline lineno="7510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>cur_dir,</highlight></codeline>
<codeline lineno="7511"><highlight class="normal"><sp/><sp/><sp/><sp/>Profile*<sp/>profile)<sp/>{</highlight></codeline>
<codeline lineno="7512"><highlight class="normal"><sp/><sp/>DCHECK(profile);</highlight></codeline>
<codeline lineno="7513"><highlight class="normal"></highlight></codeline>
<codeline lineno="7514"><highlight class="normal"><sp/><sp/>std::vector&lt;GURL&gt;<sp/>urls;</highlight></codeline>
<codeline lineno="7515"><highlight class="normal"></highlight></codeline>
<codeline lineno="7516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::CommandLine::StringVector&amp;<sp/>params<sp/>=<sp/>command_line.GetArgs();</highlight></codeline>
<codeline lineno="7517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>params.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7518"><highlight class="normal"><sp/><sp/><sp/><sp/>base::FilePath<sp/>param<sp/>=<sp/>base::FilePath(params[i]);</highlight></codeline>
<codeline lineno="7519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((param.value().size()<sp/>&gt;<sp/>2)<sp/>&amp;&amp;<sp/>(param.value()[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(param.value()[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="7521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GURL<sp/>url(GetDefaultSearchURLForSearchTerms(</highlight></codeline>
<codeline lineno="7522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TemplateURLServiceFactory::GetForProfile(profile),</highlight></codeline>
<codeline lineno="7523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.LossyDisplayName().substr(2)));</highlight></codeline>
<codeline lineno="7524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(url.is_valid())<sp/>{</highlight></codeline>
<codeline lineno="7525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>urls.push_back(url);</highlight></codeline>
<codeline lineno="7526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7529"><highlight class="normal"></highlight></codeline>
<codeline lineno="7530"><highlight class="normal"></highlight></codeline>
<codeline lineno="7531"><highlight class="normal"><sp/><sp/><sp/><sp/>GURL<sp/>url<sp/>=<sp/>GURL(param.MaybeAsASCII());</highlight></codeline>
<codeline lineno="7532"><highlight class="normal"></highlight></codeline>
<codeline lineno="7533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!url.is_valid()<sp/>||<sp/>url.SchemeIsFile())<sp/>{</highlight></codeline>
<codeline lineno="7534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::ThreadRestrictions::ScopedAllowIO<sp/>allow_io;</highlight></codeline>
<codeline lineno="7535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>url<sp/>=<sp/>url_formatter::FixupRelativeFile(cur_dir,<sp/>param);</highlight></codeline>
<codeline lineno="7536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!url.is_valid())</highlight></codeline>
<codeline lineno="7538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7539"><highlight class="normal"></highlight></codeline>
<codeline lineno="7540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL<sp/>settings_url<sp/>=<sp/>GURL(chrome::kChromeUISettingsURL);</highlight></codeline>
<codeline lineno="7541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>url_points_to_an_approved_settings_page<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7542"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7543"><highlight class="normal"><sp/><sp/><sp/><sp/>url_points_to_an_approved_settings_page<sp/>=</highlight></codeline>
<codeline lineno="7544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>url.GetOrigin()<sp/>==<sp/>settings_url.GetOrigin();</highlight></codeline>
<codeline lineno="7545"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL<sp/>reset_settings_url<sp/>=</highlight></codeline>
<codeline lineno="7547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>settings_url.Resolve(chrome::kResetProfileSettingsSubPage);</highlight></codeline>
<codeline lineno="7548"><highlight class="normal"><sp/><sp/><sp/><sp/>url_points_to_an_approved_settings_page<sp/>=<sp/>url<sp/>==<sp/>reset_settings_url;</highlight></codeline>
<codeline lineno="7549"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL<sp/>reset_settings_url_with_cct_hash<sp/>=<sp/>reset_settings_url.Resolve(</highlight></codeline>
<codeline lineno="7551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(</highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="7552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>settings::ResetSettingsHandler::kCctResetSettingsHash);</highlight></codeline>
<codeline lineno="7553"><highlight class="normal"><sp/><sp/><sp/><sp/>url_points_to_an_approved_settings_page<sp/>=</highlight></codeline>
<codeline lineno="7554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>url_points_to_an_approved_settings_page<sp/>||</highlight></codeline>
<codeline lineno="7555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>url<sp/>==<sp/>reset_settings_url_with_cct_hash;</highlight></codeline>
<codeline lineno="7556"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7557"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7558"><highlight class="normal"></highlight></codeline>
<codeline lineno="7559"><highlight class="normal"><sp/><sp/><sp/><sp/>ChildProcessSecurityPolicy*<sp/>policy<sp/>=</highlight></codeline>
<codeline lineno="7560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChildProcessSecurityPolicy::GetInstance();</highlight></codeline>
<codeline lineno="7561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(policy-&gt;IsWebSafeScheme(url.scheme())<sp/>||</highlight></codeline>
<codeline lineno="7562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>url.SchemeIs(url::kFileScheme)<sp/>||</highlight></codeline>
<codeline lineno="7563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>url_points_to_an_approved_settings_page<sp/>||</highlight></codeline>
<codeline lineno="7564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(url.spec().compare(url::kAboutBlankURL)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="7565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>urls.push_back(url);</highlight></codeline>
<codeline lineno="7566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>urls;</highlight></codeline>
<codeline lineno="7569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7570" refid="_c_w_e-79_8c_1a9528ab292b117f4c33a04ad5737b5941" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a9528ab292b117f4c33a04ad5737b5941" kindref="member">HasBeenLaunched</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Profile*<sp/>profile)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>launched_profiles_.find(profile)<sp/>!=<sp/>launched_profiles_.end();</highlight></codeline>
<codeline lineno="7572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7573" refid="_c_w_e-79_8c_1ade2b28dcc6be492e91f0e000117d2516" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ade2b28dcc6be492e91f0e000117d2516" kindref="member">HasPendingUncleanExit</ref>(Profile*<sp/>profile)<sp/>{</highlight></codeline>
<codeline lineno="7574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>profile-&gt;GetLastSessionExitType()<sp/>==<sp/>Profile::EXIT_CRASHED<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!profile_launch_observer.Get().HasBeenLaunched(profile);</highlight></codeline>
<codeline lineno="7576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7577"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StartupBrowserCreator::InSynchronousProfileLaunch()<sp/>{</highlight></codeline>
<codeline lineno="7578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in_synchronous_profile_launch_;</highlight></codeline>
<codeline lineno="7579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7580" refid="_c_w_e-79_8c_1add0f89767741bb2713880593d9a3b94a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1add0f89767741bb2713880593d9a3b94a" kindref="member">IsGuestModeEnforced</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::CommandLine&amp;<sp/>command_line,</highlight></codeline>
<codeline lineno="7581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show_warning)<sp/>{</highlight></codeline>
<codeline lineno="7582"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_LINUX)<sp/>||<sp/>defined(OS_WIN)<sp/>||<sp/>defined(OS_MACOSX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7583"><highlight class="normal"><sp/><sp/>PrefService*<sp/>service<sp/>=<sp/>g_browser_process-&gt;local_state();</highlight></codeline>
<codeline lineno="7584"><highlight class="normal"><sp/><sp/>DCHECK(service);</highlight></codeline>
<codeline lineno="7585"><highlight class="normal"></highlight></codeline>
<codeline lineno="7586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command_line.HasSwitch(switches::kGuest)<sp/>||</highlight></codeline>
<codeline lineno="7587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>service-&gt;GetBoolean(prefs::kBrowserGuestModeEnforced))<sp/>{</highlight></codeline>
<codeline lineno="7588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(service-&gt;GetBoolean(prefs::kBrowserGuestModeEnabled))</highlight></codeline>
<codeline lineno="7589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(show_warning)<sp/>{</highlight></codeline>
<codeline lineno="7591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(WARNING)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Guest<sp/>mode<sp/>disabled<sp/>by<sp/>policy,<sp/>launching<sp/>a<sp/>normal<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;browser<sp/>session.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7595"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7598"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StartupBrowserCreator::LaunchBrowser(</highlight></codeline>
<codeline lineno="7599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::CommandLine&amp;<sp/>command_line,</highlight></codeline>
<codeline lineno="7600"><highlight class="normal"><sp/><sp/><sp/><sp/>Profile*<sp/>profile,</highlight></codeline>
<codeline lineno="7601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>cur_dir,</highlight></codeline>
<codeline lineno="7602"><highlight class="normal"><sp/><sp/><sp/><sp/>chrome::startup::IsProcessStartup<sp/>process_startup,</highlight></codeline>
<codeline lineno="7603"><highlight class="normal"><sp/><sp/><sp/><sp/>chrome::startup::IsFirstRun<sp/>is_first_run)<sp/>{</highlight></codeline>
<codeline lineno="7604"><highlight class="normal"><sp/><sp/>DCHECK(profile);</highlight></codeline>
<codeline lineno="7605"><highlight class="normal"><sp/><sp/>in_synchronous_profile_launch_<sp/>=</highlight></codeline>
<codeline lineno="7606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>process_startup<sp/>==<sp/>chrome::startup::IS_PROCESS_STARTUP;</highlight></codeline>
<codeline lineno="7607"><highlight class="normal"></highlight></codeline>
<codeline lineno="7608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IncognitoModePrefs::ShouldLaunchIncognito(command_line,</highlight></codeline>
<codeline lineno="7609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;GetPrefs()))<sp/>{</highlight></codeline>
<codeline lineno="7610"><highlight class="normal"><sp/><sp/><sp/><sp/>profile<sp/>=<sp/>profile-&gt;GetOffTheRecordProfile();</highlight></codeline>
<codeline lineno="7611"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command_line.HasSwitch(switches::kIncognito))<sp/>{</highlight></codeline>
<codeline lineno="7612"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(WARNING)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Incognito<sp/>mode<sp/>disabled<sp/>by<sp/>policy,<sp/>launching<sp/>a<sp/>normal<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;browser<sp/>session.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7614"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7615"><highlight class="normal"></highlight></codeline>
<codeline lineno="7616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1add0f89767741bb2713880593d9a3b94a" kindref="member">IsGuestModeEnforced</ref>(command_line,<sp/></highlight><highlight class="comment">/*<sp/>show_warning=<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="7617"><highlight class="normal"><sp/><sp/><sp/><sp/>profile<sp/>=<sp/>g_browser_process-&gt;profile_manager()</highlight></codeline>
<codeline lineno="7618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetProfile(ProfileManager::GetGuestProfilePath())</highlight></codeline>
<codeline lineno="7619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetOffTheRecordProfile();</highlight></codeline>
<codeline lineno="7620"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7621"><highlight class="normal"></highlight></codeline>
<codeline lineno="7622"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command_line.HasSwitch(credential_provider::kGcpwSigninSwitch))</highlight></codeline>
<codeline lineno="7624"><highlight class="normal"><sp/><sp/><sp/><sp/>profile<sp/>=<sp/>profile-&gt;GetOffTheRecordProfile();</highlight></codeline>
<codeline lineno="7625"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7626"><highlight class="normal"></highlight></codeline>
<codeline lineno="7627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsSilentLaunchEnabled(command_line,<sp/>profile))<sp/>{</highlight></codeline>
<codeline lineno="7628"><highlight class="normal"><sp/><sp/><sp/><sp/>StartupBrowserCreatorImpl<sp/>lwp(cur_dir,<sp/>command_line,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>is_first_run);</highlight></codeline>
<codeline lineno="7629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;GURL&gt;<sp/>urls_to_launch<sp/>=</highlight></codeline>
<codeline lineno="7630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetURLsFromCommandLine(command_line,<sp/>cur_dir,<sp/>profile);</highlight></codeline>
<codeline lineno="7631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>launched<sp/>=</highlight></codeline>
<codeline lineno="7632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lwp.Launch(profile,<sp/>urls_to_launch,<sp/>in_synchronous_profile_launch_);</highlight></codeline>
<codeline lineno="7633"><highlight class="normal"><sp/><sp/><sp/><sp/>in_synchronous_profile_launch_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!launched)<sp/>{</highlight></codeline>
<codeline lineno="7635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(ERROR)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;launch<sp/>error&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7638"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7639"><highlight class="normal"><sp/><sp/><sp/><sp/>in_synchronous_profile_launch_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7640"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7641"><highlight class="normal"></highlight></codeline>
<codeline lineno="7642"><highlight class="normal"><sp/><sp/>profile_launch_observer.Get().AddLaunched(profile);</highlight></codeline>
<codeline lineno="7643"><highlight class="normal"></highlight></codeline>
<codeline lineno="7644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7646"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StartupBrowserCreator::LaunchBrowserForLastProfiles(</highlight></codeline>
<codeline lineno="7647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::CommandLine&amp;<sp/>command_line,</highlight></codeline>
<codeline lineno="7648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>cur_dir,</highlight></codeline>
<codeline lineno="7649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>process_startup,</highlight></codeline>
<codeline lineno="7650"><highlight class="normal"><sp/><sp/><sp/><sp/>Profile*<sp/>last_used_profile,</highlight></codeline>
<codeline lineno="7651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Profiles&amp;<sp/>last_opened_profiles)<sp/>{</highlight></codeline>
<codeline lineno="7652"><highlight class="normal"><sp/><sp/>chrome::startup::IsProcessStartup<sp/>is_process_startup<sp/>=<sp/>process_startup<sp/>?</highlight></codeline>
<codeline lineno="7653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chrome::startup::IS_PROCESS_STARTUP<sp/>:</highlight></codeline>
<codeline lineno="7654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chrome::startup::IS_NOT_PROCESS_STARTUP;</highlight></codeline>
<codeline lineno="7655"><highlight class="normal"><sp/><sp/>chrome::startup::IsFirstRun<sp/>is_first_run<sp/>=<sp/>first_run::IsChromeFirstRun()<sp/>?</highlight></codeline>
<codeline lineno="7656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chrome::startup::IS_FIRST_RUN<sp/>:<sp/>chrome::startup::IS_NOT_FIRST_RUN;</highlight></codeline>
<codeline lineno="7657"><highlight class="normal"></highlight></codeline>
<codeline lineno="7658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>was_windows_notification_launch<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7659"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7660"><highlight class="normal"><sp/><sp/>was_windows_notification_launch<sp/>=</highlight></codeline>
<codeline lineno="7661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>command_line.HasSwitch(switches::kNotificationLaunchId);</highlight></codeline>
<codeline lineno="7662"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7663"><highlight class="normal"></highlight></codeline>
<codeline lineno="7664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_opened_profiles.empty()<sp/>||<sp/>was_windows_notification_launch)<sp/>{</highlight></codeline>
<codeline lineno="7665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a0461459310023e2c619aa2066de931d2" kindref="member">CanOpenProfileOnStartup</ref>(last_used_profile))<sp/>{</highlight></codeline>
<codeline lineno="7666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Profile*<sp/>profile_to_open<sp/>=</highlight></codeline>
<codeline lineno="7667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_used_profile-&gt;IsGuestSession()</highlight></codeline>
<codeline lineno="7668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>last_used_profile-&gt;GetOffTheRecordProfile()</highlight></codeline>
<codeline lineno="7669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>last_used_profile;</highlight></codeline>
<codeline lineno="7670"><highlight class="normal"></highlight></codeline>
<codeline lineno="7671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LaunchBrowser(command_line,<sp/>profile_to_open,<sp/>cur_dir,</highlight></codeline>
<codeline lineno="7672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_process_startup,<sp/>is_first_run);</highlight></codeline>
<codeline lineno="7673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7674"><highlight class="normal"></highlight></codeline>
<codeline lineno="7675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ac8171bca67c0ccf78b4d306ee023810b" kindref="member">ShowUserManagerOnStartup</ref>(command_line);</highlight></codeline>
<codeline lineno="7676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7677"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ProcessLastOpenedProfiles(command_line,<sp/>cur_dir,<sp/>is_process_startup,</highlight></codeline>
<codeline lineno="7679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_first_run,<sp/>last_used_profile,</highlight></codeline>
<codeline lineno="7680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_opened_profiles);</highlight></codeline>
<codeline lineno="7681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7682" refid="_c_w_e-79_8c_1a954e522dd383113c24b63bb1fafbadc5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a954e522dd383113c24b63bb1fafbadc5" kindref="member">MaybeActivateProfile</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!profile_to_activate_)</highlight></codeline>
<codeline lineno="7684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>launched_profiles_.begin();</highlight></codeline>
<codeline lineno="7686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>!=<sp/>launched_profiles_.end();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opened_profiles_.find(*i)<sp/>==<sp/>opened_profiles_.end())</highlight></codeline>
<codeline lineno="7688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7690"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-787_8c_1afc515de5e9a1bacf5ffcf5f764cbb51c" kindref="member">base::PostTask</ref>(FROM_HERE,<sp/>{BrowserThread::UI},</highlight></codeline>
<codeline lineno="7691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::BindOnce(&amp;<ref refid="_c_w_e-79_8c_1a3a5eea318d1ad84bd99f382c4b048bf2" kindref="member">ProfileLaunchObserver::ActivateProfile</ref>,</highlight></codeline>
<codeline lineno="7692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::Unretained(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="7693"><highlight class="normal"><sp/><sp/><sp/><sp/>registrar_.RemoveAll();</highlight></codeline>
<codeline lineno="7694"><highlight class="normal"><sp/><sp/><sp/><sp/>BrowserList::RemoveObserver(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7695"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7696"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StartupBrowserCreator::OpenStartupPages(Browser*<sp/><ref refid="_c_w_e-79_8c_1ad08fd70a885a650dfed64c57ed85082c" kindref="member">browser</ref>,</highlight></codeline>
<codeline lineno="7697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>process_startup)<sp/>{</highlight></codeline>
<codeline lineno="7698"><highlight class="normal"><sp/><sp/>base::CommandLine<sp/>command_line(base::CommandLine::NO_PROGRAM);</highlight></codeline>
<codeline lineno="7699"><highlight class="normal"><sp/><sp/>chrome::startup::IsFirstRun<sp/>is_first_run<sp/>=</highlight></codeline>
<codeline lineno="7700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first_run::IsChromeFirstRun()<sp/>?<sp/>chrome::startup::IS_FIRST_RUN</highlight></codeline>
<codeline lineno="7701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>chrome::startup::IS_NOT_FIRST_RUN;</highlight></codeline>
<codeline lineno="7702"><highlight class="normal"><sp/><sp/>StartupBrowserCreatorImpl<sp/>startup_browser_creator_impl(</highlight></codeline>
<codeline lineno="7703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::FilePath(),<sp/>command_line,<sp/>is_first_run);</highlight></codeline>
<codeline lineno="7704"><highlight class="normal"><sp/><sp/>SessionStartupPref<sp/>session_startup_pref<sp/>=</highlight></codeline>
<codeline lineno="7705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StartupBrowserCreator::GetSessionStartupPref(command_line,</highlight></codeline>
<codeline lineno="7706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ad08fd70a885a650dfed64c57ed85082c" kindref="member">browser</ref>-&gt;profile());</highlight></codeline>
<codeline lineno="7707"><highlight class="normal"><sp/><sp/>startup_browser_creator_impl.OpenURLsInBrowser(<ref refid="_c_w_e-79_8c_1ad08fd70a885a650dfed64c57ed85082c" kindref="member">browser</ref>,<sp/>process_startup,</highlight></codeline>
<codeline lineno="7708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>session_startup_pref.urls);</highlight></codeline>
<codeline lineno="7709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7710"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StartupBrowserCreator::ProcessCmdLineImpl(</highlight></codeline>
<codeline lineno="7711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::CommandLine&amp;<sp/>command_line,</highlight></codeline>
<codeline lineno="7712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>cur_dir,</highlight></codeline>
<codeline lineno="7713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>process_startup,</highlight></codeline>
<codeline lineno="7714"><highlight class="normal"><sp/><sp/><sp/><sp/>Profile*<sp/>last_used_profile,</highlight></codeline>
<codeline lineno="7715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Profiles&amp;<sp/>last_opened_profiles)<sp/>{</highlight></codeline>
<codeline lineno="7716"><highlight class="normal"><sp/><sp/>DCHECK_CURRENTLY_ON(BrowserThread::UI);</highlight></codeline>
<codeline lineno="7717"><highlight class="normal"><sp/><sp/>TRACE_EVENT0(</highlight><highlight class="stringliteral">&quot;startup&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;StartupBrowserCreator::ProcessCmdLineImpl&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7718"><highlight class="normal"></highlight></codeline>
<codeline lineno="7719"><highlight class="normal"><sp/><sp/>DCHECK(last_used_profile);</highlight></codeline>
<codeline lineno="7720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(process_startup<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>command_line.HasSwitch(switches::kDisablePromptOnRepost))<sp/>{</highlight></codeline>
<codeline lineno="7722"><highlight class="normal"><sp/><sp/><sp/><sp/>content::NavigationController::DisablePromptOnRepost();</highlight></codeline>
<codeline lineno="7723"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7724"><highlight class="normal"></highlight></codeline>
<codeline lineno="7725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>silent_launch<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>can_use_last_profile<sp/>=</highlight></codeline>
<codeline lineno="7727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_c_w_e-79_8c_1a0461459310023e2c619aa2066de931d2" kindref="member">CanOpenProfileOnStartup</ref>(last_used_profile)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!IncognitoModePrefs::ShouldLaunchIncognito(</highlight></codeline>
<codeline lineno="7729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>command_line,<sp/>last_used_profile-&gt;GetPrefs()));</highlight></codeline>
<codeline lineno="7730"><highlight class="normal"></highlight></codeline>
<codeline lineno="7731"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BUILDFLAG(ENABLE_PRINT_PREVIEW)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command_line.HasSwitch(switches::kCloudPrintFile)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>can_use_last_profile<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>print_dialog_cloud::CreatePrintDialogFromCommandLine(last_used_profile,</highlight></codeline>
<codeline lineno="7735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>command_line))<sp/>{</highlight></codeline>
<codeline lineno="7736"><highlight class="normal"><sp/><sp/><sp/><sp/>silent_launch<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7737"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7738"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>BUILDFLAG(ENABLE_PRINT_PREVIEW)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7739"><highlight class="normal"></highlight></codeline>
<codeline lineno="7740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command_line.HasSwitch(switches::kValidateCrx))<sp/>{</highlight></codeline>
<codeline lineno="7741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!process_startup)<sp/>{</highlight></codeline>
<codeline lineno="7742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(ERROR)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;chrome<sp/>is<sp/>already<sp/>running;<sp/>you<sp/>must<sp/>close<sp/>all<sp/>running<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;instances<sp/>before<sp/>running<sp/>with<sp/>the<sp/>--&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>switches::kValidateCrx<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>flag&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7747"><highlight class="normal"><sp/><sp/><sp/><sp/>extensions::StartupHelper<sp/>helper;</highlight></codeline>
<codeline lineno="7748"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>message;</highlight></codeline>
<codeline lineno="7749"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>error;</highlight></codeline>
<codeline lineno="7750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(helper.ValidateCrx(command_line,<sp/>&amp;error))</highlight></codeline>
<codeline lineno="7751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;ValidateCrx<sp/>Success&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;ValidateCrx<sp/>Failure:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>error;</highlight></codeline>
<codeline lineno="7754"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>message.c_str());</highlight></codeline>
<codeline lineno="7755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7756"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7757"><highlight class="normal"></highlight></codeline>
<codeline lineno="7758"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7759"><highlight class="normal"></highlight></codeline>
<codeline lineno="7760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command_line.HasSwitch(chromeos::switches::kLoginManager))</highlight></codeline>
<codeline lineno="7761"><highlight class="normal"><sp/><sp/><sp/><sp/>silent_launch<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7762"><highlight class="normal"></highlight></codeline>
<codeline lineno="7763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chrome::IsRunningInAppMode()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>command_line.HasSwitch(switches::kAppId))<sp/>{</highlight></codeline>
<codeline lineno="7765"><highlight class="normal"><sp/><sp/><sp/><sp/>chromeos::LaunchAppOrDie(</highlight></codeline>
<codeline lineno="7766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_used_profile,</highlight></codeline>
<codeline lineno="7767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>command_line.GetSwitchValueASCII(switches::kAppId));</highlight></codeline>
<codeline lineno="7768"><highlight class="normal"></highlight></codeline>
<codeline lineno="7769"><highlight class="normal"><sp/><sp/><sp/><sp/>silent_launch<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7771"><highlight class="normal"></highlight></codeline>
<codeline lineno="7772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chromeos::DemoAppLauncher::IsDemoAppSession(</highlight></codeline>
<codeline lineno="7773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cryptohome::Identification::FromString(</highlight></codeline>
<codeline lineno="7774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>command_line.GetSwitchValueASCII(chromeos::switches::kLoginUser))</highlight></codeline>
<codeline lineno="7775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.GetAccountId()))<sp/>{</highlight></codeline>
<codeline lineno="7776"><highlight class="normal"><sp/><sp/><sp/><sp/>chrome::AttemptUserExit();</highlight></codeline>
<codeline lineno="7777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7778"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7779"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>OS_CHROMEOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7780"><highlight class="normal"></highlight></codeline>
<codeline lineno="7781"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TOOLKIT_VIEWS)<sp/>&amp;&amp;<sp/>defined(USE_X11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7782"><highlight class="normal"><sp/><sp/>ui::TouchFactory::SetTouchDeviceListFromCommandLine();</highlight></codeline>
<codeline lineno="7783"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7784"><highlight class="normal"></highlight></codeline>
<codeline lineno="7785"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_MACOSX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(web_app::MaybeRebuildShortcut(command_line))</highlight></codeline>
<codeline lineno="7787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7788"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7789"><highlight class="normal"></highlight></codeline>
<codeline lineno="7790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!process_startup<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>command_line.HasSwitch(switches::kDumpBrowserHistograms))<sp/>{</highlight></codeline>
<codeline lineno="7792"><highlight class="normal"><sp/><sp/><sp/><sp/>base::FilePath<sp/>output_file(</highlight></codeline>
<codeline lineno="7793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>command_line.GetSwitchValuePath(switches::kDumpBrowserHistograms));</highlight></codeline>
<codeline lineno="7794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!output_file.empty())<sp/>{</highlight></codeline>
<codeline lineno="7795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-787_8c_1afc515de5e9a1bacf5ffcf5f764cbb51c" kindref="member">base::PostTask</ref>(FROM_HERE,</highlight></codeline>
<codeline lineno="7796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{base::ThreadPool(),<sp/>base::MayBlock(),</highlight></codeline>
<codeline lineno="7797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::TaskPriority::BEST_EFFORT,</highlight></codeline>
<codeline lineno="7798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::TaskShutdownBehavior::BLOCK_SHUTDOWN},</highlight></codeline>
<codeline lineno="7799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::BindOnce(&amp;<ref refid="_c_w_e-79_8c_1a94cc45c270cb398c7515f42ad4480d3e" kindref="member">DumpBrowserHistograms</ref>,<sp/>output_file));</highlight></codeline>
<codeline lineno="7800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7801"><highlight class="normal"><sp/><sp/><sp/><sp/>silent_launch<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7802"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7803"><highlight class="normal"></highlight></codeline>
<codeline lineno="7804"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!process_startup<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::FeatureList::IsEnabled(features::kOnConnectNative)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>command_line.HasSwitch(switches::kNativeMessagingConnectHost)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>command_line.HasSwitch(switches::kNativeMessagingConnectExtension))<sp/>{</highlight></codeline>
<codeline lineno="7809"><highlight class="normal"><sp/><sp/><sp/><sp/>silent_launch<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7810"><highlight class="normal"><sp/><sp/><sp/><sp/>extensions::LaunchNativeMessageHostFromNativeApp(</highlight></codeline>
<codeline lineno="7811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>command_line.GetSwitchValueASCII(</highlight></codeline>
<codeline lineno="7812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switches::kNativeMessagingConnectExtension),</highlight></codeline>
<codeline lineno="7813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>command_line.GetSwitchValueASCII(switches::kNativeMessagingConnectHost),</highlight></codeline>
<codeline lineno="7814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>command_line.GetSwitchValueASCII(switches::kNativeMessagingConnectId),</highlight></codeline>
<codeline lineno="7815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_used_profile);</highlight></codeline>
<codeline lineno="7816"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7817"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7818"><highlight class="normal"></highlight></codeline>
<codeline lineno="7819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!process_startup<sp/>&amp;&amp;<sp/>command_line.HasSwitch(switches::kNoStartupWindow))</highlight></codeline>
<codeline lineno="7820"><highlight class="normal"><sp/><sp/><sp/><sp/>silent_launch<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7821"><highlight class="normal"></highlight></codeline>
<codeline lineno="7822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(silent_launch)<sp/>{</highlight></codeline>
<codeline lineno="7823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(process_startup)</highlight></codeline>
<codeline lineno="7824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startup_metric_utils::SetNonBrowserUIDisplayed();</highlight></codeline>
<codeline lineno="7825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7826"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7827"><highlight class="normal"></highlight></codeline>
<codeline lineno="7828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command_line.HasSwitch(extensions::switches::kLoadApps)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>can_use_last_profile)<sp/>{</highlight></codeline>
<codeline lineno="7830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ProcessLoadApps(command_line,<sp/>cur_dir,<sp/>last_used_profile))</highlight></codeline>
<codeline lineno="7831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7832"><highlight class="normal"></highlight></codeline>
<codeline lineno="7833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chrome::GetBrowserCount(last_used_profile)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="7834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7835"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7836"><highlight class="normal"></highlight></codeline>
<codeline lineno="7837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command_line.HasSwitch(apps::kLoadAndLaunchApp)<sp/>&amp;&amp;<sp/>can_use_last_profile)<sp/>{</highlight></codeline>
<codeline lineno="7838"><highlight class="normal"><sp/><sp/><sp/><sp/>base::CommandLine::StringType<sp/>path<sp/>=</highlight></codeline>
<codeline lineno="7839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>command_line.GetSwitchValueNative(apps::kLoadAndLaunchApp);</highlight></codeline>
<codeline lineno="7840"><highlight class="normal"></highlight></codeline>
<codeline lineno="7841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!apps::AppLoadService::Get(last_used_profile)-&gt;LoadAndLaunch(</highlight></codeline>
<codeline lineno="7842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::FilePath(path),<sp/>command_line,<sp/>cur_dir))<sp/>{</highlight></codeline>
<codeline lineno="7843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7845"><highlight class="normal"></highlight></codeline>
<codeline lineno="7846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chrome::GetBrowserCount(last_used_profile)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="7847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7848"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7849"><highlight class="normal"></highlight></codeline>
<codeline lineno="7850"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command_line.HasSwitch(switches::kWinJumplistAction))<sp/>{</highlight></codeline>
<codeline lineno="7852"><highlight class="normal"><sp/><sp/><sp/><sp/>jumplist::LogJumplistActionFromSwitchValue(</highlight></codeline>
<codeline lineno="7853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>command_line.GetSwitchValueASCII(switches::kWinJumplistAction));</highlight></codeline>
<codeline lineno="7854"><highlight class="normal"><sp/><sp/><sp/><sp/>last_used_profile-&gt;SetUserData(</highlight></codeline>
<codeline lineno="7855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chrome::kJumpListIconDirname,</highlight></codeline>
<codeline lineno="7856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::WrapUnique(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>base::SupportsUserData::Data()));</highlight></codeline>
<codeline lineno="7857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7858"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7859"><highlight class="normal"></highlight></codeline>
<codeline lineno="7860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LaunchBrowserForLastProfiles(command_line,<sp/>cur_dir,<sp/>process_startup,</highlight></codeline>
<codeline lineno="7861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_used_profile,<sp/>last_opened_profiles);</highlight></codeline>
<codeline lineno="7862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7863"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StartupBrowserCreator::ProcessCommandLineAlreadyRunning(</highlight></codeline>
<codeline lineno="7864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::CommandLine&amp;<sp/>command_line,</highlight></codeline>
<codeline lineno="7865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>cur_dir,</highlight></codeline>
<codeline lineno="7866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>profile_path)<sp/>{</highlight></codeline>
<codeline lineno="7867"><highlight class="normal"><sp/><sp/>ProfileManager*<sp/>profile_manager<sp/>=<sp/>g_browser_process-&gt;profile_manager();</highlight></codeline>
<codeline lineno="7868"><highlight class="normal"><sp/><sp/>Profile*<sp/>profile<sp/>=<sp/>profile_manager-&gt;GetProfileByPath(profile_path);</highlight></codeline>
<codeline lineno="7869"><highlight class="normal"></highlight></codeline>
<codeline lineno="7870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!profile)<sp/>{</highlight></codeline>
<codeline lineno="7871"><highlight class="normal"><sp/><sp/><sp/><sp/>profile_manager-&gt;CreateProfileAsync(</highlight></codeline>
<codeline lineno="7872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile_path,</highlight></codeline>
<codeline lineno="7873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::BindRepeating(&amp;ProcessCommandLineOnProfileCreated,<sp/>command_line,</highlight></codeline>
<codeline lineno="7874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur_dir),</highlight></codeline>
<codeline lineno="7875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::string16(),<sp/>std::string());</highlight></codeline>
<codeline lineno="7876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7877"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7878"><highlight class="normal"><sp/><sp/>StartupBrowserCreator<sp/>startup_browser_creator;</highlight></codeline>
<codeline lineno="7879"><highlight class="normal"><sp/><sp/>startup_browser_creator.ProcessCmdLineImpl(</highlight></codeline>
<codeline lineno="7880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>command_line,<sp/>cur_dir,<sp/></highlight><highlight class="comment">/*process_startup=*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>profile,<sp/>Profiles());</highlight></codeline>
<codeline lineno="7881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7882"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StartupBrowserCreator::ProcessCommandLineOnProfileCreated(</highlight></codeline>
<codeline lineno="7883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::CommandLine&amp;<sp/>command_line,</highlight></codeline>
<codeline lineno="7884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>cur_dir,</highlight></codeline>
<codeline lineno="7885"><highlight class="normal"><sp/><sp/><sp/><sp/>Profile*<sp/>profile,</highlight></codeline>
<codeline lineno="7886"><highlight class="normal"><sp/><sp/><sp/><sp/>Profile::CreateStatus<sp/>status)<sp/>{</highlight></codeline>
<codeline lineno="7887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>Profile::CREATE_STATUS_INITIALIZED)</highlight></codeline>
<codeline lineno="7888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7889"><highlight class="normal"><sp/><sp/>StartupBrowserCreator<sp/>startup_browser_creator;</highlight></codeline>
<codeline lineno="7890"><highlight class="normal"><sp/><sp/>startup_browser_creator.ProcessCmdLineImpl(command_line,<sp/>cur_dir,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile,<sp/>Profiles());</highlight></codeline>
<codeline lineno="7892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7893"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StartupBrowserCreator::ProcessLastOpenedProfiles(</highlight></codeline>
<codeline lineno="7894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::CommandLine&amp;<sp/>command_line,</highlight></codeline>
<codeline lineno="7895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>cur_dir,</highlight></codeline>
<codeline lineno="7896"><highlight class="normal"><sp/><sp/><sp/><sp/>chrome::startup::IsProcessStartup<sp/>is_process_startup,</highlight></codeline>
<codeline lineno="7897"><highlight class="normal"><sp/><sp/><sp/><sp/>chrome::startup::IsFirstRun<sp/>is_first_run,</highlight></codeline>
<codeline lineno="7898"><highlight class="normal"><sp/><sp/><sp/><sp/>Profile*<sp/>last_used_profile,</highlight></codeline>
<codeline lineno="7899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Profiles&amp;<sp/>last_opened_profiles)<sp/>{</highlight></codeline>
<codeline lineno="7900"><highlight class="normal"><sp/><sp/>base::CommandLine<sp/>command_line_without_urls(command_line.GetProgram());</highlight></codeline>
<codeline lineno="7901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>switch_pair<sp/>:<sp/>command_line.GetSwitches())<sp/>{</highlight></codeline>
<codeline lineno="7902"><highlight class="normal"><sp/><sp/><sp/><sp/>command_line_without_urls.AppendSwitchNative(switch_pair.first,</highlight></codeline>
<codeline lineno="7903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch_pair.second);</highlight></codeline>
<codeline lineno="7904"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7905"><highlight class="normal"></highlight></codeline>
<codeline lineno="7906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>DEBUG_num_profiles_on_entry<sp/>=<sp/>last_opened_profiles.size();</highlight></codeline>
<codeline lineno="7907"><highlight class="normal"><sp/><sp/>base::debug::Alias(&amp;DEBUG_num_profiles_on_entry);</highlight></codeline>
<codeline lineno="7908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DEBUG_loop_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7909"><highlight class="normal"><sp/><sp/>base::debug::Alias(&amp;DEBUG_loop_counter);</highlight></codeline>
<codeline lineno="7910"><highlight class="normal"></highlight></codeline>
<codeline lineno="7911"><highlight class="normal"><sp/><sp/>base::debug::Alias(&amp;last_opened_profiles);</highlight></codeline>
<codeline lineno="7912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Profile*<sp/>DEBUG_profile_0<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Profile*<sp/>DEBUG_profile_1<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!last_opened_profiles.empty())</highlight></codeline>
<codeline lineno="7915"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_profile_0<sp/>=<sp/>last_opened_profiles[0];</highlight></codeline>
<codeline lineno="7916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_opened_profiles.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="7917"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_profile_1<sp/>=<sp/>last_opened_profiles[1];</highlight></codeline>
<codeline lineno="7918"><highlight class="normal"><sp/><sp/>base::debug::Alias(&amp;DEBUG_profile_0);</highlight></codeline>
<codeline lineno="7919"><highlight class="normal"><sp/><sp/>base::debug::Alias(&amp;DEBUG_profile_1);</highlight></codeline>
<codeline lineno="7920"><highlight class="normal"></highlight></codeline>
<codeline lineno="7921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>DEBUG_num_profiles_at_loop_start<sp/>=<sp/><ref refid="_c_w_e-787_8c_1affe776513b24d84b39af8ab0930fef7f" kindref="member">std::numeric_limits&lt;size_t&gt;::max</ref>();</highlight></codeline>
<codeline lineno="7922"><highlight class="normal"><sp/><sp/>base::debug::Alias(&amp;DEBUG_num_profiles_at_loop_start);</highlight></codeline>
<codeline lineno="7923"><highlight class="normal"></highlight></codeline>
<codeline lineno="7924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>DEBUG_it_begin<sp/>=<sp/>last_opened_profiles.begin();</highlight></codeline>
<codeline lineno="7925"><highlight class="normal"><sp/><sp/>base::debug::Alias(&amp;DEBUG_it_begin);</highlight></codeline>
<codeline lineno="7926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>DEBUG_it_end<sp/>=<sp/>last_opened_profiles.end();</highlight></codeline>
<codeline lineno="7927"><highlight class="normal"><sp/><sp/>base::debug::Alias(&amp;DEBUG_it_end);</highlight></codeline>
<codeline lineno="7928"><highlight class="normal"></highlight></codeline>
<codeline lineno="7929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>last_opened_profiles.begin();<sp/>it<sp/>!=<sp/>last_opened_profiles.end();</highlight></codeline>
<codeline lineno="7930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it,<sp/>++DEBUG_loop_counter)<sp/>{</highlight></codeline>
<codeline lineno="7931"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_num_profiles_at_loop_start<sp/>=<sp/>last_opened_profiles.size();</highlight></codeline>
<codeline lineno="7932"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(!(*it)-&gt;IsGuestSession());</highlight></codeline>
<codeline lineno="7933"><highlight class="normal"></highlight></codeline>
<codeline lineno="7934"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-79_8c_1a0461459310023e2c619aa2066de931d2" kindref="member">CanOpenProfileOnStartup</ref>(*it))</highlight></codeline>
<codeline lineno="7936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7937"><highlight class="normal"></highlight></codeline>
<codeline lineno="7938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_used_profile-&gt;IsGuestSession())</highlight></codeline>
<codeline lineno="7939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_used_profile<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="7940"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7941"><highlight class="normal"></highlight></codeline>
<codeline lineno="7942"><highlight class="normal"><sp/><sp/><sp/><sp/>SessionStartupPref<sp/>startup_pref<sp/>=<sp/>GetSessionStartupPref(command_line,<sp/>*it);</highlight></codeline>
<codeline lineno="7943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*it<sp/>!=<sp/>last_used_profile<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startup_pref.type<sp/>==<sp/>SessionStartupPref::DEFAULT<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="_c_w_e-79_8c_1ade2b28dcc6be492e91f0e000117d2516" kindref="member">HasPendingUncleanExit</ref>(*it))<sp/>{</highlight></codeline>
<codeline lineno="7946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!LaunchBrowser((*it<sp/>==<sp/>last_used_profile)<sp/>?<sp/>command_line</highlight></codeline>
<codeline lineno="7949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>command_line_without_urls,</highlight></codeline>
<codeline lineno="7950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*it,<sp/>cur_dir,<sp/>is_process_startup,<sp/>is_first_run))<sp/>{</highlight></codeline>
<codeline lineno="7951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7953"><highlight class="normal"><sp/><sp/><sp/><sp/>is_process_startup<sp/>=<sp/>chrome::startup::IS_NOT_PROCESS_STARTUP;</highlight></codeline>
<codeline lineno="7954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7955"><highlight class="normal"></highlight></codeline>
<codeline lineno="7956"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_process_startup<sp/>==<sp/>chrome::startup::IS_PROCESS_STARTUP)</highlight></codeline>
<codeline lineno="7958"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ac8171bca67c0ccf78b4d306ee023810b" kindref="member">ShowUserManagerOnStartup</ref>(command_line);</highlight></codeline>
<codeline lineno="7959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7960"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7961"><highlight class="normal"><sp/><sp/><sp/><sp/>profile_launch_observer.Get().set_profile_to_activate(last_used_profile);</highlight></codeline>
<codeline lineno="7962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7964"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StartupBrowserCreator::ProcessLoadApps(</highlight></codeline>
<codeline lineno="7965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::CommandLine&amp;<sp/>command_line,</highlight></codeline>
<codeline lineno="7966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>cur_dir,</highlight></codeline>
<codeline lineno="7967"><highlight class="normal"><sp/><sp/><sp/><sp/>Profile*<sp/>profile)<sp/>{</highlight></codeline>
<codeline lineno="7968"><highlight class="normal"><sp/><sp/>base::CommandLine::StringType<sp/>path_list<sp/>=</highlight></codeline>
<codeline lineno="7969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>command_line.GetSwitchValueNative(extensions::switches::kLoadApps);</highlight></codeline>
<codeline lineno="7970"><highlight class="normal"></highlight></codeline>
<codeline lineno="7971"><highlight class="normal"><sp/><sp/>base::StringTokenizerT&lt;base::CommandLine::StringType,</highlight></codeline>
<codeline lineno="7972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::CommandLine::StringType::const_iterator&gt;</highlight></codeline>
<codeline lineno="7973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tokenizer(path_list,<sp/>FILE_PATH_LITERAL(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7974"><highlight class="normal"></highlight></codeline>
<codeline lineno="7975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tokenizer.GetNext())</highlight></codeline>
<codeline lineno="7976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7977"><highlight class="normal"></highlight></codeline>
<codeline lineno="7978"><highlight class="normal"><sp/><sp/>base::FilePath<sp/>app_absolute_dir<sp/>=</highlight></codeline>
<codeline lineno="7979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::MakeAbsoluteFilePath(base::FilePath(tokenizer.token()));</highlight></codeline>
<codeline lineno="7980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!apps::AppLoadService::Get(profile)-&gt;LoadAndLaunch(</highlight></codeline>
<codeline lineno="7981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app_absolute_dir,<sp/>command_line,<sp/>cur_dir))<sp/>{</highlight></codeline>
<codeline lineno="7982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7983"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7984"><highlight class="normal"></highlight></codeline>
<codeline lineno="7985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tokenizer.GetNext())<sp/>{</highlight></codeline>
<codeline lineno="7986"><highlight class="normal"><sp/><sp/><sp/><sp/>app_absolute_dir<sp/>=</highlight></codeline>
<codeline lineno="7987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::MakeAbsoluteFilePath(base::FilePath(tokenizer.token()));</highlight></codeline>
<codeline lineno="7988"><highlight class="normal"></highlight></codeline>
<codeline lineno="7989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!apps::AppLoadService::Get(profile)-&gt;Load(app_absolute_dir))<sp/>{</highlight></codeline>
<codeline lineno="7990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7992"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7993"><highlight class="normal"></highlight></codeline>
<codeline lineno="7994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7996" refid="_c_w_e-79_8c_1a9356dcb04b663ca265c54451e6ba7960" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a9356dcb04b663ca265c54451e6ba7960" kindref="member">ProfileLaunchObserver</ref>()<sp/>{</highlight></codeline>
<codeline lineno="7997"><highlight class="normal"><sp/><sp/><sp/><sp/>registrar_.Add(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>chrome::NOTIFICATION_PROFILE_DESTROYED,</highlight></codeline>
<codeline lineno="7998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content::NotificationService::AllSources());</highlight></codeline>
<codeline lineno="7999"><highlight class="normal"><sp/><sp/><sp/><sp/>BrowserList::AddObserver(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8000"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8001"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StartupBrowserCreator::RegisterLocalStatePrefs(</highlight></codeline>
<codeline lineno="8002"><highlight class="normal"><sp/><sp/><sp/><sp/>PrefRegistrySimple*<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="8003"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8004"><highlight class="normal"><sp/><sp/>registry-&gt;RegisterBooleanPref(prefs::kPromotionalTabsEnabled,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8005"><highlight class="normal"><sp/><sp/>registry-&gt;RegisterBooleanPref(prefs::kCommandLineFlagSecurityWarningsEnabled,</highlight></codeline>
<codeline lineno="8006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8007"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8008"><highlight class="normal"><sp/><sp/>registry-&gt;RegisterBooleanPref(prefs::kSuppressUnsupportedOSWarning,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8009"><highlight class="normal"><sp/><sp/>registry-&gt;RegisterBooleanPref(prefs::kWasRestarted,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8011"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StartupBrowserCreator::RegisterProfilePrefs(PrefRegistrySimple*<sp/>registry)<sp/>{</highlight></codeline>
<codeline lineno="8012"><highlight class="normal"><sp/><sp/>registry-&gt;RegisterBooleanPref(prefs::kHasSeenWelcomePage,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8013"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)<sp/>&amp;&amp;<sp/>BUILDFLAG(GOOGLE_CHROME_BRANDING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8014"><highlight class="normal"><sp/><sp/>registry-&gt;RegisterStringPref(prefs::kNaviOnboardGroup,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8015"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>defined(OS_WIN)<sp/>&amp;&amp;<sp/>BUILDFLAG(GOOGLE_CHROME_BRANDING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8017" refid="_c_w_e-79_8c_1ac8171bca67c0ccf78b4d306ee023810b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ac8171bca67c0ccf78b4d306ee023810b" kindref="member">ShowUserManagerOnStartup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::CommandLine&amp;<sp/>command_line)<sp/>{</highlight></codeline>
<codeline lineno="8018"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8019"><highlight class="normal"><sp/><sp/>UserManager::Show(base::FilePath(),</highlight></codeline>
<codeline lineno="8020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profiles::USER_MANAGER_SELECT_PROFILE_NO_ACTION);</highlight></codeline>
<codeline lineno="8021"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>!defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8023"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StartupBrowserCreator::Start(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::CommandLine&amp;<sp/>cmd_line,</highlight></codeline>
<codeline lineno="8024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::FilePath&amp;<sp/>cur_dir,</highlight></codeline>
<codeline lineno="8025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Profile*<sp/>last_used_profile,</highlight></codeline>
<codeline lineno="8026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Profiles&amp;<sp/>last_opened_profiles)<sp/>{</highlight></codeline>
<codeline lineno="8027"><highlight class="normal"><sp/><sp/>TRACE_EVENT0(</highlight><highlight class="stringliteral">&quot;startup&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;StartupBrowserCreator::Start&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8028"><highlight class="normal"><sp/><sp/>SCOPED_UMA_HISTOGRAM_TIMER(</highlight><highlight class="stringliteral">&quot;Startup.StartupBrowserCreator_Start&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ProcessCmdLineImpl(cmd_line,<sp/>cur_dir,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>last_used_profile,</highlight></codeline>
<codeline lineno="8030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_opened_profiles);</highlight></codeline>
<codeline lineno="8031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8032"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StartupBrowserCreator::WasRestarted()<sp/>{</highlight></codeline>
<codeline lineno="8033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>was_restarted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8034"><highlight class="normal"></highlight></codeline>
<codeline lineno="8035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!was_restarted_read_)<sp/>{</highlight></codeline>
<codeline lineno="8036"><highlight class="normal"><sp/><sp/><sp/><sp/>PrefService*<sp/>pref_service<sp/>=<sp/>g_browser_process-&gt;local_state();</highlight></codeline>
<codeline lineno="8037"><highlight class="normal"><sp/><sp/><sp/><sp/>was_restarted<sp/>=<sp/>pref_service-&gt;GetBoolean(prefs::kWasRestarted);</highlight></codeline>
<codeline lineno="8038"><highlight class="normal"><sp/><sp/><sp/><sp/>pref_service-&gt;SetBoolean(prefs::kWasRestarted,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8039"><highlight class="normal"><sp/><sp/><sp/><sp/>was_restarted_read_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8040"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>was_restarted;</highlight></codeline>
<codeline lineno="8042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8043" refid="_c_w_e-79_8c_1ae0386ac0d517194a1cb9a6e775f66e52" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ae0386ac0d517194a1cb9a6e775f66e52" kindref="member">activated_profile</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>activated_profile_;<sp/>}</highlight></codeline>
<codeline lineno="8044" refid="_c_w_e-79_8c_1a73a6eb54c01dbb9cff124f9b1874a093" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a73a6eb54c01dbb9cff124f9b1874a093" kindref="member">set_profile_to_activate</ref>(Profile*<sp/>profile)<sp/>{</highlight></codeline>
<codeline lineno="8045"><highlight class="normal"><sp/><sp/><sp/><sp/>profile_to_activate_<sp/>=<sp/>profile;</highlight></codeline>
<codeline lineno="8046"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a954e522dd383113c24b63bb1fafbadc5" kindref="member">MaybeActivateProfile</ref>();</highlight></codeline>
<codeline lineno="8047"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8048"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Object&gt;<sp/><ref refid="_c_w_e-79_8c_1a25d0e49f6c8a61ab56034685bfb55102" kindref="member">classObjectOfPrivateScript</ref>(</highlight></codeline>
<codeline lineno="8049"><highlight class="normal"><sp/><sp/><sp/><sp/>ScriptState*<sp/>scriptState,</highlight></codeline>
<codeline lineno="8050"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>className)<sp/>{</highlight></codeline>
<codeline lineno="8051"><highlight class="normal"><sp/><sp/>ASSERT(scriptState-&gt;perContextData());</highlight></codeline>
<codeline lineno="8052"><highlight class="normal"><sp/><sp/>ASSERT(scriptState-&gt;getExecutionContext());</highlight></codeline>
<codeline lineno="8053"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>scriptState-&gt;isolate();</highlight></codeline>
<codeline lineno="8054"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>compiledClass<sp/>=</highlight></codeline>
<codeline lineno="8055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scriptState-&gt;perContextData()-&gt;compiledPrivateScript(className);</highlight></codeline>
<codeline lineno="8056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compiledClass.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="8057"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>installedClasses<sp/>=</highlight></codeline>
<codeline lineno="8058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scriptState-&gt;perContextData()-&gt;compiledPrivateScript(</highlight></codeline>
<codeline lineno="8059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;PrivateScriptRunner&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(installedClasses.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="8061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>installedClasses<sp/>=<sp/><ref refid="_c_w_e-79_8c_1ae55a2d2968dda83858240e1392eb2599" kindref="member">installPrivateScriptRunner</ref>(isolate);</highlight></codeline>
<codeline lineno="8062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scriptState-&gt;perContextData()-&gt;setCompiledPrivateScript(</highlight></codeline>
<codeline lineno="8063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;PrivateScriptRunner&quot;</highlight><highlight class="normal">,<sp/>installedClasses);</highlight></codeline>
<codeline lineno="8064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8065"><highlight class="normal"><sp/><sp/><sp/><sp/>RELEASE_ASSERT(!installedClasses.IsEmpty());</highlight></codeline>
<codeline lineno="8066"><highlight class="normal"><sp/><sp/><sp/><sp/>RELEASE_ASSERT(installedClasses-&gt;IsObject());</highlight></codeline>
<codeline lineno="8067"><highlight class="normal"></highlight></codeline>
<codeline lineno="8068"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ac18195aa4776e27774d244e8ecb4a020" kindref="member">installPrivateScript</ref>(isolate,<sp/>className);</highlight></codeline>
<codeline lineno="8069"><highlight class="normal"><sp/><sp/><sp/><sp/>compiledClass<sp/>=</highlight></codeline>
<codeline lineno="8070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;::Cast(installedClasses)</highlight></codeline>
<codeline lineno="8071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;Get(scriptState-&gt;context(),<sp/>v8String(isolate,<sp/>className))</highlight></codeline>
<codeline lineno="8072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToLocalChecked();</highlight></codeline>
<codeline lineno="8073"><highlight class="normal"><sp/><sp/><sp/><sp/>RELEASE_ASSERT(compiledClass-&gt;IsObject());</highlight></codeline>
<codeline lineno="8074"><highlight class="normal"><sp/><sp/><sp/><sp/>scriptState-&gt;perContextData()-&gt;setCompiledPrivateScript(className,</highlight></codeline>
<codeline lineno="8075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiledClass);</highlight></codeline>
<codeline lineno="8076"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Object&gt;::Cast(compiledClass);</highlight></codeline>
<codeline lineno="8078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8079"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" kindref="member">dumpV8Message</ref>(v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,</highlight></codeline>
<codeline lineno="8080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Message&gt;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="8081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message.IsEmpty())</highlight></codeline>
<codeline lineno="8082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8083"><highlight class="normal"></highlight></codeline>
<codeline lineno="8084"><highlight class="normal"><sp/><sp/>message-&gt;GetScriptOrigin();</highlight></codeline>
<codeline lineno="8085"><highlight class="normal"><sp/><sp/>v8::Maybe&lt;int&gt;<sp/>unused<sp/>=<sp/>message-&gt;GetLineNumber(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>);</highlight></codeline>
<codeline lineno="8086"><highlight class="normal"><sp/><sp/>ALLOW_UNUSED_LOCAL(unused);</highlight></codeline>
<codeline lineno="8087"><highlight class="normal"></highlight></codeline>
<codeline lineno="8088"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>resourceName<sp/>=<sp/>message-&gt;GetScriptOrigin().ResourceName();</highlight></codeline>
<codeline lineno="8089"><highlight class="normal"><sp/><sp/>String<sp/>fileName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>JavaScript<sp/>file&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resourceName.IsEmpty()<sp/>&amp;&amp;<sp/>resourceName-&gt;IsString())</highlight></codeline>
<codeline lineno="8091"><highlight class="normal"><sp/><sp/><sp/><sp/>fileName<sp/>=<sp/>toCoreString(v8::Local&lt;v8::String&gt;::Cast(resourceName));</highlight></codeline>
<codeline lineno="8092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineNumber<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8093"><highlight class="normal"><sp/><sp/>v8Call(message-&gt;GetLineNumber(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>),<sp/>lineNumber);</highlight></codeline>
<codeline lineno="8094"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::String&gt;<sp/>errorMessage<sp/>=<sp/>message-&gt;Get();</highlight></codeline>
<codeline lineno="8095"><highlight class="normal"><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>(line<sp/>%d):<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>fileName.utf8().data(),<sp/>lineNumber,</highlight></codeline>
<codeline lineno="8096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toCoreString(errorMessage).utf8().data());</highlight></codeline>
<codeline lineno="8097"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8098"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a3529938c16e0e3ebfefefa994878c111" kindref="member">importFunction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="8099"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>args.GetIsolate();</highlight></codeline>
<codeline lineno="8100"><highlight class="normal"><sp/><sp/>RELEASE_ASSERT(isolate<sp/>&amp;&amp;<sp/>(args.Length()<sp/>&gt;=<sp/>1));</highlight></codeline>
<codeline lineno="8101"><highlight class="normal"><sp/><sp/>String<sp/>resourceFileName<sp/>=<sp/>toCoreString(</highlight></codeline>
<codeline lineno="8102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args[0]-&gt;ToString(isolate-&gt;GetCurrentContext()).ToLocalChecked());</highlight></codeline>
<codeline lineno="8103"><highlight class="normal"><sp/><sp/>String<sp/>resourceData<sp/>=</highlight></codeline>
<codeline lineno="8104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>loadResourceAsASCIIString(resourceFileName.utf8().data());</highlight></codeline>
<codeline lineno="8105"><highlight class="normal"><sp/><sp/>RELEASE_ASSERT(resourceData.length());</highlight></codeline>
<codeline lineno="8106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compileAndRunScript<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args.Length()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="8108"><highlight class="normal"><sp/><sp/><sp/><sp/>RELEASE_ASSERT(args[1]-&gt;IsBoolean());</highlight></codeline>
<codeline lineno="8109"><highlight class="normal"><sp/><sp/><sp/><sp/>compileAndRunScript<sp/>=<sp/>args[1].As&lt;v8::Boolean&gt;()-&gt;Value();</highlight></codeline>
<codeline lineno="8110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8111"><highlight class="normal"></highlight></codeline>
<codeline lineno="8112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resourceFileName.endsWith(</highlight><highlight class="stringliteral">&quot;.js&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>compileAndRunScript)</highlight></codeline>
<codeline lineno="8113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" kindref="member">compileAndRunPrivateScript</ref>(</highlight></codeline>
<codeline lineno="8114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScriptState::current(isolate),<sp/>resourceFileName.replace(</highlight><highlight class="stringliteral">&quot;.js&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="8115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resourceData.utf8().data(),<sp/>resourceData.length());</highlight></codeline>
<codeline lineno="8116"><highlight class="normal"><sp/><sp/>args.GetReturnValue().Set(v8String(isolate,<sp/>resourceData));</highlight></codeline>
<codeline lineno="8117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8118" refid="_c_w_e-79_8c_1a15864646880d3365e83126dce7e253f7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a15864646880d3365e83126dce7e253f7" kindref="member">initializeHolderIfNeeded</ref>(ScriptState*<sp/>scriptState,</highlight></codeline>
<codeline lineno="8119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>classObject,</highlight></codeline>
<codeline lineno="8120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>holder)<sp/>{</highlight></codeline>
<codeline lineno="8121"><highlight class="normal"><sp/><sp/>RELEASE_ASSERT(!holder.IsEmpty());</highlight></codeline>
<codeline lineno="8122"><highlight class="normal"><sp/><sp/>RELEASE_ASSERT(holder-&gt;IsObject());</highlight></codeline>
<codeline lineno="8123"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>holderObject<sp/>=<sp/>v8::Local&lt;v8::Object&gt;::Cast(holder);</highlight></codeline>
<codeline lineno="8124"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>scriptState-&gt;isolate();</highlight></codeline>
<codeline lineno="8125"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=<sp/>scriptState-&gt;context();</highlight></codeline>
<codeline lineno="8126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>privateIsInitialized<sp/>=</highlight></codeline>
<codeline lineno="8127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>V8PrivateProperty::getPrivateScriptRunnerIsInitialized(isolate);</highlight></codeline>
<codeline lineno="8128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(privateIsInitialized.hasValue(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>holderObject))</highlight></codeline>
<codeline lineno="8129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Already<sp/>initialized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8130"><highlight class="normal"></highlight></codeline>
<codeline lineno="8131"><highlight class="normal"><sp/><sp/>v8::TryCatch<sp/>block(isolate);</highlight></codeline>
<codeline lineno="8132"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>initializeFunction;</highlight></codeline>
<codeline lineno="8133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(classObject-&gt;Get(scriptState-&gt;context(),<sp/>v8String(isolate,<sp/></highlight><highlight class="stringliteral">&quot;initialize&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="8134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToLocal(&amp;initializeFunction)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initializeFunction-&gt;IsFunction())<sp/>{</highlight></codeline>
<codeline lineno="8136"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::TryCatch<sp/>block(isolate);</highlight></codeline>
<codeline lineno="8137"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>result;</highlight></codeline>
<codeline lineno="8138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!V8ScriptRunner::callInternalFunction(</highlight></codeline>
<codeline lineno="8139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;::Cast(initializeFunction),<sp/>holder,<sp/>0,<sp/>0,</highlight></codeline>
<codeline lineno="8140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isolate)</highlight></codeline>
<codeline lineno="8141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToLocal(&amp;result))<sp/>{</highlight></codeline>
<codeline lineno="8142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" kindref="member">dumpV8Message</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>block.Message());</highlight></codeline>
<codeline lineno="8143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(FATAL)</highlight></codeline>
<codeline lineno="8144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Object<sp/>constructor<sp/>threw<sp/>an<sp/>exception.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8147"><highlight class="normal"></highlight></codeline>
<codeline lineno="8148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(classObject-&gt;GetPrototype()<sp/>!=<sp/>holderObject-&gt;GetPrototype())<sp/>{</highlight></codeline>
<codeline lineno="8149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v8CallBoolean(</highlight></codeline>
<codeline lineno="8150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classObject-&gt;SetPrototype(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>holderObject-&gt;GetPrototype())))<sp/>{</highlight></codeline>
<codeline lineno="8151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" kindref="member">dumpV8Message</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>block.Message());</highlight></codeline>
<codeline lineno="8152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(FATAL)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>SetPrototype<sp/>failed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v8CallBoolean(holderObject-&gt;SetPrototype(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>classObject)))<sp/>{</highlight></codeline>
<codeline lineno="8156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" kindref="member">dumpV8Message</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>block.Message());</highlight></codeline>
<codeline lineno="8157"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(FATAL)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>SetPrototype<sp/>failed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8159"><highlight class="normal"></highlight></codeline>
<codeline lineno="8160"><highlight class="normal"><sp/><sp/>privateIsInitialized.set(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>holderObject,<sp/><ref refid="_c_w_e-79_8c_1a2a92818f268e3305470d937415ce4c9d" kindref="member">v8Boolean</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>isolate));</highlight></codeline>
<codeline lineno="8161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8162"><highlight class="normal">v8::Local&lt;v8::Value&gt;<sp/>PrivateScriptRunner::installClassIfNeeded(</highlight></codeline>
<codeline lineno="8163"><highlight class="normal"><sp/><sp/><sp/><sp/>Document*<sp/>document,</highlight></codeline>
<codeline lineno="8164"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>className)<sp/>{</highlight></codeline>
<codeline lineno="8165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!document-&gt;contextDocument()-&gt;frame())</highlight></codeline>
<codeline lineno="8166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Value&gt;();</highlight></codeline>
<codeline lineno="8167"><highlight class="normal"></highlight></codeline>
<codeline lineno="8168"><highlight class="normal"><sp/><sp/>v8::HandleScope<sp/>handleScope(toIsolate(document));</highlight></codeline>
<codeline lineno="8169"><highlight class="normal"><sp/><sp/>ScriptState*<sp/>scriptState<sp/>=</highlight></codeline>
<codeline lineno="8170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ScriptState::forWorld(document-&gt;contextDocument()-&gt;frame(),</highlight></codeline>
<codeline lineno="8171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOMWrapperWorld::privateScriptIsolatedWorld());</highlight></codeline>
<codeline lineno="8172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scriptState)</highlight></codeline>
<codeline lineno="8173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Value&gt;();</highlight></codeline>
<codeline lineno="8174"><highlight class="normal"></highlight></codeline>
<codeline lineno="8175"><highlight class="normal"><sp/><sp/>ScriptState::Scope<sp/>scope(scriptState);</highlight></codeline>
<codeline lineno="8176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a25d0e49f6c8a61ab56034685bfb55102" kindref="member">classObjectOfPrivateScript</ref>(scriptState,<sp/>className);</highlight></codeline>
<codeline lineno="8177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8178"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ac18195aa4776e27774d244e8ecb4a020" kindref="member">installPrivateScript</ref>(v8::Isolate*<sp/>isolate,<sp/>String<sp/>className)<sp/>{</highlight></codeline>
<codeline lineno="8179"><highlight class="normal"><sp/><sp/>ScriptState*<sp/>scriptState<sp/>=<sp/>ScriptState::current(isolate);</highlight></codeline>
<codeline lineno="8180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compiledScriptCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8181"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>&lt;<sp/>WTF_ARRAY_LENGTH(kPrivateScriptSourcesForTesting);<sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="8184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(className<sp/>==<sp/>kPrivateScriptSourcesForTesting[index].className)<sp/>{</highlight></codeline>
<codeline lineno="8185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" kindref="member">compileAndRunPrivateScript</ref>(</highlight></codeline>
<codeline lineno="8186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scriptState,<sp/>kPrivateScriptSourcesForTesting[index].scriptClassName,</highlight></codeline>
<codeline lineno="8187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kPrivateScriptSourcesForTesting[index].source,</highlight></codeline>
<codeline lineno="8188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kPrivateScriptSourcesForTesting[index].<ref refid="_c_w_e-22_8c_1ac325ee2e130c33214318b5dea0073d47" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="8189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiledScriptCount++;</highlight></codeline>
<codeline lineno="8190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8192"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8193"><highlight class="normal"></highlight></codeline>
<codeline lineno="8194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>WTF_ARRAY_LENGTH(kPrivateScriptSources);</highlight></codeline>
<codeline lineno="8195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="8196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(className<sp/>==<sp/>kPrivateScriptSources[index].className)<sp/>{</highlight></codeline>
<codeline lineno="8197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>resourceData<sp/>=</highlight></codeline>
<codeline lineno="8198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loadResourceAsASCIIString(kPrivateScriptSources[index].resourceFile);</highlight></codeline>
<codeline lineno="8199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" kindref="member">compileAndRunPrivateScript</ref>(</highlight></codeline>
<codeline lineno="8200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scriptState,<sp/>kPrivateScriptSources[index].scriptClassName,</highlight></codeline>
<codeline lineno="8201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resourceData.utf8().data(),<sp/>resourceData.length());</highlight></codeline>
<codeline lineno="8202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiledScriptCount++;</highlight></codeline>
<codeline lineno="8203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8205"><highlight class="normal"></highlight></codeline>
<codeline lineno="8206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!compiledScriptCount)<sp/>{</highlight></codeline>
<codeline lineno="8207"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(FATAL)</highlight></codeline>
<codeline lineno="8208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Target<sp/>source<sp/>code<sp/>was<sp/>not<sp/>found.<sp/>(Class<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>className.utf8().data()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8213"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Value&gt;<sp/><ref refid="_c_w_e-79_8c_1ae55a2d2968dda83858240e1392eb2599" kindref="member">installPrivateScriptRunner</ref>(v8::Isolate*<sp/>isolate)<sp/>{</highlight></codeline>
<codeline lineno="8214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>className<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PrivateScriptRunner&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="8216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>WTF_ARRAY_LENGTH(kPrivateScriptSources);<sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="8217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(className<sp/>==<sp/>kPrivateScriptSources[index].className)</highlight></codeline>
<codeline lineno="8218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>==<sp/>WTF_ARRAY_LENGTH(kPrivateScriptSources))<sp/>{</highlight></codeline>
<codeline lineno="8221"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(FATAL)</highlight></codeline>
<codeline lineno="8222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Target<sp/>source<sp/>code<sp/>was<sp/>not<sp/>found.<sp/>(Class<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>className.utf8().data()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8226"><highlight class="normal"><sp/><sp/>String<sp/>resourceData<sp/>=</highlight></codeline>
<codeline lineno="8227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>loadResourceAsASCIIString(kPrivateScriptSources[index].resourceFile);</highlight></codeline>
<codeline lineno="8228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" kindref="member">compileAndRunPrivateScript</ref>(ScriptState::current(isolate),<sp/>className,</highlight></codeline>
<codeline lineno="8229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resourceData.utf8().data(),</highlight></codeline>
<codeline lineno="8230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resourceData.length());</highlight></codeline>
<codeline lineno="8231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8232"><highlight class="normal">v8::Local&lt;v8::Value&gt;<sp/>PrivateScriptRunner::runDOMAttributeGetter(</highlight></codeline>
<codeline lineno="8233"><highlight class="normal"><sp/><sp/><sp/><sp/>ScriptState*<sp/>scriptState,</highlight></codeline>
<codeline lineno="8234"><highlight class="normal"><sp/><sp/><sp/><sp/>ScriptState*<sp/>scriptStateInUserScript,</highlight></codeline>
<codeline lineno="8235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>className,</highlight></codeline>
<codeline lineno="8236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>attributeName,</highlight></codeline>
<codeline lineno="8237"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>holder)<sp/>{</highlight></codeline>
<codeline lineno="8238"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>scriptState-&gt;isolate();</highlight></codeline>
<codeline lineno="8239"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>classObject<sp/>=</highlight></codeline>
<codeline lineno="8240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a25d0e49f6c8a61ab56034685bfb55102" kindref="member">classObjectOfPrivateScript</ref>(scriptState,<sp/>className);</highlight></codeline>
<codeline lineno="8241"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>descriptor;</highlight></codeline>
<codeline lineno="8242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!classObject</highlight></codeline>
<codeline lineno="8243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetOwnPropertyDescriptor(scriptState-&gt;context(),</highlight></codeline>
<codeline lineno="8244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8String(isolate,<sp/>attributeName))</highlight></codeline>
<codeline lineno="8245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToLocal(&amp;descriptor)<sp/>||</highlight></codeline>
<codeline lineno="8246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!descriptor-&gt;IsObject())<sp/>{</highlight></codeline>
<codeline lineno="8247"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(FATAL)</highlight></codeline>
<codeline lineno="8248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Target<sp/>DOM<sp/>attribute<sp/>getter<sp/>was<sp/>not<sp/>found.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(Class<sp/>name<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>className<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Attribute<sp/>name<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>attributeName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8252"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>getter;</highlight></codeline>
<codeline lineno="8253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v8::Local&lt;v8::Object&gt;::Cast(descriptor)</highlight></codeline>
<codeline lineno="8254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;Get(scriptState-&gt;context(),<sp/>v8String(isolate,<sp/></highlight><highlight class="stringliteral">&quot;get&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="8255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToLocal(&amp;getter)<sp/>||</highlight></codeline>
<codeline lineno="8256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!getter-&gt;IsFunction())<sp/>{</highlight></codeline>
<codeline lineno="8257"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(FATAL)</highlight></codeline>
<codeline lineno="8258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Target<sp/>DOM<sp/>attribute<sp/>getter<sp/>was<sp/>not<sp/>found.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(Class<sp/>name<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>className<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Attribute<sp/>name<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>attributeName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8262"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a15864646880d3365e83126dce7e253f7" kindref="member">initializeHolderIfNeeded</ref>(scriptState,<sp/>classObject,<sp/>holder);</highlight></codeline>
<codeline lineno="8263"><highlight class="normal"><sp/><sp/>v8::TryCatch<sp/>block(isolate);</highlight></codeline>
<codeline lineno="8264"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>result;</highlight></codeline>
<codeline lineno="8265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!V8ScriptRunner::callInternalFunction(</highlight></codeline>
<codeline lineno="8266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;::Cast(getter),<sp/>holder,<sp/>0,<sp/>0,<sp/>isolate)</highlight></codeline>
<codeline lineno="8267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToLocal(&amp;result))<sp/>{</highlight></codeline>
<codeline lineno="8268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a097ff2ae9deb0314990702671c978cb1" kindref="member">rethrowExceptionInPrivateScript</ref>(isolate,<sp/>block,<sp/>scriptStateInUserScript,</highlight></codeline>
<codeline lineno="8269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExceptionState::GetterContext,</highlight></codeline>
<codeline lineno="8270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attributeName,<sp/>className);</highlight></codeline>
<codeline lineno="8271"><highlight class="normal"><sp/><sp/><sp/><sp/>block.ReThrow();</highlight></codeline>
<codeline lineno="8272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Value&gt;();</highlight></codeline>
<codeline lineno="8273"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8276"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PrivateScriptRunner::runDOMAttributeSetter(</highlight></codeline>
<codeline lineno="8277"><highlight class="normal"><sp/><sp/><sp/><sp/>ScriptState*<sp/>scriptState,</highlight></codeline>
<codeline lineno="8278"><highlight class="normal"><sp/><sp/><sp/><sp/>ScriptState*<sp/>scriptStateInUserScript,</highlight></codeline>
<codeline lineno="8279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>className,</highlight></codeline>
<codeline lineno="8280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>attributeName,</highlight></codeline>
<codeline lineno="8281"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>holder,</highlight></codeline>
<codeline lineno="8282"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>v8Value)<sp/>{</highlight></codeline>
<codeline lineno="8283"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>scriptState-&gt;isolate();</highlight></codeline>
<codeline lineno="8284"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>classObject<sp/>=</highlight></codeline>
<codeline lineno="8285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a25d0e49f6c8a61ab56034685bfb55102" kindref="member">classObjectOfPrivateScript</ref>(scriptState,<sp/>className);</highlight></codeline>
<codeline lineno="8286"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>descriptor;</highlight></codeline>
<codeline lineno="8287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!classObject</highlight></codeline>
<codeline lineno="8288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetOwnPropertyDescriptor(scriptState-&gt;context(),</highlight></codeline>
<codeline lineno="8289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8String(isolate,<sp/>attributeName))</highlight></codeline>
<codeline lineno="8290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToLocal(&amp;descriptor)<sp/>||</highlight></codeline>
<codeline lineno="8291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!descriptor-&gt;IsObject())<sp/>{</highlight></codeline>
<codeline lineno="8292"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(FATAL)</highlight></codeline>
<codeline lineno="8293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Target<sp/>DOM<sp/>attribute<sp/>setter<sp/>was<sp/>not<sp/>found.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(Class<sp/>name<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>className<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Attribute<sp/>name<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>attributeName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8297"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>setter;</highlight></codeline>
<codeline lineno="8298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v8::Local&lt;v8::Object&gt;::Cast(descriptor)</highlight></codeline>
<codeline lineno="8299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;Get(scriptState-&gt;context(),<sp/>v8String(isolate,<sp/></highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="8300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToLocal(&amp;setter)<sp/>||</highlight></codeline>
<codeline lineno="8301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!setter-&gt;IsFunction())<sp/>{</highlight></codeline>
<codeline lineno="8302"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(FATAL)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Target<sp/>DOM<sp/>attribute<sp/>setter<sp/>was<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;found.<sp/>(Class<sp/>name<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>className<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Attribute<sp/>name<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>attributeName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8306"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a15864646880d3365e83126dce7e253f7" kindref="member">initializeHolderIfNeeded</ref>(scriptState,<sp/>classObject,<sp/>holder);</highlight></codeline>
<codeline lineno="8307"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{v8Value};</highlight></codeline>
<codeline lineno="8308"><highlight class="normal"><sp/><sp/>v8::TryCatch<sp/>block(isolate);</highlight></codeline>
<codeline lineno="8309"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>result;</highlight></codeline>
<codeline lineno="8310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!V8ScriptRunner::callInternalFunction(</highlight></codeline>
<codeline lineno="8311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;::Cast(setter),<sp/>holder,</highlight></codeline>
<codeline lineno="8312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WTF_ARRAY_LENGTH(argv),<sp/>argv,<sp/>isolate)</highlight></codeline>
<codeline lineno="8313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToLocal(&amp;result))<sp/>{</highlight></codeline>
<codeline lineno="8314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a097ff2ae9deb0314990702671c978cb1" kindref="member">rethrowExceptionInPrivateScript</ref>(isolate,<sp/>block,<sp/>scriptStateInUserScript,</highlight></codeline>
<codeline lineno="8315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExceptionState::SetterContext,</highlight></codeline>
<codeline lineno="8316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attributeName,<sp/>className);</highlight></codeline>
<codeline lineno="8317"><highlight class="normal"><sp/><sp/><sp/><sp/>block.ReThrow();</highlight></codeline>
<codeline lineno="8318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8322"><highlight class="normal">v8::Local&lt;v8::Value&gt;<sp/>PrivateScriptRunner::runDOMMethod(</highlight></codeline>
<codeline lineno="8323"><highlight class="normal"><sp/><sp/><sp/><sp/>ScriptState*<sp/>scriptState,</highlight></codeline>
<codeline lineno="8324"><highlight class="normal"><sp/><sp/><sp/><sp/>ScriptState*<sp/>scriptStateInUserScript,</highlight></codeline>
<codeline lineno="8325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>className,</highlight></codeline>
<codeline lineno="8326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>methodName,</highlight></codeline>
<codeline lineno="8327"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>holder,</highlight></codeline>
<codeline lineno="8328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,</highlight></codeline>
<codeline lineno="8329"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="8330"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>classObject<sp/>=</highlight></codeline>
<codeline lineno="8331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a25d0e49f6c8a61ab56034685bfb55102" kindref="member">classObjectOfPrivateScript</ref>(scriptState,<sp/>className);</highlight></codeline>
<codeline lineno="8332"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>method;</highlight></codeline>
<codeline lineno="8333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!classObject</highlight></codeline>
<codeline lineno="8334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;Get(scriptState-&gt;context(),</highlight></codeline>
<codeline lineno="8335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8String(scriptState-&gt;isolate(),<sp/>methodName))</highlight></codeline>
<codeline lineno="8336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToLocal(&amp;method)<sp/>||</highlight></codeline>
<codeline lineno="8337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!method-&gt;IsFunction())<sp/>{</highlight></codeline>
<codeline lineno="8338"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(FATAL)</highlight></codeline>
<codeline lineno="8339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Target<sp/>DOM<sp/>method<sp/>was<sp/>not<sp/>found.<sp/>(Class<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>className<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Method<sp/>name<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>methodName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8343"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a15864646880d3365e83126dce7e253f7" kindref="member">initializeHolderIfNeeded</ref>(scriptState,<sp/>classObject,<sp/>holder);</highlight></codeline>
<codeline lineno="8344"><highlight class="normal"><sp/><sp/>v8::TryCatch<sp/>block(scriptState-&gt;isolate());</highlight></codeline>
<codeline lineno="8345"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>result;</highlight></codeline>
<codeline lineno="8346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!V8ScriptRunner::callInternalFunction(</highlight></codeline>
<codeline lineno="8347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;::Cast(method),<sp/>holder,<sp/>argc,<sp/>argv,</highlight></codeline>
<codeline lineno="8348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scriptState-&gt;isolate())</highlight></codeline>
<codeline lineno="8349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToLocal(&amp;result))<sp/>{</highlight></codeline>
<codeline lineno="8350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a097ff2ae9deb0314990702671c978cb1" kindref="member">rethrowExceptionInPrivateScript</ref>(</highlight></codeline>
<codeline lineno="8351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scriptState-&gt;isolate(),<sp/>block,<sp/>scriptStateInUserScript,</highlight></codeline>
<codeline lineno="8352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExceptionState::ExecutionContext,<sp/>methodName,<sp/>className);</highlight></codeline>
<codeline lineno="8353"><highlight class="normal"><sp/><sp/><sp/><sp/>block.ReThrow();</highlight></codeline>
<codeline lineno="8354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Value&gt;();</highlight></codeline>
<codeline lineno="8355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8358"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::AddTestingObserver(TestingObserver*<sp/>observer)<sp/>{</highlight></codeline>
<codeline lineno="8359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!testing_observers_.HasObserver(observer))</highlight></codeline>
<codeline lineno="8360"><highlight class="normal"><sp/><sp/><sp/><sp/>testing_observers_.AddObserver(observer);</highlight></codeline>
<codeline lineno="8361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8362"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::BroadcastEventToObservers(</highlight></codeline>
<codeline lineno="8363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>event_key)<sp/>{</highlight></codeline>
<codeline lineno="8364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(committed_load_)</highlight></codeline>
<codeline lineno="8365"><highlight class="normal"><sp/><sp/><sp/><sp/>committed_load_-&gt;BroadcastEventToObservers(event_key);</highlight></codeline>
<codeline lineno="8366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8367"><highlight class="normal">MetricsWebContentsObserver*<sp/>MetricsWebContentsObserver::CreateForWebContents(</highlight></codeline>
<codeline lineno="8368"><highlight class="normal"><sp/><sp/><sp/><sp/>content::WebContents*<sp/>web_contents,</highlight></codeline>
<codeline lineno="8369"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;PageLoadMetricsEmbedderInterface&gt;<sp/>embedder_interface)<sp/>{</highlight></codeline>
<codeline lineno="8370"><highlight class="normal"><sp/><sp/>DCHECK(web_contents);</highlight></codeline>
<codeline lineno="8371"><highlight class="normal"></highlight></codeline>
<codeline lineno="8372"><highlight class="normal"><sp/><sp/>MetricsWebContentsObserver*<sp/>metrics<sp/>=<sp/>FromWebContents(web_contents);</highlight></codeline>
<codeline lineno="8373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!metrics)<sp/>{</highlight></codeline>
<codeline lineno="8374"><highlight class="normal"><sp/><sp/><sp/><sp/>metrics<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver(web_contents,</highlight></codeline>
<codeline lineno="8375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(embedder_interface));</highlight></codeline>
<codeline lineno="8376"><highlight class="normal"><sp/><sp/><sp/><sp/>web_contents-&gt;SetUserData(UserDataKey(),<sp/>base::WrapUnique(metrics));</highlight></codeline>
<codeline lineno="8377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>metrics;</highlight></codeline>
<codeline lineno="8379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8380"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::DidFinishNavigation(</highlight></codeline>
<codeline lineno="8381"><highlight class="normal"><sp/><sp/><sp/><sp/>content::NavigationHandle*<sp/>navigation_handle)<sp/>{</highlight></codeline>
<codeline lineno="8382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!navigation_handle-&gt;IsInMainFrame())<sp/>{</highlight></codeline>
<codeline lineno="8383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(committed_load_<sp/>&amp;&amp;<sp/>navigation_handle-&gt;GetParentFrame()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ae5f4cacd0f5018edab94ff06214aa7f5" kindref="member">GetMainFrame</ref>(navigation_handle-&gt;GetParentFrame())<sp/>==</highlight></codeline>
<codeline lineno="8385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>web_contents()-&gt;GetMainFrame())<sp/>{</highlight></codeline>
<codeline lineno="8386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>committed_load_-&gt;DidFinishSubFrameNavigation(navigation_handle);</highlight></codeline>
<codeline lineno="8387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>committed_load_-&gt;metrics_update_dispatcher()-&gt;DidFinishSubFrameNavigation(</highlight></codeline>
<codeline lineno="8388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>navigation_handle);</highlight></codeline>
<codeline lineno="8389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8392"><highlight class="normal"></highlight></codeline>
<codeline lineno="8393"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;PageLoadTracker&gt;<sp/>finished_nav(</highlight></codeline>
<codeline lineno="8394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move(provisional_loads_[navigation_handle]));</highlight></codeline>
<codeline lineno="8395"><highlight class="normal"><sp/><sp/>provisional_loads_.erase(navigation_handle);</highlight></codeline>
<codeline lineno="8396"><highlight class="normal"></highlight></codeline>
<codeline lineno="8397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(navigation_handle-&gt;HasCommitted()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>navigation_handle-&gt;IsSameDocument())<sp/>{</highlight></codeline>
<codeline lineno="8399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(finished_nav)</highlight></codeline>
<codeline lineno="8400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>finished_nav-&gt;StopTracking();</highlight></codeline>
<codeline lineno="8401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(committed_load_)</highlight></codeline>
<codeline lineno="8402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>committed_load_-&gt;DidCommitSameDocumentNavigation(navigation_handle);</highlight></codeline>
<codeline lineno="8403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8405"><highlight class="normal"></highlight></codeline>
<codeline lineno="8406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!navigation_handle-&gt;HasCommitted()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>navigation_handle-&gt;GetNetErrorCode()<sp/>==<sp/>net::ERR_ABORTED<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>navigation_handle-&gt;GetResponseHeaders())<sp/>{</highlight></codeline>
<codeline lineno="8409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(finished_nav)<sp/>{</highlight></codeline>
<codeline lineno="8410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>finished_nav-&gt;DidInternalNavigationAbort(navigation_handle);</highlight></codeline>
<codeline lineno="8411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>finished_nav-&gt;StopTracking();</highlight></codeline>
<codeline lineno="8412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8415"><highlight class="normal"></highlight></codeline>
<codeline lineno="8416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_track<sp/>=</highlight></codeline>
<codeline lineno="8417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>finished_nav<sp/>&amp;&amp;<sp/>ShouldTrackNavigation(navigation_handle);</highlight></codeline>
<codeline lineno="8418"><highlight class="normal"></highlight></codeline>
<codeline lineno="8419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(finished_nav<sp/>&amp;&amp;<sp/>!should_track)</highlight></codeline>
<codeline lineno="8420"><highlight class="normal"><sp/><sp/><sp/><sp/>finished_nav-&gt;StopTracking();</highlight></codeline>
<codeline lineno="8421"><highlight class="normal"></highlight></codeline>
<codeline lineno="8422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(navigation_handle-&gt;HasCommitted())<sp/>{</highlight></codeline>
<codeline lineno="8423"><highlight class="normal"><sp/><sp/><sp/><sp/>UserInitiatedInfo<sp/>user_initiated_info<sp/>=</highlight></codeline>
<codeline lineno="8424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finished_nav</highlight></codeline>
<codeline lineno="8425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>finished_nav-&gt;user_initiated_info()</highlight></codeline>
<codeline lineno="8426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="_c_w_e-79_8c_1a8d6b5d15c3cecadf447e429a5a66cd7a" kindref="member">CreateUserInitiatedInfo</ref>(navigation_handle,<sp/>committed_load_.get());</highlight></codeline>
<codeline lineno="8427"><highlight class="normal"></highlight></codeline>
<codeline lineno="8428"><highlight class="normal"><sp/><sp/><sp/><sp/>NotifyPageEndAllLoadsWithTimestamp(</highlight></codeline>
<codeline lineno="8429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EndReasonForPageTransition(navigation_handle-&gt;GetPageTransition()),</highlight></codeline>
<codeline lineno="8430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user_initiated_info,<sp/>navigation_handle-&gt;NavigationStart(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8431"><highlight class="normal"></highlight></codeline>
<codeline lineno="8432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(should_track)<sp/>{</highlight></codeline>
<codeline lineno="8433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HandleCommittedNavigationForTrackedLoad(navigation_handle,</highlight></codeline>
<codeline lineno="8434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(finished_nav));</highlight></codeline>
<codeline lineno="8435"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>committed_load_.reset();</highlight></codeline>
<codeline lineno="8437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8438"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(should_track)<sp/>{</highlight></codeline>
<codeline lineno="8439"><highlight class="normal"><sp/><sp/><sp/><sp/>HandleFailedNavigationForTrackedLoad(navigation_handle,</highlight></codeline>
<codeline lineno="8440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(finished_nav));</highlight></codeline>
<codeline lineno="8441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::DidRedirectNavigation(</highlight></codeline>
<codeline lineno="8444"><highlight class="normal"><sp/><sp/><sp/><sp/>content::NavigationHandle*<sp/>navigation_handle)<sp/>{</highlight></codeline>
<codeline lineno="8445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!navigation_handle-&gt;IsInMainFrame())</highlight></codeline>
<codeline lineno="8446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>provisional_loads_.find(navigation_handle);</highlight></codeline>
<codeline lineno="8448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>provisional_loads_.end())</highlight></codeline>
<codeline lineno="8449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8450"><highlight class="normal"><sp/><sp/>it-&gt;second-&gt;Redirect(navigation_handle);</highlight></codeline>
<codeline lineno="8451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8452"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::FlushMetricsOnAppEnterBackground()<sp/>{</highlight></codeline>
<codeline lineno="8453"><highlight class="normal"></highlight></codeline>
<codeline lineno="8454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(committed_load_)</highlight></codeline>
<codeline lineno="8455"><highlight class="normal"><sp/><sp/><sp/><sp/>committed_load_-&gt;FlushMetricsOnAppEnterBackground();</highlight></codeline>
<codeline lineno="8456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kv<sp/>:<sp/>provisional_loads_)<sp/>{</highlight></codeline>
<codeline lineno="8457"><highlight class="normal"><sp/><sp/><sp/><sp/>kv.second-&gt;FlushMetricsOnAppEnterBackground();</highlight></codeline>
<codeline lineno="8458"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tracker<sp/>:<sp/>aborted_provisional_loads_)<sp/>{</highlight></codeline>
<codeline lineno="8460"><highlight class="normal"><sp/><sp/><sp/><sp/>tracker-&gt;FlushMetricsOnAppEnterBackground();</highlight></codeline>
<codeline lineno="8461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8463"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::FrameDisplayStateChanged(</highlight></codeline>
<codeline lineno="8464"><highlight class="normal"><sp/><sp/><sp/><sp/>content::RenderFrameHost*<sp/>render_frame_host,</highlight></codeline>
<codeline lineno="8465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_display_none)<sp/>{</highlight></codeline>
<codeline lineno="8466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(committed_load_)</highlight></codeline>
<codeline lineno="8467"><highlight class="normal"><sp/><sp/><sp/><sp/>committed_load_-&gt;FrameDisplayStateChanged(render_frame_host,</highlight></codeline>
<codeline lineno="8468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_display_none);</highlight></codeline>
<codeline lineno="8469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8470"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::FrameReceivedFirstUserActivation(</highlight></codeline>
<codeline lineno="8471"><highlight class="normal"><sp/><sp/><sp/><sp/>content::RenderFrameHost*<sp/>render_frame_host)<sp/>{</highlight></codeline>
<codeline lineno="8472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(committed_load_)</highlight></codeline>
<codeline lineno="8473"><highlight class="normal"><sp/><sp/><sp/><sp/>committed_load_-&gt;FrameReceivedFirstUserActivation(render_frame_host);</highlight></codeline>
<codeline lineno="8474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8475"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::FrameSizeChanged(</highlight></codeline>
<codeline lineno="8476"><highlight class="normal"><sp/><sp/><sp/><sp/>content::RenderFrameHost*<sp/>render_frame_host,</highlight></codeline>
<codeline lineno="8477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gfx::Size&amp;<sp/>frame_size)<sp/>{</highlight></codeline>
<codeline lineno="8478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(committed_load_)</highlight></codeline>
<codeline lineno="8479"><highlight class="normal"><sp/><sp/><sp/><sp/>committed_load_-&gt;FrameSizeChanged(render_frame_host,<sp/>frame_size);</highlight></codeline>
<codeline lineno="8480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8481" refid="_c_w_e-79_8c_1ae5f4cacd0f5018edab94ff06214aa7f5" refkind="member"><highlight class="normal">content::RenderFrameHost*<sp/><ref refid="_c_w_e-79_8c_1ae5f4cacd0f5018edab94ff06214aa7f5" kindref="member">GetMainFrame</ref>(content::RenderFrameHost*<sp/>rfh)<sp/>{</highlight></codeline>
<codeline lineno="8482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(rfh-&gt;GetParent()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8483"><highlight class="normal"><sp/><sp/><sp/><sp/>rfh<sp/>=<sp/>rfh-&gt;GetParent();</highlight></codeline>
<codeline lineno="8484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rfh;</highlight></codeline>
<codeline lineno="8485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8486"><highlight class="normal">MetricsWebContentsObserver::GetPageLoadExtraInfoForCommittedLoad()<sp/>{</highlight></codeline>
<codeline lineno="8487"><highlight class="normal"><sp/><sp/>DCHECK(committed_load_);</highlight></codeline>
<codeline lineno="8488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>committed_load_-&gt;ComputePageLoadExtraInfo();</highlight></codeline>
<codeline lineno="8489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8490"><highlight class="normal">PageLoadTracker*<sp/>MetricsWebContentsObserver::GetTrackerOrNullForRequest(</highlight></codeline>
<codeline lineno="8491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>content::GlobalRequestID&amp;<sp/>request_id,</highlight></codeline>
<codeline lineno="8492"><highlight class="normal"><sp/><sp/><sp/><sp/>content::RenderFrameHost*<sp/>render_frame_host_or_null,</highlight></codeline>
<codeline lineno="8493"><highlight class="normal"><sp/><sp/><sp/><sp/>content::ResourceType<sp/>resource_type,</highlight></codeline>
<codeline lineno="8494"><highlight class="normal"><sp/><sp/><sp/><sp/>base::TimeTicks<sp/>creation_time)<sp/>{</highlight></codeline>
<codeline lineno="8495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resource_type<sp/>==<sp/>content::RESOURCE_TYPE_MAIN_FRAME)<sp/>{</highlight></codeline>
<codeline lineno="8496"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(request_id<sp/>!=<sp/>content::GlobalRequestID());</highlight></codeline>
<codeline lineno="8497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kv<sp/>:<sp/>provisional_loads_)<sp/>{</highlight></codeline>
<codeline lineno="8498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PageLoadTracker*<sp/>candidate<sp/>=<sp/>kv.second.get();</highlight></codeline>
<codeline lineno="8499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(candidate-&gt;HasMatchingNavigationRequestID(request_id))<sp/>{</highlight></codeline>
<codeline lineno="8500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>candidate;</highlight></codeline>
<codeline lineno="8501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(committed_load_<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>committed_load_-&gt;HasMatchingNavigationRequestID(request_id))<sp/>{</highlight></codeline>
<codeline lineno="8505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>committed_load_.get();</highlight></codeline>
<codeline lineno="8506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8507"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!committed_load_<sp/>||<sp/>creation_time<sp/>&lt;<sp/>committed_load_-&gt;navigation_start())</highlight></codeline>
<codeline lineno="8509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8510"><highlight class="normal"></highlight></codeline>
<codeline lineno="8511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resource_type<sp/>==<sp/>content::RESOURCE_TYPE_SUB_FRAME)</highlight></codeline>
<codeline lineno="8512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>committed_load_.get();</highlight></codeline>
<codeline lineno="8513"><highlight class="normal"></highlight></codeline>
<codeline lineno="8514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!render_frame_host_or_null)</highlight></codeline>
<codeline lineno="8515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8516"><highlight class="normal"></highlight></codeline>
<codeline lineno="8517"><highlight class="normal"><sp/><sp/><sp/><sp/>content::RenderFrameHost*<sp/>main_frame_for_resource<sp/>=</highlight></codeline>
<codeline lineno="8518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ae5f4cacd0f5018edab94ff06214aa7f5" kindref="member">GetMainFrame</ref>(render_frame_host_or_null);</highlight></codeline>
<codeline lineno="8519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(main_frame_for_resource<sp/>==<sp/>web_contents()-&gt;<ref refid="_c_w_e-79_8c_1ae5f4cacd0f5018edab94ff06214aa7f5" kindref="member">GetMainFrame</ref>())</highlight></codeline>
<codeline lineno="8520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>committed_load_.get();</highlight></codeline>
<codeline lineno="8521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8524"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::HandleCommittedNavigationForTrackedLoad(</highlight></codeline>
<codeline lineno="8525"><highlight class="normal"><sp/><sp/><sp/><sp/>content::NavigationHandle*<sp/>navigation_handle,</highlight></codeline>
<codeline lineno="8526"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;PageLoadTracker&gt;<sp/>tracker)<sp/>{</highlight></codeline>
<codeline lineno="8527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsNavigationUserInitiated(navigation_handle)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(navigation_handle-&gt;GetPageTransition()<sp/>&amp;</highlight></codeline>
<codeline lineno="8529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ui::PAGE_TRANSITION_CLIENT_REDIRECT)<sp/>!=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>committed_load_)<sp/>{</highlight></codeline>
<codeline lineno="8531"><highlight class="normal"><sp/><sp/><sp/><sp/>committed_load_-&gt;NotifyClientRedirectTo(*tracker);</highlight></codeline>
<codeline lineno="8532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8533"><highlight class="normal"></highlight></codeline>
<codeline lineno="8534"><highlight class="normal"><sp/><sp/>committed_load_<sp/>=<sp/>std::move(tracker);</highlight></codeline>
<codeline lineno="8535"><highlight class="normal"><sp/><sp/>committed_load_-&gt;Commit(navigation_handle);</highlight></codeline>
<codeline lineno="8536"><highlight class="normal"><sp/><sp/>DCHECK(committed_load_-&gt;did_commit());</highlight></codeline>
<codeline lineno="8537"><highlight class="normal"></highlight></codeline>
<codeline lineno="8538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>observer<sp/>:<sp/>testing_observers_)</highlight></codeline>
<codeline lineno="8539"><highlight class="normal"><sp/><sp/><sp/><sp/>observer.OnCommit(committed_load_.get());</highlight></codeline>
<codeline lineno="8540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8541"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::HandleFailedNavigationForTrackedLoad(</highlight></codeline>
<codeline lineno="8542"><highlight class="normal"><sp/><sp/><sp/><sp/>content::NavigationHandle*<sp/>navigation_handle,</highlight></codeline>
<codeline lineno="8543"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;PageLoadTracker&gt;<sp/>tracker)<sp/>{</highlight></codeline>
<codeline lineno="8544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::TimeTicks<sp/>now<sp/>=<sp/>base::TimeTicks::Now();</highlight></codeline>
<codeline lineno="8545"><highlight class="normal"><sp/><sp/>tracker-&gt;FailedProvisionalLoad(navigation_handle,<sp/>now);</highlight></codeline>
<codeline lineno="8546"><highlight class="normal"></highlight></codeline>
<codeline lineno="8547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>net::Error<sp/>error<sp/>=<sp/>navigation_handle-&gt;GetNetErrorCode();</highlight></codeline>
<codeline lineno="8548"><highlight class="normal"></highlight></codeline>
<codeline lineno="8549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_aborted_provisional_load<sp/>=</highlight></codeline>
<codeline lineno="8550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>==<sp/>net::OK<sp/>||<sp/>error<sp/>==<sp/>net::ERR_ABORTED;</highlight></codeline>
<codeline lineno="8551"><highlight class="normal"></highlight></codeline>
<codeline lineno="8552"><highlight class="normal"><sp/><sp/>tracker-&gt;NotifyPageEnd(</highlight></codeline>
<codeline lineno="8553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>is_aborted_provisional_load<sp/>?<sp/>END_OTHER<sp/>:<sp/>END_PROVISIONAL_LOAD_FAILED,</highlight></codeline>
<codeline lineno="8554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UserInitiatedInfo::NotUserInitiated(),<sp/>now,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8555"><highlight class="normal"></highlight></codeline>
<codeline lineno="8556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_aborted_provisional_load)</highlight></codeline>
<codeline lineno="8557"><highlight class="normal"><sp/><sp/><sp/><sp/>aborted_provisional_loads_.push_back(std::move(tracker));</highlight></codeline>
<codeline lineno="8558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8559"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::MediaStartedPlaying(</highlight></codeline>
<codeline lineno="8560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>content::WebContentsObserver::MediaPlayerInfo&amp;<sp/>video_type,</highlight></codeline>
<codeline lineno="8561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>content::WebContentsObserver::MediaPlayerId&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1ae5f4cacd0f5018edab94ff06214aa7f5" kindref="member">GetMainFrame</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.render_frame_host)<sp/>!=<sp/>web_contents()-&gt;<ref refid="_c_w_e-79_8c_1ae5f4cacd0f5018edab94ff06214aa7f5" kindref="member">GetMainFrame</ref>())<sp/>{</highlight></codeline>
<codeline lineno="8563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(committed_load_)</highlight></codeline>
<codeline lineno="8566"><highlight class="normal"><sp/><sp/><sp/><sp/>committed_load_-&gt;MediaStartedPlaying(</highlight></codeline>
<codeline lineno="8567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>video_type,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.render_frame_host<sp/>==<sp/>web_contents()-&gt;<ref refid="_c_w_e-79_8c_1ae5f4cacd0f5018edab94ff06214aa7f5" kindref="member">GetMainFrame</ref>());</highlight></codeline>
<codeline lineno="8568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8569"><highlight class="normal">MetricsWebContentsObserver::MetricsWebContentsObserver(</highlight></codeline>
<codeline lineno="8570"><highlight class="normal"><sp/><sp/><sp/><sp/>content::WebContents*<sp/>web_contents,</highlight></codeline>
<codeline lineno="8571"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;PageLoadMetricsEmbedderInterface&gt;<sp/>embedder_interface)</highlight></codeline>
<codeline lineno="8572"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>content::WebContentsObserver(web_contents),</highlight></codeline>
<codeline lineno="8573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in_foreground_(web_contents-&gt;GetVisibility()<sp/>!=</highlight></codeline>
<codeline lineno="8574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content::Visibility::HIDDEN),</highlight></codeline>
<codeline lineno="8575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>embedder_interface_(std::move(embedder_interface)),</highlight></codeline>
<codeline lineno="8576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>has_navigated_(false),</highlight></codeline>
<codeline lineno="8577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>page_load_metrics_binding_(web_contents,<sp/>this)<sp/>{</highlight></codeline>
<codeline lineno="8578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_prerender<sp/>=</highlight></codeline>
<codeline lineno="8579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prerender::PrerenderContents::FromWebContents(web_contents)<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_prerender)</highlight></codeline>
<codeline lineno="8581"><highlight class="normal"><sp/><sp/><sp/><sp/>in_foreground_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8582"><highlight class="normal"></highlight></codeline>
<codeline lineno="8583"><highlight class="normal"><sp/><sp/>RegisterInputEventObserver(web_contents-&gt;GetRenderViewHost());</highlight></codeline>
<codeline lineno="8584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8585"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::NavigationStopped()<sp/>{</highlight></codeline>
<codeline lineno="8586"><highlight class="normal"><sp/><sp/>NotifyPageEndAllLoads(END_STOP,<sp/>UserInitiatedInfo::NotUserInitiated());</highlight></codeline>
<codeline lineno="8587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8588"><highlight class="normal">MetricsWebContentsObserver::NotifyAbortedProvisionalLoadsNewNavigation(</highlight></codeline>
<codeline lineno="8589"><highlight class="normal"><sp/><sp/><sp/><sp/>content::NavigationHandle*<sp/>new_navigation,</highlight></codeline>
<codeline lineno="8590"><highlight class="normal"><sp/><sp/><sp/><sp/>UserInitiatedInfo<sp/>user_initiated_info)<sp/>{</highlight></codeline>
<codeline lineno="8591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aborted_provisional_loads_.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="8592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aborted_provisional_loads_.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="8594"><highlight class="normal"><sp/><sp/><sp/><sp/>RecordInternalError(ERR_NAVIGATION_SIGNALS_MULIPLE_ABORTED_LOADS);</highlight></codeline>
<codeline lineno="8595"><highlight class="normal"></highlight></codeline>
<codeline lineno="8596"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;PageLoadTracker&gt;<sp/>last_aborted_load<sp/>=</highlight></codeline>
<codeline lineno="8597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move(aborted_provisional_loads_.back());</highlight></codeline>
<codeline lineno="8598"><highlight class="normal"><sp/><sp/>aborted_provisional_loads_.pop_back();</highlight></codeline>
<codeline lineno="8599"><highlight class="normal"></highlight></codeline>
<codeline lineno="8600"><highlight class="normal"><sp/><sp/>base::TimeTicks<sp/>timestamp<sp/>=<sp/>new_navigation-&gt;NavigationStart();</highlight></codeline>
<codeline lineno="8601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_aborted_load-&gt;IsLikelyProvisionalAbort(timestamp))<sp/>{</highlight></codeline>
<codeline lineno="8602"><highlight class="normal"><sp/><sp/><sp/><sp/>last_aborted_load-&gt;UpdatePageEnd(</highlight></codeline>
<codeline lineno="8603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EndReasonForPageTransition(new_navigation-&gt;GetPageTransition()),</highlight></codeline>
<codeline lineno="8604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user_initiated_info,<sp/>timestamp,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8605"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8606"><highlight class="normal"></highlight></codeline>
<codeline lineno="8607"><highlight class="normal"><sp/><sp/>aborted_provisional_loads_.clear();</highlight></codeline>
<codeline lineno="8608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>last_aborted_load;</highlight></codeline>
<codeline lineno="8609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8610"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::NotifyPageEndAllLoads(</highlight></codeline>
<codeline lineno="8611"><highlight class="normal"><sp/><sp/><sp/><sp/>PageEndReason<sp/>page_end_reason,</highlight></codeline>
<codeline lineno="8612"><highlight class="normal"><sp/><sp/><sp/><sp/>UserInitiatedInfo<sp/>user_initiated_info)<sp/>{</highlight></codeline>
<codeline lineno="8613"><highlight class="normal"><sp/><sp/>NotifyPageEndAllLoadsWithTimestamp(page_end_reason,<sp/>user_initiated_info,</highlight></codeline>
<codeline lineno="8614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::TimeTicks::Now(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8616"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::NotifyPageEndAllLoadsWithTimestamp(</highlight></codeline>
<codeline lineno="8617"><highlight class="normal"><sp/><sp/><sp/><sp/>PageEndReason<sp/>page_end_reason,</highlight></codeline>
<codeline lineno="8618"><highlight class="normal"><sp/><sp/><sp/><sp/>UserInitiatedInfo<sp/>user_initiated_info,</highlight></codeline>
<codeline lineno="8619"><highlight class="normal"><sp/><sp/><sp/><sp/>base::TimeTicks<sp/>timestamp,</highlight></codeline>
<codeline lineno="8620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_certainly_browser_timestamp)<sp/>{</highlight></codeline>
<codeline lineno="8621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(committed_load_)<sp/>{</highlight></codeline>
<codeline lineno="8622"><highlight class="normal"><sp/><sp/><sp/><sp/>committed_load_-&gt;NotifyPageEnd(page_end_reason,<sp/>user_initiated_info,</highlight></codeline>
<codeline lineno="8623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timestamp,<sp/>is_certainly_browser_timestamp);</highlight></codeline>
<codeline lineno="8624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kv<sp/>:<sp/>provisional_loads_)<sp/>{</highlight></codeline>
<codeline lineno="8626"><highlight class="normal"><sp/><sp/><sp/><sp/>kv.second-&gt;NotifyPageEnd(page_end_reason,<sp/>user_initiated_info,<sp/>timestamp,</highlight></codeline>
<codeline lineno="8627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_certainly_browser_timestamp);</highlight></codeline>
<codeline lineno="8628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tracker<sp/>:<sp/>aborted_provisional_loads_)<sp/>{</highlight></codeline>
<codeline lineno="8630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tracker-&gt;IsLikelyProvisionalAbort(timestamp))<sp/>{</highlight></codeline>
<codeline lineno="8631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tracker-&gt;UpdatePageEnd(page_end_reason,<sp/>user_initiated_info,<sp/>timestamp,</highlight></codeline>
<codeline lineno="8632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_certainly_browser_timestamp);</highlight></codeline>
<codeline lineno="8633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8634"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8635"><highlight class="normal"><sp/><sp/>aborted_provisional_loads_.clear();</highlight></codeline>
<codeline lineno="8636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8637"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::OnBrowserFeatureUsage(</highlight></codeline>
<codeline lineno="8638"><highlight class="normal"><sp/><sp/><sp/><sp/>content::RenderFrameHost*<sp/>render_frame_host,</highlight></codeline>
<codeline lineno="8639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mojom::PageLoadFeatures&amp;<sp/>new_features)<sp/>{</highlight></codeline>
<codeline lineno="8640"><highlight class="normal"><sp/><sp/>DCHECK_EQ(<ref refid="_c_w_e-79_8c_1ae5f4cacd0f5018edab94ff06214aa7f5" kindref="member">GetMainFrame</ref>(render_frame_host),<sp/>web_contents()-&gt;<ref refid="_c_w_e-79_8c_1ae5f4cacd0f5018edab94ff06214aa7f5" kindref="member">GetMainFrame</ref>());</highlight></codeline>
<codeline lineno="8641"><highlight class="normal"></highlight></codeline>
<codeline lineno="8642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!committed_load_)<sp/>{</highlight></codeline>
<codeline lineno="8643"><highlight class="normal"><sp/><sp/><sp/><sp/>RecordInternalError(ERR_BROWSER_USAGE_WITH_NO_RELEVANT_LOAD);</highlight></codeline>
<codeline lineno="8644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8645"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8646"><highlight class="normal"></highlight></codeline>
<codeline lineno="8647"><highlight class="normal"><sp/><sp/>committed_load_-&gt;metrics_update_dispatcher()-&gt;UpdateFeatures(</highlight></codeline>
<codeline lineno="8648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>render_frame_host,<sp/>new_features);</highlight></codeline>
<codeline lineno="8649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8650"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::TestingObserver::OnGoingAway()<sp/>{</highlight></codeline>
<codeline lineno="8651"><highlight class="normal"><sp/><sp/>observer_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8653"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::OnInputEvent(</highlight></codeline>
<codeline lineno="8654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>blink::WebInputEvent&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline lineno="8655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event.GetType()<sp/>==<sp/>blink::WebInputEvent::Type::kUndefined)</highlight></codeline>
<codeline lineno="8656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8657"><highlight class="normal"></highlight></codeline>
<codeline lineno="8658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(committed_load_)</highlight></codeline>
<codeline lineno="8659"><highlight class="normal"><sp/><sp/><sp/><sp/>committed_load_-&gt;OnInputEvent(event);</highlight></codeline>
<codeline lineno="8660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8661"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::OnRequestComplete(</highlight></codeline>
<codeline lineno="8662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL&amp;<sp/>url,</highlight></codeline>
<codeline lineno="8663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>net::HostPortPair&amp;<sp/>host_port_pair,</highlight></codeline>
<codeline lineno="8664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frame_tree_node_id,</highlight></codeline>
<codeline lineno="8665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>content::GlobalRequestID&amp;<sp/>request_id,</highlight></codeline>
<codeline lineno="8666"><highlight class="normal"><sp/><sp/><sp/><sp/>content::RenderFrameHost*<sp/>render_frame_host_or_null,</highlight></codeline>
<codeline lineno="8667"><highlight class="normal"><sp/><sp/><sp/><sp/>content::ResourceType<sp/>resource_type,</highlight></codeline>
<codeline lineno="8668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>was_cached,</highlight></codeline>
<codeline lineno="8669"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;data_reduction_proxy::DataReductionProxyData&gt;</highlight></codeline>
<codeline lineno="8670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_reduction_proxy_data,</highlight></codeline>
<codeline lineno="8671"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>raw_body_bytes,</highlight></codeline>
<codeline lineno="8672"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>original_content_length,</highlight></codeline>
<codeline lineno="8673"><highlight class="normal"><sp/><sp/><sp/><sp/>base::TimeTicks<sp/>creation_time,</highlight></codeline>
<codeline lineno="8674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>net_error,</highlight></codeline>
<codeline lineno="8675"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;net::LoadTimingInfo&gt;<sp/>load_timing_info)<sp/>{</highlight></codeline>
<codeline lineno="8676"><highlight class="normal"><sp/><sp/>DCHECK(!base::FeatureList::IsEnabled(network::features::kNetworkService));</highlight></codeline>
<codeline lineno="8677"><highlight class="normal"></highlight></codeline>
<codeline lineno="8678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!url.SchemeIsHTTPOrHTTPS())</highlight></codeline>
<codeline lineno="8679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8680"><highlight class="normal"></highlight></codeline>
<codeline lineno="8681"><highlight class="normal"><sp/><sp/>PageLoadTracker*<sp/>tracker<sp/>=<sp/>GetTrackerOrNullForRequest(</highlight></codeline>
<codeline lineno="8682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>request_id,<sp/>render_frame_host_or_null,<sp/>resource_type,<sp/>creation_time);</highlight></codeline>
<codeline lineno="8683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tracker)<sp/>{</highlight></codeline>
<codeline lineno="8684"><highlight class="normal"><sp/><sp/><sp/><sp/>ExtraRequestCompleteInfo<sp/>extra_request_complete_info(</highlight></codeline>
<codeline lineno="8685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>url,<sp/>host_port_pair,<sp/>frame_tree_node_id,<sp/>was_cached,<sp/>raw_body_bytes,</highlight></codeline>
<codeline lineno="8686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>was_cached<sp/>?<sp/>0<sp/>:<sp/>original_content_length,</highlight></codeline>
<codeline lineno="8687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(data_reduction_proxy_data),<sp/>resource_type,<sp/>net_error,</highlight></codeline>
<codeline lineno="8688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(load_timing_info));</highlight></codeline>
<codeline lineno="8689"><highlight class="normal"><sp/><sp/><sp/><sp/>tracker-&gt;OnLoadedResource(extra_request_complete_info);</highlight></codeline>
<codeline lineno="8690"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8691"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8692"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::OnTimingUpdated(</highlight></codeline>
<codeline lineno="8693"><highlight class="normal"><sp/><sp/><sp/><sp/>content::RenderFrameHost*<sp/>render_frame_host,</highlight></codeline>
<codeline lineno="8694"><highlight class="normal"><sp/><sp/><sp/><sp/>mojom::PageLoadTimingPtr<sp/>timing,</highlight></codeline>
<codeline lineno="8695"><highlight class="normal"><sp/><sp/><sp/><sp/>mojom::PageLoadMetadataPtr<sp/>metadata,</highlight></codeline>
<codeline lineno="8696"><highlight class="normal"><sp/><sp/><sp/><sp/>mojom::PageLoadFeaturesPtr<sp/>new_features,</highlight></codeline>
<codeline lineno="8697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;mojom::ResourceDataUpdatePtr&gt;&amp;<sp/>resources,</highlight></codeline>
<codeline lineno="8698"><highlight class="normal"><sp/><sp/><sp/><sp/>mojom::PageRenderDataPtr<sp/>render_data)<sp/>{</highlight></codeline>
<codeline lineno="8699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1ae5f4cacd0f5018edab94ff06214aa7f5" kindref="member">GetMainFrame</ref>(render_frame_host)<sp/>!=<sp/>web_contents()-&gt;<ref refid="_c_w_e-79_8c_1ae5f4cacd0f5018edab94ff06214aa7f5" kindref="member">GetMainFrame</ref>())<sp/>{</highlight></codeline>
<codeline lineno="8700"><highlight class="normal"><sp/><sp/><sp/><sp/>RecordInternalError(ERR_IPC_FROM_WRONG_FRAME);</highlight></codeline>
<codeline lineno="8701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8702"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8703"><highlight class="normal"></highlight></codeline>
<codeline lineno="8704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_main_frame<sp/>=<sp/>(render_frame_host-&gt;GetParent()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_main_frame)<sp/>{</highlight></codeline>
<codeline lineno="8706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>error<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!committed_load_)<sp/>{</highlight></codeline>
<codeline lineno="8708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RecordInternalError(ERR_IPC_WITH_NO_RELEVANT_LOAD);</highlight></codeline>
<codeline lineno="8709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8711"><highlight class="normal"></highlight></codeline>
<codeline lineno="8712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!web_contents()-&gt;GetLastCommittedURL().SchemeIsHTTPOrHTTPS())<sp/>{</highlight></codeline>
<codeline lineno="8713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RecordInternalError(ERR_IPC_FROM_BAD_URL_SCHEME);</highlight></codeline>
<codeline lineno="8714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8716"><highlight class="normal"></highlight></codeline>
<codeline lineno="8717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)</highlight></codeline>
<codeline lineno="8718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8719"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!committed_load_)<sp/>{</highlight></codeline>
<codeline lineno="8720"><highlight class="normal"><sp/><sp/><sp/><sp/>RecordInternalError(ERR_SUBFRAME_IPC_WITH_NO_RELEVANT_LOAD);</highlight></codeline>
<codeline lineno="8721"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8722"><highlight class="normal"></highlight></codeline>
<codeline lineno="8723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(committed_load_)<sp/>{</highlight></codeline>
<codeline lineno="8724"><highlight class="normal"><sp/><sp/><sp/><sp/>committed_load_-&gt;metrics_update_dispatcher()-&gt;UpdateMetrics(</highlight></codeline>
<codeline lineno="8725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>render_frame_host,<sp/>std::move(timing),<sp/>std::move(metadata),</highlight></codeline>
<codeline lineno="8726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(new_features),<sp/>resources,<sp/>std::move(render_data));</highlight></codeline>
<codeline lineno="8727"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8729"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::OnVisibilityChanged(</highlight></codeline>
<codeline lineno="8730"><highlight class="normal"><sp/><sp/><sp/><sp/>content::Visibility<sp/>visibility)<sp/>{</highlight></codeline>
<codeline lineno="8731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(web_contents_will_soon_be_destroyed_)</highlight></codeline>
<codeline lineno="8732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8733"><highlight class="normal"></highlight></codeline>
<codeline lineno="8734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>was_in_foreground<sp/>=<sp/>in_foreground_;</highlight></codeline>
<codeline lineno="8735"><highlight class="normal"><sp/><sp/>in_foreground_<sp/>=<sp/>visibility<sp/>==<sp/>content::Visibility::VISIBLE;</highlight></codeline>
<codeline lineno="8736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_foreground_<sp/>==<sp/>was_in_foreground)</highlight></codeline>
<codeline lineno="8737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8738"><highlight class="normal"></highlight></codeline>
<codeline lineno="8739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_foreground_)<sp/>{</highlight></codeline>
<codeline lineno="8740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(committed_load_)</highlight></codeline>
<codeline lineno="8741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>committed_load_-&gt;WebContentsShown();</highlight></codeline>
<codeline lineno="8742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kv<sp/>:<sp/>provisional_loads_)<sp/>{</highlight></codeline>
<codeline lineno="8743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kv.second-&gt;WebContentsShown();</highlight></codeline>
<codeline lineno="8744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8745"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(committed_load_)</highlight></codeline>
<codeline lineno="8747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>committed_load_-&gt;WebContentsHidden();</highlight></codeline>
<codeline lineno="8748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kv<sp/>:<sp/>provisional_loads_)<sp/>{</highlight></codeline>
<codeline lineno="8749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kv.second-&gt;WebContentsHidden();</highlight></codeline>
<codeline lineno="8750"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8751"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8753"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::ReadyToCommitNavigation(</highlight></codeline>
<codeline lineno="8754"><highlight class="normal"><sp/><sp/><sp/><sp/>content::NavigationHandle*<sp/>navigation_handle)<sp/>{</highlight></codeline>
<codeline lineno="8755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(committed_load_)</highlight></codeline>
<codeline lineno="8756"><highlight class="normal"><sp/><sp/><sp/><sp/>committed_load_-&gt;ReadyToCommitNavigation(navigation_handle);</highlight></codeline>
<codeline lineno="8757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8758"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::RecordFeatureUsage(</highlight></codeline>
<codeline lineno="8759"><highlight class="normal"><sp/><sp/><sp/><sp/>content::RenderFrameHost*<sp/>render_frame_host,</highlight></codeline>
<codeline lineno="8760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mojom::PageLoadFeatures&amp;<sp/>new_features)<sp/>{</highlight></codeline>
<codeline lineno="8761"><highlight class="normal"><sp/><sp/>content::WebContents*<sp/>web_contents<sp/>=</highlight></codeline>
<codeline lineno="8762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>content::WebContents::FromRenderFrameHost(render_frame_host);</highlight></codeline>
<codeline lineno="8763"><highlight class="normal"><sp/><sp/>MetricsWebContentsObserver*<sp/>observer<sp/>=</highlight></codeline>
<codeline lineno="8764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MetricsWebContentsObserver::FromWebContents(web_contents);</highlight></codeline>
<codeline lineno="8765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(observer)</highlight></codeline>
<codeline lineno="8766"><highlight class="normal"><sp/><sp/><sp/><sp/>observer-&gt;OnBrowserFeatureUsage(render_frame_host,<sp/>new_features);</highlight></codeline>
<codeline lineno="8767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8768"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::RegisterInputEventObserver(</highlight></codeline>
<codeline lineno="8769"><highlight class="normal"><sp/><sp/><sp/><sp/>content::RenderViewHost*<sp/>host)<sp/>{</highlight></codeline>
<codeline lineno="8770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(host<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8771"><highlight class="normal"><sp/><sp/><sp/><sp/>host-&gt;GetWidget()-&gt;AddInputEventObserver(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8773"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::RemoveTestingObserver(</highlight></codeline>
<codeline lineno="8774"><highlight class="normal"><sp/><sp/><sp/><sp/>TestingObserver*<sp/>observer)<sp/>{</highlight></codeline>
<codeline lineno="8775"><highlight class="normal"><sp/><sp/>testing_observers_.RemoveObserver(observer);</highlight></codeline>
<codeline lineno="8776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8777"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::RenderProcessGone(</highlight></codeline>
<codeline lineno="8778"><highlight class="normal"><sp/><sp/><sp/><sp/>base::TerminationStatus<sp/>status)<sp/>{</highlight></codeline>
<codeline lineno="8779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>base::TERMINATION_STATUS_NORMAL_TERMINATION<sp/>||</highlight></codeline>
<codeline lineno="8780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>==<sp/>base::TERMINATION_STATUS_STILL_RUNNING)<sp/>{</highlight></codeline>
<codeline lineno="8781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8782"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8783"><highlight class="normal"></highlight></codeline>
<codeline lineno="8784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(committed_load_)<sp/>{</highlight></codeline>
<codeline lineno="8785"><highlight class="normal"><sp/><sp/><sp/><sp/>committed_load_-&gt;NotifyPageEnd(END_RENDER_PROCESS_GONE,</highlight></codeline>
<codeline lineno="8786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UserInitiatedInfo::NotUserInitiated(),</highlight></codeline>
<codeline lineno="8787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::TimeTicks::Now(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8788"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8789"><highlight class="normal"></highlight></codeline>
<codeline lineno="8790"><highlight class="normal"><sp/><sp/>committed_load_.reset();</highlight></codeline>
<codeline lineno="8791"><highlight class="normal"><sp/><sp/>aborted_provisional_loads_.clear();</highlight></codeline>
<codeline lineno="8792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8793"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::RenderViewHostChanged(</highlight></codeline>
<codeline lineno="8794"><highlight class="normal"><sp/><sp/><sp/><sp/>content::RenderViewHost*<sp/>old_host,</highlight></codeline>
<codeline lineno="8795"><highlight class="normal"><sp/><sp/><sp/><sp/>content::RenderViewHost*<sp/>new_host)<sp/>{</highlight></codeline>
<codeline lineno="8796"><highlight class="normal"><sp/><sp/>UnregisterInputEventObserver(old_host);</highlight></codeline>
<codeline lineno="8797"><highlight class="normal"><sp/><sp/>RegisterInputEventObserver(new_host);</highlight></codeline>
<codeline lineno="8798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8799"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::ResourceLoadComplete(</highlight></codeline>
<codeline lineno="8800"><highlight class="normal"><sp/><sp/><sp/><sp/>content::RenderFrameHost*<sp/>render_frame_host,</highlight></codeline>
<codeline lineno="8801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>content::GlobalRequestID&amp;<sp/>request_id,</highlight></codeline>
<codeline lineno="8802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>content::mojom::ResourceLoadInfo&amp;<sp/>resource_load_info)<sp/>{</highlight></codeline>
<codeline lineno="8803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!base::FeatureList::IsEnabled(network::features::kNetworkService))</highlight></codeline>
<codeline lineno="8804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8805"><highlight class="normal"></highlight></codeline>
<codeline lineno="8806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resource_load_info.url.SchemeIsHTTPOrHTTPS())</highlight></codeline>
<codeline lineno="8807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8808"><highlight class="normal"></highlight></codeline>
<codeline lineno="8809"><highlight class="normal"><sp/><sp/>PageLoadTracker*<sp/>tracker<sp/>=<sp/>GetTrackerOrNullForRequest(</highlight></codeline>
<codeline lineno="8810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>request_id,<sp/>render_frame_host,<sp/>resource_load_info.resource_type,</highlight></codeline>
<codeline lineno="8811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resource_load_info.load_timing_info.request_start);</highlight></codeline>
<codeline lineno="8812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tracker)<sp/>{</highlight></codeline>
<codeline lineno="8813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>original_content_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8814"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;data_reduction_proxy::DataReductionProxyData&gt;</highlight></codeline>
<codeline lineno="8815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_reduction_proxy_data;</highlight></codeline>
<codeline lineno="8816"><highlight class="normal"></highlight></codeline>
<codeline lineno="8817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>content::mojom::CommonNetworkInfoPtr&amp;<sp/>network_info<sp/>=</highlight></codeline>
<codeline lineno="8818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resource_load_info.network_info;</highlight></codeline>
<codeline lineno="8819"><highlight class="normal"><sp/><sp/><sp/><sp/>ExtraRequestCompleteInfo<sp/>extra_request_complete_info(</highlight></codeline>
<codeline lineno="8820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resource_load_info.url,<sp/>network_info-&gt;ip_port_pair.value(),</highlight></codeline>
<codeline lineno="8821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>render_frame_host-&gt;GetFrameTreeNodeId(),<sp/>resource_load_info.was_cached,</highlight></codeline>
<codeline lineno="8822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resource_load_info.raw_body_bytes,<sp/>original_content_length,</highlight></codeline>
<codeline lineno="8823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(data_reduction_proxy_data),<sp/>resource_load_info.resource_type,</highlight></codeline>
<codeline lineno="8824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resource_load_info.net_error,</highlight></codeline>
<codeline lineno="8825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;net::LoadTimingInfo&gt;(</highlight></codeline>
<codeline lineno="8826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resource_load_info.load_timing_info));</highlight></codeline>
<codeline lineno="8827"><highlight class="normal"><sp/><sp/><sp/><sp/>tracker-&gt;OnLoadedResource(extra_request_complete_info);</highlight></codeline>
<codeline lineno="8828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8830"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::ShouldTrackNavigation(</highlight></codeline>
<codeline lineno="8831"><highlight class="normal"><sp/><sp/><sp/><sp/>content::NavigationHandle*<sp/>navigation_handle)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8832"><highlight class="normal"><sp/><sp/>DCHECK(navigation_handle-&gt;IsInMainFrame());</highlight></codeline>
<codeline lineno="8833"><highlight class="normal"><sp/><sp/>DCHECK(!navigation_handle-&gt;HasCommitted()<sp/>||</highlight></codeline>
<codeline lineno="8834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!navigation_handle-&gt;IsSameDocument());</highlight></codeline>
<codeline lineno="8835"><highlight class="normal"></highlight></codeline>
<codeline lineno="8836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BrowserPageTrackDecider(embedder_interface_.get(),<sp/>navigation_handle)</highlight></codeline>
<codeline lineno="8837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.ShouldTrack();</highlight></codeline>
<codeline lineno="8838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8839"><highlight class="normal">MetricsWebContentsObserver::TestingObserver::TestingObserver(</highlight></codeline>
<codeline lineno="8840"><highlight class="normal"><sp/><sp/><sp/><sp/>content::WebContents*<sp/>web_contents)</highlight></codeline>
<codeline lineno="8841"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>observer_(page_load_metrics::MetricsWebContentsObserver::FromWebContents(</highlight></codeline>
<codeline lineno="8842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>web_contents))<sp/>{</highlight></codeline>
<codeline lineno="8843"><highlight class="normal"><sp/><sp/>observer_-&gt;AddTestingObserver(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8845"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::UnregisterInputEventObserver(</highlight></codeline>
<codeline lineno="8846"><highlight class="normal"><sp/><sp/><sp/><sp/>content::RenderViewHost*<sp/>host)<sp/>{</highlight></codeline>
<codeline lineno="8847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(host<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8848"><highlight class="normal"><sp/><sp/><sp/><sp/>host-&gt;GetWidget()-&gt;RemoveInputEventObserver(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8850"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::UpdateTiming(</highlight></codeline>
<codeline lineno="8851"><highlight class="normal"><sp/><sp/><sp/><sp/>mojom::PageLoadTimingPtr<sp/>timing,</highlight></codeline>
<codeline lineno="8852"><highlight class="normal"><sp/><sp/><sp/><sp/>mojom::PageLoadMetadataPtr<sp/>metadata,</highlight></codeline>
<codeline lineno="8853"><highlight class="normal"><sp/><sp/><sp/><sp/>mojom::PageLoadFeaturesPtr<sp/>new_features,</highlight></codeline>
<codeline lineno="8854"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;mojom::ResourceDataUpdatePtr&gt;<sp/>resources,</highlight></codeline>
<codeline lineno="8855"><highlight class="normal"><sp/><sp/><sp/><sp/>mojom::PageRenderDataPtr<sp/>render_data)<sp/>{</highlight></codeline>
<codeline lineno="8856"><highlight class="normal"><sp/><sp/>content::RenderFrameHost*<sp/>render_frame_host<sp/>=</highlight></codeline>
<codeline lineno="8857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>page_load_metrics_binding_.GetCurrentTargetFrame();</highlight></codeline>
<codeline lineno="8858"><highlight class="normal"><sp/><sp/>OnTimingUpdated(render_frame_host,<sp/>std::move(timing),<sp/>std::move(metadata),</highlight></codeline>
<codeline lineno="8859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(new_features),<sp/>resources,<sp/>std::move(render_data));</highlight></codeline>
<codeline lineno="8860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8861"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::WebContentsDestroyed()<sp/>{</highlight></codeline>
<codeline lineno="8862"><highlight class="normal"><sp/><sp/>NotifyPageEndAllLoads(END_CLOSE,<sp/>UserInitiatedInfo::NotUserInitiated());</highlight></codeline>
<codeline lineno="8863"><highlight class="normal"></highlight></codeline>
<codeline lineno="8864"><highlight class="normal"><sp/><sp/>committed_load_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8865"><highlight class="normal"><sp/><sp/>provisional_loads_.clear();</highlight></codeline>
<codeline lineno="8866"><highlight class="normal"><sp/><sp/>aborted_provisional_loads_.clear();</highlight></codeline>
<codeline lineno="8867"><highlight class="normal"></highlight></codeline>
<codeline lineno="8868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>observer<sp/>:<sp/>testing_observers_)</highlight></codeline>
<codeline lineno="8869"><highlight class="normal"><sp/><sp/><sp/><sp/>observer.OnGoingAway();</highlight></codeline>
<codeline lineno="8870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8871"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::WebContentsWillSoonBeDestroyed()<sp/>{</highlight></codeline>
<codeline lineno="8872"><highlight class="normal"><sp/><sp/>web_contents_will_soon_be_destroyed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8874"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::WillProcessNavigationResponse(</highlight></codeline>
<codeline lineno="8875"><highlight class="normal"><sp/><sp/><sp/><sp/>content::NavigationHandle*<sp/>navigation_handle)<sp/>{</highlight></codeline>
<codeline lineno="8876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>provisional_loads_.find(navigation_handle);</highlight></codeline>
<codeline lineno="8877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>provisional_loads_.end())</highlight></codeline>
<codeline lineno="8878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8879"><highlight class="normal"><sp/><sp/>it-&gt;second-&gt;WillProcessNavigationResponse(navigation_handle);</highlight></codeline>
<codeline lineno="8880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8881"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MetricsWebContentsObserver::WillStartNavigationRequest(</highlight></codeline>
<codeline lineno="8882"><highlight class="normal"><sp/><sp/><sp/><sp/>content::NavigationHandle*<sp/>navigation_handle)<sp/>{</highlight></codeline>
<codeline lineno="8883"><highlight class="normal"><sp/><sp/>DCHECK(!navigation_handle-&gt;IsSameDocument());</highlight></codeline>
<codeline lineno="8884"><highlight class="normal"></highlight></codeline>
<codeline lineno="8885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!navigation_handle-&gt;IsInMainFrame())</highlight></codeline>
<codeline lineno="8886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8887"><highlight class="normal"></highlight></codeline>
<codeline lineno="8888"><highlight class="normal"><sp/><sp/>UserInitiatedInfo<sp/>user_initiated_info(</highlight></codeline>
<codeline lineno="8889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a8d6b5d15c3cecadf447e429a5a66cd7a" kindref="member">CreateUserInitiatedInfo</ref>(navigation_handle,<sp/>committed_load_.get()));</highlight></codeline>
<codeline lineno="8890"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;PageLoadTracker&gt;<sp/>last_aborted<sp/>=</highlight></codeline>
<codeline lineno="8891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NotifyAbortedProvisionalLoadsNewNavigation(navigation_handle,</highlight></codeline>
<codeline lineno="8892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user_initiated_info);</highlight></codeline>
<codeline lineno="8893"><highlight class="normal"></highlight></codeline>
<codeline lineno="8894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chain_size_same_url<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chain_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_aborted)<sp/>{</highlight></codeline>
<codeline lineno="8897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_aborted-&gt;MatchesOriginalNavigation(navigation_handle))<sp/>{</highlight></codeline>
<codeline lineno="8898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chain_size_same_url<sp/>=<sp/>last_aborted-&gt;aborted_chain_size_same_url()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="8899"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_aborted-&gt;aborted_chain_size_same_url()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LogAbortChainSameURLHistogram(</highlight></codeline>
<codeline lineno="8901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_aborted-&gt;aborted_chain_size_same_url());</highlight></codeline>
<codeline lineno="8902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8903"><highlight class="normal"><sp/><sp/><sp/><sp/>chain_size<sp/>=<sp/>last_aborted-&gt;aborted_chain_size()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="8904"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8905"><highlight class="normal"></highlight></codeline>
<codeline lineno="8906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ShouldTrackNavigation(navigation_handle))</highlight></codeline>
<codeline lineno="8907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8908"><highlight class="normal"></highlight></codeline>
<codeline lineno="8909"><highlight class="normal"><sp/><sp/>content::RenderFrameHost*<sp/>opener<sp/>=<sp/>web_contents()-&gt;GetOpener();</highlight></codeline>
<codeline lineno="8910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL&amp;<sp/>opener_url<sp/>=<sp/>!has_navigated_<sp/>&amp;&amp;<sp/>opener</highlight></codeline>
<codeline lineno="8911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>opener-&gt;GetLastCommittedURL()</highlight></codeline>
<codeline lineno="8912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>GURL::EmptyGURL();</highlight></codeline>
<codeline lineno="8913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL&amp;<sp/>currently_committed_url<sp/>=</highlight></codeline>
<codeline lineno="8914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>committed_load_<sp/>?<sp/>committed_load_-&gt;url()<sp/>:<sp/>opener_url;</highlight></codeline>
<codeline lineno="8915"><highlight class="normal"><sp/><sp/>has_navigated_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8916"><highlight class="normal"></highlight></codeline>
<codeline lineno="8917"><highlight class="normal"><sp/><sp/>DCHECK_GT(2ul,<sp/>provisional_loads_.size());</highlight></codeline>
<codeline lineno="8918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>insertion_result<sp/>=<sp/>provisional_loads_.insert(std::make_pair(</highlight></codeline>
<codeline lineno="8919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>navigation_handle,</highlight></codeline>
<codeline lineno="8920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;PageLoadTracker&gt;(</highlight></codeline>
<codeline lineno="8921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_foreground_,<sp/>embedder_interface_.get(),<sp/>currently_committed_url,</highlight></codeline>
<codeline lineno="8922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>navigation_handle,<sp/>user_initiated_info,<sp/>chain_size,</highlight></codeline>
<codeline lineno="8923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chain_size_same_url)));</highlight></codeline>
<codeline lineno="8924"><highlight class="normal"><sp/><sp/>DCHECK(insertion_result.second)</highlight></codeline>
<codeline lineno="8925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;provisional_loads_<sp/>already<sp/>contains<sp/>NavigationHandle.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>observer<sp/>:<sp/>testing_observers_)</highlight></codeline>
<codeline lineno="8927"><highlight class="normal"><sp/><sp/><sp/><sp/>observer.OnTrackerCreated(insertion_result.first-&gt;second.get());</highlight></codeline>
<codeline lineno="8928"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8929"><highlight class="normal">MetricsWebContentsObserver::~MetricsWebContentsObserver()<sp/>{}</highlight></codeline>
<codeline lineno="8930"><highlight class="normal">MetricsWebContentsObserver::TestingObserver::~TestingObserver()<sp/>{</highlight></codeline>
<codeline lineno="8931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(observer_)<sp/>{</highlight></codeline>
<codeline lineno="8932"><highlight class="normal"><sp/><sp/><sp/><sp/>observer_-&gt;RemoveTestingObserver(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8933"><highlight class="normal"><sp/><sp/><sp/><sp/>observer_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8934"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8936"><highlight class="normal">UkmPageLoadMetricsObserver::CreateIfNeeded()<sp/>{</highlight></codeline>
<codeline lineno="8937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ukm::UkmRecorder::Get())<sp/>{</highlight></codeline>
<codeline lineno="8938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8939"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;UkmPageLoadMetricsObserver&gt;(</highlight></codeline>
<codeline lineno="8941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_browser_process-&gt;network_quality_tracker());</highlight></codeline>
<codeline lineno="8942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8943"><highlight class="normal">UkmPageLoadMetricsObserver::FlushMetricsOnAppEnterBackground(</highlight></codeline>
<codeline lineno="8944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>page_load_metrics::mojom::PageLoadTiming&amp;<sp/>timing,</highlight></codeline>
<codeline lineno="8945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>page_load_metrics::PageLoadExtraInfo&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline lineno="8946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!was_hidden_)<sp/>{</highlight></codeline>
<codeline lineno="8947"><highlight class="normal"><sp/><sp/><sp/><sp/>RecordPageLoadExtraInfoMetrics(info,<sp/>base::TimeTicks::Now());</highlight></codeline>
<codeline lineno="8948"><highlight class="normal"><sp/><sp/><sp/><sp/>RecordTimingMetrics(timing,<sp/>info);</highlight></codeline>
<codeline lineno="8949"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8950"><highlight class="normal"><sp/><sp/>ReportLayoutStability(info);</highlight></codeline>
<codeline lineno="8951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STOP_OBSERVING;</highlight></codeline>
<codeline lineno="8952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8953"><highlight class="normal">UkmPageLoadMetricsObserver::ObservePolicy<sp/>UkmPageLoadMetricsObserver::OnCommit(</highlight></codeline>
<codeline lineno="8954"><highlight class="normal"><sp/><sp/><sp/><sp/>content::NavigationHandle*<sp/>navigation_handle,</highlight></codeline>
<codeline lineno="8955"><highlight class="normal"><sp/><sp/><sp/><sp/>ukm::SourceId<sp/>source_id)<sp/>{</highlight></codeline>
<codeline lineno="8956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>net::HttpResponseHeaders*<sp/>response_headers<sp/>=</highlight></codeline>
<codeline lineno="8957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>navigation_handle-&gt;GetResponseHeaders();</highlight></codeline>
<codeline lineno="8958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(response_headers)</highlight></codeline>
<codeline lineno="8959"><highlight class="normal"><sp/><sp/><sp/><sp/>http_response_code_<sp/>=<sp/>response_headers-&gt;response_code();</highlight></codeline>
<codeline lineno="8960"><highlight class="normal"><sp/><sp/>page_transition_<sp/>=<sp/>navigation_handle-&gt;GetPageTransition();</highlight></codeline>
<codeline lineno="8961"><highlight class="normal"><sp/><sp/>was_cached_<sp/>=<sp/>navigation_handle-&gt;WasResponseCached();</highlight></codeline>
<codeline lineno="8962"><highlight class="normal"><sp/><sp/>navigation_start_<sp/>=<sp/>navigation_handle-&gt;NavigationStart();</highlight></codeline>
<codeline lineno="8963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CONTINUE_OBSERVING;</highlight></codeline>
<codeline lineno="8964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8965"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UkmPageLoadMetricsObserver::OnComplete(</highlight></codeline>
<codeline lineno="8966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>page_load_metrics::mojom::PageLoadTiming&amp;<sp/>timing,</highlight></codeline>
<codeline lineno="8967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>page_load_metrics::PageLoadExtraInfo&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline lineno="8968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!was_hidden_)<sp/>{</highlight></codeline>
<codeline lineno="8969"><highlight class="normal"><sp/><sp/><sp/><sp/>RecordPageLoadExtraInfoMetrics(</highlight></codeline>
<codeline lineno="8970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info,<sp/>base::TimeTicks()<sp/></highlight><highlight class="comment">/*<sp/>no<sp/>app_background_time<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8971"><highlight class="normal"><sp/><sp/><sp/><sp/>RecordTimingMetrics(timing,<sp/>info);</highlight></codeline>
<codeline lineno="8972"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8973"><highlight class="normal"><sp/><sp/>ReportLayoutStability(info);</highlight></codeline>
<codeline lineno="8974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8975"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UkmPageLoadMetricsObserver::OnFailedProvisionalLoad(</highlight></codeline>
<codeline lineno="8976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>page_load_metrics::FailedProvisionalLoadInfo&amp;<sp/>failed_load_info,</highlight></codeline>
<codeline lineno="8977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>page_load_metrics::PageLoadExtraInfo&amp;<sp/>extra_info)<sp/>{</highlight></codeline>
<codeline lineno="8978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(was_hidden_)</highlight></codeline>
<codeline lineno="8979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8980"><highlight class="normal"><sp/><sp/>RecordPageLoadExtraInfoMetrics(</highlight></codeline>
<codeline lineno="8981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_info,<sp/>base::TimeTicks()<sp/></highlight><highlight class="comment">/*<sp/>no<sp/>app_background_time<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8982"><highlight class="normal"></highlight></codeline>
<codeline lineno="8983"><highlight class="normal"><sp/><sp/>int64_t<sp/>net_error_code<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(failed_load_info.error)<sp/>*<sp/>-1;</highlight></codeline>
<codeline lineno="8984"><highlight class="normal"><sp/><sp/>DCHECK_GE(net_error_code,<sp/>0);</highlight></codeline>
<codeline lineno="8985"><highlight class="normal"><sp/><sp/>ukm::builders::PageLoad(extra_info.source_id)</highlight></codeline>
<codeline lineno="8986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.SetNet_ErrorCode_OnFailedProvisionalLoad(net_error_code)</highlight></codeline>
<codeline lineno="8987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.SetPageTiming_NavigationToFailedProvisionalLoad(</highlight></codeline>
<codeline lineno="8988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failed_load_info.time_to_failed_provisional_load.InMilliseconds())</highlight></codeline>
<codeline lineno="8989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Record(ukm::UkmRecorder::Get());</highlight></codeline>
<codeline lineno="8990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8991"><highlight class="normal">UkmPageLoadMetricsObserver::ObservePolicy<sp/>UkmPageLoadMetricsObserver::OnHidden(</highlight></codeline>
<codeline lineno="8992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>page_load_metrics::mojom::PageLoadTiming&amp;<sp/>timing,</highlight></codeline>
<codeline lineno="8993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>page_load_metrics::PageLoadExtraInfo&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline lineno="8994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!was_hidden_)<sp/>{</highlight></codeline>
<codeline lineno="8995"><highlight class="normal"><sp/><sp/><sp/><sp/>RecordPageLoadExtraInfoMetrics(</highlight></codeline>
<codeline lineno="8996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info,<sp/>base::TimeTicks()<sp/></highlight><highlight class="comment">/*<sp/>no<sp/>app_background_time<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8997"><highlight class="normal"><sp/><sp/><sp/><sp/>RecordTimingMetrics(timing,<sp/>info);</highlight></codeline>
<codeline lineno="8998"><highlight class="normal"><sp/><sp/><sp/><sp/>was_hidden_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8999"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CONTINUE_OBSERVING;</highlight></codeline>
<codeline lineno="9001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9002"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UkmPageLoadMetricsObserver::OnLoadedResource(</highlight></codeline>
<codeline lineno="9003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>page_load_metrics::ExtraRequestCompleteInfo&amp;</highlight></codeline>
<codeline lineno="9004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_request_complete_info)<sp/>{</highlight></codeline>
<codeline lineno="9005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(was_hidden_)</highlight></codeline>
<codeline lineno="9006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extra_request_complete_info.was_cached)<sp/>{</highlight></codeline>
<codeline lineno="9008"><highlight class="normal"><sp/><sp/><sp/><sp/>cache_bytes_<sp/>+=<sp/>extra_request_complete_info.raw_body_bytes;</highlight></codeline>
<codeline lineno="9009"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9010"><highlight class="normal"><sp/><sp/><sp/><sp/>network_bytes_<sp/>+=<sp/>extra_request_complete_info.raw_body_bytes;</highlight></codeline>
<codeline lineno="9011"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9012"><highlight class="normal"></highlight></codeline>
<codeline lineno="9013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extra_request_complete_info.resource_type<sp/>==</highlight></codeline>
<codeline lineno="9014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>content::RESOURCE_TYPE_MAIN_FRAME)<sp/>{</highlight></codeline>
<codeline lineno="9015"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(!main_frame_timing_.has_value());</highlight></codeline>
<codeline lineno="9016"><highlight class="normal"><sp/><sp/><sp/><sp/>main_frame_timing_<sp/>=<sp/>*extra_request_complete_info.load_timing_info;</highlight></codeline>
<codeline lineno="9017"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9019"><highlight class="normal">UkmPageLoadMetricsObserver::OnRedirect(</highlight></codeline>
<codeline lineno="9020"><highlight class="normal"><sp/><sp/><sp/><sp/>content::NavigationHandle*<sp/>navigation_handle)<sp/>{</highlight></codeline>
<codeline lineno="9021"><highlight class="normal"><sp/><sp/>main_frame_request_redirect_count_++;</highlight></codeline>
<codeline lineno="9022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CONTINUE_OBSERVING;</highlight></codeline>
<codeline lineno="9023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9024"><highlight class="normal">UkmPageLoadMetricsObserver::ObservePolicy<sp/>UkmPageLoadMetricsObserver::OnStart(</highlight></codeline>
<codeline lineno="9025"><highlight class="normal"><sp/><sp/><sp/><sp/>content::NavigationHandle*<sp/>navigation_handle,</highlight></codeline>
<codeline lineno="9026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL&amp;<sp/>currently_committed_url,</highlight></codeline>
<codeline lineno="9027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>started_in_foreground)<sp/>{</highlight></codeline>
<codeline lineno="9028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!started_in_foreground)<sp/>{</highlight></codeline>
<codeline lineno="9029"><highlight class="normal"><sp/><sp/><sp/><sp/>was_hidden_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CONTINUE_OBSERVING;</highlight></codeline>
<codeline lineno="9031"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9032"><highlight class="normal"></highlight></codeline>
<codeline lineno="9033"><highlight class="normal"></highlight></codeline>
<codeline lineno="9034"><highlight class="normal"><sp/><sp/>effective_connection_type_<sp/>=</highlight></codeline>
<codeline lineno="9035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>network_quality_tracker_-&gt;GetEffectiveConnectionType();</highlight></codeline>
<codeline lineno="9036"><highlight class="normal"><sp/><sp/>http_rtt_estimate_<sp/>=<sp/>network_quality_tracker_-&gt;GetHttpRTT();</highlight></codeline>
<codeline lineno="9037"><highlight class="normal"><sp/><sp/>transport_rtt_estimate_<sp/>=<sp/>network_quality_tracker_-&gt;GetTransportRTT();</highlight></codeline>
<codeline lineno="9038"><highlight class="normal"><sp/><sp/>downstream_kbps_estimate_<sp/>=</highlight></codeline>
<codeline lineno="9039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>network_quality_tracker_-&gt;GetDownstreamThroughputKbps();</highlight></codeline>
<codeline lineno="9040"><highlight class="normal"><sp/><sp/>page_transition_<sp/>=<sp/>navigation_handle-&gt;GetPageTransition();</highlight></codeline>
<codeline lineno="9041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CONTINUE_OBSERVING;</highlight></codeline>
<codeline lineno="9042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9043"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UkmPageLoadMetricsObserver::ReportLayoutStability(</highlight></codeline>
<codeline lineno="9044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>page_load_metrics::PageLoadExtraInfo&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline lineno="9045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!base::FeatureList::IsEnabled(blink::features::kJankTracking))</highlight></codeline>
<codeline lineno="9046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9047"><highlight class="normal"></highlight></codeline>
<codeline lineno="9048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>jank_score<sp/>=<sp/>info.main_frame_render_data.layout_jank_score;</highlight></codeline>
<codeline lineno="9049"><highlight class="normal"><sp/><sp/>int64_t<sp/>ukm_value<sp/>=</highlight></codeline>
<codeline lineno="9050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(roundf(<ref refid="_c_w_e-787_8c_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">std::min</ref>(jank_score,<sp/>10.0<ref refid="_c_w_e-20_8c_1a2f165958a33007899b5dd0f5cccd5413" kindref="member">f</ref>)<sp/>*<sp/>100.0<ref refid="_c_w_e-20_8c_1a2f165958a33007899b5dd0f5cccd5413" kindref="member">f</ref>));</highlight></codeline>
<codeline lineno="9051"><highlight class="normal"></highlight></codeline>
<codeline lineno="9052"><highlight class="normal"><sp/><sp/>ukm::builders::PageLoad<sp/>builder(info.source_id);</highlight></codeline>
<codeline lineno="9053"><highlight class="normal"><sp/><sp/>builder.SetLayoutStability_JankScore(ukm_value);</highlight></codeline>
<codeline lineno="9054"><highlight class="normal"><sp/><sp/>builder.Record(ukm::UkmRecorder::Get());</highlight></codeline>
<codeline lineno="9055"><highlight class="normal"></highlight></codeline>
<codeline lineno="9056"><highlight class="normal"><sp/><sp/>int32_t<sp/>uma_value<sp/>=</highlight></codeline>
<codeline lineno="9057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(roundf(<ref refid="_c_w_e-787_8c_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">std::min</ref>(jank_score,<sp/>10.0<ref refid="_c_w_e-20_8c_1a2f165958a33007899b5dd0f5cccd5413" kindref="member">f</ref>)<sp/>*<sp/>10.0<ref refid="_c_w_e-20_8c_1a2f165958a33007899b5dd0f5cccd5413" kindref="member">f</ref>));</highlight></codeline>
<codeline lineno="9058"><highlight class="normal"><sp/><sp/>UMA_HISTOGRAM_COUNTS_100(</highlight><highlight class="stringliteral">&quot;PageLoad.Experimental.LayoutStability.JankScore&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="9059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uma_value);</highlight></codeline>
<codeline lineno="9060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9061"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UkmPageLoadMetricsObserver::ReportMainResourceTimingMetrics(</highlight></codeline>
<codeline lineno="9062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>page_load_metrics::mojom::PageLoadTiming&amp;<sp/>timing,</highlight></codeline>
<codeline lineno="9063"><highlight class="normal"><sp/><sp/><sp/><sp/>ukm::builders::PageLoad*<sp/>builder)<sp/>{</highlight></codeline>
<codeline lineno="9064"><highlight class="normal"><sp/><sp/>DCHECK(main_frame_timing_.has_value());</highlight></codeline>
<codeline lineno="9065"><highlight class="normal"></highlight></codeline>
<codeline lineno="9066"><highlight class="normal"><sp/><sp/>builder-&gt;SetMainFrameResource_SocketReused(main_frame_timing_-&gt;socket_reused);</highlight></codeline>
<codeline lineno="9067"><highlight class="normal"></highlight></codeline>
<codeline lineno="9068"><highlight class="normal"><sp/><sp/>int64_t<sp/>dns_start_ms<sp/>=</highlight></codeline>
<codeline lineno="9069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>main_frame_timing_-&gt;connect_timing.dns_start.since_origin()</highlight></codeline>
<codeline lineno="9070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.InMilliseconds();</highlight></codeline>
<codeline lineno="9071"><highlight class="normal"><sp/><sp/>int64_t<sp/>dns_end_ms<sp/>=<sp/>main_frame_timing_-&gt;connect_timing.dns_end.since_origin()</highlight></codeline>
<codeline lineno="9072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.InMilliseconds();</highlight></codeline>
<codeline lineno="9073"><highlight class="normal"><sp/><sp/>int64_t<sp/>connect_start_ms<sp/>=</highlight></codeline>
<codeline lineno="9074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>main_frame_timing_-&gt;connect_timing.connect_start.since_origin()</highlight></codeline>
<codeline lineno="9075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.InMilliseconds();</highlight></codeline>
<codeline lineno="9076"><highlight class="normal"><sp/><sp/>int64_t<sp/>connect_end_ms<sp/>=</highlight></codeline>
<codeline lineno="9077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>main_frame_timing_-&gt;connect_timing.connect_end.since_origin()</highlight></codeline>
<codeline lineno="9078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.InMilliseconds();</highlight></codeline>
<codeline lineno="9079"><highlight class="normal"><sp/><sp/>int64_t<sp/>request_start_ms<sp/>=</highlight></codeline>
<codeline lineno="9080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>main_frame_timing_-&gt;request_start.since_origin().InMilliseconds();</highlight></codeline>
<codeline lineno="9081"><highlight class="normal"><sp/><sp/>int64_t<sp/>send_start_ms<sp/>=</highlight></codeline>
<codeline lineno="9082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>main_frame_timing_-&gt;send_start.since_origin().InMilliseconds();</highlight></codeline>
<codeline lineno="9083"><highlight class="normal"><sp/><sp/>int64_t<sp/>receive_headers_end_ms<sp/>=</highlight></codeline>
<codeline lineno="9084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>main_frame_timing_-&gt;receive_headers_end.since_origin().InMilliseconds();</highlight></codeline>
<codeline lineno="9085"><highlight class="normal"></highlight></codeline>
<codeline lineno="9086"><highlight class="normal"><sp/><sp/>DCHECK_LE(dns_start_ms,<sp/>dns_end_ms);</highlight></codeline>
<codeline lineno="9087"><highlight class="normal"><sp/><sp/>DCHECK_LE(dns_end_ms,<sp/>connect_start_ms);</highlight></codeline>
<codeline lineno="9088"><highlight class="normal"><sp/><sp/>DCHECK_LE(dns_start_ms,<sp/>connect_start_ms);</highlight></codeline>
<codeline lineno="9089"><highlight class="normal"><sp/><sp/>DCHECK_LE(connect_start_ms,<sp/>connect_end_ms);</highlight></codeline>
<codeline lineno="9090"><highlight class="normal"></highlight></codeline>
<codeline lineno="9091"><highlight class="normal"><sp/><sp/>int64_t<sp/>dns_duration_ms<sp/>=<sp/>dns_end_ms<sp/>-<sp/>dns_start_ms;</highlight></codeline>
<codeline lineno="9092"><highlight class="normal"><sp/><sp/>int64_t<sp/>connect_duration_ms<sp/>=<sp/>connect_end_ms<sp/>-<sp/>connect_start_ms;</highlight></codeline>
<codeline lineno="9093"><highlight class="normal"><sp/><sp/>int64_t<sp/>request_start_to_send_start_ms<sp/>=<sp/>send_start_ms<sp/>-<sp/>request_start_ms;</highlight></codeline>
<codeline lineno="9094"><highlight class="normal"><sp/><sp/>int64_t<sp/>send_start_to_receive_headers_end_ms<sp/>=</highlight></codeline>
<codeline lineno="9095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>receive_headers_end_ms<sp/>-<sp/>send_start_ms;</highlight></codeline>
<codeline lineno="9096"><highlight class="normal"><sp/><sp/>int64_t<sp/>request_start_to_receive_headers_end_ms<sp/>=</highlight></codeline>
<codeline lineno="9097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>receive_headers_end_ms<sp/>-<sp/>request_start_ms;</highlight></codeline>
<codeline lineno="9098"><highlight class="normal"></highlight></codeline>
<codeline lineno="9099"><highlight class="normal"><sp/><sp/>builder-&gt;SetMainFrameResource_DNSDelay(dns_duration_ms);</highlight></codeline>
<codeline lineno="9100"><highlight class="normal"><sp/><sp/>builder-&gt;SetMainFrameResource_ConnectDelay(connect_duration_ms);</highlight></codeline>
<codeline lineno="9101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(request_start_to_send_start_ms<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9102"><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;SetMainFrameResource_RequestStartToSendStart(</highlight></codeline>
<codeline lineno="9103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>request_start_to_send_start_ms);</highlight></codeline>
<codeline lineno="9104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(send_start_to_receive_headers_end_ms<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9106"><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;SetMainFrameResource_SendStartToReceiveHeadersEnd(</highlight></codeline>
<codeline lineno="9107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>send_start_to_receive_headers_end_ms);</highlight></codeline>
<codeline lineno="9108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9109"><highlight class="normal"><sp/><sp/>builder-&gt;SetMainFrameResource_RequestStartToReceiveHeadersEnd(</highlight></codeline>
<codeline lineno="9110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>request_start_to_receive_headers_end_ms);</highlight></codeline>
<codeline lineno="9111"><highlight class="normal"></highlight></codeline>
<codeline lineno="9112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!main_frame_timing_-&gt;request_start.is_null()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!navigation_start_.is_null())<sp/>{</highlight></codeline>
<codeline lineno="9114"><highlight class="normal"><sp/><sp/><sp/><sp/>base::TimeDelta<sp/>navigation_start_to_request_start<sp/>=</highlight></codeline>
<codeline lineno="9115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>main_frame_timing_-&gt;request_start<sp/>-<sp/>navigation_start_;</highlight></codeline>
<codeline lineno="9116"><highlight class="normal"></highlight></codeline>
<codeline lineno="9117"><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;SetMainFrameResource_NavigationStartToRequestStart(</highlight></codeline>
<codeline lineno="9118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>navigation_start_to_request_start.InMilliseconds());</highlight></codeline>
<codeline lineno="9119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9120"><highlight class="normal"></highlight></codeline>
<codeline lineno="9121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(main_frame_request_redirect_count_<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9122"><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;SetMainFrameResource_RedirectCount(</highlight></codeline>
<codeline lineno="9123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>main_frame_request_redirect_count_);</highlight></codeline>
<codeline lineno="9124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9126"><highlight class="normal">UkmPageLoadMetricsObserver::UkmPageLoadMetricsObserver(</highlight></codeline>
<codeline lineno="9127"><highlight class="normal"><sp/><sp/><sp/><sp/>network::NetworkQualityTracker*<sp/>network_quality_tracker)</highlight></codeline>
<codeline lineno="9128"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>network_quality_tracker_(network_quality_tracker)<sp/>{</highlight></codeline>
<codeline lineno="9129"><highlight class="normal"><sp/><sp/>DCHECK(network_quality_tracker_);</highlight></codeline>
<codeline lineno="9130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9131" refid="_c_w_e-79_8c_1ab00b23989597c3f9050209553ab8b478" refkind="member"><highlight class="normal"><sp/><sp/>MockNetworkQualityProvider&amp;<sp/><ref refid="_c_w_e-79_8c_1ab00b23989597c3f9050209553ab8b478" kindref="member">mock_network_quality_provider</ref>()<sp/>{</highlight></codeline>
<codeline lineno="9132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mock_network_quality_provider_;</highlight></codeline>
<codeline lineno="9133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9134"><highlight class="normal">String<sp/>XSSAuditor::Canonicalize(String<sp/>snippet,<sp/>TruncationKind<sp/>treatment)<sp/>{</highlight></codeline>
<codeline lineno="9135"><highlight class="normal"><sp/><sp/>String<sp/>decoded_snippet<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a745b635010b28b54ef3a07bbbedc190e" kindref="member">FullyDecodeString</ref>(snippet,<sp/>encoding_);</highlight></codeline>
<codeline lineno="9136"><highlight class="normal"></highlight></codeline>
<codeline lineno="9137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(treatment<sp/>!=<sp/>kNoTruncation)<sp/>{</highlight></codeline>
<codeline lineno="9138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decoded_snippet.length()<sp/>&gt;<sp/>kMaximumFragmentLengthTarget)<sp/>{</highlight></codeline>
<codeline lineno="9139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>kMaximumFragmentLengthTarget;</highlight></codeline>
<codeline lineno="9140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(position<sp/>&lt;<sp/>decoded_snippet.length()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!IsHTMLSpace(decoded_snippet[position]))</highlight></codeline>
<codeline lineno="9142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++position;</highlight></codeline>
<codeline lineno="9143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decoded_snippet.Truncate(position);</highlight></codeline>
<codeline lineno="9144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(treatment<sp/>==<sp/>kSrcLikeAttributeTruncation)</highlight></codeline>
<codeline lineno="9146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ae5ee816839a5fee5480cb839f78e59ee" kindref="member">TruncateForSrcLikeAttribute</ref>(decoded_snippet);</highlight></codeline>
<codeline lineno="9147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(treatment<sp/>==<sp/>kScriptLikeAttributeTruncation)</highlight></codeline>
<codeline lineno="9148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a3f867ee2b3965cbbcc36a71f89d22d81" kindref="member">TruncateForScriptLikeAttribute</ref>(decoded_snippet);</highlight></codeline>
<codeline lineno="9149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(treatment<sp/>==<sp/>kSemicolonSeparatedScriptLikeAttributeTruncation)</highlight></codeline>
<codeline lineno="9150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a5e6003bcf725077e64d1ef19d68cd225" kindref="member">TruncateForSemicolonSeparatedScriptLikeAttribute</ref>(decoded_snippet);</highlight></codeline>
<codeline lineno="9151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9152"><highlight class="normal"></highlight></codeline>
<codeline lineno="9153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decoded_snippet.RemoveCharacters(&amp;<ref refid="_c_w_e-79_8c_1ab7e91d7419da000b8e73046611eb1a95" kindref="member">IsNonCanonicalCharacter</ref>);</highlight></codeline>
<codeline lineno="9154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9155"><highlight class="normal">String<sp/>XSSAuditor::CanonicalizedSnippetForJavaScript(</highlight></codeline>
<codeline lineno="9156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9157"><highlight class="normal"><sp/><sp/>String<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>=<sp/>request.source_tracker.SourceForToken(request.token);</highlight></codeline>
<codeline lineno="9158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start_position<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end_position<sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.length();</highlight></codeline>
<codeline lineno="9160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>found_position<sp/>=<sp/>kNotFound;</highlight></codeline>
<codeline lineno="9161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>last_non_space_position<sp/>=<sp/>kNotFound;</highlight></codeline>
<codeline lineno="9162"><highlight class="normal"></highlight></codeline>
<codeline lineno="9163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start_position<sp/>&lt;<sp/>end_position)<sp/>{</highlight></codeline>
<codeline lineno="9164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start_position<sp/>&lt;<sp/>end_position<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsHTMLSpace&lt;UChar&gt;(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[start_position]))</highlight></codeline>
<codeline lineno="9166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start_position++;</highlight></codeline>
<codeline lineno="9167"><highlight class="normal"></highlight></codeline>
<codeline lineno="9168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(request.should_allow_cdata)</highlight></codeline>
<codeline lineno="9169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9170"><highlight class="normal"></highlight></codeline>
<codeline lineno="9171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a0ddb28e1b63d6629ceaec0bc329ddf6b" kindref="member">StartsHTMLOpenCommentAt</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>start_position)<sp/>||</highlight></codeline>
<codeline lineno="9172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ace65f3869170d50fc84abcf15f9734f9" kindref="member">StartsSingleLineCommentAt</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>start_position))<sp/>{</highlight></codeline>
<codeline lineno="9173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start_position<sp/>&lt;<sp/>end_position<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="_c_w_e-79_8c_1a53940b795ca360007027ff4413c095b5" kindref="member">IsJSNewline</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[start_position]))</highlight></codeline>
<codeline lineno="9175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_position++;</highlight></codeline>
<codeline lineno="9176"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a69dab7fa98b75d3d4e3235dfe768f0d4" kindref="member">StartsMultiLineCommentAt</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>start_position))<sp/>{</highlight></codeline>
<codeline lineno="9177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_position<sp/>+<sp/>2<sp/>&lt;<sp/>end_position<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(found_position<sp/>=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.Find(</highlight><highlight class="stringliteral">&quot;*/&quot;</highlight><highlight class="normal">,<sp/>start_position<sp/>+<sp/>2))<sp/>!=<sp/>kNotFound)</highlight></codeline>
<codeline lineno="9179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_position<sp/>=<sp/>found_position<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="9180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_position<sp/>=<sp/>end_position;</highlight></codeline>
<codeline lineno="9182"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9185"><highlight class="normal"></highlight></codeline>
<codeline lineno="9186"><highlight class="normal"><sp/><sp/>String<sp/>result;</highlight></codeline>
<codeline lineno="9187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start_position<sp/>&lt;<sp/>end_position<sp/>&amp;&amp;<sp/>!result.length())<sp/>{</highlight></codeline>
<codeline lineno="9188"><highlight class="normal"><sp/><sp/><sp/><sp/>last_non_space_position<sp/>=<sp/>kNotFound;</highlight></codeline>
<codeline lineno="9189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(found_position<sp/>=<sp/>start_position;<sp/>found_position<sp/>&lt;<sp/>end_position;</highlight></codeline>
<codeline lineno="9190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found_position++)<sp/>{</highlight></codeline>
<codeline lineno="9191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!request.should_allow_cdata)<sp/>{</highlight></codeline>
<codeline lineno="9192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1ace65f3869170d50fc84abcf15f9734f9" kindref="member">StartsSingleLineCommentAt</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>found_position)<sp/>||</highlight></codeline>
<codeline lineno="9193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a69dab7fa98b75d3d4e3235dfe768f0d4" kindref="member">StartsMultiLineCommentAt</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>found_position)<sp/>||</highlight></codeline>
<codeline lineno="9194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a0ddb28e1b63d6629ceaec0bc329ddf6b" kindref="member">StartsHTMLOpenCommentAt</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>found_position)<sp/>||</highlight></codeline>
<codeline lineno="9195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a3c5519a88f3289dd3a707e9363be6961" kindref="member">StartsHTMLCloseCommentAt</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>found_position))<sp/>{</highlight></codeline>
<codeline lineno="9196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[found_position]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>||<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[found_position]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;`&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9201"><highlight class="normal"></highlight></codeline>
<codeline lineno="9202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_non_space_position<sp/>!=<sp/>kNotFound<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_c_w_e-79_8c_1a4155aa3de129e396f98fb76160871fe5" kindref="member">StartsOpeningScriptTagAt</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>found_position)<sp/>||</highlight></codeline>
<codeline lineno="9204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a06b0c6b4ff0570f1e9ddceb8ffaf8f52" kindref="member">StartsClosingScriptTagAt</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>found_position)))<sp/>{</highlight></codeline>
<codeline lineno="9205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found_position<sp/>=<sp/>last_non_space_position<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="9206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found_position<sp/>&gt;<sp/>start_position<sp/>+<sp/>kMaximumFragmentLengthTarget)<sp/>{</highlight></codeline>
<codeline lineno="9209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsHTMLSpace&lt;UChar&gt;(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[found_position]))</highlight></codeline>
<codeline lineno="9210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsHTMLSpace&lt;UChar&gt;(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[found_position]))</highlight></codeline>
<codeline lineno="9213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_non_space_position<sp/>=<sp/>found_position;</highlight></codeline>
<codeline lineno="9214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9215"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>Canonicalize(</highlight></codeline>
<codeline lineno="9216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.Substring(start_position,<sp/>found_position<sp/>-<sp/>start_position),</highlight></codeline>
<codeline lineno="9217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kNoTruncation);</highlight></codeline>
<codeline lineno="9218"><highlight class="normal"><sp/><sp/><sp/><sp/>start_position<sp/>=<sp/>found_position<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="9219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9220"><highlight class="normal"></highlight></codeline>
<codeline lineno="9221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9223"><highlight class="normal">String<sp/>XSSAuditor::CanonicalizedSnippetForTagName(</highlight></codeline>
<codeline lineno="9224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9225"><highlight class="normal"><sp/><sp/>String<sp/>source<sp/>=<sp/>request.source_tracker.SourceForToken(request.token);</highlight></codeline>
<codeline lineno="9226"><highlight class="normal"></highlight></codeline>
<codeline lineno="9227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(start<sp/>=<sp/>0;<sp/>start<sp/>&lt;<sp/>source.length()<sp/>&amp;&amp;<sp/>source[start]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>++start)</highlight></codeline>
<codeline lineno="9229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9230"><highlight class="normal"></highlight></codeline>
<codeline lineno="9231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Canonicalize(</highlight></codeline>
<codeline lineno="9232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>source.Substring(start,<sp/>request.token.GetName().size()<sp/>+<sp/>1),</highlight></codeline>
<codeline lineno="9233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kNoTruncation);</highlight></codeline>
<codeline lineno="9234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9235" refid="_c_w_e-79_8c_1a24b32474fdb58bdb33c180ed6f926431" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>String<sp/><ref refid="_c_w_e-79_8c_1a24b32474fdb58bdb33c180ed6f926431" kindref="member">Decode16BitUnicodeEscapeSequences</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DecodeEscapeSequences&lt;Unicode16BitEscapeSequence&gt;(string,</highlight></codeline>
<codeline lineno="9237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8Encoding());</highlight></codeline>
<codeline lineno="9238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9239"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::EraseAttributeIfInjected(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request,</highlight></codeline>
<codeline lineno="9240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QualifiedName&amp;<sp/>attribute_name,</highlight></codeline>
<codeline lineno="9241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>replacement_value,</highlight></codeline>
<codeline lineno="9242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TruncationKind<sp/>treatment,</highlight></codeline>
<codeline lineno="9243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HrefRestriction<sp/>restriction)<sp/>{</highlight></codeline>
<codeline lineno="9244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index_of_attribute<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-79_8c_1a558e122beebbb24056642075db346712" kindref="member">FindAttributeWithName</ref>(request.token,<sp/>attribute_name,<sp/>index_of_attribute))</highlight></codeline>
<codeline lineno="9246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9247"><highlight class="normal"></highlight></codeline>
<codeline lineno="9248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HTMLToken::Attribute&amp;<sp/>attribute<sp/>=</highlight></codeline>
<codeline lineno="9249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>request.token.Attributes().at(index_of_attribute);</highlight></codeline>
<codeline lineno="9250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsContainedInRequest(</highlight></codeline>
<codeline lineno="9251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canonicalize(SnippetFromAttribute(request,<sp/>attribute),<sp/>treatment)))</highlight></codeline>
<codeline lineno="9252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9253"><highlight class="normal"></highlight></codeline>
<codeline lineno="9254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(attribute_name,<sp/>srcAttr)<sp/>||</highlight></codeline>
<codeline lineno="9255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(restriction<sp/>==<sp/>kAllowSameOriginHref<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(attribute_name,<sp/>hrefAttr)))<sp/>{</highlight></codeline>
<codeline lineno="9257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsLikelySafeResource(attribute.Value()))</highlight></codeline>
<codeline lineno="9258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9259"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(attribute_name,<sp/>http_equivAttr))<sp/>{</highlight></codeline>
<codeline lineno="9260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-79_8c_1acd240fe1fa14238b3890fe46b7e2ad65" kindref="member">IsDangerousHTTPEquiv</ref>(attribute.Value()))</highlight></codeline>
<codeline lineno="9261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9263"><highlight class="normal"></highlight></codeline>
<codeline lineno="9264"><highlight class="normal"><sp/><sp/>request.token.EraseValueOfAttribute(index_of_attribute);</highlight></codeline>
<codeline lineno="9265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!replacement_value.IsEmpty())</highlight></codeline>
<codeline lineno="9266"><highlight class="normal"><sp/><sp/><sp/><sp/>request.token.AppendToAttributeValue(index_of_attribute,<sp/>replacement_value);</highlight></codeline>
<codeline lineno="9267"><highlight class="normal"></highlight></codeline>
<codeline lineno="9268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9270"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::EraseDangerousAttributesIfInjected(</highlight></codeline>
<codeline lineno="9271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>did_block_script<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>request.token.Attributes().size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="9274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>erase_attribute<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value_contains_java_script_url<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HTMLToken::Attribute&amp;<sp/>attribute<sp/>=<sp/>request.token.Attributes().at(i);</highlight></codeline>
<codeline lineno="9277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a4031f17259addac6410cb3ca6f09b6fe" kindref="member">IsNameOfInlineEventHandler</ref>(attribute.NameAsVector()))<sp/>{</highlight></codeline>
<codeline lineno="9278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>erase_attribute<sp/>=<sp/>IsContainedInRequest(</highlight></codeline>
<codeline lineno="9279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canonicalize(SnippetFromAttribute(request,<sp/>attribute),</highlight></codeline>
<codeline lineno="9280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kScriptLikeAttributeTruncation));</highlight></codeline>
<codeline lineno="9281"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1abed8adfa878825cb326df8026af38b6c" kindref="member">IsSemicolonSeparatedAttribute</ref>(attribute))<sp/>{</highlight></codeline>
<codeline lineno="9282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a568571591fcc7f488af22e8a1c0fcd26" kindref="member">IsSemicolonSeparatedValueContainingJavaScriptURL</ref>(attribute.Value()))<sp/>{</highlight></codeline>
<codeline lineno="9283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_contains_java_script_url<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>erase_attribute<sp/>=</highlight></codeline>
<codeline lineno="9285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsContainedInRequest(Canonicalize(</highlight></codeline>
<codeline lineno="9286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NameFromAttribute(request,<sp/>attribute),<sp/>kNoTruncation))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsContainedInRequest(</highlight></codeline>
<codeline lineno="9288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canonicalize(SnippetFromAttribute(request,<sp/>attribute),</highlight></codeline>
<codeline lineno="9289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kSemicolonSeparatedScriptLikeAttributeTruncation));</highlight></codeline>
<codeline lineno="9290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9291"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ProtocolIsJavaScript(</highlight></codeline>
<codeline lineno="9292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StripLeadingAndTrailingHTMLSpaces(attribute.Value())))<sp/>{</highlight></codeline>
<codeline lineno="9293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_contains_java_script_url<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>erase_attribute<sp/>=<sp/>IsContainedInRequest(</highlight></codeline>
<codeline lineno="9295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Canonicalize(SnippetFromAttribute(request,<sp/>attribute),</highlight></codeline>
<codeline lineno="9296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kScriptLikeAttributeTruncation));</highlight></codeline>
<codeline lineno="9297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!erase_attribute)</highlight></codeline>
<codeline lineno="9299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9300"><highlight class="normal"><sp/><sp/><sp/><sp/>request.token.EraseValueOfAttribute(i);</highlight></codeline>
<codeline lineno="9301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_contains_java_script_url)</highlight></codeline>
<codeline lineno="9302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>request.token.AppendToAttributeValue(i,<sp/>kSafeJavaScriptURL);</highlight></codeline>
<codeline lineno="9303"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>did_block_script;</highlight></codeline>
<codeline lineno="9306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9307"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::FilterBaseToken(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9308"><highlight class="normal"><sp/><sp/>DCHECK_EQ(request.token.GetType(),<sp/>HTMLToken::kStartTag);</highlight></codeline>
<codeline lineno="9309"><highlight class="normal"><sp/><sp/>DCHECK(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>baseTag));</highlight></codeline>
<codeline lineno="9310"><highlight class="normal"></highlight></codeline>
<codeline lineno="9311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EraseAttributeIfInjected(request,<sp/>hrefAttr,<sp/>String(),</highlight></codeline>
<codeline lineno="9312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kSrcLikeAttributeTruncation);</highlight></codeline>
<codeline lineno="9313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9314"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::FilterButtonToken(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9315"><highlight class="normal"><sp/><sp/>DCHECK_EQ(request.token.GetType(),<sp/>HTMLToken::kStartTag);</highlight></codeline>
<codeline lineno="9316"><highlight class="normal"><sp/><sp/>DCHECK(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>buttonTag));</highlight></codeline>
<codeline lineno="9317"><highlight class="normal"></highlight></codeline>
<codeline lineno="9318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EraseAttributeIfInjected(request,<sp/>formactionAttr,<sp/>kURLWithUniqueOrigin,</highlight></codeline>
<codeline lineno="9319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kSrcLikeAttributeTruncation);</highlight></codeline>
<codeline lineno="9320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9321"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::FilterCharacterToken(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9322"><highlight class="normal"><sp/><sp/>DCHECK(script_tag_nesting_level_);</highlight></codeline>
<codeline lineno="9323"><highlight class="normal"><sp/><sp/>DCHECK_NE(state_,<sp/>kUninitialized);</highlight></codeline>
<codeline lineno="9324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state_<sp/>==<sp/>kPermittingAdjacentCharacterTokens)</highlight></codeline>
<codeline lineno="9325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9326"><highlight class="normal"></highlight></codeline>
<codeline lineno="9327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state_<sp/>==<sp/>kFilteringTokens<sp/>&amp;&amp;<sp/>script_tag_found_in_request_)<sp/>{</highlight></codeline>
<codeline lineno="9328"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>snippet<sp/>=<sp/>CanonicalizedSnippetForJavaScript(request);</highlight></codeline>
<codeline lineno="9329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsContainedInRequest(snippet))</highlight></codeline>
<codeline lineno="9330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state_<sp/>=<sp/>kSuppressingAdjacentCharacterTokens;</highlight></codeline>
<codeline lineno="9331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!snippet.IsEmpty())</highlight></codeline>
<codeline lineno="9332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state_<sp/>=<sp/>kPermittingAdjacentCharacterTokens;</highlight></codeline>
<codeline lineno="9333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state_<sp/>==<sp/>kSuppressingAdjacentCharacterTokens)<sp/>{</highlight></codeline>
<codeline lineno="9335"><highlight class="normal"><sp/><sp/><sp/><sp/>request.token.EraseCharacters();</highlight></codeline>
<codeline lineno="9336"><highlight class="normal"><sp/><sp/><sp/><sp/>request.token.AppendToCharacter(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9341"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::FilterEmbedToken(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9342"><highlight class="normal"><sp/><sp/>DCHECK_EQ(request.token.GetType(),<sp/>HTMLToken::kStartTag);</highlight></codeline>
<codeline lineno="9343"><highlight class="normal"><sp/><sp/>DCHECK(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>embedTag));</highlight></codeline>
<codeline lineno="9344"><highlight class="normal"></highlight></codeline>
<codeline lineno="9345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>did_block_script<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsContainedInRequest(CanonicalizedSnippetForTagName(request)))<sp/>{</highlight></codeline>
<codeline lineno="9347"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>EraseAttributeIfInjected(request,<sp/>codeAttr,<sp/>String(),</highlight></codeline>
<codeline lineno="9348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kSrcLikeAttributeTruncation);</highlight></codeline>
<codeline lineno="9349"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>EraseAttributeIfInjected(</highlight></codeline>
<codeline lineno="9350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>request,<sp/>srcAttr,<sp/>BlankURL().GetString(),<sp/>kSrcLikeAttributeTruncation);</highlight></codeline>
<codeline lineno="9351"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>EraseAttributeIfInjected(request,<sp/>typeAttr);</highlight></codeline>
<codeline lineno="9352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>did_block_script;</highlight></codeline>
<codeline lineno="9354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9355"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XSSAuditor::FilterEndToken(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9356"><highlight class="normal"><sp/><sp/>DCHECK(script_tag_nesting_level_);</highlight></codeline>
<codeline lineno="9357"><highlight class="normal"><sp/><sp/>state_<sp/>=<sp/>kFilteringTokens;</highlight></codeline>
<codeline lineno="9358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>scriptTag))<sp/>{</highlight></codeline>
<codeline lineno="9359"><highlight class="normal"><sp/><sp/><sp/><sp/>script_tag_nesting_level_--;</highlight></codeline>
<codeline lineno="9360"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(request.should_allow_cdata<sp/>||<sp/>!script_tag_nesting_level_);</highlight></codeline>
<codeline lineno="9361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9363"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::FilterFormToken(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9364"><highlight class="normal"><sp/><sp/>DCHECK_EQ(request.token.GetType(),<sp/>HTMLToken::kStartTag);</highlight></codeline>
<codeline lineno="9365"><highlight class="normal"><sp/><sp/>DCHECK(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>formTag));</highlight></codeline>
<codeline lineno="9366"><highlight class="normal"></highlight></codeline>
<codeline lineno="9367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EraseAttributeIfInjected(request,<sp/>actionAttr,<sp/>kURLWithUniqueOrigin,</highlight></codeline>
<codeline lineno="9368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kSrcLikeAttributeTruncation);</highlight></codeline>
<codeline lineno="9369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9370"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::FilterFrameToken(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9371"><highlight class="normal"><sp/><sp/>DCHECK_EQ(request.token.GetType(),<sp/>HTMLToken::kStartTag);</highlight></codeline>
<codeline lineno="9372"><highlight class="normal"><sp/><sp/>DCHECK(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>iframeTag)<sp/>||<sp/><ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>frameTag));</highlight></codeline>
<codeline lineno="9373"><highlight class="normal"></highlight></codeline>
<codeline lineno="9374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>did_block_script<sp/>=<sp/>EraseAttributeIfInjected(</highlight></codeline>
<codeline lineno="9375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>request,<sp/>srcdocAttr,<sp/>String(),<sp/>kScriptLikeAttributeTruncation);</highlight></codeline>
<codeline lineno="9376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsContainedInRequest(CanonicalizedSnippetForTagName(request)))</highlight></codeline>
<codeline lineno="9377"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>EraseAttributeIfInjected(request,<sp/>srcAttr,<sp/>String(),</highlight></codeline>
<codeline lineno="9378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kSrcLikeAttributeTruncation);</highlight></codeline>
<codeline lineno="9379"><highlight class="normal"></highlight></codeline>
<codeline lineno="9380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>did_block_script;</highlight></codeline>
<codeline lineno="9381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9382"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::FilterInputToken(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9383"><highlight class="normal"><sp/><sp/>DCHECK_EQ(request.token.GetType(),<sp/>HTMLToken::kStartTag);</highlight></codeline>
<codeline lineno="9384"><highlight class="normal"><sp/><sp/>DCHECK(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>inputTag));</highlight></codeline>
<codeline lineno="9385"><highlight class="normal"></highlight></codeline>
<codeline lineno="9386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EraseAttributeIfInjected(request,<sp/>formactionAttr,<sp/>kURLWithUniqueOrigin,</highlight></codeline>
<codeline lineno="9387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kSrcLikeAttributeTruncation);</highlight></codeline>
<codeline lineno="9388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9389"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::FilterLinkToken(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9390"><highlight class="normal"><sp/><sp/>DCHECK_EQ(request.token.GetType(),<sp/>HTMLToken::kStartTag);</highlight></codeline>
<codeline lineno="9391"><highlight class="normal"><sp/><sp/>DCHECK(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>linkTag));</highlight></codeline>
<codeline lineno="9392"><highlight class="normal"></highlight></codeline>
<codeline lineno="9393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index_of_attribute<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-79_8c_1a558e122beebbb24056642075db346712" kindref="member">FindAttributeWithName</ref>(request.token,<sp/>relAttr,<sp/>index_of_attribute))</highlight></codeline>
<codeline lineno="9395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9396"><highlight class="normal"></highlight></codeline>
<codeline lineno="9397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HTMLToken::Attribute&amp;<sp/>attribute<sp/>=</highlight></codeline>
<codeline lineno="9398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>request.token.Attributes().at(index_of_attribute);</highlight></codeline>
<codeline lineno="9399"><highlight class="normal"><sp/><sp/>LinkRelAttribute<sp/>parsed_attribute(attribute.Value());</highlight></codeline>
<codeline lineno="9400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parsed_attribute.IsImport())</highlight></codeline>
<codeline lineno="9401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9402"><highlight class="normal"></highlight></codeline>
<codeline lineno="9403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EraseAttributeIfInjected(request,<sp/>hrefAttr,<sp/>kURLWithUniqueOrigin,</highlight></codeline>
<codeline lineno="9404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kSrcLikeAttributeTruncation,</highlight></codeline>
<codeline lineno="9405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kAllowSameOriginHref);</highlight></codeline>
<codeline lineno="9406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9407"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::FilterMetaToken(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9408"><highlight class="normal"><sp/><sp/>DCHECK_EQ(request.token.GetType(),<sp/>HTMLToken::kStartTag);</highlight></codeline>
<codeline lineno="9409"><highlight class="normal"><sp/><sp/>DCHECK(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>metaTag));</highlight></codeline>
<codeline lineno="9410"><highlight class="normal"></highlight></codeline>
<codeline lineno="9411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EraseAttributeIfInjected(request,<sp/>http_equivAttr);</highlight></codeline>
<codeline lineno="9412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9413"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::FilterObjectToken(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9414"><highlight class="normal"><sp/><sp/>DCHECK_EQ(request.token.GetType(),<sp/>HTMLToken::kStartTag);</highlight></codeline>
<codeline lineno="9415"><highlight class="normal"><sp/><sp/>DCHECK(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>objectTag));</highlight></codeline>
<codeline lineno="9416"><highlight class="normal"></highlight></codeline>
<codeline lineno="9417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>did_block_script<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsContainedInRequest(CanonicalizedSnippetForTagName(request)))<sp/>{</highlight></codeline>
<codeline lineno="9419"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>EraseAttributeIfInjected(</highlight></codeline>
<codeline lineno="9420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>request,<sp/>dataAttr,<sp/>BlankURL().GetString(),<sp/>kSrcLikeAttributeTruncation);</highlight></codeline>
<codeline lineno="9421"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>EraseAttributeIfInjected(request,<sp/>typeAttr);</highlight></codeline>
<codeline lineno="9422"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>EraseAttributeIfInjected(request,<sp/>classidAttr);</highlight></codeline>
<codeline lineno="9423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>did_block_script;</highlight></codeline>
<codeline lineno="9425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9426"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::FilterParamToken(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9427"><highlight class="normal"><sp/><sp/>DCHECK_EQ(request.token.GetType(),<sp/>HTMLToken::kStartTag);</highlight></codeline>
<codeline lineno="9428"><highlight class="normal"><sp/><sp/>DCHECK(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>paramTag));</highlight></codeline>
<codeline lineno="9429"><highlight class="normal"></highlight></codeline>
<codeline lineno="9430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index_of_name_attribute;</highlight></codeline>
<codeline lineno="9431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-79_8c_1a558e122beebbb24056642075db346712" kindref="member">FindAttributeWithName</ref>(request.token,<sp/>nameAttr,<sp/>index_of_name_attribute))</highlight></codeline>
<codeline lineno="9432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9433"><highlight class="normal"></highlight></codeline>
<codeline lineno="9434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HTMLToken::Attribute&amp;<sp/>name_attribute<sp/>=</highlight></codeline>
<codeline lineno="9435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>request.token.Attributes().at(index_of_name_attribute);</highlight></codeline>
<codeline lineno="9436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HTMLParamElement::IsURLParameter(name_attribute.Value()))</highlight></codeline>
<codeline lineno="9437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9438"><highlight class="normal"></highlight></codeline>
<codeline lineno="9439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EraseAttributeIfInjected(request,<sp/>valueAttr,<sp/>BlankURL().GetString(),</highlight></codeline>
<codeline lineno="9440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kSrcLikeAttributeTruncation);</highlight></codeline>
<codeline lineno="9441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9442"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::FilterScriptToken(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9443"><highlight class="normal"><sp/><sp/>DCHECK_EQ(request.token.GetType(),<sp/>HTMLToken::kStartTag);</highlight></codeline>
<codeline lineno="9444"><highlight class="normal"><sp/><sp/>DCHECK(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>scriptTag));</highlight></codeline>
<codeline lineno="9445"><highlight class="normal"></highlight></codeline>
<codeline lineno="9446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>did_block_script<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9447"><highlight class="normal"><sp/><sp/>script_tag_found_in_request_<sp/>=</highlight></codeline>
<codeline lineno="9448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IsContainedInRequest(CanonicalizedSnippetForTagName(request));</highlight></codeline>
<codeline lineno="9449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(script_tag_found_in_request_)<sp/>{</highlight></codeline>
<codeline lineno="9450"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>EraseAttributeIfInjected(</highlight></codeline>
<codeline lineno="9451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>request,<sp/>srcAttr,<sp/>BlankURL().GetString(),<sp/>kSrcLikeAttributeTruncation);</highlight></codeline>
<codeline lineno="9452"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>EraseAttributeIfInjected(request,<sp/>SVGNames::hrefAttr,</highlight></codeline>
<codeline lineno="9453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BlankURL().GetString(),</highlight></codeline>
<codeline lineno="9454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kSrcLikeAttributeTruncation);</highlight></codeline>
<codeline lineno="9455"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>EraseAttributeIfInjected(request,<sp/>XLinkNames::hrefAttr,</highlight></codeline>
<codeline lineno="9456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BlankURL().GetString(),</highlight></codeline>
<codeline lineno="9457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kSrcLikeAttributeTruncation);</highlight></codeline>
<codeline lineno="9458"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>did_block_script;</highlight></codeline>
<codeline lineno="9460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9461"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::FilterStartToken(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request)<sp/>{</highlight></codeline>
<codeline lineno="9462"><highlight class="normal"><sp/><sp/>state_<sp/>=<sp/>kFilteringTokens;</highlight></codeline>
<codeline lineno="9463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>did_block_script<sp/>=<sp/>EraseDangerousAttributesIfInjected(request);</highlight></codeline>
<codeline lineno="9464"><highlight class="normal"></highlight></codeline>
<codeline lineno="9465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>scriptTag))<sp/>{</highlight></codeline>
<codeline lineno="9466"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>FilterScriptToken(request);</highlight></codeline>
<codeline lineno="9467"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(request.should_allow_cdata<sp/>||<sp/>!script_tag_nesting_level_);</highlight></codeline>
<codeline lineno="9468"><highlight class="normal"><sp/><sp/><sp/><sp/>script_tag_nesting_level_++;</highlight></codeline>
<codeline lineno="9469"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>objectTag))</highlight></codeline>
<codeline lineno="9470"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>FilterObjectToken(request);</highlight></codeline>
<codeline lineno="9471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>paramTag))</highlight></codeline>
<codeline lineno="9472"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>FilterParamToken(request);</highlight></codeline>
<codeline lineno="9473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>embedTag))</highlight></codeline>
<codeline lineno="9474"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>FilterEmbedToken(request);</highlight></codeline>
<codeline lineno="9475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>iframeTag)<sp/>||</highlight></codeline>
<codeline lineno="9476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>frameTag))</highlight></codeline>
<codeline lineno="9477"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>FilterFrameToken(request);</highlight></codeline>
<codeline lineno="9478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>metaTag))</highlight></codeline>
<codeline lineno="9479"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>FilterMetaToken(request);</highlight></codeline>
<codeline lineno="9480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>baseTag))</highlight></codeline>
<codeline lineno="9481"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>FilterBaseToken(request);</highlight></codeline>
<codeline lineno="9482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>formTag))</highlight></codeline>
<codeline lineno="9483"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>FilterFormToken(request);</highlight></codeline>
<codeline lineno="9484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>inputTag))</highlight></codeline>
<codeline lineno="9485"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>FilterInputToken(request);</highlight></codeline>
<codeline lineno="9486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>buttonTag))</highlight></codeline>
<codeline lineno="9487"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>FilterButtonToken(request);</highlight></codeline>
<codeline lineno="9488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(request.token,<sp/>linkTag))</highlight></codeline>
<codeline lineno="9489"><highlight class="normal"><sp/><sp/><sp/><sp/>did_block_script<sp/>|=<sp/>FilterLinkToken(request);</highlight></codeline>
<codeline lineno="9490"><highlight class="normal"></highlight></codeline>
<codeline lineno="9491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>did_block_script;</highlight></codeline>
<codeline lineno="9492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9493" refid="_c_w_e-79_8c_1a558e122beebbb24056642075db346712" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a558e122beebbb24056642075db346712" kindref="member">FindAttributeWithName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HTMLToken&amp;<sp/>token,</highlight></codeline>
<codeline lineno="9494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QualifiedName&amp;<sp/>name,</highlight></codeline>
<codeline lineno="9495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>index_of_matching_attribute)<sp/>{</highlight></codeline>
<codeline lineno="9496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>attr_name<sp/>=<sp/>name.NamespaceURI()<sp/>==<sp/>XLinkNames::xlinkNamespaceURI</highlight></codeline>
<codeline lineno="9497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;xlink:&quot;</highlight><highlight class="normal"><sp/>+<sp/>name.LocalName().GetString()</highlight></codeline>
<codeline lineno="9498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>name.LocalName().GetString();</highlight></codeline>
<codeline lineno="9499"><highlight class="normal"></highlight></codeline>
<codeline lineno="9500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>token.Attributes().size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="9501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(EqualIgnoringNullity(token.Attributes().at(i).NameAsVector(),</highlight></codeline>
<codeline lineno="9502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr_name))<sp/>{</highlight></codeline>
<codeline lineno="9503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index_of_matching_attribute<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="9504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9509" refid="_c_w_e-79_8c_1a745b635010b28b54ef3a07bbbedc190e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>String<sp/><ref refid="_c_w_e-79_8c_1a745b635010b28b54ef3a07bbbedc190e" kindref="member">FullyDecodeString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="9510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WTF::TextEncoding&amp;<sp/>encoding)<sp/>{</highlight></codeline>
<codeline lineno="9511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>old_working_string_length;</highlight></codeline>
<codeline lineno="9512"><highlight class="normal"><sp/><sp/>String<sp/>working_string<sp/>=<sp/>string;</highlight></codeline>
<codeline lineno="9513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9514"><highlight class="normal"><sp/><sp/><sp/><sp/>old_working_string_length<sp/>=<sp/>working_string.length();</highlight></codeline>
<codeline lineno="9515"><highlight class="normal"><sp/><sp/><sp/><sp/>working_string<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a24b32474fdb58bdb33c180ed6f926431" kindref="member">Decode16BitUnicodeEscapeSequences</ref>(</highlight></codeline>
<codeline lineno="9516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecodeStandardURLEscapeSequences(working_string,<sp/>encoding));</highlight></codeline>
<codeline lineno="9517"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(working_string.length()<sp/>&lt;<sp/>old_working_string_length);</highlight></codeline>
<codeline lineno="9518"><highlight class="normal"><sp/><sp/>working_string.Replace(</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>working_string;</highlight></codeline>
<codeline lineno="9520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9521" refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a9eeb86c5040a0e3297df918370fcf4d3" kindref="member">HasName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HTMLToken&amp;<sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QualifiedName&amp;<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="9522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(token.GetName(),<sp/>name);</highlight></codeline>
<codeline lineno="9523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9524"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XSSAuditor::InitForFragment()<sp/>{</highlight></codeline>
<codeline lineno="9525"><highlight class="normal"><sp/><sp/>DCHECK(IsMainThread());</highlight></codeline>
<codeline lineno="9526"><highlight class="normal"><sp/><sp/>DCHECK_EQ(state_,<sp/>kUninitialized);</highlight></codeline>
<codeline lineno="9527"><highlight class="normal"><sp/><sp/>state_<sp/>=<sp/>kFilteringTokens;</highlight></codeline>
<codeline lineno="9528"><highlight class="normal"><sp/><sp/>DCHECK(!is_enabled_);</highlight></codeline>
<codeline lineno="9529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9530"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::IsContainedInRequest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>decoded_snippet)<sp/>{</highlight></codeline>
<codeline lineno="9531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decoded_snippet.IsEmpty())</highlight></codeline>
<codeline lineno="9532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decoded_url_.FindIgnoringCase(decoded_snippet,<sp/>0)<sp/>!=<sp/>kNotFound)</highlight></codeline>
<codeline lineno="9534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decoded_http_body_suffix_tree_<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!decoded_http_body_suffix_tree_-&gt;MightContain(decoded_snippet))</highlight></codeline>
<codeline lineno="9537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decoded_http_body_.FindIgnoringCase(decoded_snippet,<sp/>0)<sp/>!=<sp/>kNotFound;</highlight></codeline>
<codeline lineno="9539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9540" refid="_c_w_e-79_8c_1acd240fe1fa14238b3890fe46b7e2ad65" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1acd240fe1fa14238b3890fe46b7e2ad65" kindref="member">IsDangerousHTTPEquiv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="9541"><highlight class="normal"><sp/><sp/>String<sp/>equiv<sp/>=<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>.StripWhiteSpace();</highlight></codeline>
<codeline lineno="9542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DeprecatedEqualIgnoringCase(equiv,<sp/></highlight><highlight class="stringliteral">&quot;refresh&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="9543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeprecatedEqualIgnoringCase(equiv,<sp/></highlight><highlight class="stringliteral">&quot;set-cookie&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9545" refid="_c_w_e-79_8c_1a79c2b2cbf977223c9e4f0a5faa2c120e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a79c2b2cbf977223c9e4f0a5faa2c120e" kindref="member">IsHTMLQuote</ref>(UChar<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="9546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9548" refid="_c_w_e-79_8c_1a53940b795ca360007027ff4413c095b5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a53940b795ca360007027ff4413c095b5" kindref="member">IsJSNewline</ref>(UChar<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="9549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/>0x2028<sp/>||<sp/>c<sp/>==<sp/>0x2029);</highlight></codeline>
<codeline lineno="9550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9551"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::IsLikelySafeResource(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>url)<sp/>{</highlight></codeline>
<codeline lineno="9552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(url.IsEmpty()<sp/>||<sp/>url<sp/>==<sp/>BlankURL().GetString())</highlight></codeline>
<codeline lineno="9553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9554"><highlight class="normal"></highlight></codeline>
<codeline lineno="9555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(document_url_.Host().IsEmpty())</highlight></codeline>
<codeline lineno="9556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9557"><highlight class="normal"></highlight></codeline>
<codeline lineno="9558"><highlight class="normal"><sp/><sp/>KURL<sp/>resource_url(document_url_,<sp/>url);</highlight></codeline>
<codeline lineno="9559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(document_url_.Host()<sp/>==<sp/>resource_url.Host()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resource_url.Query().IsEmpty());</highlight></codeline>
<codeline lineno="9561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9562" refid="_c_w_e-79_8c_1a4031f17259addac6410cb3ca6f09b6fe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a4031f17259addac6410cb3ca6f09b6fe" kindref="member">IsNameOfInlineEventHandler</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;UChar,<sp/>32&gt;&amp;<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="9563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kLengthOfShortestInlineEventHandlerName<sp/>=<sp/>5;<sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>wit:<sp/>oncut.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.size()<sp/>&lt;<sp/>kLengthOfShortestInlineEventHandlerName)</highlight></codeline>
<codeline lineno="9565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>name[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9568" refid="_c_w_e-79_8c_1ab7e91d7419da000b8e73046611eb1a95" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ab7e91d7419da000b8e73046611eb1a95" kindref="member">IsNonCanonicalCharacter</ref>(UChar<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="9569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="9570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>&gt;=<sp/>127);</highlight></codeline>
<codeline lineno="9571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9572" refid="_c_w_e-79_8c_1aa3bb831ca33684d0dbd55ba558684d29" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aa3bb831ca33684d0dbd55ba558684d29" kindref="member">IsRequiredForInjection</ref>(UChar<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="9573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9575"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XSSAuditor::IsSafeToSendToAnotherThread()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>document_url_.IsSafeToSendToAnotherThread()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded_url_.IsSafeToSendToAnotherThread()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded_http_body_.IsSafeToSendToAnotherThread()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http_body_as_string_.IsSafeToSendToAnotherThread();</highlight></codeline>
<codeline lineno="9580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9581" refid="_c_w_e-79_8c_1abed8adfa878825cb326df8026af38b6c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1abed8adfa878825cb326df8026af38b6c" kindref="member">IsSemicolonSeparatedAttribute</ref>(</highlight></codeline>
<codeline lineno="9582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HTMLToken::Attribute&amp;<sp/>attribute)<sp/>{</highlight></codeline>
<codeline lineno="9583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(attribute.NameAsVector(),<sp/>SVGNames::valuesAttr);</highlight></codeline>
<codeline lineno="9584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9585" refid="_c_w_e-79_8c_1a568571591fcc7f488af22e8a1c0fcd26" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a568571591fcc7f488af22e8a1c0fcd26" kindref="member">IsSemicolonSeparatedValueContainingJavaScriptURL</ref>(</highlight></codeline>
<codeline lineno="9586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="9587"><highlight class="normal"><sp/><sp/>Vector&lt;String&gt;<sp/>value_list;</highlight></codeline>
<codeline lineno="9588"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>.Split(</highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">,<sp/>value_list);</highlight></codeline>
<codeline lineno="9589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>value_list.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="9590"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>stripped<sp/>=<sp/>StripLeadingAndTrailingHTMLSpaces(value_list[i]);</highlight></codeline>
<codeline lineno="9591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ProtocolIsJavaScript(stripped))</highlight></codeline>
<codeline lineno="9592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9593"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9596" refid="_c_w_e-79_8c_1a1f297a3e05b479f524aba74117218893" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a1f297a3e05b479f524aba74117218893" kindref="member">IsSlash</ref>(UChar<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="9597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9599" refid="_c_w_e-79_8c_1aef4646bb2c405388c9a7f84e417570ea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aef4646bb2c405388c9a7f84e417570ea" kindref="member">IsTerminatingCharacter</ref>(UChar<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="9600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="9601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9603"><highlight class="normal">String<sp/>XSSAuditor::NameFromAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request,</highlight></codeline>
<codeline lineno="9604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HTMLToken::Attribute&amp;<sp/>attribute)<sp/>{</highlight></codeline>
<codeline lineno="9605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>attribute.NameRange().start<sp/>-<sp/>request.token.StartIndex();</highlight></codeline>
<codeline lineno="9606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>attribute.ValueRange().start<sp/>-<sp/>request.token.StartIndex();</highlight></codeline>
<codeline lineno="9607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>request.source_tracker.SourceForToken(request.token)</highlight></codeline>
<codeline lineno="9608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Substring(start,<sp/>end<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="9609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9610"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XSSAuditor::SetEncoding(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WTF::TextEncoding&amp;<sp/>encoding)<sp/>{</highlight></codeline>
<codeline lineno="9611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kMiniumLengthForSuffixTree<sp/>=<sp/>512;<sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>Tune<sp/>this<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kSuffixTreeDepth<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="9613"><highlight class="normal"></highlight></codeline>
<codeline lineno="9614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!encoding.IsValid())</highlight></codeline>
<codeline lineno="9615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9616"><highlight class="normal"></highlight></codeline>
<codeline lineno="9617"><highlight class="normal"><sp/><sp/>encoding_<sp/>=<sp/>encoding;</highlight></codeline>
<codeline lineno="9618"><highlight class="normal"></highlight></codeline>
<codeline lineno="9619"><highlight class="normal"><sp/><sp/>decoded_url_<sp/>=<sp/>Canonicalize(document_url_.GetString(),<sp/>kNoTruncation);</highlight></codeline>
<codeline lineno="9620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decoded_url_.Find(<ref refid="_c_w_e-79_8c_1aa3bb831ca33684d0dbd55ba558684d29" kindref="member">IsRequiredForInjection</ref>)<sp/>==<sp/>kNotFound)</highlight></codeline>
<codeline lineno="9621"><highlight class="normal"><sp/><sp/><sp/><sp/>decoded_url_<sp/>=<sp/>String();</highlight></codeline>
<codeline lineno="9622"><highlight class="normal"></highlight></codeline>
<codeline lineno="9623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!http_body_as_string_.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="9624"><highlight class="normal"><sp/><sp/><sp/><sp/>decoded_http_body_<sp/>=<sp/>Canonicalize(http_body_as_string_,<sp/>kNoTruncation);</highlight></codeline>
<codeline lineno="9625"><highlight class="normal"><sp/><sp/><sp/><sp/>http_body_as_string_<sp/>=<sp/>String();</highlight></codeline>
<codeline lineno="9626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decoded_http_body_.Find(<ref refid="_c_w_e-79_8c_1aa3bb831ca33684d0dbd55ba558684d29" kindref="member">IsRequiredForInjection</ref>)<sp/>==<sp/>kNotFound)</highlight></codeline>
<codeline lineno="9627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decoded_http_body_<sp/>=<sp/>String();</highlight></codeline>
<codeline lineno="9628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decoded_http_body_.length()<sp/>&gt;=<sp/>kMiniumLengthForSuffixTree)</highlight></codeline>
<codeline lineno="9629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decoded_http_body_suffix_tree_<sp/>=<sp/>WTF::WrapUnique(</highlight></codeline>
<codeline lineno="9630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SuffixTree&lt;ASCIICodebook&gt;(decoded_http_body_,<sp/>kSuffixTreeDepth));</highlight></codeline>
<codeline lineno="9631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9632"><highlight class="normal"></highlight></codeline>
<codeline lineno="9633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decoded_url_.IsEmpty()<sp/>&amp;&amp;<sp/>decoded_http_body_.IsEmpty())</highlight></codeline>
<codeline lineno="9634"><highlight class="normal"><sp/><sp/><sp/><sp/>is_enabled_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9636"><highlight class="normal">String<sp/>XSSAuditor::SnippetFromAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterTokenRequest&amp;<sp/>request,</highlight></codeline>
<codeline lineno="9637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HTMLToken::Attribute&amp;<sp/>attribute)<sp/>{</highlight></codeline>
<codeline lineno="9638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>name_start<sp/>=<sp/>attribute.NameRange().start<sp/>-<sp/>request.token.StartIndex();</highlight></codeline>
<codeline lineno="9639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_start<sp/>=<sp/>attribute.ValueRange().start<sp/>-<sp/>request.token.StartIndex();</highlight></codeline>
<codeline lineno="9640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_end<sp/>=<sp/>attribute.ValueRange().end<sp/>-<sp/>request.token.StartIndex();</highlight></codeline>
<codeline lineno="9641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>value_end<sp/>-<sp/>name_start;</highlight></codeline>
<codeline lineno="9642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_start<sp/>==<sp/>value_end)</highlight></codeline>
<codeline lineno="9643"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="9644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>request.source_tracker.SourceForToken(request.token)</highlight></codeline>
<codeline lineno="9645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Substring(name_start,<sp/>length);</highlight></codeline>
<codeline lineno="9646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9647" refid="_c_w_e-79_8c_1a06b0c6b4ff0570f1e9ddceb8ffaf8f52" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a06b0c6b4ff0570f1e9ddceb8ffaf8f52" kindref="member">StartsClosingScriptTagAt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="9648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>+<sp/>7<sp/>&gt;=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.length())</highlight></codeline>
<codeline lineno="9649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9650"><highlight class="normal"><sp/><sp/>StringView<sp/>script(</highlight><highlight class="stringliteral">&quot;&lt;/script&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EqualIgnoringASCIICase(StringView(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>start,<sp/>script.length()),</highlight></codeline>
<codeline lineno="9652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>script);</highlight></codeline>
<codeline lineno="9653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9654" refid="_c_w_e-79_8c_1a3c5519a88f3289dd3a707e9363be6961" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a3c5519a88f3289dd3a707e9363be6961" kindref="member">StartsHTMLCloseCommentAt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="9655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(start<sp/>+<sp/>2<sp/>&lt;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.length()<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[start]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[start<sp/>+<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[start<sp/>+<sp/>2]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9658" refid="_c_w_e-79_8c_1a0ddb28e1b63d6629ceaec0bc329ddf6b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a0ddb28e1b63d6629ceaec0bc329ddf6b" kindref="member">StartsHTMLOpenCommentAt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="9659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(start<sp/>+<sp/>3<sp/>&lt;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.length()<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[start]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[start<sp/>+<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[start<sp/>+<sp/>2]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[start<sp/>+<sp/>3]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9663" refid="_c_w_e-79_8c_1a69dab7fa98b75d3d4e3235dfe768f0d4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a69dab7fa98b75d3d4e3235dfe768f0d4" kindref="member">StartsMultiLineCommentAt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="9664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(start<sp/>+<sp/>1<sp/>&lt;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.length()<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[start]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[start<sp/>+<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9667" refid="_c_w_e-79_8c_1a4155aa3de129e396f98fb76160871fe5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a4155aa3de129e396f98fb76160871fe5" kindref="member">StartsOpeningScriptTagAt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="9668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>+<sp/>6<sp/>&gt;=<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.length())</highlight></codeline>
<codeline lineno="9669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9670"><highlight class="normal"><sp/><sp/>StringView<sp/>script(</highlight><highlight class="stringliteral">&quot;&lt;script&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EqualIgnoringASCIICase(StringView(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>start,<sp/>script.length()),</highlight></codeline>
<codeline lineno="9672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>script);</highlight></codeline>
<codeline lineno="9673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9674" refid="_c_w_e-79_8c_1ace65f3869170d50fc84abcf15f9734f9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ace65f3869170d50fc84abcf15f9734f9" kindref="member">StartsSingleLineCommentAt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="9675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(start<sp/>+<sp/>1<sp/>&lt;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.length()<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[start]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">[start<sp/>+<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9678" refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;UChar,<sp/>inlineCapacity&gt;&amp;<sp/>vector,</highlight></codeline>
<codeline lineno="9679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QualifiedName&amp;<sp/>qname)<sp/>{</highlight></codeline>
<codeline lineno="9680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EqualIgnoringNullity(vector,<sp/>qname.LocalName().Impl());</highlight></codeline>
<codeline lineno="9681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9682" refid="_c_w_e-79_8c_1a3f867ee2b3965cbbcc36a71f89d22d81" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a3f867ee2b3965cbbcc36a71f89d22d81" kindref="member">TruncateForScriptLikeAttribute</ref>(String&amp;<sp/>decoded_snippet)<sp/>{</highlight></codeline>
<codeline lineno="9683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((position<sp/>=<sp/>decoded_snippet.Find(</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>kNotFound<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(position<sp/>=<sp/>decoded_snippet.Find(IsNotHTMLSpace&lt;UChar&gt;,<sp/>position<sp/>+<sp/>1))<sp/>!=</highlight></codeline>
<codeline lineno="9686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kNotFound<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="9687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(position<sp/>=<sp/>decoded_snippet.Find(</highlight></codeline>
<codeline lineno="9688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aef4646bb2c405388c9a7f84e417570ea" kindref="member">IsTerminatingCharacter</ref>,</highlight></codeline>
<codeline lineno="9689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a79c2b2cbf977223c9e4f0a5faa2c120e" kindref="member">IsHTMLQuote</ref>(decoded_snippet[position])<sp/>?<sp/>position<sp/>+<sp/>1<sp/>:<sp/>position))<sp/>!=</highlight></codeline>
<codeline lineno="9690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kNotFound)<sp/>{</highlight></codeline>
<codeline lineno="9691"><highlight class="normal"><sp/><sp/><sp/><sp/>decoded_snippet.Truncate(position);</highlight></codeline>
<codeline lineno="9692"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9694" refid="_c_w_e-79_8c_1a5e6003bcf725077e64d1ef19d68cd225" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a5e6003bcf725077e64d1ef19d68cd225" kindref="member">TruncateForSemicolonSeparatedScriptLikeAttribute</ref>(</highlight></codeline>
<codeline lineno="9695"><highlight class="normal"><sp/><sp/><sp/><sp/>String&amp;<sp/>decoded_snippet)<sp/>{</highlight></codeline>
<codeline lineno="9696"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a3f867ee2b3965cbbcc36a71f89d22d81" kindref="member">TruncateForScriptLikeAttribute</ref>(decoded_snippet);</highlight></codeline>
<codeline lineno="9697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>decoded_snippet.Find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(position<sp/>!=<sp/>kNotFound)</highlight></codeline>
<codeline lineno="9699"><highlight class="normal"><sp/><sp/><sp/><sp/>decoded_snippet.Truncate(position);</highlight></codeline>
<codeline lineno="9700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9701" refid="_c_w_e-79_8c_1ae5ee816839a5fee5480cb839f78e59ee" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ae5ee816839a5fee5480cb839f78e59ee" kindref="member">TruncateForSrcLikeAttribute</ref>(String&amp;<sp/>decoded_snippet)<sp/>{</highlight></codeline>
<codeline lineno="9702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slash_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>comma_seen<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>colon_seen<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>current_length<sp/>=<sp/>0,<sp/>remaining_length<sp/>=<sp/>decoded_snippet.length();</highlight></codeline>
<codeline lineno="9706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remaining_length;<sp/>++current_length,<sp/>--remaining_length)<sp/>{</highlight></codeline>
<codeline lineno="9707"><highlight class="normal"><sp/><sp/><sp/><sp/>UChar<sp/>current_char<sp/>=<sp/>decoded_snippet[current_length];</highlight></codeline>
<codeline lineno="9708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!colon_seen)<sp/>{</highlight></codeline>
<codeline lineno="9709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remaining_length<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>!<ref refid="_c_w_e-79_8c_1a1f297a3e05b479f524aba74117218893" kindref="member">IsSlash</ref>(decoded_snippet[current_length<sp/>+<sp/>1]))</highlight></codeline>
<codeline lineno="9710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++slash_count;</highlight></codeline>
<codeline lineno="9711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remaining_length<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>!<ref refid="_c_w_e-79_8c_1a1f297a3e05b479f524aba74117218893" kindref="member">IsSlash</ref>(decoded_snippet[current_length<sp/>+<sp/>2]))</highlight></codeline>
<codeline lineno="9712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++slash_count;</highlight></codeline>
<codeline lineno="9713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colon_seen<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal"><sp/>||<sp/>current_char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal"><sp/>||<sp/>current_char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="9716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_c_w_e-79_8c_1a1f297a3e05b479f524aba74117218893" kindref="member">IsSlash</ref>(current_char)<sp/>&amp;&amp;<sp/>(comma_seen<sp/>||<sp/>++slash_count<sp/>&gt;<sp/>2))<sp/>||</highlight></codeline>
<codeline lineno="9717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(current_char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>comma_seen)<sp/>||</highlight></codeline>
<codeline lineno="9718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(current_char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>comma_seen)<sp/>||</highlight></codeline>
<codeline lineno="9719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(current_char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>comma_seen))<sp/>{</highlight></codeline>
<codeline lineno="9720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decoded_snippet.Truncate(current_length);</highlight></codeline>
<codeline lineno="9721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comma_seen<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9725"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9727"><highlight class="normal">XSSAuditor::XSSAuditor()</highlight></codeline>
<codeline lineno="9728"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>is_enabled_(false),</highlight></codeline>
<codeline lineno="9729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xss_protection_(kFilterReflectedXSS),</highlight></codeline>
<codeline lineno="9730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>did_send_valid_xss_protection_header_(false),</highlight></codeline>
<codeline lineno="9731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state_(kUninitialized),</highlight></codeline>
<codeline lineno="9732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>script_tag_found_in_request_(false),</highlight></codeline>
<codeline lineno="9733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>script_tag_nesting_level_(0),</highlight></codeline>
<codeline lineno="9734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>encoding_(UTF8Encoding())<sp/>{</highlight></codeline>
<codeline lineno="9735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9736"><highlight class="normal"><sp/>VaapiImageDecoder::VaapiImageDecoder()</highlight></codeline>
<codeline lineno="9737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:<sp/>va_surface_id_(VA_INVALID_SURFACE),<sp/>va_rt_format_(kInvalidVaRtFormat)<sp/>{}</highlight></codeline>
<codeline lineno="9738"><highlight class="normal"><sp/>scoped_refptr&lt;VASurface&gt;<sp/>VaapiJpegDecoder::Decode(</highlight></codeline>
<codeline lineno="9739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>base::span&lt;const<sp/>uint8_t&gt;<sp/>encoded_image,</highlight></codeline>
<codeline lineno="9740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>VaapiImageDecodeStatus*<sp/>status)<sp/>{</highlight></codeline>
<codeline lineno="9741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vaapi_wrapper_)<sp/>{</highlight></codeline>
<codeline lineno="9742"><highlight class="normal"><sp/><sp/><sp/><sp/>VLOGF(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;VaapiJpegDecoder<sp/>has<sp/>not<sp/>been<sp/>initialized&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9743"><highlight class="normal"><sp/><sp/><sp/><sp/>*status<sp/>=<sp/>VaapiImageDecodeStatus::kInvalidState;</highlight></codeline>
<codeline lineno="9744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9745"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9746"><highlight class="normal"></highlight></codeline>
<codeline lineno="9747"><highlight class="normal"><sp/><sp/>JpegParseResult<sp/>parse_result;</highlight></codeline>
<codeline lineno="9748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ParseJpegPicture(encoded_image.data(),<sp/>encoded_image.size(),</highlight></codeline>
<codeline lineno="9749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;parse_result))<sp/>{</highlight></codeline>
<codeline lineno="9750"><highlight class="normal"><sp/><sp/><sp/><sp/>VLOGF(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ParseJpegPicture<sp/>failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9751"><highlight class="normal"><sp/><sp/><sp/><sp/>*status<sp/>=<sp/>VaapiImageDecodeStatus::kParseJpegFailed;</highlight></codeline>
<codeline lineno="9752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9753"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9754"><highlight class="normal"></highlight></codeline>
<codeline lineno="9755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>picture_va_rt_format<sp/>=</highlight></codeline>
<codeline lineno="9756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a6acf7fa6d75500b639bb3535cd853658" kindref="member">VaSurfaceFormatForJpeg</ref>(parse_result.frame_header);</highlight></codeline>
<codeline lineno="9757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(picture_va_rt_format<sp/>==<sp/>kInvalidVaRtFormat)<sp/>{</highlight></codeline>
<codeline lineno="9758"><highlight class="normal"><sp/><sp/><sp/><sp/>VLOGF(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>subsampling&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9759"><highlight class="normal"><sp/><sp/><sp/><sp/>*status<sp/>=<sp/>VaapiImageDecodeStatus::kUnsupportedSubsampling;</highlight></codeline>
<codeline lineno="9760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9761"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9762"><highlight class="normal"></highlight></codeline>
<codeline lineno="9763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-79_8c_1a7a29e65794456d365eca004a00fe749e" kindref="member">IsVaapiSupportedJpeg</ref>(parse_result))<sp/>{</highlight></codeline>
<codeline lineno="9764"><highlight class="normal"><sp/><sp/><sp/><sp/>VLOGF(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>supplied<sp/>JPEG<sp/>is<sp/>unsupported&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9765"><highlight class="normal"><sp/><sp/><sp/><sp/>*status<sp/>=<sp/>VaapiImageDecodeStatus::kUnsupportedJpeg;</highlight></codeline>
<codeline lineno="9766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9768"><highlight class="normal"></highlight></codeline>
<codeline lineno="9769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gfx::Size<sp/>new_coded_size(</highlight></codeline>
<codeline lineno="9770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::strict_cast&lt;int&gt;(parse_result.frame_header.coded_width),</highlight></codeline>
<codeline lineno="9771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::strict_cast&lt;int&gt;(parse_result.frame_header.coded_height));</highlight></codeline>
<codeline lineno="9772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_coded_size<sp/>!=<sp/>coded_size_<sp/>||<sp/>va_surface_id_<sp/>==<sp/>VA_INVALID_SURFACE<sp/>||</highlight></codeline>
<codeline lineno="9773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>picture_va_rt_format<sp/>!=<sp/>va_rt_format_)<sp/>{</highlight></codeline>
<codeline lineno="9774"><highlight class="normal"><sp/><sp/><sp/><sp/>vaapi_wrapper_-&gt;DestroyContextAndSurfaces(</highlight></codeline>
<codeline lineno="9775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;VASurfaceID&gt;({va_surface_id_}));</highlight></codeline>
<codeline lineno="9776"><highlight class="normal"><sp/><sp/><sp/><sp/>va_surface_id_<sp/>=<sp/>VA_INVALID_SURFACE;</highlight></codeline>
<codeline lineno="9777"><highlight class="normal"><sp/><sp/><sp/><sp/>va_rt_format_<sp/>=<sp/>picture_va_rt_format;</highlight></codeline>
<codeline lineno="9778"><highlight class="normal"></highlight></codeline>
<codeline lineno="9779"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;VASurfaceID&gt;<sp/>va_surfaces;</highlight></codeline>
<codeline lineno="9780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vaapi_wrapper_-&gt;CreateContextAndSurfaces(va_rt_format_,<sp/>new_coded_size,</highlight></codeline>
<codeline lineno="9781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>&amp;va_surfaces))<sp/>{</highlight></codeline>
<codeline lineno="9782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VLOGF(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>the<sp/>context<sp/>or<sp/>the<sp/>surface&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*status<sp/>=<sp/>VaapiImageDecodeStatus::kSurfaceCreationFailed;</highlight></codeline>
<codeline lineno="9784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9786"><highlight class="normal"><sp/><sp/><sp/><sp/>va_surface_id_<sp/>=<sp/>va_surfaces[0];</highlight></codeline>
<codeline lineno="9787"><highlight class="normal"><sp/><sp/><sp/><sp/>coded_size_<sp/>=<sp/>new_coded_size;</highlight></codeline>
<codeline lineno="9788"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9789"><highlight class="normal"></highlight></codeline>
<codeline lineno="9790"><highlight class="normal"><sp/><sp/>VAPictureParameterBufferJPEGBaseline<sp/>pic_param{};</highlight></codeline>
<codeline lineno="9791"><highlight class="normal"><sp/><sp/>FillPictureParameters(parse_result.frame_header,<sp/>&amp;pic_param);</highlight></codeline>
<codeline lineno="9792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vaapi_wrapper_-&gt;SubmitBuffer(VAPictureParameterBufferType,<sp/>&amp;pic_param))<sp/>{</highlight></codeline>
<codeline lineno="9793"><highlight class="normal"><sp/><sp/><sp/><sp/>VLOGF(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>submit<sp/>VAPictureParameterBufferType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9794"><highlight class="normal"><sp/><sp/><sp/><sp/>*status<sp/>=<sp/>VaapiImageDecodeStatus::kSubmitPicParamsFailed;</highlight></codeline>
<codeline lineno="9795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9796"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9797"><highlight class="normal"></highlight></codeline>
<codeline lineno="9798"><highlight class="normal"><sp/><sp/>VAIQMatrixBufferJPEGBaseline<sp/>iq_matrix{};</highlight></codeline>
<codeline lineno="9799"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a0ae5ef3b53011b0fc8a3443a35ec083a" kindref="member">FillIQMatrix</ref>(parse_result.q_table,<sp/>&amp;iq_matrix);</highlight></codeline>
<codeline lineno="9800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vaapi_wrapper_-&gt;SubmitBuffer(VAIQMatrixBufferType,<sp/>&amp;iq_matrix))<sp/>{</highlight></codeline>
<codeline lineno="9801"><highlight class="normal"><sp/><sp/><sp/><sp/>VLOGF(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>submit<sp/>VAIQMatrixBufferType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9802"><highlight class="normal"><sp/><sp/><sp/><sp/>*status<sp/>=<sp/>VaapiImageDecodeStatus::kSubmitIQMatrixFailed;</highlight></codeline>
<codeline lineno="9803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9804"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9805"><highlight class="normal"></highlight></codeline>
<codeline lineno="9806"><highlight class="normal"><sp/><sp/>VAHuffmanTableBufferJPEGBaseline<sp/>huffman_table{};</highlight></codeline>
<codeline lineno="9807"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a80f85a6cb949e4a8573b8dd2cb72fd1c" kindref="member">FillHuffmanTable</ref>(parse_result.dc_table,<sp/>parse_result.ac_table,</highlight></codeline>
<codeline lineno="9808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;huffman_table);</highlight></codeline>
<codeline lineno="9809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vaapi_wrapper_-&gt;SubmitBuffer(VAHuffmanTableBufferType,<sp/>&amp;huffman_table))<sp/>{</highlight></codeline>
<codeline lineno="9810"><highlight class="normal"><sp/><sp/><sp/><sp/>VLOGF(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>submit<sp/>VAHuffmanTableBufferType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9811"><highlight class="normal"><sp/><sp/><sp/><sp/>*status<sp/>=<sp/>VaapiImageDecodeStatus::kSubmitHuffmanFailed;</highlight></codeline>
<codeline lineno="9812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9813"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9814"><highlight class="normal"></highlight></codeline>
<codeline lineno="9815"><highlight class="normal"><sp/><sp/>VASliceParameterBufferJPEGBaseline<sp/>slice_param{};</highlight></codeline>
<codeline lineno="9816"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a2e7336ccf2abb440d43e43a014529326" kindref="member">FillSliceParameters</ref>(parse_result,<sp/>&amp;slice_param);</highlight></codeline>
<codeline lineno="9817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vaapi_wrapper_-&gt;SubmitBuffer(VASliceParameterBufferType,<sp/>&amp;slice_param))<sp/>{</highlight></codeline>
<codeline lineno="9818"><highlight class="normal"><sp/><sp/><sp/><sp/>VLOGF(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>submit<sp/>VASliceParameterBufferType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9819"><highlight class="normal"><sp/><sp/><sp/><sp/>*status<sp/>=<sp/>VaapiImageDecodeStatus::kSubmitSliceParamsFailed;</highlight></codeline>
<codeline lineno="9820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9821"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9822"><highlight class="normal"></highlight></codeline>
<codeline lineno="9823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vaapi_wrapper_-&gt;SubmitBuffer(VASliceDataBufferType,</highlight></codeline>
<codeline lineno="9824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_result.data_size,</highlight></codeline>
<codeline lineno="9825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const_cast&lt;char*&gt;(parse_result.data)))<sp/>{</highlight></codeline>
<codeline lineno="9826"><highlight class="normal"><sp/><sp/><sp/><sp/>VLOGF(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>submit<sp/>VASliceDataBufferType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9827"><highlight class="normal"><sp/><sp/><sp/><sp/>*status<sp/>=<sp/>VaapiImageDecodeStatus::kSubmitSliceDataFailed;</highlight></codeline>
<codeline lineno="9828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9829"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9830"><highlight class="normal"></highlight></codeline>
<codeline lineno="9831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vaapi_wrapper_-&gt;ExecuteAndDestroyPendingBuffers(va_surface_id_))<sp/>{</highlight></codeline>
<codeline lineno="9832"><highlight class="normal"><sp/><sp/><sp/><sp/>VLOGF(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Executing<sp/>the<sp/>decode<sp/>failed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9833"><highlight class="normal"><sp/><sp/><sp/><sp/>*status<sp/>=<sp/>VaapiImageDecodeStatus::kExecuteDecodeFailed;</highlight></codeline>
<codeline lineno="9834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9835"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9836"><highlight class="normal"></highlight></codeline>
<codeline lineno="9837"><highlight class="normal"><sp/><sp/>*status<sp/>=<sp/>VaapiImageDecodeStatus::kSuccess;</highlight></codeline>
<codeline lineno="9838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base::MakeRefCounted&lt;VASurface&gt;(va_surface_id_,<sp/>coded_size_,</highlight></codeline>
<codeline lineno="9839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_rt_format_,</highlight></codeline>
<codeline lineno="9840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::DoNothing()<sp/></highlight><highlight class="comment">/*<sp/>release_cb<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9841"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="9842" refid="_c_w_e-79_8c_1a80f85a6cb949e4a8573b8dd2cb72fd1c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a80f85a6cb949e4a8573b8dd2cb72fd1c" kindref="member">FillHuffmanTable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>JpegHuffmanTable*<sp/>dc_table,</highlight></codeline>
<codeline lineno="9843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>JpegHuffmanTable*<sp/>ac_table,</highlight></codeline>
<codeline lineno="9844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VAHuffmanTableBufferJPEGBaseline*<sp/>huffman_table)<sp/>{</highlight></codeline>
<codeline lineno="9845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_huffman_table<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kJpegMaxHuffmanTableNumBaseline;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="9847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dc_table[i].valid<sp/>||<sp/>ac_table[i].valid)<sp/>{</highlight></codeline>
<codeline lineno="9848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>has_huffman_table<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9851"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_huffman_table)<sp/>{</highlight></codeline>
<codeline lineno="9853"><highlight class="normal"><sp/><sp/><sp/><sp/>dc_table<sp/>=<sp/>kDefaultDcTable;</highlight></codeline>
<codeline lineno="9854"><highlight class="normal"><sp/><sp/><sp/><sp/>ac_table<sp/>=<sp/>kDefaultAcTable;</highlight></codeline>
<codeline lineno="9855"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9856"><highlight class="normal"></highlight></codeline>
<codeline lineno="9857"><highlight class="normal"><sp/><sp/>static_assert(kJpegMaxHuffmanTableNumBaseline<sp/>==</highlight></codeline>
<codeline lineno="9858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::extent&lt;decltype(huffman_table-&gt;load_huffman_table)&gt;(),</highlight></codeline>
<codeline lineno="9859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;max<sp/>number<sp/>of<sp/>huffman<sp/>table<sp/>mismatched&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9860"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(huffman_table-&gt;huffman_table[0].num_dc_codes)<sp/>==</highlight></codeline>
<codeline lineno="9861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dc_table[0].code_length),</highlight></codeline>
<codeline lineno="9862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;size<sp/>of<sp/>huffman<sp/>table<sp/>code<sp/>length<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9863"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(huffman_table-&gt;huffman_table[0].dc_values[0])<sp/>==</highlight></codeline>
<codeline lineno="9864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dc_table[0].code_value[0]),</highlight></codeline>
<codeline lineno="9865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;size<sp/>of<sp/>huffman<sp/>table<sp/>code<sp/>value<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kJpegMaxHuffmanTableNumBaseline;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="9867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dc_table[i].valid<sp/>||<sp/>!ac_table[i].valid)</highlight></codeline>
<codeline lineno="9868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9869"><highlight class="normal"><sp/><sp/><sp/><sp/>huffman_table-&gt;load_huffman_table[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="9870"><highlight class="normal"></highlight></codeline>
<codeline lineno="9871"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(huffman_table-&gt;huffman_table[i].num_dc_codes,</highlight></codeline>
<codeline lineno="9872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dc_table[i].code_length,</highlight></codeline>
<codeline lineno="9873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(huffman_table-&gt;huffman_table[i].num_dc_codes));</highlight></codeline>
<codeline lineno="9874"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(huffman_table-&gt;huffman_table[i].dc_values,<sp/>dc_table[i].code_value,</highlight></codeline>
<codeline lineno="9875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(huffman_table-&gt;huffman_table[i].dc_values));</highlight></codeline>
<codeline lineno="9876"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(huffman_table-&gt;huffman_table[i].num_ac_codes,</highlight></codeline>
<codeline lineno="9877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ac_table[i].code_length,</highlight></codeline>
<codeline lineno="9878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(huffman_table-&gt;huffman_table[i].num_ac_codes));</highlight></codeline>
<codeline lineno="9879"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(huffman_table-&gt;huffman_table[i].ac_values,<sp/>ac_table[i].code_value,</highlight></codeline>
<codeline lineno="9880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(huffman_table-&gt;huffman_table[i].ac_values));</highlight></codeline>
<codeline lineno="9881"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9883" refid="_c_w_e-79_8c_1a0ae5ef3b53011b0fc8a3443a35ec083a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a0ae5ef3b53011b0fc8a3443a35ec083a" kindref="member">FillIQMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>JpegQuantizationTable*<sp/>q_table,</highlight></codeline>
<codeline lineno="9884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VAIQMatrixBufferJPEGBaseline*<sp/>iq_matrix)<sp/>{</highlight></codeline>
<codeline lineno="9885"><highlight class="normal"><sp/><sp/>static_assert(kJpegMaxQuantizationTableNum<sp/>==</highlight></codeline>
<codeline lineno="9886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::extent&lt;decltype(iq_matrix-&gt;load_quantiser_table)&gt;(),</highlight></codeline>
<codeline lineno="9887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;max<sp/>number<sp/>of<sp/>quantization<sp/>table<sp/>mismatched&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9888"><highlight class="normal"><sp/><sp/>static_assert(</highlight></codeline>
<codeline lineno="9889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(iq_matrix-&gt;quantiser_table[0])<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(q_table[0].value),</highlight></codeline>
<codeline lineno="9890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;number<sp/>of<sp/>quantization<sp/>entries<sp/>mismatched&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kJpegMaxQuantizationTableNum;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="9892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!q_table[i].valid)</highlight></codeline>
<codeline lineno="9893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9894"><highlight class="normal"><sp/><sp/><sp/><sp/>iq_matrix-&gt;load_quantiser_table[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="9895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="_c_w_e-22_8c_1ac325ee2e130c33214318b5dea0073d47" kindref="member">base::size</ref>(q_table[i].<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>);<sp/>j++)</highlight></codeline>
<codeline lineno="9896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iq_matrix-&gt;quantiser_table[i][j]<sp/>=<sp/>q_table[i].value[j];</highlight></codeline>
<codeline lineno="9897"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9899" refid="_c_w_e-79_8c_1a2e7336ccf2abb440d43e43a014529326" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a2e7336ccf2abb440d43e43a014529326" kindref="member">FillSliceParameters</ref>(</highlight></codeline>
<codeline lineno="9900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>JpegParseResult&amp;<sp/>parse_result,</highlight></codeline>
<codeline lineno="9901"><highlight class="normal"><sp/><sp/><sp/><sp/>VASliceParameterBufferJPEGBaseline*<sp/>slice_param)<sp/>{</highlight></codeline>
<codeline lineno="9902"><highlight class="normal"><sp/><sp/>slice_param-&gt;slice_data_size<sp/>=<sp/>parse_result.data_size;</highlight></codeline>
<codeline lineno="9903"><highlight class="normal"><sp/><sp/>slice_param-&gt;slice_data_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9904"><highlight class="normal"><sp/><sp/>slice_param-&gt;slice_data_flag<sp/>=<sp/>VA_SLICE_DATA_FLAG_ALL;</highlight></codeline>
<codeline lineno="9905"><highlight class="normal"><sp/><sp/>slice_param-&gt;slice_horizontal_position<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9906"><highlight class="normal"><sp/><sp/>slice_param-&gt;slice_vertical_position<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9907"><highlight class="normal"><sp/><sp/>slice_param-&gt;num_components<sp/>=<sp/>parse_result.scan.num_components;</highlight></codeline>
<codeline lineno="9908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>slice_param-&gt;num_components;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="9909"><highlight class="normal"><sp/><sp/><sp/><sp/>slice_param-&gt;components[i].component_selector<sp/>=</highlight></codeline>
<codeline lineno="9910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_result.scan.components[i].component_selector;</highlight></codeline>
<codeline lineno="9911"><highlight class="normal"><sp/><sp/><sp/><sp/>slice_param-&gt;components[i].dc_table_selector<sp/>=</highlight></codeline>
<codeline lineno="9912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_result.scan.components[i].dc_selector;</highlight></codeline>
<codeline lineno="9913"><highlight class="normal"><sp/><sp/><sp/><sp/>slice_param-&gt;components[i].ac_table_selector<sp/>=</highlight></codeline>
<codeline lineno="9914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_result.scan.components[i].ac_selector;</highlight></codeline>
<codeline lineno="9915"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9916"><highlight class="normal"><sp/><sp/>slice_param-&gt;restart_interval<sp/>=<sp/>parse_result.restart_interval;</highlight></codeline>
<codeline lineno="9917"><highlight class="normal"></highlight></codeline>
<codeline lineno="9918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_h_factor<sp/>=</highlight></codeline>
<codeline lineno="9919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parse_result.frame_header.components[0].horizontal_sampling_factor;</highlight></codeline>
<codeline lineno="9920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_v_factor<sp/>=</highlight></codeline>
<codeline lineno="9921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parse_result.frame_header.components[0].vertical_sampling_factor;</highlight></codeline>
<codeline lineno="9922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mcu_cols<sp/>=<sp/>parse_result.frame_header.coded_width<sp/>/<sp/>(max_h_factor<sp/>*<sp/>8);</highlight></codeline>
<codeline lineno="9923"><highlight class="normal"><sp/><sp/>DCHECK_GT(mcu_cols,<sp/>0);</highlight></codeline>
<codeline lineno="9924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mcu_rows<sp/>=<sp/>parse_result.frame_header.coded_height<sp/>/<sp/>(max_v_factor<sp/>*<sp/>8);</highlight></codeline>
<codeline lineno="9925"><highlight class="normal"><sp/><sp/>DCHECK_GT(mcu_rows,<sp/>0);</highlight></codeline>
<codeline lineno="9926"><highlight class="normal"><sp/><sp/>slice_param-&gt;num_mcus<sp/>=<sp/>mcu_rows<sp/>*<sp/>mcu_cols;</highlight></codeline>
<codeline lineno="9927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9928"><highlight class="normal"><sp/>std::unique_ptr&lt;ScopedVAImage&gt;<sp/>VaapiJpegDecoder::GetImage(</highlight></codeline>
<codeline lineno="9929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>preferred_image_fourcc,</highlight></codeline>
<codeline lineno="9930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>VaapiImageDecodeStatus*<sp/>status)<sp/>{</highlight></codeline>
<codeline lineno="9931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(va_surface_id_<sp/>==<sp/>VA_INVALID_ID)<sp/>{</highlight></codeline>
<codeline lineno="9932"><highlight class="normal"><sp/><sp/><sp/><sp/>VLOGF(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>decoded<sp/>JPEG<sp/>available&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9933"><highlight class="normal"><sp/><sp/><sp/><sp/>*status<sp/>=<sp/>VaapiImageDecodeStatus::kInvalidState;</highlight></codeline>
<codeline lineno="9934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9935"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9936"><highlight class="normal"></highlight></codeline>
<codeline lineno="9937"><highlight class="normal"><sp/><sp/>uint32_t<sp/>image_fourcc;</highlight></codeline>
<codeline lineno="9938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!VaapiWrapper::GetJpegDecodeSuitableImageFourCC(</highlight></codeline>
<codeline lineno="9939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_rt_format_,<sp/>preferred_image_fourcc,<sp/>&amp;image_fourcc))<sp/>{</highlight></codeline>
<codeline lineno="9940"><highlight class="normal"><sp/><sp/><sp/><sp/>VLOGF(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>determine<sp/>the<sp/>output<sp/>FOURCC&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9941"><highlight class="normal"><sp/><sp/><sp/><sp/>*status<sp/>=<sp/>VaapiImageDecodeStatus::kCannotGetImage;</highlight></codeline>
<codeline lineno="9942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9943"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9944"><highlight class="normal"><sp/><sp/>VAImageFormat<sp/>image_format{.fourcc<sp/>=<sp/>image_fourcc};</highlight></codeline>
<codeline lineno="9945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>scoped_image<sp/>=</highlight></codeline>
<codeline lineno="9946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vaapi_wrapper_-&gt;CreateVaImage(va_surface_id_,<sp/>&amp;image_format,<sp/>coded_size_);</highlight></codeline>
<codeline lineno="9947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scoped_image)<sp/>{</highlight></codeline>
<codeline lineno="9948"><highlight class="normal"><sp/><sp/><sp/><sp/>VLOGF(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>get<sp/>VAImage,<sp/>FOURCC<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>FourccToString(image_format.fourcc);</highlight></codeline>
<codeline lineno="9950"><highlight class="normal"><sp/><sp/><sp/><sp/>*status<sp/>=<sp/>VaapiImageDecodeStatus::kCannotGetImage;</highlight></codeline>
<codeline lineno="9951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9952"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9953"><highlight class="normal"></highlight></codeline>
<codeline lineno="9954"><highlight class="normal"><sp/><sp/>*status<sp/>=<sp/>VaapiImageDecodeStatus::kSuccess;</highlight></codeline>
<codeline lineno="9955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scoped_image;</highlight></codeline>
<codeline lineno="9956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9957" refid="_c_w_e-79_8c_1a7a29e65794456d365eca004a00fe749e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a7a29e65794456d365eca004a00fe749e" kindref="member">IsVaapiSupportedJpeg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>JpegParseResult&amp;<sp/>jpeg)<sp/>{</highlight></codeline>
<codeline lineno="9958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!VaapiWrapper::IsJpegDecodingSupportedForInternalFormat(</highlight></codeline>
<codeline lineno="9959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a6acf7fa6d75500b639bb3535cd853658" kindref="member">VaSurfaceFormatForJpeg</ref>(jpeg.frame_header)))<sp/>{</highlight></codeline>
<codeline lineno="9960"><highlight class="normal"><sp/><sp/><sp/><sp/>DLOG(ERROR)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>JPEG&apos;s<sp/>subsampling<sp/>format<sp/>is<sp/>unsupported&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9962"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9963"><highlight class="normal"></highlight></codeline>
<codeline lineno="9964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jpeg.frame_header.visible_width<sp/>==<sp/>0u)<sp/>{</highlight></codeline>
<codeline lineno="9965"><highlight class="normal"><sp/><sp/><sp/><sp/>DLOG(ERROR)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Visible<sp/>width<sp/>can&apos;t<sp/>be<sp/>zero&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9967"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jpeg.frame_header.visible_height<sp/>==<sp/>0u)<sp/>{</highlight></codeline>
<codeline lineno="9969"><highlight class="normal"><sp/><sp/><sp/><sp/>DLOG(ERROR)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Visible<sp/>height<sp/>can&apos;t<sp/>be<sp/>zero&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9971"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9972"><highlight class="normal"></highlight></codeline>
<codeline lineno="9973"><highlight class="normal"><sp/><sp/>gfx::Size<sp/>min_jpeg_resolution;</highlight></codeline>
<codeline lineno="9974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!VaapiWrapper::GetJpegDecodeMinResolution(&amp;min_jpeg_resolution))<sp/>{</highlight></codeline>
<codeline lineno="9975"><highlight class="normal"><sp/><sp/><sp/><sp/>DLOG(ERROR)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>the<sp/>minimum<sp/>resolution&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9977"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9978"><highlight class="normal"><sp/><sp/>gfx::Size<sp/>max_jpeg_resolution;</highlight></codeline>
<codeline lineno="9979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!VaapiWrapper::GetJpegDecodeMaxResolution(&amp;max_jpeg_resolution))<sp/>{</highlight></codeline>
<codeline lineno="9980"><highlight class="normal"><sp/><sp/><sp/><sp/>DLOG(ERROR)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>the<sp/>maximum<sp/>resolution&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9982"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>actual_jpeg_coded_width<sp/>=</highlight></codeline>
<codeline lineno="9984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::strict_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(jpeg.frame_header.coded_width);</highlight></codeline>
<codeline lineno="9985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>actual_jpeg_coded_height<sp/>=</highlight></codeline>
<codeline lineno="9986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::strict_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(jpeg.frame_header.coded_height);</highlight></codeline>
<codeline lineno="9987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_jpeg_coded_width<sp/>&lt;<sp/>min_jpeg_resolution.width()<sp/>||</highlight></codeline>
<codeline lineno="9988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_jpeg_coded_height<sp/>&lt;<sp/>min_jpeg_resolution.height()<sp/>||</highlight></codeline>
<codeline lineno="9989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_jpeg_coded_width<sp/>&gt;<sp/>max_jpeg_resolution.width()<sp/>||</highlight></codeline>
<codeline lineno="9990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>actual_jpeg_coded_height<sp/>&gt;<sp/>max_jpeg_resolution.height())<sp/>{</highlight></codeline>
<codeline lineno="9991"><highlight class="normal"><sp/><sp/><sp/><sp/>DLOG(ERROR)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;VAAPI<sp/>doesn&apos;t<sp/>support<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>actual_jpeg_coded_width</highlight></codeline>
<codeline lineno="9992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>actual_jpeg_coded_height<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>not<sp/>in<sp/>range<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>min_jpeg_resolution.ToString()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>max_jpeg_resolution.ToString();</highlight></codeline>
<codeline lineno="9995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9996"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9997"><highlight class="normal"></highlight></codeline>
<codeline lineno="9998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10000" refid="_c_w_e-79_8c_1a6acf7fa6d75500b639bb3535cd853658" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a6acf7fa6d75500b639bb3535cd853658" kindref="member">VaSurfaceFormatForJpeg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>JpegFrameHeader&amp;<sp/>frame_header)<sp/>{</highlight></codeline>
<codeline lineno="10001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame_header.num_components<sp/>!=<sp/>3)</highlight></codeline>
<codeline lineno="10002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kInvalidVaRtFormat;</highlight></codeline>
<codeline lineno="10003"><highlight class="normal"></highlight></codeline>
<codeline lineno="10004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>y_h<sp/>=<sp/>frame_header.components[0].horizontal_sampling_factor;</highlight></codeline>
<codeline lineno="10005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>y_v<sp/>=<sp/>frame_header.components[0].vertical_sampling_factor;</highlight></codeline>
<codeline lineno="10006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>u_h<sp/>=<sp/>frame_header.components[1].horizontal_sampling_factor;</highlight></codeline>
<codeline lineno="10007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>u_v<sp/>=<sp/>frame_header.components[1].vertical_sampling_factor;</highlight></codeline>
<codeline lineno="10008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>v_h<sp/>=<sp/>frame_header.components[2].horizontal_sampling_factor;</highlight></codeline>
<codeline lineno="10009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>v_v<sp/>=<sp/>frame_header.components[2].vertical_sampling_factor;</highlight></codeline>
<codeline lineno="10010"><highlight class="normal"></highlight></codeline>
<codeline lineno="10011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u_h<sp/>!=<sp/>1<sp/>||<sp/>u_v<sp/>!=<sp/>1<sp/>||<sp/>v_h<sp/>!=<sp/>1<sp/>||<sp/>v_v<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="10012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kInvalidVaRtFormat;</highlight></codeline>
<codeline lineno="10013"><highlight class="normal"></highlight></codeline>
<codeline lineno="10014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y_h<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>y_v<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="10015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VA_RT_FORMAT_YUV420;</highlight></codeline>
<codeline lineno="10016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y_h<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>y_v<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="10017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VA_RT_FORMAT_YUV422;</highlight></codeline>
<codeline lineno="10018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y_h<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>y_v<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="10019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VA_RT_FORMAT_YUV444;</highlight></codeline>
<codeline lineno="10020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kInvalidVaRtFormat;</highlight></codeline>
<codeline lineno="10021"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10022" refid="_c_w_e-79_8c_1a41fa4155031192c02776fda7722909d1" refkind="member"><highlight class="normal">base::string16<sp/><ref refid="_c_w_e-79_8c_1a41fa4155031192c02776fda7722909d1" kindref="member">Elide</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL&amp;<sp/>url,</highlight></codeline>
<codeline lineno="10023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gfx::FontList&amp;<sp/>font_list,</highlight></codeline>
<codeline lineno="10024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>available_width,</highlight></codeline>
<codeline lineno="10025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElisionMethod<sp/>method)<sp/>{</highlight></codeline>
<codeline lineno="10026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(method)<sp/>{</highlight></codeline>
<codeline lineno="10027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kMethodSimple:<sp/>{</highlight></codeline>
<codeline lineno="10028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>url::Parsed<sp/>parsed;</highlight></codeline>
<codeline lineno="10029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>url_formatter::ElideUrlSimple(url,<sp/>font_list,<sp/>available_width,</highlight></codeline>
<codeline lineno="10030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;parsed);</highlight></codeline>
<codeline lineno="10031"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10032"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(OS_ANDROID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kMethodOriginal:</highlight></codeline>
<codeline lineno="10034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>url_formatter::ElideUrl(url,<sp/>font_list,<sp/>available_width);</highlight></codeline>
<codeline lineno="10035"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NOTREACHED();</highlight></codeline>
<codeline lineno="10038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base::string16();</highlight></codeline>
<codeline lineno="10039"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10041" refid="_c_w_e-79_8c_1a3bb122fb54bb56fefde1bd23c367ac47" refkind="member"><highlight class="normal">url::Component*<sp/><ref refid="_c_w_e-79_8c_1a3bb122fb54bb56fefde1bd23c367ac47" kindref="member">GetComponent</ref>(url::Parsed*<sp/>parsed,</highlight></codeline>
<codeline lineno="10042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>url::Parsed::ComponentType<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="10043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="10044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>url::Parsed::SCHEME:</highlight></codeline>
<codeline lineno="10045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;parsed-&gt;scheme;</highlight></codeline>
<codeline lineno="10046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>url::Parsed::USERNAME:</highlight></codeline>
<codeline lineno="10047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;parsed-&gt;username;</highlight></codeline>
<codeline lineno="10048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>url::Parsed::PASSWORD:</highlight></codeline>
<codeline lineno="10049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;parsed-&gt;password;</highlight></codeline>
<codeline lineno="10050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>url::Parsed::HOST:</highlight></codeline>
<codeline lineno="10051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;parsed-&gt;host;</highlight></codeline>
<codeline lineno="10052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>url::Parsed::PORT:</highlight></codeline>
<codeline lineno="10053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;parsed-&gt;port;</highlight></codeline>
<codeline lineno="10054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>url::Parsed::PATH:</highlight></codeline>
<codeline lineno="10055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;parsed-&gt;path;</highlight></codeline>
<codeline lineno="10056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>url::Parsed::QUERY:</highlight></codeline>
<codeline lineno="10057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;parsed-&gt;query;</highlight></codeline>
<codeline lineno="10058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>url::Parsed::REF:</highlight></codeline>
<codeline lineno="10059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;parsed-&gt;ref;</highlight></codeline>
<codeline lineno="10060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NOTREACHED();</highlight></codeline>
<codeline lineno="10062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10063"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10065" refid="_c_w_e-79_8c_1a75ade601ba99aa3824a5c4b340422ef1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a75ade601ba99aa3824a5c4b340422ef1" kindref="member">RunElisionParsingTest</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ParsingTestcase&gt;&amp;<sp/>testcases)<sp/>{</highlight></codeline>
<codeline lineno="10066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gfx::FontList<sp/>font_list;</highlight></codeline>
<codeline lineno="10067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>testcase<sp/>:<sp/>testcases)<sp/>{</highlight></codeline>
<codeline lineno="10068"><highlight class="normal"><sp/><sp/><sp/><sp/>SCOPED_TRACE(testcase.input<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>testcase.output);</highlight></codeline>
<codeline lineno="10069"><highlight class="normal"></highlight></codeline>
<codeline lineno="10070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL<sp/>url(testcase.input);</highlight></codeline>
<codeline lineno="10071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>available_width<sp/>=</highlight></codeline>
<codeline lineno="10072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfx::GetStringWidthF(base::UTF8ToUTF16(testcase.output),<sp/>font_list);</highlight></codeline>
<codeline lineno="10073"><highlight class="normal"></highlight></codeline>
<codeline lineno="10074"><highlight class="normal"><sp/><sp/><sp/><sp/>url::Parsed<sp/>parsed;</highlight></codeline>
<codeline lineno="10075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>elided<sp/>=</highlight></codeline>
<codeline lineno="10076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>url_formatter::ElideUrlSimple(url,<sp/>font_list,<sp/>available_width,<sp/>&amp;parsed);</highlight></codeline>
<codeline lineno="10077"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(base::UTF8ToUTF16(testcase.output),<sp/>elided);</highlight></codeline>
<codeline lineno="10078"><highlight class="normal"></highlight></codeline>
<codeline lineno="10079"><highlight class="normal"><sp/><sp/><sp/><sp/>url::Parsed<sp/>expected;</highlight></codeline>
<codeline lineno="10080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>expectation<sp/>:<sp/>testcase.components)<sp/>{</highlight></codeline>
<codeline lineno="10081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>url::Component*<sp/>component<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a3bb122fb54bb56fefde1bd23c367ac47" kindref="member">GetComponent</ref>(&amp;expected,<sp/>expectation.type);</highlight></codeline>
<codeline lineno="10082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>component-&gt;begin<sp/>=<sp/>expectation.begin;</highlight></codeline>
<codeline lineno="10083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>component-&gt;len<sp/>=<sp/>expectation.len;</highlight></codeline>
<codeline lineno="10084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10085"><highlight class="normal"></highlight></codeline>
<codeline lineno="10086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;url::Parsed::ComponentType&gt;<sp/>kComponents<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="10087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>url::Parsed::SCHEME,<sp/>url::Parsed::USERNAME,<sp/>url::Parsed::PASSWORD,</highlight></codeline>
<codeline lineno="10088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>url::Parsed::HOST,<sp/><sp/><sp/>url::Parsed::PORT,<sp/><sp/><sp/><sp/><sp/>url::Parsed::PATH,</highlight></codeline>
<codeline lineno="10089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>url::Parsed::QUERY,<sp/><sp/>url::Parsed::REF,</highlight></codeline>
<codeline lineno="10090"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="10091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>type<sp/>:<sp/>kComponents)<sp/>{</highlight></codeline>
<codeline lineno="10092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(<ref refid="_c_w_e-79_8c_1a3bb122fb54bb56fefde1bd23c367ac47" kindref="member">GetComponent</ref>(&amp;expected,<sp/>type)-&gt;begin,</highlight></codeline>
<codeline lineno="10093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a3bb122fb54bb56fefde1bd23c367ac47" kindref="member">GetComponent</ref>(&amp;parsed,<sp/>type)-&gt;begin)</highlight></codeline>
<codeline lineno="10094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>component<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>type;</highlight></codeline>
<codeline lineno="10095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(<ref refid="_c_w_e-79_8c_1a3bb122fb54bb56fefde1bd23c367ac47" kindref="member">GetComponent</ref>(&amp;expected,<sp/>type)-&gt;len,</highlight></codeline>
<codeline lineno="10096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a3bb122fb54bb56fefde1bd23c367ac47" kindref="member">GetComponent</ref>(&amp;parsed,<sp/>type)-&gt;len)</highlight></codeline>
<codeline lineno="10097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>component<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>type;</highlight></codeline>
<codeline lineno="10098"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10099"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10101" refid="_c_w_e-79_8c_1a16bd00ef2b69082358c148b1a56e9ed3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a16bd00ef2b69082358c148b1a56e9ed3" kindref="member">RunElisionTest</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Testcase&gt;&amp;<sp/>testcases)<sp/>{</highlight></codeline>
<codeline lineno="10102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gfx::FontList<sp/>font_list;</highlight></codeline>
<codeline lineno="10103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>testcase<sp/>:<sp/>testcases)<sp/>{</highlight></codeline>
<codeline lineno="10104"><highlight class="normal"><sp/><sp/><sp/><sp/>SCOPED_TRACE(</highlight><highlight class="stringliteral">&quot;Eliding<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>testcase.input);</highlight></codeline>
<codeline lineno="10105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL<sp/>url(testcase.input);</highlight></codeline>
<codeline lineno="10106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>available_width<sp/>=</highlight></codeline>
<codeline lineno="10107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfx::GetStringWidthF(base::UTF8ToUTF16(testcase.output),<sp/>font_list);</highlight></codeline>
<codeline lineno="10108"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(base::UTF8ToUTF16(testcase.output),</highlight></codeline>
<codeline lineno="10109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>url_formatter::ElideUrl(url,<sp/>font_list,<sp/>available_width));</highlight></codeline>
<codeline lineno="10110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10112" refid="_c_w_e-79_8c_1ad92e909b840c1cf205e61291c453e412" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ad92e909b840c1cf205e61291c453e412" kindref="member">RunProgressiveElisionTest</ref>(</highlight></codeline>
<codeline lineno="10113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ProgressiveTestcase&gt;&amp;<sp/>testcases,</highlight></codeline>
<codeline lineno="10114"><highlight class="normal"><sp/><sp/><sp/><sp/>ElisionMethod<sp/>method)<sp/>{</highlight></codeline>
<codeline lineno="10115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gfx::FontList<sp/>font_list;</highlight></codeline>
<codeline lineno="10116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>testcase<sp/>:<sp/>testcases)<sp/>{</highlight></codeline>
<codeline lineno="10117"><highlight class="normal"><sp/><sp/><sp/><sp/>SCOPED_TRACE(</highlight><highlight class="stringliteral">&quot;Eliding<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>testcase.input);</highlight></codeline>
<codeline lineno="10118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL<sp/>url(testcase.input);</highlight></codeline>
<codeline lineno="10119"><highlight class="normal"></highlight></codeline>
<codeline lineno="10120"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_FALSE(testcase.output.empty());</highlight></codeline>
<codeline lineno="10121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width<sp/>=<sp/><ref refid="_c_w_e-787_8c_1affe776513b24d84b39af8ab0930fef7f" kindref="member">std::max</ref>(</highlight></codeline>
<codeline lineno="10122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfx::GetStringWidthF(base::UTF8ToUTF16(testcase.input),<sp/>font_list),</highlight></codeline>
<codeline lineno="10123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfx::GetStringWidthF(base::UTF8ToUTF16(testcase.output.front()),</highlight></codeline>
<codeline lineno="10124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font_list));</highlight></codeline>
<codeline lineno="10125"><highlight class="normal"></highlight></codeline>
<codeline lineno="10126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mismatches<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kMaxConsecutiveMismatches<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="10128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>testcase.output.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="10129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>expected<sp/>=<sp/>testcase.output[i];</highlight></codeline>
<codeline lineno="10130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::string16<sp/>expected_utf16<sp/>=<sp/>base::UTF8ToUTF16(expected);</highlight></codeline>
<codeline lineno="10131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::string16<sp/>elided<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a41fa4155031192c02776fda7722909d1" kindref="member">Elide</ref>(url,<sp/>font_list,<sp/>width,<sp/>method);</highlight></codeline>
<codeline lineno="10132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expected_utf16<sp/>!=<sp/>elided)<sp/>{</highlight></codeline>
<codeline lineno="10133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>testcase.output.size()<sp/>-<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mismatches<sp/>&lt;<sp/>kMaxConsecutiveMismatches)<sp/>{</highlight></codeline>
<codeline lineno="10135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mismatches++;</highlight></codeline>
<codeline lineno="10136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(expected_utf16,<sp/>elided);</highlight></codeline>
<codeline lineno="10139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mismatches<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>new_width<sp/>=<sp/>gfx::GetStringWidthF(elided,<sp/>font_list);</highlight></codeline>
<codeline lineno="10143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_LE(new_width,<sp/>std::ceil(width))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>at<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>elided;</highlight></codeline>
<codeline lineno="10144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>=<sp/>new_width<sp/>-<sp/>1.0f;</highlight></codeline>
<codeline lineno="10145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10148" refid="_c_w_e-79_8c_1a603d4166eb9b7128b21a44550f4a72ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a603d4166eb9b7128b21a44550f4a72ed" kindref="member">IsQueryMatch</ref>(</highlight></codeline>
<codeline lineno="10149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>url_query,</highlight></codeline>
<codeline lineno="10150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>,</highlight></codeline>
<codeline lineno="10151"><highlight class="normal"><sp/><sp/><sp/><sp/>URLQueryElementMatcherCondition::QueryElementType<sp/>query_element_type,</highlight></codeline>
<codeline lineno="10152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>,</highlight></codeline>
<codeline lineno="10153"><highlight class="normal"><sp/><sp/><sp/><sp/>URLQueryElementMatcherCondition::QueryValueMatchType<sp/>query_value_match_type,</highlight></codeline>
<codeline lineno="10154"><highlight class="normal"><sp/><sp/><sp/><sp/>URLQueryElementMatcherCondition::Type<sp/>match_type)<sp/>{</highlight></codeline>
<codeline lineno="10155"><highlight class="normal"><sp/><sp/>URLMatcherConditionFactory<sp/>factory;</highlight></codeline>
<codeline lineno="10156"><highlight class="normal"></highlight></codeline>
<codeline lineno="10157"><highlight class="normal"><sp/><sp/>URLMatcherCondition<sp/>m1<sp/>=<sp/>factory.CreateHostSuffixCondition(</highlight><highlight class="stringliteral">&quot;example.com&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10158"><highlight class="normal"><sp/><sp/>URLMatcherCondition<sp/>m2<sp/>=<sp/>factory.CreatePathContainsCondition(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10159"><highlight class="normal"><sp/><sp/>URLMatcherConditionSet::Conditions<sp/>conditions;</highlight></codeline>
<codeline lineno="10160"><highlight class="normal"><sp/><sp/>conditions.insert(m1);</highlight></codeline>
<codeline lineno="10161"><highlight class="normal"><sp/><sp/>conditions.insert(m2);</highlight></codeline>
<codeline lineno="10162"><highlight class="normal"></highlight></codeline>
<codeline lineno="10163"><highlight class="normal"><sp/><sp/>URLQueryElementMatcherCondition<sp/>q1(<ref refid="_c_w_e-20_8c_1ab10d0fb19c6ada0506b7a91756d4e67f" kindref="member">key</ref>,</highlight></codeline>
<codeline lineno="10164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>,</highlight></codeline>
<codeline lineno="10165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_value_match_type,</highlight></codeline>
<codeline lineno="10166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_element_type,</highlight></codeline>
<codeline lineno="10167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_type,</highlight></codeline>
<codeline lineno="10168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;factory);</highlight></codeline>
<codeline lineno="10169"><highlight class="normal"><sp/><sp/>URLMatcherConditionSet::QueryConditions<sp/>query_conditions;</highlight></codeline>
<codeline lineno="10170"><highlight class="normal"><sp/><sp/>query_conditions.insert(q1);</highlight></codeline>
<codeline lineno="10171"><highlight class="normal"></highlight></codeline>
<codeline lineno="10172"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;URLMatcherSchemeFilter&gt;<sp/>scheme_filter;</highlight></codeline>
<codeline lineno="10173"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;URLMatcherPortFilter&gt;<sp/>port_filter;</highlight></codeline>
<codeline lineno="10174"><highlight class="normal"></highlight></codeline>
<codeline lineno="10175"><highlight class="normal"><sp/><sp/>scoped_refptr&lt;URLMatcherConditionSet&gt;<sp/>condition_set(</highlight></codeline>
<codeline lineno="10176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>URLMatcherConditionSet(1,<sp/>conditions,<sp/>query_conditions,</highlight></codeline>
<codeline lineno="10177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(scheme_filter),</highlight></codeline>
<codeline lineno="10178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(port_filter)));</highlight></codeline>
<codeline lineno="10179"><highlight class="normal"></highlight></codeline>
<codeline lineno="10180"><highlight class="normal"><sp/><sp/>GURL<sp/>url(</highlight><highlight class="stringliteral">&quot;http://www.example.com/foo?&quot;</highlight><highlight class="normal"><sp/>+<sp/>url_query);</highlight></codeline>
<codeline lineno="10181"><highlight class="normal"></highlight></codeline>
<codeline lineno="10182"><highlight class="normal"><sp/><sp/>URLMatcher<sp/>matcher;</highlight></codeline>
<codeline lineno="10183"><highlight class="normal"><sp/><sp/>URLMatcherConditionSet::Vector<sp/>vector;</highlight></codeline>
<codeline lineno="10184"><highlight class="normal"><sp/><sp/>vector.push_back(condition_set);</highlight></codeline>
<codeline lineno="10185"><highlight class="normal"><sp/><sp/>matcher.AddConditionSets(vector);</highlight></codeline>
<codeline lineno="10186"><highlight class="normal"></highlight></codeline>
<codeline lineno="10187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matcher.MatchURL(url).size()<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="10188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10189" refid="_c_w_e-79_8c_1af37cc3fd9d0a33511cdd3ffe8bba2330" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1af37cc3fd9d0a33511cdd3ffe8bba2330" kindref="member">Matches</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>URLMatcherCondition&amp;<sp/>condition,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>text)<sp/>{</highlight></codeline>
<codeline lineno="10190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>text.find(condition.string_pattern()-&gt;pattern())<sp/>!=</highlight></codeline>
<codeline lineno="10191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string::npos;</highlight></codeline>
<codeline lineno="10192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10193" refid="_c_w_e-79_8c_1abdc4d735a5454d59affc57b3a5eda9f4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1abdc4d735a5454d59affc57b3a5eda9f4" kindref="member">CanonicalSchemeChar</ref>(base::char16<sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="10194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&gt;=<sp/>0x80)</highlight></codeline>
<codeline lineno="10195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Non-ASCII<sp/>is<sp/>not<sp/>supported<sp/>by<sp/>schemes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kSchemeCanonical[ch];</highlight></codeline>
<codeline lineno="10197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10198" refid="_c_w_e-79_8c_1ae23b41b05df50f14ae29562c05e32c0d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ae23b41b05df50f14ae29562c05e32c0d" kindref="member">CanonicalizePort</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>spec,</highlight></codeline>
<codeline lineno="10199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Component&amp;<sp/>port,</highlight></codeline>
<codeline lineno="10200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>default_port_for_scheme,</highlight></codeline>
<codeline lineno="10201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanonOutput*<sp/>output,</highlight></codeline>
<codeline lineno="10202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Component*<sp/>out_port)<sp/>{</highlight></codeline>
<codeline lineno="10203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DoPort&lt;char,<sp/>unsigned<sp/>char&gt;(spec,<sp/>port,</highlight></codeline>
<codeline lineno="10204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_port_for_scheme,</highlight></codeline>
<codeline lineno="10205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output,<sp/>out_port);</highlight></codeline>
<codeline lineno="10206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10207" refid="_c_w_e-79_8c_1a92f80c8e9dd3d7cfeb203cf76e93b14b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ae23b41b05df50f14ae29562c05e32c0d" kindref="member">CanonicalizePort</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::char16*<sp/>spec,</highlight></codeline>
<codeline lineno="10208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Component&amp;<sp/>port,</highlight></codeline>
<codeline lineno="10209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>default_port_for_scheme,</highlight></codeline>
<codeline lineno="10210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanonOutput*<sp/>output,</highlight></codeline>
<codeline lineno="10211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Component*<sp/>out_port)<sp/>{</highlight></codeline>
<codeline lineno="10212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DoPort&lt;base::char16,<sp/>base::char16&gt;(spec,<sp/>port,<sp/>default_port_for_scheme,</highlight></codeline>
<codeline lineno="10213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output,<sp/>out_port);</highlight></codeline>
<codeline lineno="10214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10215" refid="_c_w_e-79_8c_1abac0c31f0ca5268d6857c22889e9fc26" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1abac0c31f0ca5268d6857c22889e9fc26" kindref="member">CanonicalizeRef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>spec,</highlight></codeline>
<codeline lineno="10216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Component&amp;<sp/>ref,</highlight></codeline>
<codeline lineno="10217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanonOutput*<sp/>output,</highlight></codeline>
<codeline lineno="10218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Component*<sp/>out_ref)<sp/>{</highlight></codeline>
<codeline lineno="10219"><highlight class="normal"><sp/><sp/>DoCanonicalizeRef&lt;char,<sp/>unsigned<sp/>char&gt;(spec,<sp/>ref,<sp/>output,<sp/>out_ref);</highlight></codeline>
<codeline lineno="10220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10221" refid="_c_w_e-79_8c_1a9c3926adf45109febf87a0bd7250a66e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1abac0c31f0ca5268d6857c22889e9fc26" kindref="member">CanonicalizeRef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::char16*<sp/>spec,</highlight></codeline>
<codeline lineno="10222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Component&amp;<sp/>ref,</highlight></codeline>
<codeline lineno="10223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanonOutput*<sp/>output,</highlight></codeline>
<codeline lineno="10224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Component*<sp/>out_ref)<sp/>{</highlight></codeline>
<codeline lineno="10225"><highlight class="normal"><sp/><sp/>DoCanonicalizeRef&lt;base::char16,<sp/>base::char16&gt;(spec,<sp/>ref,<sp/>output,<sp/>out_ref);</highlight></codeline>
<codeline lineno="10226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10227" refid="_c_w_e-79_8c_1a8814f1bc228bc4e62a30060dea5e75dd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a8814f1bc228bc4e62a30060dea5e75dd" kindref="member">CanonicalizeScheme</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>spec,</highlight></codeline>
<codeline lineno="10228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Component&amp;<sp/>scheme,</highlight></codeline>
<codeline lineno="10229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanonOutput*<sp/>output,</highlight></codeline>
<codeline lineno="10230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Component*<sp/>out_scheme)<sp/>{</highlight></codeline>
<codeline lineno="10231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DoScheme&lt;char,<sp/>unsigned<sp/>char&gt;(spec,<sp/>scheme,<sp/>output,<sp/>out_scheme);</highlight></codeline>
<codeline lineno="10232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10233" refid="_c_w_e-79_8c_1a16a83793e27c64a85a91bdbfb4c735c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a8814f1bc228bc4e62a30060dea5e75dd" kindref="member">CanonicalizeScheme</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::char16*<sp/>spec,</highlight></codeline>
<codeline lineno="10234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Component&amp;<sp/>scheme,</highlight></codeline>
<codeline lineno="10235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanonOutput*<sp/>output,</highlight></codeline>
<codeline lineno="10236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Component*<sp/>out_scheme)<sp/>{</highlight></codeline>
<codeline lineno="10237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DoScheme&lt;base::char16,<sp/>base::char16&gt;(spec,<sp/>scheme,<sp/>output,<sp/>out_scheme);</highlight></codeline>
<codeline lineno="10238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10239" refid="_c_w_e-79_8c_1a5e0d6adbc96da7c8e11d8ff19b46ae28" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a5e0d6adbc96da7c8e11d8ff19b46ae28" kindref="member">CanonicalizeUserInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>username_source,</highlight></codeline>
<codeline lineno="10240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Component&amp;<sp/>username,</highlight></codeline>
<codeline lineno="10241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>password_source,</highlight></codeline>
<codeline lineno="10242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Component&amp;<sp/>password,</highlight></codeline>
<codeline lineno="10243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanonOutput*<sp/>output,</highlight></codeline>
<codeline lineno="10244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Component*<sp/>out_username,</highlight></codeline>
<codeline lineno="10245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Component*<sp/>out_password)<sp/>{</highlight></codeline>
<codeline lineno="10246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DoUserInfo&lt;char,<sp/>unsigned<sp/>char&gt;(</highlight></codeline>
<codeline lineno="10247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>username_source,<sp/>username,<sp/>password_source,<sp/>password,</highlight></codeline>
<codeline lineno="10248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output,<sp/>out_username,<sp/>out_password);</highlight></codeline>
<codeline lineno="10249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10250" refid="_c_w_e-79_8c_1a2a32eef508617eb0bee5035d0293ef6d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a5e0d6adbc96da7c8e11d8ff19b46ae28" kindref="member">CanonicalizeUserInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::char16*<sp/>username_source,</highlight></codeline>
<codeline lineno="10251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Component&amp;<sp/>username,</highlight></codeline>
<codeline lineno="10252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::char16*<sp/>password_source,</highlight></codeline>
<codeline lineno="10253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Component&amp;<sp/>password,</highlight></codeline>
<codeline lineno="10254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanonOutput*<sp/>output,</highlight></codeline>
<codeline lineno="10255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Component*<sp/>out_username,</highlight></codeline>
<codeline lineno="10256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Component*<sp/>out_password)<sp/>{</highlight></codeline>
<codeline lineno="10257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DoUserInfo&lt;base::char16,<sp/>base::char16&gt;(</highlight></codeline>
<codeline lineno="10258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>username_source,<sp/>username,<sp/>password_source,<sp/>password,</highlight></codeline>
<codeline lineno="10259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output,<sp/>out_username,<sp/>out_password);</highlight></codeline>
<codeline lineno="10260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10261" refid="_c_w_e-79_8c_1af317974b31b982e06f31b5d0c44026ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1af317974b31b982e06f31b5d0c44026ea" kindref="member">DoPort</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CHAR*<sp/>spec,</highlight></codeline>
<codeline lineno="10262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Component&amp;<sp/>port,</highlight></codeline>
<codeline lineno="10263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>default_port_for_scheme,</highlight></codeline>
<codeline lineno="10264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanonOutput*<sp/>output,</highlight></codeline>
<codeline lineno="10265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Component*<sp/>out_port)<sp/>{</highlight></codeline>
<codeline lineno="10266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port_num<sp/>=<sp/>ParsePort(spec,<sp/>port);</highlight></codeline>
<codeline lineno="10267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port_num<sp/>==<sp/>PORT_UNSPECIFIED<sp/>||<sp/>port_num<sp/>==<sp/>default_port_for_scheme)<sp/>{</highlight></codeline>
<codeline lineno="10268"><highlight class="normal"><sp/><sp/><sp/><sp/>*out_port<sp/>=<sp/>Component();</highlight></codeline>
<codeline lineno="10269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Leave<sp/>port<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10271"><highlight class="normal"></highlight></codeline>
<codeline lineno="10272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port_num<sp/>==<sp/>PORT_INVALID)<sp/>{</highlight></codeline>
<codeline lineno="10273"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;push_back(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10274"><highlight class="normal"><sp/><sp/><sp/><sp/>out_port-&gt;begin<sp/>=<sp/>output-&gt;length();</highlight></codeline>
<codeline lineno="10275"><highlight class="normal"><sp/><sp/><sp/><sp/>AppendInvalidNarrowString(spec,<sp/>port.begin,<sp/>port.end(),<sp/>output);</highlight></codeline>
<codeline lineno="10276"><highlight class="normal"><sp/><sp/><sp/><sp/>out_port-&gt;len<sp/>=<sp/>output-&gt;length()<sp/>-<sp/>out_port-&gt;begin;</highlight></codeline>
<codeline lineno="10277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10279"><highlight class="normal"></highlight></codeline>
<codeline lineno="10280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf_size<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="10281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-416_8c_1aec4b0173bbfe004e02a2bb9ed4e37b81" kindref="member">buf</ref>[buf_size];</highlight></codeline>
<codeline lineno="10282"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a6a31f3f4ff9cd16da4f94dd99d63b8aa" kindref="member">WritePortInt</ref>(<ref refid="_c_w_e-416_8c_1aec4b0173bbfe004e02a2bb9ed4e37b81" kindref="member">buf</ref>,<sp/>buf_size,<sp/>port_num);</highlight></codeline>
<codeline lineno="10283"><highlight class="normal"></highlight></codeline>
<codeline lineno="10284"><highlight class="normal"><sp/><sp/>output-&gt;push_back(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10285"><highlight class="normal"><sp/><sp/>out_port-&gt;begin<sp/>=<sp/>output-&gt;length();</highlight></codeline>
<codeline lineno="10286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>buf_size<sp/>&amp;&amp;<sp/><ref refid="_c_w_e-416_8c_1aec4b0173bbfe004e02a2bb9ed4e37b81" kindref="member">buf</ref>[i];<sp/>i++)</highlight></codeline>
<codeline lineno="10287"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;push_back(<ref refid="_c_w_e-416_8c_1aec4b0173bbfe004e02a2bb9ed4e37b81" kindref="member">buf</ref>[i]);</highlight></codeline>
<codeline lineno="10288"><highlight class="normal"></highlight></codeline>
<codeline lineno="10289"><highlight class="normal"><sp/><sp/>out_port-&gt;len<sp/>=<sp/>output-&gt;length()<sp/>-<sp/>out_port-&gt;begin;</highlight></codeline>
<codeline lineno="10290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10292" refid="_c_w_e-79_8c_1a4efe10c6d6ee40d8e3d1b884fc7845a8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CHAR*<sp/><ref refid="_c_w_e-79_8c_1a4efe10c6d6ee40d8e3d1b884fc7845a8" kindref="member">DoRemoveURLWhitespace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CHAR*<sp/>input,</highlight></codeline>
<codeline lineno="10293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input_len,</highlight></codeline>
<codeline lineno="10294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanonOutputT&lt;CHAR&gt;*<sp/>buffer,</highlight></codeline>
<codeline lineno="10295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>output_len,</highlight></codeline>
<codeline lineno="10296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>potentially_dangling_markup)<sp/>{</highlight></codeline>
<codeline lineno="10297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>found_whitespace<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>input_len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="10299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-79_8c_1a3b7af3b03c59d1011062768a2b1dc075" kindref="member">IsRemovableURLWhitespace</ref>(input[i]))</highlight></codeline>
<codeline lineno="10300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10301"><highlight class="normal"><sp/><sp/><sp/><sp/>found_whitespace<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10304"><highlight class="normal"></highlight></codeline>
<codeline lineno="10305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found_whitespace)<sp/>{</highlight></codeline>
<codeline lineno="10306"><highlight class="normal"><sp/><sp/><sp/><sp/>*output_len<sp/>=<sp/>input_len;</highlight></codeline>
<codeline lineno="10307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input;</highlight></codeline>
<codeline lineno="10308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10309"><highlight class="normal"></highlight></codeline>
<codeline lineno="10310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_len<sp/>&gt;<sp/>5<sp/>&amp;&amp;<sp/>input[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>input[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>input[2]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input[3]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>input[4]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="10312"><highlight class="normal"><sp/><sp/><sp/><sp/>*output_len<sp/>=<sp/>input_len;</highlight></codeline>
<codeline lineno="10313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input;</highlight></codeline>
<codeline lineno="10314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10315"><highlight class="normal"></highlight></codeline>
<codeline lineno="10316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>input_len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="10317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-79_8c_1a3b7af3b03c59d1011062768a2b1dc075" kindref="member">IsRemovableURLWhitespace</ref>(input[i]))<sp/>{</highlight></codeline>
<codeline lineno="10318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(potentially_dangling_markup<sp/>&amp;&amp;<sp/>input[i]<sp/>==<sp/>0x3C)</highlight></codeline>
<codeline lineno="10319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*potentially_dangling_markup<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer-&gt;push_back(input[i]);</highlight></codeline>
<codeline lineno="10321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10323"><highlight class="normal"><sp/><sp/>*output_len<sp/>=<sp/>buffer-&gt;length();</highlight></codeline>
<codeline lineno="10324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer-&gt;data();</highlight></codeline>
<codeline lineno="10325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10326" refid="_c_w_e-79_8c_1ad4aae80f3ec46d3acb10fb932cdb4d8d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ad4aae80f3ec46d3acb10fb932cdb4d8d" kindref="member">DoScheme</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CHAR*<sp/>spec,</highlight></codeline>
<codeline lineno="10327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Component&amp;<sp/>scheme,</highlight></codeline>
<codeline lineno="10328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanonOutput*<sp/>output,</highlight></codeline>
<codeline lineno="10329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Component*<sp/>out_scheme)<sp/>{</highlight></codeline>
<codeline lineno="10330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scheme.len<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="10331"><highlight class="normal"><sp/><sp/><sp/><sp/>*out_scheme<sp/>=<sp/>Component(output-&gt;length(),<sp/>0);</highlight></codeline>
<codeline lineno="10332"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;push_back(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10335"><highlight class="normal"></highlight></codeline>
<codeline lineno="10336"><highlight class="normal"><sp/><sp/>out_scheme-&gt;begin<sp/>=<sp/>output-&gt;length();</highlight></codeline>
<codeline lineno="10337"><highlight class="normal"></highlight></codeline>
<codeline lineno="10338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>scheme.end();</highlight></codeline>
<codeline lineno="10340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>scheme.begin;<sp/>i<sp/>&lt;<sp/>end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="10341"><highlight class="normal"><sp/><sp/><sp/><sp/>UCHAR<sp/>ch<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UCHAR</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(spec[i]);</highlight></codeline>
<codeline lineno="10342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>replacement<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&lt;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="10344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>scheme.begin)<sp/>{</highlight></codeline>
<codeline lineno="10345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1a8d99d507ec61df283dc4bdfd1613571a" kindref="member">IsSchemeFirstChar</ref>(static_cast&lt;unsigned<sp/>char&gt;(ch)))</highlight></codeline>
<codeline lineno="10346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replacement<sp/>=<sp/>kSchemeCanonical[ch];</highlight></codeline>
<codeline lineno="10347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replacement<sp/>=<sp/>kSchemeCanonical[ch];</highlight></codeline>
<codeline lineno="10349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10351"><highlight class="normal"></highlight></codeline>
<codeline lineno="10352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(replacement)<sp/>{</highlight></codeline>
<codeline lineno="10353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output-&gt;push_back(replacement);</highlight></codeline>
<codeline lineno="10354"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="10355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output-&gt;push_back(</highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10357"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10359"><highlight class="normal"></highlight></codeline>
<codeline lineno="10360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AppendUTF8EscapedChar(spec,<sp/>&amp;i,<sp/>end,<sp/>output);</highlight></codeline>
<codeline lineno="10361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10362"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10363"><highlight class="normal"></highlight></codeline>
<codeline lineno="10364"><highlight class="normal"><sp/><sp/>out_scheme-&gt;len<sp/>=<sp/>output-&gt;length()<sp/>-<sp/>out_scheme-&gt;begin;</highlight></codeline>
<codeline lineno="10365"><highlight class="normal"><sp/><sp/>output-&gt;push_back(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="10367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10368" refid="_c_w_e-79_8c_1ae6f95410a66f8b95343489972dd5aa16" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ae6f95410a66f8b95343489972dd5aa16" kindref="member">DoUserInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CHAR*<sp/>username_spec,</highlight></codeline>
<codeline lineno="10369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Component&amp;<sp/>username,</highlight></codeline>
<codeline lineno="10370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CHAR*<sp/>password_spec,</highlight></codeline>
<codeline lineno="10371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Component&amp;<sp/>password,</highlight></codeline>
<codeline lineno="10372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanonOutput*<sp/>output,</highlight></codeline>
<codeline lineno="10373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Component*<sp/>out_username,</highlight></codeline>
<codeline lineno="10374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Component*<sp/>out_password)<sp/>{</highlight></codeline>
<codeline lineno="10375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(username.len<sp/>&lt;=<sp/>0<sp/>&amp;&amp;<sp/>password.len<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="10376"><highlight class="normal"><sp/><sp/><sp/><sp/>*out_username<sp/>=<sp/>Component();</highlight></codeline>
<codeline lineno="10377"><highlight class="normal"><sp/><sp/><sp/><sp/>*out_password<sp/>=<sp/>Component();</highlight></codeline>
<codeline lineno="10378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10380"><highlight class="normal"></highlight></codeline>
<codeline lineno="10381"><highlight class="normal"><sp/><sp/>out_username-&gt;begin<sp/>=<sp/>output-&gt;length();</highlight></codeline>
<codeline lineno="10382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(username.len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="10383"><highlight class="normal"><sp/><sp/><sp/><sp/>AppendStringOfType(&amp;username_spec[username.begin],<sp/>username.len,</highlight></codeline>
<codeline lineno="10384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHAR_USERINFO,<sp/>output);</highlight></codeline>
<codeline lineno="10385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10386"><highlight class="normal"><sp/><sp/>out_username-&gt;len<sp/>=<sp/>output-&gt;length()<sp/>-<sp/>out_username-&gt;begin;</highlight></codeline>
<codeline lineno="10387"><highlight class="normal"></highlight></codeline>
<codeline lineno="10388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(password.len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="10389"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;push_back(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10390"><highlight class="normal"><sp/><sp/><sp/><sp/>out_password-&gt;begin<sp/>=<sp/>output-&gt;length();</highlight></codeline>
<codeline lineno="10391"><highlight class="normal"><sp/><sp/><sp/><sp/>AppendStringOfType(&amp;password_spec[password.begin],<sp/>password.len,</highlight></codeline>
<codeline lineno="10392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHAR_USERINFO,<sp/>output);</highlight></codeline>
<codeline lineno="10393"><highlight class="normal"><sp/><sp/><sp/><sp/>out_password-&gt;len<sp/>=<sp/>output-&gt;length()<sp/>-<sp/>out_password-&gt;begin;</highlight></codeline>
<codeline lineno="10394"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10395"><highlight class="normal"><sp/><sp/><sp/><sp/>*out_password<sp/>=<sp/>Component();</highlight></codeline>
<codeline lineno="10396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10397"><highlight class="normal"></highlight></codeline>
<codeline lineno="10398"><highlight class="normal"><sp/><sp/>output-&gt;push_back(</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10401" refid="_c_w_e-79_8c_1a3b7af3b03c59d1011062768a2b1dc075" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a3b7af3b03c59d1011062768a2b1dc075" kindref="member">IsRemovableURLWhitespace</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="10402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal"><sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10404" refid="_c_w_e-79_8c_1a8d99d507ec61df283dc4bdfd1613571a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a8d99d507ec61df283dc4bdfd1613571a" kindref="member">IsSchemeFirstChar</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="10405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10407" refid="_c_w_e-79_8c_1a55f0840f580850f7dbbf455b793ae238" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="_c_w_e-79_8c_1a55f0840f580850f7dbbf455b793ae238" kindref="member">RemoveURLWhitespace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input,</highlight></codeline>
<codeline lineno="10408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input_len,</highlight></codeline>
<codeline lineno="10409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanonOutputT&lt;char&gt;*<sp/>buffer,</highlight></codeline>
<codeline lineno="10410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>output_len,</highlight></codeline>
<codeline lineno="10411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>potentially_dangling_markup)<sp/>{</highlight></codeline>
<codeline lineno="10412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a4efe10c6d6ee40d8e3d1b884fc7845a8" kindref="member">DoRemoveURLWhitespace</ref>(input,<sp/>input_len,<sp/>buffer,<sp/>output_len,</highlight></codeline>
<codeline lineno="10413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>potentially_dangling_markup);</highlight></codeline>
<codeline lineno="10414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10415" refid="_c_w_e-79_8c_1acdefcb95fc6c94ead47a299a9ae65427" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::char16*<sp/><ref refid="_c_w_e-79_8c_1a55f0840f580850f7dbbf455b793ae238" kindref="member">RemoveURLWhitespace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::char16*<sp/>input,</highlight></codeline>
<codeline lineno="10416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input_len,</highlight></codeline>
<codeline lineno="10417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanonOutputT&lt;base::char16&gt;*<sp/>buffer,</highlight></codeline>
<codeline lineno="10418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>output_len,</highlight></codeline>
<codeline lineno="10419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>potentially_dangling_markup)<sp/>{</highlight></codeline>
<codeline lineno="10420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a4efe10c6d6ee40d8e3d1b884fc7845a8" kindref="member">DoRemoveURLWhitespace</ref>(input,<sp/>input_len,<sp/>buffer,<sp/>output_len,</highlight></codeline>
<codeline lineno="10421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>potentially_dangling_markup);</highlight></codeline>
<codeline lineno="10422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10423" refid="_c_w_e-79_8c_1a6a31f3f4ff9cd16da4f94dd99d63b8aa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a6a31f3f4ff9cd16da4f94dd99d63b8aa" kindref="member">WritePortInt</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>output_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port)<sp/>{</highlight></codeline>
<codeline lineno="10424"><highlight class="normal"><sp/><sp/>_itoa_s(port,<sp/>output,<sp/>output_len,<sp/>10);</highlight></codeline>
<codeline lineno="10425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10426" refid="_c_w_e-79_8c_1aba7acace23f569e142364025f9f1f3e0" refkind="member"><highlight class="normal">std::string<sp/><ref refid="_c_w_e-79_8c_1aba7acace23f569e142364025f9f1f3e0" kindref="member">BytesToHexString</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>bytes[16],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="10427"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(length<sp/>==<sp/>0<sp/>||<sp/>length<sp/>==<sp/>4<sp/>||<sp/>length<sp/>==<sp/>16)</highlight></codeline>
<codeline lineno="10428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>IP<sp/>address<sp/>length:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>length;</highlight></codeline>
<codeline lineno="10429"><highlight class="normal"><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="10430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="10431"><highlight class="normal"><sp/><sp/><sp/><sp/>result.push_back(kHexCharLookup[(bytes[i]<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>0xf]);</highlight></codeline>
<codeline lineno="10432"><highlight class="normal"><sp/><sp/><sp/><sp/>result.push_back(kHexCharLookup[bytes[i]<sp/>&amp;<sp/>0xf]);</highlight></codeline>
<codeline lineno="10433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="10435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10436" refid="_c_w_e-79_8c_1a2ded9bdcb74fdf2c94abb7894f606758" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a2ded9bdcb74fdf2c94abb7894f606758" kindref="member">ParsedIsEqual</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Parsed&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Parsed&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="10437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.scheme.begin<sp/>==<sp/>b.scheme.begin<sp/>&amp;&amp;<sp/>a.scheme.len<sp/>==<sp/>b.scheme.len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.username.begin<sp/>==<sp/>b.username.begin<sp/>&amp;&amp;<sp/>a.username.len<sp/>==<sp/>b.username.len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.password.begin<sp/>==<sp/>b.password.begin<sp/>&amp;&amp;<sp/>a.password.len<sp/>==<sp/>b.password.len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.host.begin<sp/>==<sp/>b.host.begin<sp/>&amp;&amp;<sp/>a.host.len<sp/>==<sp/>b.host.len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.port.begin<sp/>==<sp/>b.port.begin<sp/>&amp;&amp;<sp/>a.port.len<sp/>==<sp/>b.port.len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.path.begin<sp/>==<sp/>b.path.begin<sp/>&amp;&amp;<sp/>a.path.len<sp/>==<sp/>b.path.len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.query.begin<sp/>==<sp/>b.query.begin<sp/>&amp;&amp;<sp/>a.query.len<sp/>==<sp/>b.query.len<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.ref.begin<sp/>==<sp/>b.ref.begin<sp/>&amp;&amp;<sp/>a.ref.len<sp/>==<sp/>b.ref.len;</highlight></codeline>
<codeline lineno="10445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10446" refid="_c_w_e-79_8c_1a6cb1954551450e37450609765af6957a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a6cb1954551450e37450609765af6957a" kindref="member">SetupReplComp</ref>(</highlight></codeline>
<codeline lineno="10447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(Replacements&lt;CHAR&gt;::*</highlight><highlight class="keyword">set</highlight><highlight class="normal">)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CHAR*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Component&amp;),</highlight></codeline>
<codeline lineno="10448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(Replacements&lt;CHAR&gt;::*clear)(),</highlight></codeline>
<codeline lineno="10449"><highlight class="normal"><sp/><sp/><sp/><sp/>Replacements&lt;CHAR&gt;*<sp/>rep,</highlight></codeline>
<codeline lineno="10450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CHAR*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="10451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>&amp;&amp;<sp/>str[0]<sp/>==<sp/>kDeleteComp[0])<sp/>{</highlight></codeline>
<codeline lineno="10452"><highlight class="normal"><sp/><sp/><sp/><sp/>(rep-&gt;*clear)();</highlight></codeline>
<codeline lineno="10453"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str)<sp/>{</highlight></codeline>
<codeline lineno="10454"><highlight class="normal"><sp/><sp/><sp/><sp/>(rep-&gt;*</highlight><highlight class="keyword">set</highlight><highlight class="normal">)(str,<sp/>Component(0,<sp/>static_cast&lt;int&gt;(strlen(str))));</highlight></codeline>
<codeline lineno="10455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10457"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::AddedToWidget()<sp/>{</highlight></codeline>
<codeline lineno="10458"><highlight class="normal"><sp/><sp/>views::Textfield::AddedToWidget();</highlight></codeline>
<codeline lineno="10459"><highlight class="normal"><sp/><sp/>scoped_observer_.Add(GetWidget()-&gt;GetCompositor());</highlight></codeline>
<codeline lineno="10460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10461"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::AppendDropFormats(</highlight></codeline>
<codeline lineno="10462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>formats,</highlight></codeline>
<codeline lineno="10463"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;ui::Clipboard::FormatType&gt;*<sp/>format_types)<sp/>{</highlight></codeline>
<codeline lineno="10464"><highlight class="normal"><sp/><sp/>*formats<sp/>=<sp/>*formats<sp/>|<sp/>ui::OSExchangeData::URL;</highlight></codeline>
<codeline lineno="10465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10466"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::DoInsertChar(base::char16<sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="10467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(insert_char_time_.is_null())<sp/>{</highlight></codeline>
<codeline lineno="10468"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK_EQ(latency_histogram_state_,<sp/>NOT_ACTIVE);</highlight></codeline>
<codeline lineno="10469"><highlight class="normal"><sp/><sp/><sp/><sp/>latency_histogram_state_<sp/>=<sp/>CHAR_TYPED;</highlight></codeline>
<codeline lineno="10470"><highlight class="normal"><sp/><sp/><sp/><sp/>insert_char_time_<sp/>=<sp/>base::TimeTicks::Now();</highlight></codeline>
<codeline lineno="10471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10472"><highlight class="normal"><sp/><sp/>Textfield::DoInsertChar(ch);</highlight></codeline>
<codeline lineno="10473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10474"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::EmphasizeURLComponents()<sp/>{</highlight></codeline>
<codeline lineno="10475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!location_bar_view_)</highlight></codeline>
<codeline lineno="10476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10477"><highlight class="normal"></highlight></codeline>
<codeline lineno="10478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>text_is_url<sp/>=<sp/>model()-&gt;CurrentTextIsURL();</highlight></codeline>
<codeline lineno="10479"><highlight class="normal"><sp/><sp/>GetRenderText()-&gt;SetDirectionalityMode(text_is_url</highlight></codeline>
<codeline lineno="10480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>gfx::DIRECTIONALITY_FORCE_LTR</highlight></codeline>
<codeline lineno="10481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>gfx::DIRECTIONALITY_FROM_TEXT);</highlight></codeline>
<codeline lineno="10482"><highlight class="normal"><sp/><sp/>SetStyle(gfx::STRIKE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10483"><highlight class="normal"><sp/><sp/>UpdateTextStyle(text(),<sp/>model()-&gt;client()-&gt;GetSchemeClassifier());</highlight></codeline>
<codeline lineno="10484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10485"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::EnterKeywordModeForDefaultSearchProvider()<sp/>{</highlight></codeline>
<codeline lineno="10486"><highlight class="normal"><sp/><sp/>model()-&gt;EnterKeywordModeForDefaultSearchProvider(</highlight></codeline>
<codeline lineno="10487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>KeywordModeEntryMethod::KEYBOARD_SHORTCUT);</highlight></codeline>
<codeline lineno="10488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10489"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::ExecuteCommand(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>command_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>event_flags)<sp/>{</highlight></codeline>
<codeline lineno="10490"><highlight class="normal"><sp/><sp/>DestroyTouchSelection();</highlight></codeline>
<codeline lineno="10491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(command_id)<sp/>{</highlight></codeline>
<codeline lineno="10492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IDS_PASTE_AND_GO:</highlight></codeline>
<codeline lineno="10493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model()-&gt;PasteAndGo(GetClipboardText());</highlight></codeline>
<codeline lineno="10494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IDC_EDIT_SEARCH_ENGINES:</highlight></codeline>
<codeline lineno="10496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>location_bar_view_-&gt;command_updater()-&gt;ExecuteCommand(command_id);</highlight></codeline>
<codeline lineno="10497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10498"><highlight class="normal"></highlight></codeline>
<codeline lineno="10499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IDS_APP_PASTE:</highlight></codeline>
<codeline lineno="10500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExecuteTextEditCommand(ui::TextEditCommand::PASTE);</highlight></codeline>
<codeline lineno="10501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Textfield::IsCommandIdEnabled(command_id))<sp/>{</highlight></codeline>
<codeline lineno="10504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Textfield::ExecuteCommand(command_id,<sp/>event_flags);</highlight></codeline>
<codeline lineno="10505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OnBeforePossibleChange();</highlight></codeline>
<codeline lineno="10508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>location_bar_view_-&gt;command_updater()-&gt;ExecuteCommand(command_id);</highlight></codeline>
<codeline lineno="10509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OnAfterPossibleChange(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10513"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::ExecuteTextEditCommand(ui::TextEditCommand<sp/>command)<sp/>{</highlight></codeline>
<codeline lineno="10514"><highlight class="normal"><sp/><sp/>DestroyTouchSelection();</highlight></codeline>
<codeline lineno="10515"><highlight class="normal"></highlight></codeline>
<codeline lineno="10516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsTextEditCommandEnabled(command))</highlight></codeline>
<codeline lineno="10517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10518"><highlight class="normal"></highlight></codeline>
<codeline lineno="10519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(command)<sp/>{</highlight></codeline>
<codeline lineno="10520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ui::TextEditCommand::MOVE_UP:</highlight></codeline>
<codeline lineno="10521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model()-&gt;OnUpOrDownKeyPressed(-1);</highlight></codeline>
<codeline lineno="10522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ui::TextEditCommand::MOVE_DOWN:</highlight></codeline>
<codeline lineno="10524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model()-&gt;OnUpOrDownKeyPressed(1);</highlight></codeline>
<codeline lineno="10525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ui::TextEditCommand::PASTE:</highlight></codeline>
<codeline lineno="10527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OnPaste();</highlight></codeline>
<codeline lineno="10528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Textfield::ExecuteTextEditCommand(command);</highlight></codeline>
<codeline lineno="10531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10534"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::GetAccessibleNodeData(ui::AXNodeData*<sp/>node_data)<sp/>{</highlight></codeline>
<codeline lineno="10535"><highlight class="normal"><sp/><sp/>node_data-&gt;role<sp/>=<sp/>ui::AX_ROLE_TEXT_FIELD;</highlight></codeline>
<codeline lineno="10536"><highlight class="normal"><sp/><sp/>node_data-&gt;SetName(l10n_util::GetStringUTF8(IDS_ACCNAME_LOCATION));</highlight></codeline>
<codeline lineno="10537"><highlight class="normal"><sp/><sp/>node_data-&gt;SetValue(GetText());</highlight></codeline>
<codeline lineno="10538"><highlight class="normal"><sp/><sp/>node_data-&gt;html_attributes.push_back(std::make_pair(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;url&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="10539"><highlight class="normal"></highlight></codeline>
<codeline lineno="10540"><highlight class="normal"><sp/><sp/>base::string16::size_type<sp/>entry_start;</highlight></codeline>
<codeline lineno="10541"><highlight class="normal"><sp/><sp/>base::string16::size_type<sp/>entry_end;</highlight></codeline>
<codeline lineno="10542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(saved_selection_for_focus_change_.IsValid())<sp/>{</highlight></codeline>
<codeline lineno="10543"><highlight class="normal"><sp/><sp/><sp/><sp/>entry_start<sp/>=<sp/>saved_selection_for_focus_change_.start();</highlight></codeline>
<codeline lineno="10544"><highlight class="normal"><sp/><sp/><sp/><sp/>entry_end<sp/>=<sp/>saved_selection_for_focus_change_.end();</highlight></codeline>
<codeline lineno="10545"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10546"><highlight class="normal"><sp/><sp/><sp/><sp/>GetSelectionBounds(&amp;entry_start,<sp/>&amp;entry_end);</highlight></codeline>
<codeline lineno="10547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10548"><highlight class="normal"><sp/><sp/>node_data-&gt;AddIntAttribute(ui::AX_ATTR_TEXT_SEL_START,<sp/>entry_start);</highlight></codeline>
<codeline lineno="10549"><highlight class="normal"><sp/><sp/>node_data-&gt;AddIntAttribute(ui::AX_ATTR_TEXT_SEL_END,<sp/>entry_end);</highlight></codeline>
<codeline lineno="10550"><highlight class="normal"></highlight></codeline>
<codeline lineno="10551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(popup_window_mode_)<sp/>{</highlight></codeline>
<codeline lineno="10552"><highlight class="normal"><sp/><sp/><sp/><sp/>node_data-&gt;AddIntAttribute(ui::AX_ATTR_RESTRICTION,</highlight></codeline>
<codeline lineno="10553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ui::AX_RESTRICTION_READ_ONLY);</highlight></codeline>
<codeline lineno="10554"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10555"><highlight class="normal"><sp/><sp/><sp/><sp/>node_data-&gt;AddState(ui::AX_STATE_EDITABLE);</highlight></codeline>
<codeline lineno="10556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10558"><highlight class="normal">gfx::Size<sp/>OmniboxViewViews::GetMinimumSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kMinCharacters<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="10560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfx::Size(</highlight></codeline>
<codeline lineno="10561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetFontList().GetExpectedTextWidth(kMinCharacters)<sp/>+<sp/>GetInsets().width(),</highlight></codeline>
<codeline lineno="10562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetPreferredSize().height());</highlight></codeline>
<codeline lineno="10563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10564"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OmniboxViewViews::HandleAccessibleAction(</highlight></codeline>
<codeline lineno="10565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ui::AXActionData&amp;<sp/>action_data)<sp/>{</highlight></codeline>
<codeline lineno="10566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_only())</highlight></codeline>
<codeline lineno="10567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Textfield::HandleAccessibleAction(action_data);</highlight></codeline>
<codeline lineno="10568"><highlight class="normal"></highlight></codeline>
<codeline lineno="10569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action_data.action<sp/>==<sp/>ui::AX_ACTION_SET_VALUE)<sp/>{</highlight></codeline>
<codeline lineno="10570"><highlight class="normal"><sp/><sp/><sp/><sp/>SetUserText(action_data.value,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10572"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action_data.action<sp/>==<sp/>ui::AX_ACTION_REPLACE_SELECTED_TEXT)<sp/>{</highlight></codeline>
<codeline lineno="10573"><highlight class="normal"><sp/><sp/><sp/><sp/>model()-&gt;SetInputInProgress(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(saved_selection_for_focus_change_.IsValid())<sp/>{</highlight></codeline>
<codeline lineno="10575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SelectRange(saved_selection_for_focus_change_);</highlight></codeline>
<codeline lineno="10576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>saved_selection_for_focus_change_<sp/>=<sp/>gfx::Range::InvalidRange();</highlight></codeline>
<codeline lineno="10577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10578"><highlight class="normal"><sp/><sp/><sp/><sp/>InsertOrReplaceText(action_data.value);</highlight></codeline>
<codeline lineno="10579"><highlight class="normal"><sp/><sp/><sp/><sp/>TextChanged();</highlight></codeline>
<codeline lineno="10580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10582"><highlight class="normal"></highlight></codeline>
<codeline lineno="10583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Textfield::HandleAccessibleAction(action_data);</highlight></codeline>
<codeline lineno="10584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10585"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OmniboxViewViews::HandleEarlyTabActions(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ui::KeyEvent&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline lineno="10586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!views::FocusManager::IsTabTraversalKeyEvent(event))</highlight></codeline>
<codeline lineno="10587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10588"><highlight class="normal"></highlight></codeline>
<codeline lineno="10589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model()-&gt;is_keyword_hint()<sp/>&amp;&amp;<sp/>!event.IsShiftDown())</highlight></codeline>
<codeline lineno="10590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>model()-&gt;AcceptKeyword(KeywordModeEntryMethod::TAB);</highlight></codeline>
<codeline lineno="10591"><highlight class="normal"></highlight></codeline>
<codeline lineno="10592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!model()-&gt;popup_model()-&gt;IsOpen())</highlight></codeline>
<codeline lineno="10593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10594"><highlight class="normal"></highlight></codeline>
<codeline lineno="10595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event.IsShiftDown()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(model()-&gt;popup_model()-&gt;selected_line_state()<sp/>==</highlight></codeline>
<codeline lineno="10597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OmniboxPopupModel::KEYWORD))</highlight></codeline>
<codeline lineno="10598"><highlight class="normal"><sp/><sp/><sp/><sp/>model()-&gt;ClearKeyword();</highlight></codeline>
<codeline lineno="10599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10600"><highlight class="normal"><sp/><sp/><sp/><sp/>model()-&gt;OnUpOrDownKeyPressed(event.IsShiftDown()<sp/>?<sp/>-1<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="10601"><highlight class="normal"></highlight></codeline>
<codeline lineno="10602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10604"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OmniboxViewViews::HandleKeyEvent(views::Textfield*<sp/>textfield,</highlight></codeline>
<codeline lineno="10605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ui::KeyEvent&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline lineno="10606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event.type()<sp/>==<sp/>ui::ET_KEY_RELEASED)<sp/>{</highlight></codeline>
<codeline lineno="10607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event.key_code()<sp/>==<sp/>ui::VKEY_CONTROL)</highlight></codeline>
<codeline lineno="10608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model()-&gt;OnControlKeyChanged(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10609"><highlight class="normal"></highlight></codeline>
<codeline lineno="10610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10612"><highlight class="normal"></highlight></codeline>
<codeline lineno="10613"><highlight class="normal"><sp/><sp/>delete_at_end_pressed_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10614"><highlight class="normal"></highlight></codeline>
<codeline lineno="10615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event.IsUnicodeKeyCode())</highlight></codeline>
<codeline lineno="10616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10617"><highlight class="normal"></highlight></codeline>
<codeline lineno="10618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.IsShiftDown();</highlight></codeline>
<codeline lineno="10619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>control<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.IsControlDown();</highlight></codeline>
<codeline lineno="10620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>alt<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.IsAltDown()<sp/>||<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.IsAltGrDown();</highlight></codeline>
<codeline lineno="10621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(event.key_code())<sp/>{</highlight></codeline>
<codeline lineno="10622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ui::VKEY_RETURN:</highlight></codeline>
<codeline lineno="10623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model()-&gt;AcceptInput(alt<sp/>?<sp/>WindowOpenDisposition::NEW_FOREGROUND_TAB</highlight></codeline>
<codeline lineno="10624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>WindowOpenDisposition::CURRENT_TAB,</highlight></codeline>
<codeline lineno="10625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ui::VKEY_ESCAPE:</highlight></codeline>
<codeline lineno="10628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>model()-&gt;OnEscapeKeyPressed();</highlight></codeline>
<codeline lineno="10629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ui::VKEY_CONTROL:</highlight></codeline>
<codeline lineno="10630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model()-&gt;OnControlKeyChanged(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ui::VKEY_DELETE:</highlight></codeline>
<codeline lineno="10633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift<sp/>&amp;&amp;<sp/>model()-&gt;popup_model()-&gt;IsOpen())</highlight></codeline>
<codeline lineno="10634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model()-&gt;popup_model()-&gt;TryDeletingCurrentItem();</highlight></codeline>
<codeline lineno="10635"><highlight class="normal"></highlight></codeline>
<codeline lineno="10636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delete_at_end_pressed_<sp/>=<sp/>(!</highlight><highlight class="keyword">event</highlight><highlight class="normal">.IsAltDown()<sp/>&amp;&amp;<sp/>!HasSelection()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCursorPosition()<sp/>==<sp/>text().length());</highlight></codeline>
<codeline lineno="10638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ui::VKEY_UP:</highlight></codeline>
<codeline lineno="10640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsTextEditCommandEnabled(ui::TextEditCommand::MOVE_UP))<sp/>{</highlight></codeline>
<codeline lineno="10641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecuteTextEditCommand(ui::TextEditCommand::MOVE_UP);</highlight></codeline>
<codeline lineno="10642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ui::VKEY_DOWN:</highlight></codeline>
<codeline lineno="10646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsTextEditCommandEnabled(ui::TextEditCommand::MOVE_DOWN))<sp/>{</highlight></codeline>
<codeline lineno="10647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecuteTextEditCommand(ui::TextEditCommand::MOVE_DOWN);</highlight></codeline>
<codeline lineno="10648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ui::VKEY_PRIOR:</highlight></codeline>
<codeline lineno="10652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(control<sp/>||<sp/>alt<sp/>||<sp/>shift)</highlight></codeline>
<codeline lineno="10653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model()-&gt;OnUpOrDownKeyPressed(-1<sp/>*<sp/>model()-&gt;result().<ref refid="_c_w_e-22_8c_1ac325ee2e130c33214318b5dea0073d47" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="10655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ui::VKEY_NEXT:</highlight></codeline>
<codeline lineno="10657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(control<sp/>||<sp/>alt<sp/>||<sp/>shift)</highlight></codeline>
<codeline lineno="10658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model()-&gt;OnUpOrDownKeyPressed(model()-&gt;result().<ref refid="_c_w_e-22_8c_1ac325ee2e130c33214318b5dea0073d47" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="10660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ui::VKEY_V:</highlight></codeline>
<codeline lineno="10662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(control<sp/>&amp;&amp;<sp/>!alt<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsTextEditCommandEnabled(ui::TextEditCommand::PASTE))<sp/>{</highlight></codeline>
<codeline lineno="10664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecuteTextEditCommand(ui::TextEditCommand::PASTE);</highlight></codeline>
<codeline lineno="10665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ui::VKEY_INSERT:</highlight></codeline>
<codeline lineno="10669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift<sp/>&amp;&amp;<sp/>!control<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsTextEditCommandEnabled(ui::TextEditCommand::PASTE))<sp/>{</highlight></codeline>
<codeline lineno="10671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecuteTextEditCommand(ui::TextEditCommand::PASTE);</highlight></codeline>
<codeline lineno="10672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ui::VKEY_BACK:</highlight></codeline>
<codeline lineno="10676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model()-&gt;is_keyword_hint()<sp/>||<sp/>model()-&gt;keyword().empty()<sp/>||</highlight></codeline>
<codeline lineno="10677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSelection()<sp/>||<sp/>GetCursorPosition()<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="10678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model()-&gt;ClearKeyword();</highlight></codeline>
<codeline lineno="10680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10681"><highlight class="normal"></highlight></codeline>
<codeline lineno="10682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10685"><highlight class="normal"></highlight></codeline>
<codeline lineno="10686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HandleEarlyTabActions(event);</highlight></codeline>
<codeline lineno="10687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10688"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::Init()<sp/>{</highlight></codeline>
<codeline lineno="10689"><highlight class="normal"><sp/><sp/>set_controller(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10690"><highlight class="normal"><sp/><sp/>SetTextInputType(ui::TEXT_INPUT_TYPE_URL);</highlight></codeline>
<codeline lineno="10691"><highlight class="normal"><sp/><sp/>GetRenderText()-&gt;SetElideBehavior(gfx::ELIDE_TAIL);</highlight></codeline>
<codeline lineno="10692"><highlight class="normal"></highlight></codeline>
<codeline lineno="10693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(popup_window_mode_)</highlight></codeline>
<codeline lineno="10694"><highlight class="normal"><sp/><sp/><sp/><sp/>SetReadOnly(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10695"><highlight class="normal"></highlight></codeline>
<codeline lineno="10696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(location_bar_view_)<sp/>{</highlight></codeline>
<codeline lineno="10697"><highlight class="normal"><sp/><sp/><sp/><sp/>popup_view_.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>OmniboxPopupContentsView(GetFontList(),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>model(),</highlight></codeline>
<codeline lineno="10698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>location_bar_view_));</highlight></codeline>
<codeline lineno="10699"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10700"><highlight class="normal"></highlight></codeline>
<codeline lineno="10701"><highlight class="normal"><sp/><sp/>SetBorder(views::CreateEmptyBorder(</highlight></codeline>
<codeline lineno="10702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ChromeLayoutProvider::Get()-&gt;GetInsetsMetric(INSETS_OMNIBOX)));</highlight></codeline>
<codeline lineno="10703"><highlight class="normal"></highlight></codeline>
<codeline lineno="10704"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10705"><highlight class="normal"><sp/><sp/>chromeos::input_method::InputMethodManager::Get()-&gt;</highlight></codeline>
<codeline lineno="10706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AddCandidateWindowObserver(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10707"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10709"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OmniboxViewViews::IsCommandIdEnabled(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>command_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command_id<sp/>==<sp/>IDS_APP_PASTE)</highlight></codeline>
<codeline lineno="10711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!read_only()<sp/>&amp;&amp;<sp/>!GetClipboardText().empty();</highlight></codeline>
<codeline lineno="10712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(command_id<sp/>==<sp/>IDS_PASTE_AND_GO)</highlight></codeline>
<codeline lineno="10713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!read_only()<sp/>&amp;&amp;<sp/>model()-&gt;CanPasteAndGo(GetClipboardText());</highlight></codeline>
<codeline lineno="10714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Textfield::IsCommandIdEnabled(command_id)<sp/>||</highlight></codeline>
<codeline lineno="10715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>location_bar_view_-&gt;command_updater()-&gt;IsCommandEnabled(command_id);</highlight></codeline>
<codeline lineno="10716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10717"><highlight class="normal">OmniboxViewViews::OmniboxViewViews(OmniboxEditController*<sp/>controller,</highlight></codeline>
<codeline lineno="10718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;OmniboxClient&gt;<sp/>client,</highlight></codeline>
<codeline lineno="10719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommandUpdater*<sp/>command_updater,</highlight></codeline>
<codeline lineno="10720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>popup_window_mode,</highlight></codeline>
<codeline lineno="10721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocationBarView*<sp/>location_bar,</highlight></codeline>
<codeline lineno="10722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gfx::FontList&amp;<sp/>font_list)</highlight></codeline>
<codeline lineno="10723"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>OmniboxView(controller,<sp/>std::move(client)),</highlight></codeline>
<codeline lineno="10724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>popup_window_mode_(popup_window_mode),</highlight></codeline>
<codeline lineno="10725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>security_level_(security_state::NONE),</highlight></codeline>
<codeline lineno="10726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>saved_selection_for_focus_change_(gfx::Range::InvalidRange()),</highlight></codeline>
<codeline lineno="10727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ime_composing_before_change_(false),</highlight></codeline>
<codeline lineno="10728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delete_at_end_pressed_(false),</highlight></codeline>
<codeline lineno="10729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>location_bar_view_(location_bar),</highlight></codeline>
<codeline lineno="10730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ime_candidate_window_open_(false),</highlight></codeline>
<codeline lineno="10731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>select_all_on_mouse_release_(false),</highlight></codeline>
<codeline lineno="10732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>select_all_on_gesture_tap_(false),</highlight></codeline>
<codeline lineno="10733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>latency_histogram_state_(NOT_ACTIVE),</highlight></codeline>
<codeline lineno="10734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scoped_observer_(this)<sp/>{</highlight></codeline>
<codeline lineno="10735"><highlight class="normal"><sp/><sp/>set_id(VIEW_ID_OMNIBOX);</highlight></codeline>
<codeline lineno="10736"><highlight class="normal"><sp/><sp/>SetFontList(font_list);</highlight></codeline>
<codeline lineno="10737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10738"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::OnAfterCutOrCopy(ui::ClipboardType<sp/>clipboard_type)<sp/>{</highlight></codeline>
<codeline lineno="10739"><highlight class="normal"><sp/><sp/>ui::Clipboard*<sp/>cb<sp/>=<sp/>ui::Clipboard::GetForCurrentThread();</highlight></codeline>
<codeline lineno="10740"><highlight class="normal"><sp/><sp/>base::string16<sp/>selected_text;</highlight></codeline>
<codeline lineno="10741"><highlight class="normal"><sp/><sp/>cb-&gt;ReadText(clipboard_type,<sp/>&amp;selected_text);</highlight></codeline>
<codeline lineno="10742"><highlight class="normal"><sp/><sp/>GURL<sp/>url;</highlight></codeline>
<codeline lineno="10743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>write_url;</highlight></codeline>
<codeline lineno="10744"><highlight class="normal"><sp/><sp/>model()-&gt;AdjustTextForCopy(GetSelectedRange().GetMin(),<sp/>IsSelectAll(),</highlight></codeline>
<codeline lineno="10745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;selected_text,<sp/>&amp;url,<sp/>&amp;write_url);</highlight></codeline>
<codeline lineno="10746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsSelectAll())</highlight></codeline>
<codeline lineno="10747"><highlight class="normal"><sp/><sp/><sp/><sp/>UMA_HISTOGRAM_COUNTS(OmniboxEditModel::kCutOrCopyAllTextHistogram,<sp/>1);</highlight></codeline>
<codeline lineno="10748"><highlight class="normal"></highlight></codeline>
<codeline lineno="10749"><highlight class="normal"><sp/><sp/>ui::ScopedClipboardWriter<sp/>scoped_clipboard_writer(clipboard_type);</highlight></codeline>
<codeline lineno="10750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_url)</highlight></codeline>
<codeline lineno="10751"><highlight class="normal"><sp/><sp/><sp/><sp/>scoped_clipboard_writer.WriteURL(selected_text);</highlight></codeline>
<codeline lineno="10752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10753"><highlight class="normal"><sp/><sp/><sp/><sp/>scoped_clipboard_writer.WriteText(selected_text);</highlight></codeline>
<codeline lineno="10754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10755"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OmniboxViewViews::OnAfterPossibleChange(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_keyword_ui_change)<sp/>{</highlight></codeline>
<codeline lineno="10756"><highlight class="normal"><sp/><sp/>State<sp/>new_state;</highlight></codeline>
<codeline lineno="10757"><highlight class="normal"><sp/><sp/>GetState(&amp;new_state);</highlight></codeline>
<codeline lineno="10758"><highlight class="normal"><sp/><sp/>OmniboxView::StateChanges<sp/>state_changes<sp/>=</highlight></codeline>
<codeline lineno="10759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetStateChanges(state_before_change_,<sp/>new_state);</highlight></codeline>
<codeline lineno="10760"><highlight class="normal"></highlight></codeline>
<codeline lineno="10761"><highlight class="normal"><sp/><sp/>state_changes.text_differs<sp/>=</highlight></codeline>
<codeline lineno="10762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state_changes.text_differs<sp/>||</highlight></codeline>
<codeline lineno="10763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(ime_composing_before_change_<sp/>!=<sp/>IsIMEComposing());</highlight></codeline>
<codeline lineno="10764"><highlight class="normal"></highlight></codeline>
<codeline lineno="10765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>something_changed<sp/>=<sp/>model()-&gt;OnAfterPossibleChange(</highlight></codeline>
<codeline lineno="10766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state_changes,<sp/>allow_keyword_ui_change<sp/>&amp;&amp;<sp/>!IsIMEComposing());</highlight></codeline>
<codeline lineno="10767"><highlight class="normal"></highlight></codeline>
<codeline lineno="10768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(something_changed<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(state_changes.text_differs<sp/>||<sp/>state_changes.keyword_differs))</highlight></codeline>
<codeline lineno="10770"><highlight class="normal"><sp/><sp/><sp/><sp/>TextChanged();</highlight></codeline>
<codeline lineno="10771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state_changes.selection_differs)</highlight></codeline>
<codeline lineno="10772"><highlight class="normal"><sp/><sp/><sp/><sp/>EmphasizeURLComponents();</highlight></codeline>
<codeline lineno="10773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delete_at_end_pressed_)</highlight></codeline>
<codeline lineno="10774"><highlight class="normal"><sp/><sp/><sp/><sp/>model()-&gt;OnChanged();</highlight></codeline>
<codeline lineno="10775"><highlight class="normal"></highlight></codeline>
<codeline lineno="10776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>something_changed;</highlight></codeline>
<codeline lineno="10777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10778"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::OnBeforePossibleChange()<sp/>{</highlight></codeline>
<codeline lineno="10779"><highlight class="normal"><sp/><sp/>GetState(&amp;state_before_change_);</highlight></codeline>
<codeline lineno="10780"><highlight class="normal"><sp/><sp/>ime_composing_before_change_<sp/>=<sp/>IsIMEComposing();</highlight></codeline>
<codeline lineno="10781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10782"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::OnBlur()<sp/>{</highlight></codeline>
<codeline lineno="10783"><highlight class="normal"><sp/><sp/>saved_selection_for_focus_change_<sp/>=<sp/>GetSelectedRange();</highlight></codeline>
<codeline lineno="10784"><highlight class="normal"></highlight></codeline>
<codeline lineno="10785"><highlight class="normal"><sp/><sp/>views::Textfield::OnBlur();</highlight></codeline>
<codeline lineno="10786"><highlight class="normal"><sp/><sp/>model()-&gt;OnWillKillFocus();</highlight></codeline>
<codeline lineno="10787"><highlight class="normal"></highlight></codeline>
<codeline lineno="10788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!model()-&gt;user_input_in_progress()<sp/>&amp;&amp;<sp/>model()-&gt;popup_model()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model()-&gt;popup_model()-&gt;IsOpen()<sp/>&amp;&amp;<sp/>text()<sp/>!=<sp/>model()-&gt;PermanentText())</highlight></codeline>
<codeline lineno="10790"><highlight class="normal"><sp/><sp/><sp/><sp/>RevertAll();</highlight></codeline>
<codeline lineno="10791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10792"><highlight class="normal"><sp/><sp/><sp/><sp/>CloseOmniboxPopup();</highlight></codeline>
<codeline lineno="10793"><highlight class="normal"></highlight></codeline>
<codeline lineno="10794"><highlight class="normal"><sp/><sp/>model()-&gt;OnKillFocus();</highlight></codeline>
<codeline lineno="10795"><highlight class="normal"></highlight></codeline>
<codeline lineno="10796"><highlight class="normal"><sp/><sp/>SelectRange(gfx::Range(0));</highlight></codeline>
<codeline lineno="10797"><highlight class="normal"></highlight></codeline>
<codeline lineno="10798"><highlight class="normal"><sp/><sp/>gfx::RenderText*<sp/>render_text<sp/>=<sp/>GetRenderText();</highlight></codeline>
<codeline lineno="10799"><highlight class="normal"><sp/><sp/>render_text-&gt;SetElideBehavior(gfx::ELIDE_TAIL);</highlight></codeline>
<codeline lineno="10800"><highlight class="normal"><sp/><sp/>render_text-&gt;SetDisplayOffset(0);</highlight></codeline>
<codeline lineno="10801"><highlight class="normal"></highlight></codeline>
<codeline lineno="10802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(location_bar_view_)<sp/>{</highlight></codeline>
<codeline lineno="10803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model()-&gt;is_keyword_hint())</highlight></codeline>
<codeline lineno="10804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>location_bar_view_-&gt;Layout();</highlight></codeline>
<codeline lineno="10805"><highlight class="normal"></highlight></codeline>
<codeline lineno="10806"><highlight class="normal"><sp/><sp/><sp/><sp/>location_bar_view_-&gt;SchedulePaint();</highlight></codeline>
<codeline lineno="10807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10809"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::OnCompositingLockStateChanged(</highlight></codeline>
<codeline lineno="10810"><highlight class="normal"><sp/><sp/><sp/><sp/>ui::Compositor*<sp/>compositor)<sp/>{}</highlight></codeline>
<codeline lineno="10811"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::OnCompositingShuttingDown(ui::Compositor*<sp/>compositor)<sp/>{</highlight></codeline>
<codeline lineno="10812"><highlight class="normal"><sp/><sp/>scoped_observer_.RemoveAll();</highlight></codeline>
<codeline lineno="10813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10814"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::OnFocus()<sp/>{</highlight></codeline>
<codeline lineno="10815"><highlight class="normal"><sp/><sp/>views::Textfield::OnFocus();</highlight></codeline>
<codeline lineno="10816"><highlight class="normal"><sp/><sp/>model()-&gt;OnSetFocus(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10817"><highlight class="normal"></highlight></codeline>
<codeline lineno="10818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(saved_selection_for_focus_change_.IsValid())<sp/>{</highlight></codeline>
<codeline lineno="10819"><highlight class="normal"><sp/><sp/><sp/><sp/>SelectRange(saved_selection_for_focus_change_);</highlight></codeline>
<codeline lineno="10820"><highlight class="normal"><sp/><sp/><sp/><sp/>saved_selection_for_focus_change_<sp/>=<sp/>gfx::Range::InvalidRange();</highlight></codeline>
<codeline lineno="10821"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10822"><highlight class="normal"></highlight></codeline>
<codeline lineno="10823"><highlight class="normal"><sp/><sp/>GetRenderText()-&gt;SetElideBehavior(gfx::NO_ELIDE);</highlight></codeline>
<codeline lineno="10824"><highlight class="normal"></highlight></codeline>
<codeline lineno="10825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model()-&gt;is_keyword_hint())</highlight></codeline>
<codeline lineno="10826"><highlight class="normal"><sp/><sp/><sp/><sp/>location_bar_view_-&gt;Layout();</highlight></codeline>
<codeline lineno="10827"><highlight class="normal"></highlight></codeline>
<codeline lineno="10828"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BUILDFLAG(ENABLE_DESKTOP_IN_PRODUCT_HELP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(controller()-&gt;GetToolbarModel()-&gt;ShouldDisplayURL())<sp/>{</highlight></codeline>
<codeline lineno="10830"><highlight class="normal"><sp/><sp/><sp/><sp/>feature_engagement::NewTabTrackerFactory::GetInstance()</highlight></codeline>
<codeline lineno="10831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetForProfile(location_bar_view_-&gt;profile())</highlight></codeline>
<codeline lineno="10832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;OnOmniboxFocused();</highlight></codeline>
<codeline lineno="10833"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10834"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10836"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::OnGestureEvent(ui::GestureEvent*<sp/>event)<sp/>{</highlight></codeline>
<codeline lineno="10837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasFocus()<sp/>&amp;&amp;<sp/>event-&gt;type()<sp/>==<sp/>ui::ET_GESTURE_TAP_DOWN)<sp/>{</highlight></codeline>
<codeline lineno="10838"><highlight class="normal"><sp/><sp/><sp/><sp/>select_all_on_gesture_tap_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10839"><highlight class="normal"></highlight></codeline>
<codeline lineno="10840"><highlight class="normal"><sp/><sp/><sp/><sp/>saved_selection_for_focus_change_<sp/>=<sp/>gfx::Range::InvalidRange();</highlight></codeline>
<codeline lineno="10841"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10842"><highlight class="normal"></highlight></codeline>
<codeline lineno="10843"><highlight class="normal"><sp/><sp/>views::Textfield::OnGestureEvent(event);</highlight></codeline>
<codeline lineno="10844"><highlight class="normal"></highlight></codeline>
<codeline lineno="10845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(select_all_on_gesture_tap_<sp/>&amp;&amp;<sp/>event-&gt;type()<sp/>==<sp/>ui::ET_GESTURE_TAP)</highlight></codeline>
<codeline lineno="10846"><highlight class="normal"><sp/><sp/><sp/><sp/>SelectAll(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10847"><highlight class="normal"></highlight></codeline>
<codeline lineno="10848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event-&gt;type()<sp/>==<sp/>ui::ET_GESTURE_TAP<sp/>||</highlight></codeline>
<codeline lineno="10849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;type()<sp/>==<sp/>ui::ET_GESTURE_TAP_CANCEL<sp/>||</highlight></codeline>
<codeline lineno="10850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;type()<sp/>==<sp/>ui::ET_GESTURE_TWO_FINGER_TAP<sp/>||</highlight></codeline>
<codeline lineno="10851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;type()<sp/>==<sp/>ui::ET_GESTURE_SCROLL_BEGIN<sp/>||</highlight></codeline>
<codeline lineno="10852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;type()<sp/>==<sp/>ui::ET_GESTURE_PINCH_BEGIN<sp/>||</highlight></codeline>
<codeline lineno="10853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;type()<sp/>==<sp/>ui::ET_GESTURE_LONG_PRESS<sp/>||</highlight></codeline>
<codeline lineno="10854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;type()<sp/>==<sp/>ui::ET_GESTURE_LONG_TAP)<sp/>{</highlight></codeline>
<codeline lineno="10855"><highlight class="normal"><sp/><sp/><sp/><sp/>select_all_on_gesture_tap_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10856"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10858"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OmniboxViewViews::OnMouseDragged(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ui::MouseEvent&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline lineno="10859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasTextBeingDragged())</highlight></codeline>
<codeline lineno="10860"><highlight class="normal"><sp/><sp/><sp/><sp/>CloseOmniboxPopup();</highlight></codeline>
<codeline lineno="10861"><highlight class="normal"></highlight></codeline>
<codeline lineno="10862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>handled<sp/>=<sp/>views::Textfield::OnMouseDragged(event);</highlight></codeline>
<codeline lineno="10863"><highlight class="normal"></highlight></codeline>
<codeline lineno="10864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasSelection()<sp/>||</highlight></codeline>
<codeline lineno="10865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExceededDragThreshold(event.location()<sp/>-<sp/>GetLastClickLocation()))<sp/>{</highlight></codeline>
<codeline lineno="10866"><highlight class="normal"><sp/><sp/><sp/><sp/>select_all_on_mouse_release_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10867"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10868"><highlight class="normal"></highlight></codeline>
<codeline lineno="10869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handled;</highlight></codeline>
<codeline lineno="10870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10871"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::OnMouseReleased(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ui::MouseEvent&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline lineno="10872"><highlight class="normal"><sp/><sp/>views::Textfield::OnMouseReleased(event);</highlight></codeline>
<codeline lineno="10873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((event.IsOnlyLeftMouseButton()<sp/>||<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.IsOnlyRightMouseButton())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>select_all_on_mouse_release_)<sp/>{</highlight></codeline>
<codeline lineno="10875"><highlight class="normal"><sp/><sp/><sp/><sp/>SelectAll(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10877"><highlight class="normal"><sp/><sp/>select_all_on_mouse_release_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10879"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::OnNativeThemeChanged(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ui::NativeTheme*<sp/>theme)<sp/>{</highlight></codeline>
<codeline lineno="10880"><highlight class="normal"><sp/><sp/>views::Textfield::OnNativeThemeChanged(theme);</highlight></codeline>
<codeline lineno="10881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(location_bar_view_)<sp/>{</highlight></codeline>
<codeline lineno="10882"><highlight class="normal"><sp/><sp/><sp/><sp/>SetBackgroundColor(</highlight></codeline>
<codeline lineno="10883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>location_bar_view_-&gt;GetColor(LocationBarView::BACKGROUND));</highlight></codeline>
<codeline lineno="10884"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10885"><highlight class="normal"><sp/><sp/>EmphasizeURLComponents();</highlight></codeline>
<codeline lineno="10886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10887"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::OnPaste()<sp/>{</highlight></codeline>
<codeline lineno="10888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::string16<sp/>text(GetClipboardText());</highlight></codeline>
<codeline lineno="10889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!text.empty())<sp/>{</highlight></codeline>
<codeline lineno="10890"><highlight class="normal"><sp/><sp/><sp/><sp/>OnBeforePossibleChange();</highlight></codeline>
<codeline lineno="10891"><highlight class="normal"><sp/><sp/><sp/><sp/>model()-&gt;OnPaste();</highlight></codeline>
<codeline lineno="10892"><highlight class="normal"><sp/><sp/><sp/><sp/>state_before_change_.text.clear();</highlight></codeline>
<codeline lineno="10893"><highlight class="normal"><sp/><sp/><sp/><sp/>InsertOrReplaceText(text);</highlight></codeline>
<codeline lineno="10894"><highlight class="normal"><sp/><sp/><sp/><sp/>OnAfterPossibleChange(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10895"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10897"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::OnTabChanged(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>content::WebContents*<sp/>web_contents)<sp/>{</highlight></codeline>
<codeline lineno="10898"><highlight class="normal"><sp/><sp/>UpdateSecurityLevel();</highlight></codeline>
<codeline lineno="10899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>OmniboxState*<sp/>state<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">OmniboxState*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="10900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>web_contents-&gt;GetUserData(&amp;OmniboxState::kKey));</highlight></codeline>
<codeline lineno="10901"><highlight class="normal"><sp/><sp/>model()-&gt;RestoreState(state<sp/>?<sp/>&amp;state-&gt;model_state<sp/>:<sp/>NULL);</highlight></codeline>
<codeline lineno="10902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state)<sp/>{</highlight></codeline>
<codeline lineno="10903"><highlight class="normal"><sp/><sp/><sp/><sp/>SelectRange(state-&gt;selection);</highlight></codeline>
<codeline lineno="10904"><highlight class="normal"><sp/><sp/><sp/><sp/>saved_selection_for_focus_change_<sp/>=<sp/>state-&gt;saved_selection_for_focus_change;</highlight></codeline>
<codeline lineno="10905"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10906"><highlight class="normal"></highlight></codeline>
<codeline lineno="10907"><highlight class="normal"><sp/><sp/>ClearEditHistory();</highlight></codeline>
<codeline lineno="10908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10909"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::OnWriteDragData(ui::OSExchangeData*<sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="10910"><highlight class="normal"><sp/><sp/>GURL<sp/>url;</highlight></codeline>
<codeline lineno="10911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>write_url;</highlight></codeline>
<codeline lineno="10912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_all_selected<sp/>=<sp/>IsSelectAll();</highlight></codeline>
<codeline lineno="10913"><highlight class="normal"><sp/><sp/>base::string16<sp/>selected_text<sp/>=<sp/>GetSelectedText();</highlight></codeline>
<codeline lineno="10914"><highlight class="normal"><sp/><sp/>model()-&gt;AdjustTextForCopy(GetSelectedRange().GetMin(),<sp/>is_all_selected,</highlight></codeline>
<codeline lineno="10915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;selected_text,<sp/>&amp;url,<sp/>&amp;write_url);</highlight></codeline>
<codeline lineno="10916"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>-&gt;SetString(selected_text);</highlight></codeline>
<codeline lineno="10917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_url)<sp/>{</highlight></codeline>
<codeline lineno="10918"><highlight class="normal"><sp/><sp/><sp/><sp/>gfx::Image<sp/>favicon;</highlight></codeline>
<codeline lineno="10919"><highlight class="normal"><sp/><sp/><sp/><sp/>base::string16<sp/>title<sp/>=<sp/>selected_text;</highlight></codeline>
<codeline lineno="10920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_all_selected)</highlight></codeline>
<codeline lineno="10921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model()-&gt;GetDataForURLExport(&amp;url,<sp/>&amp;title,<sp/>&amp;favicon);</highlight></codeline>
<codeline lineno="10922"><highlight class="normal"><sp/><sp/><sp/><sp/>button_drag_utils::SetURLAndDragImage(url,<sp/>title,<sp/>favicon.AsImageSkia(),</highlight></codeline>
<codeline lineno="10923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>*GetWidget(),<sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="10924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>-&gt;SetURL(url,<sp/>title);</highlight></codeline>
<codeline lineno="10925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10927"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::RemovedFromWidget()<sp/>{</highlight></codeline>
<codeline lineno="10928"><highlight class="normal"><sp/><sp/>views::Textfield::RemovedFromWidget();</highlight></codeline>
<codeline lineno="10929"><highlight class="normal"><sp/><sp/>scoped_observer_.RemoveAll();</highlight></codeline>
<codeline lineno="10930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10931"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::SaveStateToTab(content::WebContents*<sp/>tab)<sp/>{</highlight></codeline>
<codeline lineno="10932"><highlight class="normal"><sp/><sp/>DCHECK(tab);</highlight></codeline>
<codeline lineno="10933"><highlight class="normal"></highlight></codeline>
<codeline lineno="10934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsIMEComposing())<sp/>{</highlight></codeline>
<codeline lineno="10935"><highlight class="normal"><sp/><sp/><sp/><sp/>ConfirmCompositionText();</highlight></codeline>
<codeline lineno="10936"><highlight class="normal"><sp/><sp/><sp/><sp/>GetInputMethod()-&gt;CancelComposition(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10938"><highlight class="normal"></highlight></codeline>
<codeline lineno="10939"><highlight class="normal"><sp/><sp/>OmniboxEditModel::State<sp/>state<sp/>=<sp/>model()-&gt;GetStateForTabSwitch();</highlight></codeline>
<codeline lineno="10940"><highlight class="normal"><sp/><sp/>tab-&gt;SetUserData(OmniboxState::kKey,<sp/>base::MakeUnique&lt;OmniboxState&gt;(</highlight></codeline>
<codeline lineno="10941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state,<sp/>GetSelectedRange(),</highlight></codeline>
<codeline lineno="10942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saved_selection_for_focus_change_));</highlight></codeline>
<codeline lineno="10943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10944"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::SetEmphasis(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>emphasize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gfx::Range&amp;<sp/>range)<sp/>{</highlight></codeline>
<codeline lineno="10945"><highlight class="normal"><sp/><sp/>SkColor<sp/>color<sp/>=<sp/>location_bar_view_-&gt;GetColor(</highlight></codeline>
<codeline lineno="10946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>emphasize<sp/>?<sp/>LocationBarView::TEXT<sp/>:<sp/>LocationBarView::DEEMPHASIZED_TEXT);</highlight></codeline>
<codeline lineno="10947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(range.IsValid())</highlight></codeline>
<codeline lineno="10948"><highlight class="normal"><sp/><sp/><sp/><sp/>ApplyColor(color,<sp/>range);</highlight></codeline>
<codeline lineno="10949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10950"><highlight class="normal"><sp/><sp/><sp/><sp/>SetColor(color);</highlight></codeline>
<codeline lineno="10951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10952"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::ShowImeIfNeeded()<sp/>{</highlight></codeline>
<codeline lineno="10953"><highlight class="normal"><sp/><sp/>GetInputMethod()-&gt;ShowImeIfNeeded();</highlight></codeline>
<codeline lineno="10954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10955"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::Update()<sp/>{</highlight></codeline>
<codeline lineno="10956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>security_state::SecurityLevel<sp/>old_security_level<sp/>=<sp/>security_level_;</highlight></codeline>
<codeline lineno="10957"><highlight class="normal"><sp/><sp/>UpdateSecurityLevel();</highlight></codeline>
<codeline lineno="10958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model()-&gt;UpdatePermanentText())<sp/>{</highlight></codeline>
<codeline lineno="10959"><highlight class="normal"><sp/><sp/><sp/><sp/>RevertAll();</highlight></codeline>
<codeline lineno="10960"><highlight class="normal"></highlight></codeline>
<codeline lineno="10961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model()-&gt;has_focus())</highlight></codeline>
<codeline lineno="10962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SelectAll(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10963"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_security_level<sp/>!=<sp/>security_level_)<sp/>{</highlight></codeline>
<codeline lineno="10964"><highlight class="normal"><sp/><sp/><sp/><sp/>EmphasizeURLComponents();</highlight></codeline>
<codeline lineno="10965"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10967"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::UpdateContextMenu(ui::SimpleMenuModel*<sp/>menu_contents)<sp/>{</highlight></codeline>
<codeline lineno="10968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paste_position<sp/>=<sp/>menu_contents-&gt;GetIndexOfCommandId(IDS_APP_PASTE);</highlight></codeline>
<codeline lineno="10969"><highlight class="normal"><sp/><sp/>DCHECK_GE(paste_position,<sp/>0);</highlight></codeline>
<codeline lineno="10970"><highlight class="normal"><sp/><sp/>menu_contents-&gt;InsertItemWithStringIdAt(</highlight></codeline>
<codeline lineno="10971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>paste_position<sp/>+<sp/>1,<sp/>IDS_PASTE_AND_GO,<sp/>IDS_PASTE_AND_GO);</highlight></codeline>
<codeline lineno="10972"><highlight class="normal"></highlight></codeline>
<codeline lineno="10973"><highlight class="normal"><sp/><sp/>menu_contents-&gt;AddSeparator(ui::NORMAL_SEPARATOR);</highlight></codeline>
<codeline lineno="10974"><highlight class="normal"></highlight></codeline>
<codeline lineno="10975"><highlight class="normal"><sp/><sp/>menu_contents-&gt;AddItemWithStringId(IDC_EDIT_SEARCH_ENGINES,</highlight></codeline>
<codeline lineno="10976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IDS_EDIT_SEARCH_ENGINES);</highlight></codeline>
<codeline lineno="10977"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10978"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::UpdatePopup()<sp/>{</highlight></codeline>
<codeline lineno="10979"><highlight class="normal"><sp/><sp/>model()-&gt;SetInputInProgress(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!model()-&gt;has_focus())</highlight></codeline>
<codeline lineno="10981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10982"><highlight class="normal"></highlight></codeline>
<codeline lineno="10983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gfx::Range<sp/>sel<sp/>=<sp/>GetSelectedRange();</highlight></codeline>
<codeline lineno="10984"><highlight class="normal"><sp/><sp/>model()-&gt;StartAutocomplete(!sel.is_empty(),<sp/>sel.GetMax()<sp/>&lt;<sp/>text().length());</highlight></codeline>
<codeline lineno="10985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10986"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OmniboxViewViews::UpdateSecurityLevel()<sp/>{</highlight></codeline>
<codeline lineno="10987"><highlight class="normal"><sp/><sp/>security_level_<sp/>=<sp/>controller()-&gt;GetToolbarModel()-&gt;GetSecurityLevel(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10989" refid="_c_w_e-79_8c_1a45a80a28daecbfadb3a25a8ace1f7060" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a45a80a28daecbfadb3a25a8ace1f7060" kindref="member">AbortCompilation</ref>()<sp/>{</highlight></codeline>
<codeline lineno="10990"><highlight class="normal"><sp/><sp/><sp/><sp/>builder_.Abort(V8ThrowException::CreateTypeError(</highlight></codeline>
<codeline lineno="10991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>script_state_-&gt;GetIsolate(),<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>download<sp/>wasm<sp/>module&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="10992"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="10993" refid="_c_w_e-79_8c_1af0dede2e50ca786eb3761b3df8331fea" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1af0dede2e50ca786eb3761b3df8331fea" kindref="member">FetchDataLoaderAsWasmModule</ref>(ScriptState*<sp/>script_state)</highlight></codeline>
<codeline lineno="10994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>builder_(script_state-&gt;GetIsolate()),<sp/>script_state_(script_state)<sp/>{}</highlight></codeline>
<codeline lineno="10995" refid="_c_w_e-79_8c_1a29cd3cc4457e0a4aaafe45a92939b229" refkind="member"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Promise&gt;<sp/><ref refid="_c_w_e-79_8c_1a29cd3cc4457e0a4aaafe45a92939b229" kindref="member">GetPromise</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>builder_.GetPromise();<sp/>}</highlight></codeline>
<codeline lineno="10996"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-787_8c_1a98b1050f09da390896f964fb7a892391" kindref="member">WasmResponseExtensions::Initialize</ref>(v8::Isolate*<sp/>isolate)<sp/>{</highlight></codeline>
<codeline lineno="10997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RuntimeEnabledFeatures::WebAssemblyStreamingEnabled())<sp/>{</highlight></codeline>
<codeline lineno="10998"><highlight class="normal"><sp/><sp/><sp/><sp/>isolate-&gt;SetWasmCompileStreamingCallback(<ref refid="_c_w_e-79_8c_1adbfb4798b5614e7996b7efda0a04245a" kindref="member">WasmCompileStreamingImpl</ref>);</highlight></codeline>
<codeline lineno="10999"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11001" refid="_c_w_e-79_8c_1a0e270e5f7b7fb99081898069f0d9b2df" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a0e270e5f7b7fb99081898069f0d9b2df" kindref="member">Trace</ref>(blink::Visitor*<sp/>visitor)<sp/>{</highlight></codeline>
<codeline lineno="11002"><highlight class="normal"><sp/><sp/><sp/><sp/>visitor-&gt;Trace(consumer_);</highlight></codeline>
<codeline lineno="11003"><highlight class="normal"><sp/><sp/><sp/><sp/>visitor-&gt;Trace(client_);</highlight></codeline>
<codeline lineno="11004"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a0e270e5f7b7fb99081898069f0d9b2df" kindref="member">FetchDataLoader::Trace</ref>(visitor);</highlight></codeline>
<codeline lineno="11005"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a0e270e5f7b7fb99081898069f0d9b2df" kindref="member">BytesConsumer::Client::Trace</ref>(visitor);</highlight></codeline>
<codeline lineno="11006"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11007" refid="_c_w_e-79_8c_1ae4f5601f48e971c6f7b6881e1f63497a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ae4f5601f48e971c6f7b6881e1f63497a" kindref="member">WasmDataLoaderClient</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="11008" refid="_c_w_e-79_8c_1a4f5b209e69a1e57586409c08dda71982" refkind="member"><highlight class="normal">std::unique_ptr&lt;Permissions&gt;<sp/><ref refid="_c_w_e-79_8c_1a4f5b209e69a1e57586409c08dda71982" kindref="member">PackPermissionSet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PermissionSet&amp;<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="11009"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Permissions&gt;<sp/><ref refid="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" kindref="member">permissions</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Permissions());</highlight></codeline>
<codeline lineno="11010"><highlight class="normal"></highlight></codeline>
<codeline lineno="11011"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" kindref="member">permissions</ref>-&gt;permissions.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;());</highlight></codeline>
<codeline lineno="11012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>APIPermission*<sp/>api<sp/>:<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">.apis())<sp/>{</highlight></codeline>
<codeline lineno="11013"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;base::Value&gt;<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>(api-&gt;ToValue());</highlight></codeline>
<codeline lineno="11014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="11015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" kindref="member">permissions</ref>-&gt;permissions-&gt;push_back(api-&gt;name());</highlight></codeline>
<codeline lineno="11016"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name(api-&gt;name());</highlight></codeline>
<codeline lineno="11018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>json;</highlight></codeline>
<codeline lineno="11019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::JSONWriter::Write(*<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>,<sp/>&amp;json);</highlight></codeline>
<codeline lineno="11020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" kindref="member">permissions</ref>-&gt;permissions-&gt;push_back(name<sp/>+<sp/>kDelimiter<sp/>+<sp/>json);</highlight></codeline>
<codeline lineno="11021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11022"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11023"><highlight class="normal"></highlight></codeline>
<codeline lineno="11024"><highlight class="normal"></highlight></codeline>
<codeline lineno="11025"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" kindref="member">permissions</ref>-&gt;origins.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;());</highlight></codeline>
<codeline lineno="11026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>URLPattern&amp;<sp/>pattern<sp/>:<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">.effective_hosts())</highlight></codeline>
<codeline lineno="11027"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" kindref="member">permissions</ref>-&gt;origins-&gt;push_back(pattern.GetAsString());</highlight></codeline>
<codeline lineno="11028"><highlight class="normal"></highlight></codeline>
<codeline lineno="11029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" kindref="member">permissions</ref>;</highlight></codeline>
<codeline lineno="11030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11031" refid="_c_w_e-79_8c_1aa10c38e158c6289d942d1ffb23edf3d2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aa10c38e158c6289d942d1ffb23edf3d2" kindref="member">UnpackAPIPermissions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>permissions_input,</highlight></codeline>
<codeline lineno="11032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PermissionSet&amp;<sp/>required_permissions,</highlight></codeline>
<codeline lineno="11033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PermissionSet&amp;<sp/>optional_permissions,</highlight></codeline>
<codeline lineno="11034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnpackPermissionSetResult*<sp/>result,</highlight></codeline>
<codeline lineno="11035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string*<sp/>error)<sp/>{</highlight></codeline>
<codeline lineno="11036"><highlight class="normal"><sp/><sp/>PermissionsInfo*<sp/>info<sp/>=<sp/>PermissionsInfo::GetInstance();</highlight></codeline>
<codeline lineno="11037"><highlight class="normal"><sp/><sp/>APIPermissionSet<sp/>apis;</highlight></codeline>
<codeline lineno="11038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>permission_str<sp/>:<sp/>permissions_input)<sp/>{</highlight></codeline>
<codeline lineno="11039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>delimiter<sp/>=<sp/>permission_str.find(kDelimiter);</highlight></codeline>
<codeline lineno="11040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delimiter<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="11041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::StringPiece<sp/>permission_piece(permission_str);</highlight></codeline>
<codeline lineno="11042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;APIPermission&gt;<sp/>permission<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a79dfb66ac4ead27315f3d44996e8dc40" kindref="member">UnpackPermissionWithArguments</ref>(</highlight></codeline>
<codeline lineno="11043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permission_piece.substr(0,<sp/>delimiter),</highlight></codeline>
<codeline lineno="11044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permission_piece.substr(delimiter<sp/>+<sp/>1),<sp/>permission_str,<sp/>error);</highlight></codeline>
<codeline lineno="11045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!permission)</highlight></codeline>
<codeline lineno="11046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11047"><highlight class="normal"></highlight></codeline>
<codeline lineno="11048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apis.insert(std::move(permission));</highlight></codeline>
<codeline lineno="11049"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>APIPermissionInfo*<sp/>permission_info<sp/>=</highlight></codeline>
<codeline lineno="11051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;GetByName(permission_str);</highlight></codeline>
<codeline lineno="11052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!permission_info)<sp/>{</highlight></codeline>
<codeline lineno="11053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>ErrorUtils::FormatErrorMessage(kUnknownPermissionError,</highlight></codeline>
<codeline lineno="11054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permission_str);</highlight></codeline>
<codeline lineno="11055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apis.insert(permission_info-&gt;id());</highlight></codeline>
<codeline lineno="11058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11059"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11060"><highlight class="normal"></highlight></codeline>
<codeline lineno="11061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>api_permission<sp/>:<sp/>apis)<sp/>{</highlight></codeline>
<codeline lineno="11062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(required_permissions.apis().count(api_permission-&gt;id()))<sp/>{</highlight></codeline>
<codeline lineno="11063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;required_apis.insert(api_permission-&gt;id());</highlight></codeline>
<codeline lineno="11064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11065"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11066"><highlight class="normal"></highlight></codeline>
<codeline lineno="11067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!optional_permissions.apis().count(api_permission-&gt;id()))<sp/>{</highlight></codeline>
<codeline lineno="11068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;unlisted_apis.insert(api_permission-&gt;id());</highlight></codeline>
<codeline lineno="11069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11071"><highlight class="normal"></highlight></codeline>
<codeline lineno="11072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!api_permission-&gt;info()-&gt;supports_optional())<sp/>{</highlight></codeline>
<codeline lineno="11073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;unsupported_optional_apis.insert(api_permission-&gt;id());</highlight></codeline>
<codeline lineno="11074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11076"><highlight class="normal"></highlight></codeline>
<codeline lineno="11077"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;optional_apis.insert(api_permission-&gt;id());</highlight></codeline>
<codeline lineno="11078"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11079"><highlight class="normal"></highlight></codeline>
<codeline lineno="11080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11081"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11082" refid="_c_w_e-79_8c_1acf6535a5adccbc8c693ead30ec00e3b9" refkind="member"><highlight class="normal">std::unique_ptr&lt;UnpackPermissionSetResult&gt;<sp/><ref refid="_c_w_e-79_8c_1acf6535a5adccbc8c693ead30ec00e3b9" kindref="member">UnpackPermissionSet</ref>(</highlight></codeline>
<codeline lineno="11083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Permissions&amp;<sp/>permissions_input,</highlight></codeline>
<codeline lineno="11084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PermissionSet&amp;<sp/>required_permissions,</highlight></codeline>
<codeline lineno="11085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PermissionSet&amp;<sp/>optional_permissions,</highlight></codeline>
<codeline lineno="11086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_file_access,</highlight></codeline>
<codeline lineno="11087"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string*<sp/>error)<sp/>{</highlight></codeline>
<codeline lineno="11088"><highlight class="normal"><sp/><sp/>DCHECK(error);</highlight></codeline>
<codeline lineno="11089"><highlight class="normal"></highlight></codeline>
<codeline lineno="11090"><highlight class="normal"></highlight></codeline>
<codeline lineno="11091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>std::make_unique&lt;UnpackPermissionSetResult&gt;();</highlight></codeline>
<codeline lineno="11092"><highlight class="normal"></highlight></codeline>
<codeline lineno="11093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(permissions_input.permissions<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="11094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="_c_w_e-79_8c_1aa10c38e158c6289d942d1ffb23edf3d2" kindref="member">UnpackAPIPermissions</ref>(*permissions_input.permissions,</highlight></codeline>
<codeline lineno="11095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>required_permissions,<sp/>optional_permissions,</highlight></codeline>
<codeline lineno="11096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.get(),<sp/>error))<sp/>{</highlight></codeline>
<codeline lineno="11097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11098"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11099"><highlight class="normal"></highlight></codeline>
<codeline lineno="11100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(permissions_input.origins<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="11101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="_c_w_e-79_8c_1a24f27d728b4352f4744f45db74f69ea3" kindref="member">UnpackOriginPermissions</ref>(*permissions_input.origins,<sp/>required_permissions,</highlight></codeline>
<codeline lineno="11102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optional_permissions,<sp/>allow_file_access,</highlight></codeline>
<codeline lineno="11103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.get(),<sp/>error))<sp/>{</highlight></codeline>
<codeline lineno="11104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11106"><highlight class="normal"></highlight></codeline>
<codeline lineno="11107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="11108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11109" refid="_c_w_e-79_8c_1a79dfb66ac4ead27315f3d44996e8dc40" refkind="member"><highlight class="normal">std::unique_ptr&lt;APIPermission&gt;<sp/><ref refid="_c_w_e-79_8c_1a79dfb66ac4ead27315f3d44996e8dc40" kindref="member">UnpackPermissionWithArguments</ref>(</highlight></codeline>
<codeline lineno="11110"><highlight class="normal"><sp/><sp/><sp/><sp/>base::StringPiece<sp/>permission_name,</highlight></codeline>
<codeline lineno="11111"><highlight class="normal"><sp/><sp/><sp/><sp/>base::StringPiece<sp/>permission_arg,</highlight></codeline>
<codeline lineno="11112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>permission_str,</highlight></codeline>
<codeline lineno="11113"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string*<sp/>error)<sp/>{</highlight></codeline>
<codeline lineno="11114"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;base::Value&gt;<sp/>permission_json<sp/>=</highlight></codeline>
<codeline lineno="11115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-787_8c_1ad736559292abd08bd8de43074a63726b" kindref="member">base::JSONReader::Read</ref>(permission_arg);</highlight></codeline>
<codeline lineno="11116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!permission_json.get())<sp/>{</highlight></codeline>
<codeline lineno="11117"><highlight class="normal"><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>ErrorUtils::FormatErrorMessage(kInvalidParameter,<sp/>permission_str);</highlight></codeline>
<codeline lineno="11118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11120"><highlight class="normal"></highlight></codeline>
<codeline lineno="11121"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;APIPermission&gt;<sp/>permission;</highlight></codeline>
<codeline lineno="11122"><highlight class="normal"></highlight></codeline>
<codeline lineno="11123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>APIPermissionInfo*<sp/>usb_device_permission_info<sp/>=</highlight></codeline>
<codeline lineno="11124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PermissionsInfo::GetInstance()-&gt;GetByID(APIPermission::kUsbDevice);</highlight></codeline>
<codeline lineno="11125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(permission_name<sp/>==<sp/>usb_device_permission_info-&gt;name())<sp/>{</highlight></codeline>
<codeline lineno="11126"><highlight class="normal"><sp/><sp/><sp/><sp/>permission<sp/>=</highlight></codeline>
<codeline lineno="11127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;UsbDevicePermission&gt;(usb_device_permission_info);</highlight></codeline>
<codeline lineno="11128"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11129"><highlight class="normal"><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>kUnsupportedPermissionId;</highlight></codeline>
<codeline lineno="11130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11132"><highlight class="normal"></highlight></codeline>
<codeline lineno="11133"><highlight class="normal"><sp/><sp/>CHECK(permission);</highlight></codeline>
<codeline lineno="11134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!permission-&gt;FromValue(permission_json.get(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="11135"><highlight class="normal"><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>ErrorUtils::FormatErrorMessage(kInvalidParameter,<sp/>permission_str);</highlight></codeline>
<codeline lineno="11136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11138"><highlight class="normal"></highlight></codeline>
<codeline lineno="11139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>permission;</highlight></codeline>
<codeline lineno="11140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11141" refid="_c_w_e-79_8c_1a3f228a9b4a3c188820b5e98ec622c6f5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a3f228a9b4a3c188820b5e98ec622c6f5" kindref="member">AddExtensionAndGrantPermissions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extension&amp;<sp/><ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>)<sp/>{</highlight></codeline>
<codeline lineno="11142"><highlight class="normal"><sp/><sp/><sp/><sp/>PermissionsUpdater<sp/>updater(profile());</highlight></codeline>
<codeline lineno="11143"><highlight class="normal"><sp/><sp/><sp/><sp/>updater.InitializePermissions(&amp;<ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>);</highlight></codeline>
<codeline lineno="11144"><highlight class="normal"><sp/><sp/><sp/><sp/>updater.GrantActivePermissions(&amp;<ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>);</highlight></codeline>
<codeline lineno="11145"><highlight class="normal"><sp/><sp/><sp/><sp/>service()-&gt;AddExtension(&amp;<ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>);</highlight></codeline>
<codeline lineno="11146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11147" refid="_c_w_e-79_8c_1a2e88b0446fc71bde7010d2698f56bb27" refkind="member"><highlight class="normal"><sp/>scoped_refptr&lt;const<sp/>Extension&gt;<sp/><ref refid="_c_w_e-79_8c_1a2e88b0446fc71bde7010d2698f56bb27" kindref="member">CreateExtensionWithPermissions</ref>(</highlight></codeline>
<codeline lineno="11148"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;base::Value&gt;<sp/><ref refid="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" kindref="member">permissions</ref>,</highlight></codeline>
<codeline lineno="11149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,</highlight></codeline>
<codeline lineno="11150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_file_access)<sp/>{</highlight></codeline>
<codeline lineno="11151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>creation_flags<sp/>=<sp/>Extension::NO_FLAGS;</highlight></codeline>
<codeline lineno="11152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allow_file_access)</highlight></codeline>
<codeline lineno="11153"><highlight class="normal"><sp/><sp/><sp/><sp/>creation_flags<sp/>|=<sp/>Extension::ALLOW_FILE_ACCESS;</highlight></codeline>
<codeline lineno="11154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ExtensionBuilder()</highlight></codeline>
<codeline lineno="11155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.SetLocation(Manifest::INTERNAL)</highlight></codeline>
<codeline lineno="11156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.SetManifest(DictionaryBuilder()</highlight></codeline>
<codeline lineno="11157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="_c_w_e-20_8c_1a9078f3a0f246c24961486f729b1aaa34" kindref="member">Set</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>name)</highlight></codeline>
<codeline lineno="11158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="_c_w_e-20_8c_1a9078f3a0f246c24961486f729b1aaa34" kindref="member">Set</ref>(</highlight><highlight class="stringliteral">&quot;description&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="_c_w_e-20_8c_1a9078f3a0f246c24961486f729b1aaa34" kindref="member">Set</ref>(</highlight><highlight class="stringliteral">&quot;manifest_version&quot;</highlight><highlight class="normal">,<sp/>2)</highlight></codeline>
<codeline lineno="11160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="_c_w_e-20_8c_1a9078f3a0f246c24961486f729b1aaa34" kindref="member">Set</ref>(</highlight><highlight class="stringliteral">&quot;version&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0.1.2.3&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="_c_w_e-20_8c_1a9078f3a0f246c24961486f729b1aaa34" kindref="member">Set</ref>(</highlight><highlight class="stringliteral">&quot;permissions&quot;</highlight><highlight class="normal">,<sp/>std::move(<ref refid="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" kindref="member">permissions</ref>))</highlight></codeline>
<codeline lineno="11162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Build())</highlight></codeline>
<codeline lineno="11163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.AddFlags(creation_flags)</highlight></codeline>
<codeline lineno="11164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.SetID(crx_file::id_util::GenerateId(name))</highlight></codeline>
<codeline lineno="11165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Build();</highlight></codeline>
<codeline lineno="11166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11167" refid="_c_w_e-79_8c_1a4d6a04c0d4cdbf29734762746cc7abd9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a4d6a04c0d4cdbf29734762746cc7abd9" kindref="member">PermissionsAPIUnitTest</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="11168" refid="_c_w_e-79_8c_1a1ed60db7eccc323f37d655c5f74cc733" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a1ed60db7eccc323f37d655c5f74cc733" kindref="member">RunContainsFunction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>manifest_permission,</highlight></codeline>
<codeline lineno="11169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>args_string,</highlight></codeline>
<codeline lineno="11170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_file_access)<sp/>{</highlight></codeline>
<codeline lineno="11171"><highlight class="normal"><sp/><sp/><sp/><sp/>SCOPED_TRACE(args_string);</highlight></codeline>
<codeline lineno="11172"><highlight class="normal"><sp/><sp/><sp/><sp/>ListBuilder<sp/>required_permissions;</highlight></codeline>
<codeline lineno="11173"><highlight class="normal"><sp/><sp/><sp/><sp/>required_permissions.Append(manifest_permission);</highlight></codeline>
<codeline lineno="11174"><highlight class="normal"><sp/><sp/><sp/><sp/>scoped_refptr&lt;const<sp/>Extension&gt;<sp/><ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref><sp/>=<sp/><ref refid="_c_w_e-79_8c_1a2e88b0446fc71bde7010d2698f56bb27" kindref="member">CreateExtensionWithPermissions</ref>(</highlight></codeline>
<codeline lineno="11175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>required_permissions.Build(),<sp/></highlight><highlight class="stringliteral">&quot;My<sp/>Extension&quot;</highlight><highlight class="normal">,<sp/>allow_file_access);</highlight></codeline>
<codeline lineno="11176"><highlight class="normal"><sp/><sp/><sp/><sp/>scoped_refptr&lt;PermissionsContainsFunction&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="11177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>PermissionsContainsFunction());</highlight></codeline>
<codeline lineno="11178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">-&gt;set_extension(<ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>.get());</highlight></codeline>
<codeline lineno="11179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>run_result<sp/>=<sp/>extension_function_test_utils::RunFunction(</highlight></codeline>
<codeline lineno="11180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">.</highlight><highlight class="keyword">get</highlight><highlight class="normal">(),<sp/>args_string,<sp/><ref refid="_c_w_e-79_8c_1ad08fd70a885a650dfed64c57ed85082c" kindref="member">browser</ref>(),<sp/>api_test_utils::NONE);</highlight></codeline>
<codeline lineno="11181"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(run_result)<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">-&gt;GetError();</highlight></codeline>
<codeline lineno="11182"><highlight class="normal"></highlight></codeline>
<codeline lineno="11183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_permission;</highlight></codeline>
<codeline lineno="11184"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(function-&gt;GetResultList()-&gt;GetBoolean(0u,<sp/>&amp;has_permission));</highlight></codeline>
<codeline lineno="11185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_permission;</highlight></codeline>
<codeline lineno="11186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11187" refid="_c_w_e-79_8c_1a355d38a7542577bb85aae7d1f75f5e88" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a355d38a7542577bb85aae7d1f75f5e88" kindref="member">RunRequestFunction</ref>(</highlight></codeline>
<codeline lineno="11188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extension&amp;<sp/><ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>,</highlight></codeline>
<codeline lineno="11189"><highlight class="normal"><sp/><sp/><sp/><sp/>Browser*<sp/><ref refid="_c_w_e-79_8c_1ad08fd70a885a650dfed64c57ed85082c" kindref="member">browser</ref>,</highlight></codeline>
<codeline lineno="11190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>args,</highlight></codeline>
<codeline lineno="11191"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;const<sp/>PermissionSet&gt;*<sp/>prompted_permissions_out)<sp/>{</highlight></codeline>
<codeline lineno="11192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>=<sp/>base::MakeRefCounted&lt;PermissionsRequestFunction&gt;();</highlight></codeline>
<codeline lineno="11193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">-&gt;set_user_gesture(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">-&gt;set_extension(&amp;<ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>);</highlight></codeline>
<codeline lineno="11195"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;base::Value&gt;<sp/>result(</highlight></codeline>
<codeline lineno="11196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extension_function_test_utils::RunFunctionAndReturnSingleResult(</highlight></codeline>
<codeline lineno="11197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">.</highlight><highlight class="keyword">get</highlight><highlight class="normal">(),<sp/>args,<sp/><ref refid="_c_w_e-79_8c_1ad08fd70a885a650dfed64c57ed85082c" kindref="member">browser</ref>,<sp/>api_test_utils::NONE));</highlight></codeline>
<codeline lineno="11198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function-&gt;GetError().empty())<sp/>{</highlight></codeline>
<codeline lineno="11199"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>function<sp/>error:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">-&gt;GetError();</highlight></codeline>
<codeline lineno="11200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11202"><highlight class="normal"></highlight></codeline>
<codeline lineno="11203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result<sp/>||<sp/>!result-&gt;is_bool())<sp/>{</highlight></codeline>
<codeline lineno="11204"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>function<sp/>result.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11207"><highlight class="normal"></highlight></codeline>
<codeline lineno="11208"><highlight class="normal"><sp/><sp/>*prompted_permissions_out<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">-&gt;TakePromptedPermissionsForTesting();</highlight></codeline>
<codeline lineno="11209"><highlight class="normal"></highlight></codeline>
<codeline lineno="11210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result-&gt;GetBool();</highlight></codeline>
<codeline lineno="11211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11212" refid="_c_w_e-79_8c_1a5ac4c4360fd66c2aaa278ca2d9823385" refkind="member"><highlight class="normal">std::unique_ptr&lt;base::Value&gt;<sp/><ref refid="_c_w_e-79_8c_1a5ac4c4360fd66c2aaa278ca2d9823385" kindref="member">StringVectorToValue</ref>(</highlight></codeline>
<codeline lineno="11213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>strings)<sp/>{</highlight></codeline>
<codeline lineno="11214"><highlight class="normal"><sp/><sp/>ListBuilder<sp/>builder;</highlight></codeline>
<codeline lineno="11215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>str<sp/>:<sp/>strings)</highlight></codeline>
<codeline lineno="11216"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.Append(str);</highlight></codeline>
<codeline lineno="11217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>builder.Build();</highlight></codeline>
<codeline lineno="11218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11219" refid="_c_w_e-79_8c_1ad08fd70a885a650dfed64c57ed85082c" refkind="member"><highlight class="normal"><sp/><sp/>Browser*<sp/><ref refid="_c_w_e-79_8c_1ad08fd70a885a650dfed64c57ed85082c" kindref="member">browser</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>browser_.get();<sp/>}</highlight></codeline>
<codeline lineno="11220" refid="_c_w_e-79_8c_1a7687a53b1fe4d2834ded01f3fa29a081" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a7687a53b1fe4d2834ded01f3fa29a081" kindref="member">AddPattern</ref>(URLPatternSet*<sp/>extent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>pattern)<sp/>{</highlight></codeline>
<codeline lineno="11221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>schemes<sp/>=<sp/>URLPattern::SCHEME_ALL;</highlight></codeline>
<codeline lineno="11222"><highlight class="normal"><sp/><sp/>extent-&gt;AddPattern(URLPattern(schemes,<sp/>pattern));</highlight></codeline>
<codeline lineno="11223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11224" refid="_c_w_e-79_8c_1a18c3a4fe8a99b9efa9ba744b4202ad7e" refkind="member"><highlight class="normal">scoped_refptr&lt;const<sp/>Extension&gt;<sp/><ref refid="_c_w_e-79_8c_1a18c3a4fe8a99b9efa9ba744b4202ad7e" kindref="member">CreateExtensionWithOptionalPermissions</ref>(</highlight></codeline>
<codeline lineno="11225"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;base::Value&gt;<sp/>optional_permissions,</highlight></codeline>
<codeline lineno="11226"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;base::Value&gt;<sp/><ref refid="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" kindref="member">permissions</ref>,</highlight></codeline>
<codeline lineno="11227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="11228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ExtensionBuilder()</highlight></codeline>
<codeline lineno="11229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.SetLocation(Manifest::INTERNAL)</highlight></codeline>
<codeline lineno="11230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.SetManifest(</highlight></codeline>
<codeline lineno="11231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DictionaryBuilder()</highlight></codeline>
<codeline lineno="11232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="_c_w_e-20_8c_1a9078f3a0f246c24961486f729b1aaa34" kindref="member">Set</ref>(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>name)</highlight></codeline>
<codeline lineno="11233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="_c_w_e-20_8c_1a9078f3a0f246c24961486f729b1aaa34" kindref="member">Set</ref>(</highlight><highlight class="stringliteral">&quot;description&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="_c_w_e-20_8c_1a9078f3a0f246c24961486f729b1aaa34" kindref="member">Set</ref>(</highlight><highlight class="stringliteral">&quot;manifest_version&quot;</highlight><highlight class="normal">,<sp/>2)</highlight></codeline>
<codeline lineno="11235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="_c_w_e-20_8c_1a9078f3a0f246c24961486f729b1aaa34" kindref="member">Set</ref>(</highlight><highlight class="stringliteral">&quot;version&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0.1.2.3&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="_c_w_e-20_8c_1a9078f3a0f246c24961486f729b1aaa34" kindref="member">Set</ref>(</highlight><highlight class="stringliteral">&quot;permissions&quot;</highlight><highlight class="normal">,<sp/>std::move(<ref refid="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" kindref="member">permissions</ref>))</highlight></codeline>
<codeline lineno="11237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="_c_w_e-20_8c_1a9078f3a0f246c24961486f729b1aaa34" kindref="member">Set</ref>(</highlight><highlight class="stringliteral">&quot;optional_permissions&quot;</highlight><highlight class="normal">,<sp/>std::move(optional_permissions))</highlight></codeline>
<codeline lineno="11238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Build())</highlight></codeline>
<codeline lineno="11239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.SetID(crx_file::id_util::GenerateId(name))</highlight></codeline>
<codeline lineno="11240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Build();</highlight></codeline>
<codeline lineno="11241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11242" refid="_c_w_e-79_8c_1a83e0503bde0b09713a7764e20606d74d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a83e0503bde0b09713a7764e20606d74d" kindref="member">PermissionsUpdaterTestDelegate</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="11243" refid="_c_w_e-79_8c_1a372de693ad40b3f42839c8ec6ac845f4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a372de693ad40b3f42839c8ec6ac845f4" kindref="member">Reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="11244"><highlight class="normal"><sp/><sp/><sp/><sp/>received_notification_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11245"><highlight class="normal"><sp/><sp/><sp/><sp/>waiting_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11246"><highlight class="normal"><sp/><sp/><sp/><sp/>extension_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="11247"><highlight class="normal"><sp/><sp/><sp/><sp/>permissions_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="11248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11249" refid="_c_w_e-79_8c_1ade7c17fb79686f6fe6865d28e80d5a92" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ade7c17fb79686f6fe6865d28e80d5a92" kindref="member">Wait</ref>()<sp/>{</highlight></codeline>
<codeline lineno="11250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(received_notification_)</highlight></codeline>
<codeline lineno="11251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11252"><highlight class="normal"></highlight></codeline>
<codeline lineno="11253"><highlight class="normal"><sp/><sp/><sp/><sp/>waiting_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11254"><highlight class="normal"><sp/><sp/><sp/><sp/>base::RunLoop<sp/>run_loop;</highlight></codeline>
<codeline lineno="11255"><highlight class="normal"><sp/><sp/><sp/><sp/>run_loop.Run();</highlight></codeline>
<codeline lineno="11256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11257" refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Extension*<sp/><ref refid="_c_w_e-79_8c_1a88e9698ac909523d48293c482b18db02" kindref="member">extension</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>extension_.get();<sp/>}</highlight></codeline>
<codeline lineno="11258" refid="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PermissionSet*<sp/><ref refid="_c_w_e-79_8c_1ad44145af622916b541f036b1d881f2a0" kindref="member">permissions</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>permissions_.get();<sp/>}</highlight></codeline>
<codeline lineno="11259" refid="_c_w_e-79_8c_1aae1fe56f5ea0265a89f10cf0000f14e9" refkind="member"><highlight class="normal"><sp/><sp/>UpdatedExtensionPermissionsInfo::Reason<sp/><ref refid="_c_w_e-79_8c_1aae1fe56f5ea0265a89f10cf0000f14e9" kindref="member">reason</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reason_;<sp/>}</highlight></codeline>
<codeline lineno="11260" refid="_c_w_e-79_8c_1a8f7a8fbe315a243327d1162794dc02d1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a8f7a8fbe315a243327d1162794dc02d1" kindref="member">received_notification</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>received_notification_;<sp/>}</highlight></codeline>
<codeline lineno="11261"><highlight class="normal">PermissionsData::PageAccess<sp/>PermissionsData::GetContentScriptAccess(</highlight></codeline>
<codeline lineno="11262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL&amp;<sp/>document_url,</highlight></codeline>
<codeline lineno="11263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tab_id,</highlight></codeline>
<codeline lineno="11264"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string*<sp/>error)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11265"><highlight class="normal"><sp/><sp/>base::AutoLock<sp/>auto_lock(runtime_lock_);</highlight></codeline>
<codeline lineno="11266"><highlight class="normal"></highlight></codeline>
<codeline lineno="11267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PermissionSet*<sp/>tab_permissions<sp/>=<sp/>GetTabSpecificPermissions(tab_id);</highlight></codeline>
<codeline lineno="11268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CanRunOnPage(</highlight></codeline>
<codeline lineno="11269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>document_url,<sp/>tab_id,<sp/>active_permissions_unsafe_-&gt;scriptable_hosts(),</highlight></codeline>
<codeline lineno="11270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>withheld_permissions_unsafe_-&gt;scriptable_hosts(),</highlight></codeline>
<codeline lineno="11271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tab_permissions<sp/>?<sp/>&amp;tab_permissions-&gt;scriptable_hosts()<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>error);</highlight></codeline>
<codeline lineno="11272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11273"><highlight class="normal">URLPatternSet<sp/>PermissionsData::GetEffectiveHostPermissions()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11274"><highlight class="normal"><sp/><sp/>base::AutoLock<sp/>auto_lock(runtime_lock_);</highlight></codeline>
<codeline lineno="11275"><highlight class="normal"><sp/><sp/>URLPatternSet<sp/>effective_hosts<sp/>=</highlight></codeline>
<codeline lineno="11276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_permissions_unsafe_-&gt;effective_hosts().Clone();</highlight></codeline>
<codeline lineno="11277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>val<sp/>:<sp/>tab_specific_permissions_)</highlight></codeline>
<codeline lineno="11278"><highlight class="normal"><sp/><sp/><sp/><sp/>effective_hosts.AddPatterns(val.second-&gt;effective_hosts());</highlight></codeline>
<codeline lineno="11279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>effective_hosts;</highlight></codeline>
<codeline lineno="11280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11281"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PermissionsData::SetDefaultPolicyHostRestrictions(</highlight></codeline>
<codeline lineno="11282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>URLPatternSet&amp;<sp/>default_policy_blocked_hosts,</highlight></codeline>
<codeline lineno="11283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>URLPatternSet&amp;<sp/>default_policy_allowed_hosts)<sp/>{</highlight></codeline>
<codeline lineno="11284"><highlight class="normal"><sp/><sp/>default_policy_restrictions.Get().blocked_hosts<sp/>=</highlight></codeline>
<codeline lineno="11285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_policy_blocked_hosts.Clone();</highlight></codeline>
<codeline lineno="11286"><highlight class="normal"><sp/><sp/>default_policy_restrictions.Get().allowed_hosts<sp/>=</highlight></codeline>
<codeline lineno="11287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_policy_allowed_hosts.Clone();</highlight></codeline>
<codeline lineno="11288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11289"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PermissionsData::SetPolicyHostRestrictions(</highlight></codeline>
<codeline lineno="11290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>URLPatternSet&amp;<sp/>policy_blocked_hosts,</highlight></codeline>
<codeline lineno="11291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>URLPatternSet&amp;<sp/>policy_allowed_hosts)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11292"><highlight class="normal"><sp/><sp/>AutoLockOnValidThread<sp/>lock(runtime_lock_,<sp/>thread_checker_.get());</highlight></codeline>
<codeline lineno="11293"><highlight class="normal"><sp/><sp/>policy_blocked_hosts_unsafe_<sp/>=<sp/>policy_blocked_hosts.Clone();</highlight></codeline>
<codeline lineno="11294"><highlight class="normal"><sp/><sp/>policy_allowed_hosts_unsafe_<sp/>=<sp/>policy_allowed_hosts.Clone();</highlight></codeline>
<codeline lineno="11295"><highlight class="normal"><sp/><sp/>uses_default_policy_host_restrictions<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11297"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>URLPatternSet<sp/>PermissionsData::policy_allowed_hosts()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11298"><highlight class="normal"><sp/><sp/>base::AutoLock<sp/>auto_lock(runtime_lock_);</highlight></codeline>
<codeline lineno="11299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PolicyAllowedHostsUnsafe().Clone();</highlight></codeline>
<codeline lineno="11300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11301"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>URLPatternSet<sp/>PermissionsData::policy_blocked_hosts()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11302"><highlight class="normal"><sp/><sp/>base::AutoLock<sp/>auto_lock(runtime_lock_);</highlight></codeline>
<codeline lineno="11303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PolicyBlockedHostsUnsafe().Clone();</highlight></codeline>
<codeline lineno="11304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11305"><highlight class="normal">HTMLTreeBuilderSimulator::HTMLTreeBuilderSimulator(</highlight></codeline>
<codeline lineno="11306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HTMLParserOptions&amp;<sp/>options)</highlight></codeline>
<codeline lineno="11307"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>options_(options),<sp/>in_select_insertion_mode_(false)<sp/>{</highlight></codeline>
<codeline lineno="11308"><highlight class="normal"><sp/><sp/>namespace_stack_.push_back(HTML);</highlight></codeline>
<codeline lineno="11309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11310"><highlight class="normal">HTMLTreeBuilderSimulator::State<sp/>HTMLTreeBuilderSimulator::StateFor(</highlight></codeline>
<codeline lineno="11311"><highlight class="normal"><sp/><sp/><sp/><sp/>HTMLTreeBuilder*<sp/>tree_builder)<sp/>{</highlight></codeline>
<codeline lineno="11312"><highlight class="normal"><sp/><sp/>DCHECK(IsMainThread());</highlight></codeline>
<codeline lineno="11313"><highlight class="normal"><sp/><sp/>State<sp/>namespace_stack;</highlight></codeline>
<codeline lineno="11314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(HTMLElementStack::ElementRecord*<sp/>record<sp/>=</highlight></codeline>
<codeline lineno="11315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree_builder-&gt;OpenElements()-&gt;TopRecord();</highlight></codeline>
<codeline lineno="11316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>record;<sp/>record<sp/>=<sp/>record-&gt;Next())<sp/>{</highlight></codeline>
<codeline lineno="11317"><highlight class="normal"><sp/><sp/><sp/><sp/>Namespace<sp/>current_namespace<sp/>=<sp/>HTML;</highlight></codeline>
<codeline lineno="11318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(record-&gt;NamespaceURI()<sp/>==<sp/>SVGNames::svgNamespaceURI)</highlight></codeline>
<codeline lineno="11319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_namespace<sp/>=<sp/>SVG;</highlight></codeline>
<codeline lineno="11320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(record-&gt;NamespaceURI()<sp/>==<sp/>MathMLNames::mathmlNamespaceURI)</highlight></codeline>
<codeline lineno="11321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_namespace<sp/>=<sp/>kMathML;</highlight></codeline>
<codeline lineno="11322"><highlight class="normal"></highlight></codeline>
<codeline lineno="11323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(namespace_stack.IsEmpty()<sp/>||</highlight></codeline>
<codeline lineno="11324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace_stack.back()<sp/>!=<sp/>current_namespace)</highlight></codeline>
<codeline lineno="11325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>namespace_stack.push_back(current_namespace);</highlight></codeline>
<codeline lineno="11326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11327"><highlight class="normal"><sp/><sp/>namespace_stack.Reverse();</highlight></codeline>
<codeline lineno="11328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>namespace_stack;</highlight></codeline>
<codeline lineno="11329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11330" refid="_c_w_e-79_8c_1a84b0acb38fa8fb623634966ab4b3d60e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a84b0acb38fa8fb623634966ab4b3d60e" kindref="member">TokenExitsForeignContent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CompactHTMLToken&amp;<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="11331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>tag_name<sp/>=<sp/>token.Data();</highlight></codeline>
<codeline lineno="11332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>bTag)<sp/>||<sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>bigTag)<sp/>||</highlight></codeline>
<codeline lineno="11333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>blockquoteTag)<sp/>||</highlight></codeline>
<codeline lineno="11334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>bodyTag)<sp/>||</highlight></codeline>
<codeline lineno="11335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>brTag)<sp/>||</highlight></codeline>
<codeline lineno="11336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>centerTag)<sp/>||</highlight></codeline>
<codeline lineno="11337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>codeTag)<sp/>||</highlight></codeline>
<codeline lineno="11338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>ddTag)<sp/>||</highlight></codeline>
<codeline lineno="11339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>divTag)<sp/>||</highlight></codeline>
<codeline lineno="11340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>dlTag)<sp/>||<sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>dtTag)<sp/>||</highlight></codeline>
<codeline lineno="11341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>emTag)<sp/>||</highlight></codeline>
<codeline lineno="11342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>embedTag)<sp/>||</highlight></codeline>
<codeline lineno="11343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>h1Tag)<sp/>||<sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>h2Tag)<sp/>||</highlight></codeline>
<codeline lineno="11344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>h3Tag)<sp/>||<sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>h4Tag)<sp/>||</highlight></codeline>
<codeline lineno="11345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>h5Tag)<sp/>||<sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>h6Tag)<sp/>||</highlight></codeline>
<codeline lineno="11346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>headTag)<sp/>||</highlight></codeline>
<codeline lineno="11347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>hrTag)<sp/>||<sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>iTag)<sp/>||</highlight></codeline>
<codeline lineno="11348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>imgTag)<sp/>||</highlight></codeline>
<codeline lineno="11349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>liTag)<sp/>||</highlight></codeline>
<codeline lineno="11350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>listingTag)<sp/>||</highlight></codeline>
<codeline lineno="11351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>menuTag)<sp/>||</highlight></codeline>
<codeline lineno="11352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>metaTag)<sp/>||</highlight></codeline>
<codeline lineno="11353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>nobrTag)<sp/>||</highlight></codeline>
<codeline lineno="11354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>olTag)<sp/>||<sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>pTag)<sp/>||</highlight></codeline>
<codeline lineno="11355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>preTag)<sp/>||</highlight></codeline>
<codeline lineno="11356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>rubyTag)<sp/>||</highlight></codeline>
<codeline lineno="11357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>sTag)<sp/>||</highlight></codeline>
<codeline lineno="11358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>smallTag)<sp/>||</highlight></codeline>
<codeline lineno="11359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>spanTag)<sp/>||</highlight></codeline>
<codeline lineno="11360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>strongTag)<sp/>||</highlight></codeline>
<codeline lineno="11361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>strikeTag)<sp/>||</highlight></codeline>
<codeline lineno="11362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>subTag)<sp/>||</highlight></codeline>
<codeline lineno="11363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>supTag)<sp/>||</highlight></codeline>
<codeline lineno="11364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>tableTag)<sp/>||</highlight></codeline>
<codeline lineno="11365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>ttTag)<sp/>||<sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>uTag)<sp/>||</highlight></codeline>
<codeline lineno="11366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>ulTag)<sp/>||</highlight></codeline>
<codeline lineno="11367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>varTag)<sp/>||</highlight></codeline>
<codeline lineno="11368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>fontTag)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="11369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(token.GetAttributeItem(colorAttr)<sp/>||</highlight></codeline>
<codeline lineno="11370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.GetAttributeItem(faceAttr)<sp/>||</highlight></codeline>
<codeline lineno="11371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.GetAttributeItem(sizeAttr)));</highlight></codeline>
<codeline lineno="11372"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="11373" refid="_c_w_e-79_8c_1a9bc13aa915d29324aed5bcd43f2b8113" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a9bc13aa915d29324aed5bcd43f2b8113" kindref="member">TokenExitsInSelect</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CompactHTMLToken&amp;<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="11374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>tag_name<sp/>=<sp/>token.Data();</highlight></codeline>
<codeline lineno="11375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>inputTag)<sp/>||</highlight></codeline>
<codeline lineno="11376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>keygenTag)<sp/>||</highlight></codeline>
<codeline lineno="11377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>textareaTag);</highlight></codeline>
<codeline lineno="11378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11379" refid="_c_w_e-79_8c_1a2170bfdc04db1ea427d590790007d7e3" refkind="member"><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a2170bfdc04db1ea427d590790007d7e3" kindref="member">TokenExitsMath</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CompactHTMLToken&amp;<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="11380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>tag_name<sp/>=<sp/>token.Data();</highlight></codeline>
<codeline lineno="11381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>MathMLNames::miTag)<sp/>||</highlight></codeline>
<codeline lineno="11382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>MathMLNames::moTag)<sp/>||</highlight></codeline>
<codeline lineno="11383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>MathMLNames::mnTag)<sp/>||</highlight></codeline>
<codeline lineno="11384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>MathMLNames::msTag)<sp/>||</highlight></codeline>
<codeline lineno="11385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>MathMLNames::mtextTag);</highlight></codeline>
<codeline lineno="11386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11387" refid="_c_w_e-79_8c_1ae3f072913063235163ebe7da439a415b" refkind="member"><highlight class="normal">SAPI_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ae3f072913063235163ebe7da439a415b" kindref="member">sapi_header_op</ref>(sapi_header_op_enum<sp/>op,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg<sp/>TSRMLS_DC)</highlight></codeline>
<codeline lineno="11388"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11389"><highlight class="normal"><sp/><sp/><sp/><sp/>sapi_header_struct<sp/>sapi_header;</highlight></codeline>
<codeline lineno="11390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*colon_offset;</highlight></codeline>
<codeline lineno="11391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*header_line;</highlight></codeline>
<codeline lineno="11392"><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>header_line_len;</highlight></codeline>
<codeline lineno="11393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>http_response_code;</highlight></codeline>
<codeline lineno="11394"><highlight class="normal"></highlight></codeline>
<codeline lineno="11395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(headers_sent)<sp/>&amp;&amp;<sp/>!SG(request_info).no_headers)<sp/>{</highlight></codeline>
<codeline lineno="11396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output_start_filename<sp/>=<sp/>php_output_get_start_filename(TSRMLS_C);</highlight></codeline>
<codeline lineno="11397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>output_start_lineno<sp/>=<sp/>php_output_get_start_lineno(TSRMLS_C);</highlight></codeline>
<codeline lineno="11398"><highlight class="normal"></highlight></codeline>
<codeline lineno="11399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_start_filename)<sp/>{</highlight></codeline>
<codeline lineno="11400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.sapi_error(E_WARNING,<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>modify<sp/>header<sp/>information<sp/>-<sp/>headers<sp/>already<sp/>sent<sp/>by<sp/>(output<sp/>started<sp/>at<sp/>%s:%d)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="11401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_start_filename,<sp/>output_start_lineno);</highlight></codeline>
<codeline lineno="11402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.sapi_error(E_WARNING,<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>modify<sp/>header<sp/>information<sp/>-<sp/>headers<sp/>already<sp/>sent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="11406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11407"><highlight class="normal"></highlight></codeline>
<codeline lineno="11408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(op)<sp/>{</highlight></codeline>
<codeline lineno="11409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAPI_HEADER_SET_STATUS:</highlight></codeline>
<codeline lineno="11410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a0fd0e1dad1fc523bcae010064e0f2fb0" kindref="member">sapi_update_response_code</ref>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(zend_intptr_t)<sp/>arg<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="11411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>;</highlight></codeline>
<codeline lineno="11412"><highlight class="normal"></highlight></codeline>
<codeline lineno="11413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAPI_HEADER_ADD:</highlight></codeline>
<codeline lineno="11414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAPI_HEADER_REPLACE:</highlight></codeline>
<codeline lineno="11415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAPI_HEADER_DELETE:<sp/>{</highlight></codeline>
<codeline lineno="11416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_header_line<sp/>*<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref><sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="11417"><highlight class="normal"></highlight></codeline>
<codeline lineno="11418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>-&gt;line<sp/>||<sp/>!<ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>-&gt;line_len)<sp/>{</highlight></codeline>
<codeline lineno="11419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="11420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header_line<sp/>=<sp/><ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>-&gt;line;</highlight></codeline>
<codeline lineno="11422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header_line_len<sp/>=<sp/><ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>-&gt;line_len;</highlight></codeline>
<codeline lineno="11423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http_response_code<sp/>=<sp/><ref refid="_c_w_e-125_8c_1ade66e4ccafbc33b117610bbc0d85feb0" kindref="member">p</ref>-&gt;response_code;</highlight></codeline>
<codeline lineno="11424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11426"><highlight class="normal"></highlight></codeline>
<codeline lineno="11427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SAPI_HEADER_DELETE_ALL:</highlight></codeline>
<codeline lineno="11428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.header_handler)<sp/>{</highlight></codeline>
<codeline lineno="11429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.header_handler(&amp;sapi_header,<sp/>op,<sp/>&amp;SG(sapi_headers)<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="11430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zend_llist_clean(&amp;SG(sapi_headers).headers);</highlight></codeline>
<codeline lineno="11432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>;</highlight></codeline>
<codeline lineno="11433"><highlight class="normal"></highlight></codeline>
<codeline lineno="11434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="11436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11437"><highlight class="normal"></highlight></codeline>
<codeline lineno="11438"><highlight class="normal"><sp/><sp/><sp/><sp/>header_line<sp/>=<sp/>estrndup(header_line,<sp/>header_line_len);</highlight></codeline>
<codeline lineno="11439"><highlight class="normal"></highlight></codeline>
<codeline lineno="11440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>cut<sp/>off<sp/>trailing<sp/>spaces,<sp/>linefeeds<sp/>and<sp/>carriage-returns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header_line_len<sp/>&amp;&amp;<sp/>isspace(header_line[header_line_len-1]))<sp/>{</highlight></codeline>
<codeline lineno="11442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header_line_len--;</highlight></codeline>
<codeline lineno="11444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(header_line_len<sp/>&amp;&amp;<sp/>isspace(header_line[header_line_len-1]));</highlight></codeline>
<codeline lineno="11445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header_line[header_line_len]=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="11448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op<sp/>==<sp/>SAPI_HEADER_DELETE)<sp/>{</highlight></codeline>
<codeline lineno="11449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr(header_line,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="11450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(header_line);</highlight></codeline>
<codeline lineno="11451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.sapi_error(E_WARNING,<sp/></highlight><highlight class="stringliteral">&quot;Header<sp/>to<sp/>delete<sp/>may<sp/>not<sp/>contain<sp/>colon.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="11453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_module.header_handler)<sp/>{</highlight></codeline>
<codeline lineno="11455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_header.header<sp/>=<sp/>header_line;</highlight></codeline>
<codeline lineno="11456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_header.header_len<sp/>=<sp/>header_line_len;</highlight></codeline>
<codeline lineno="11457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.header_handler(&amp;sapi_header,<sp/>op,<sp/>&amp;SG(sapi_headers)<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="11458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aa0fe6f09d794f9cacb4f67042d5852bd" kindref="member">sapi_remove_header</ref>(&amp;SG(sapi_headers).headers,<sp/>header_line,<sp/>header_line_len);</highlight></codeline>
<codeline lineno="11460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(header_line);</highlight></codeline>
<codeline lineno="11461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>;</highlight></codeline>
<codeline lineno="11462"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>new<sp/>line/NUL<sp/>character<sp/>safety<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="11465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>header_line_len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="11466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RFC<sp/>2616<sp/>allows<sp/>new<sp/>lines<sp/>if<sp/>followed<sp/>by<sp/>SP<sp/>or<sp/>HT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>illegal_break<sp/>=</highlight></codeline>
<codeline lineno="11468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(header_line[i+1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>header_line[i+1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(</highlight></codeline>
<codeline lineno="11470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header_line[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(header_line[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>header_line[i+1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="11472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(illegal_break)<sp/>{</highlight></codeline>
<codeline lineno="11473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(header_line);</highlight></codeline>
<codeline lineno="11474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.sapi_error(E_WARNING,<sp/></highlight><highlight class="stringliteral">&quot;Header<sp/>may<sp/>not<sp/>contain<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;more<sp/>than<sp/>a<sp/>single<sp/>header,<sp/>new<sp/>line<sp/>detected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="11477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header_line[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="11479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(header_line);</highlight></codeline>
<codeline lineno="11480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_module.sapi_error(E_WARNING,<sp/></highlight><highlight class="stringliteral">&quot;Header<sp/>may<sp/>not<sp/>contain<sp/>NUL<sp/>bytes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="11482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11485"><highlight class="normal"></highlight></codeline>
<codeline lineno="11486"><highlight class="normal"><sp/><sp/><sp/><sp/>sapi_header.header<sp/>=<sp/>header_line;</highlight></codeline>
<codeline lineno="11487"><highlight class="normal"><sp/><sp/><sp/><sp/>sapi_header.header_len<sp/>=<sp/>header_line_len;</highlight></codeline>
<codeline lineno="11488"><highlight class="normal"></highlight></codeline>
<codeline lineno="11489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>header<sp/>for<sp/>a<sp/>few<sp/>cases<sp/>that<sp/>we<sp/>have<sp/>special<sp/>support<sp/>for<sp/>in<sp/>SAPI<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header_line_len&gt;=5<sp/></highlight></codeline>
<codeline lineno="11491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!strncasecmp(header_line,<sp/></highlight><highlight class="stringliteral">&quot;HTTP/&quot;</highlight><highlight class="normal">,<sp/>5))<sp/>{</highlight></codeline>
<codeline lineno="11492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>filter<sp/>out<sp/>the<sp/>response<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a0fd0e1dad1fc523bcae010064e0f2fb0" kindref="member">sapi_update_response_code</ref>(<ref refid="_c_w_e-79_8c_1a7a0f9ce713c19f065fa08bababef22cb" kindref="member">sapi_extract_response_code</ref>(header_line)<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="11494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sapi_update_response_code<sp/>doesn&apos;t<sp/>free<sp/>the<sp/>status<sp/>line<sp/>if<sp/>the<sp/>code<sp/>didn&apos;t<sp/>change<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(sapi_headers).http_status_line)<sp/>{</highlight></codeline>
<codeline lineno="11496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(SG(sapi_headers).http_status_line);</highlight></codeline>
<codeline lineno="11497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(sapi_headers).http_status_line<sp/>=<sp/>header_line;</highlight></codeline>
<codeline lineno="11499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>;</highlight></codeline>
<codeline lineno="11500"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colon_offset<sp/>=<sp/>strchr(header_line,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colon_offset)<sp/>{</highlight></codeline>
<codeline lineno="11503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*colon_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!STRCASECMP(header_line,<sp/></highlight><highlight class="stringliteral">&quot;Content-Type&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="11505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>colon_offset+1,<sp/>*mimetype<sp/>=<sp/>NULL,<sp/>*newheader;</highlight></codeline>
<codeline lineno="11506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>header_line_len<sp/>-<sp/>(ptr<sp/>-<sp/>header_line),<sp/>newlen;</highlight></codeline>
<codeline lineno="11507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*ptr<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="11508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr++;</highlight></codeline>
<codeline lineno="11509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len--;</highlight></codeline>
<codeline lineno="11510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11511"><highlight class="normal"></highlight></codeline>
<codeline lineno="11512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>possible<sp/>output<sp/>compression<sp/>for<sp/>images<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(ptr,<sp/></highlight><highlight class="stringliteral">&quot;image/&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;image/&quot;</highlight><highlight class="normal">)-1))<sp/>{</highlight></codeline>
<codeline lineno="11514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zend_alter_ini_entry(</highlight><highlight class="stringliteral">&quot;zlib.output_compression&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;zlib.output_compression&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)<sp/>-<sp/>1,<sp/>PHP_INI_USER,<sp/>PHP_INI_STAGE_RUNTIME);</highlight></codeline>
<codeline lineno="11515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11516"><highlight class="normal"></highlight></codeline>
<codeline lineno="11517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mimetype<sp/>=<sp/>estrdup(ptr);</highlight></codeline>
<codeline lineno="11518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newlen<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a40a6968974920b2c2493a7086a25971e" kindref="member">sapi_apply_default_charset</ref>(&amp;mimetype,<sp/>len<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="11519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!SG(sapi_headers).mimetype){</highlight></codeline>
<codeline lineno="11520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(sapi_headers).mimetype<sp/>=<sp/>estrdup(mimetype);</highlight></codeline>
<codeline lineno="11521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11522"><highlight class="normal"></highlight></codeline>
<codeline lineno="11523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newlen<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="11524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newlen<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Content-type:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newheader<sp/>=<sp/>emalloc(newlen);</highlight></codeline>
<codeline lineno="11526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PHP_STRLCPY(newheader,<sp/></highlight><highlight class="stringliteral">&quot;Content-type:<sp/>&quot;</highlight><highlight class="normal">,<sp/>newlen,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Content-type:<sp/>&quot;</highlight><highlight class="normal">)-1);</highlight></codeline>
<codeline lineno="11527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strlcat(newheader,<sp/>mimetype,<sp/>newlen);</highlight></codeline>
<codeline lineno="11528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_header.header<sp/>=<sp/>newheader;</highlight></codeline>
<codeline lineno="11529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sapi_header.header_len<sp/>=<sp/>newlen<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="11530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(header_line);</highlight></codeline>
<codeline lineno="11531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>efree(mimetype);</highlight></codeline>
<codeline lineno="11533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(sapi_headers).send_default_content_type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!STRCASECMP(header_line,<sp/></highlight><highlight class="stringliteral">&quot;Content-Length&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="11535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Script<sp/>is<sp/>setting<sp/>Content-length.<sp/>The<sp/>script<sp/>cannot<sp/>reasonably</highlight></codeline>
<codeline lineno="11536"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>know<sp/>the<sp/>size<sp/>of<sp/>the<sp/>message<sp/>body<sp/>after<sp/>compression,<sp/>so<sp/>it&apos;s<sp/>best</highlight></codeline>
<codeline lineno="11537"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>do<sp/>disable<sp/>compression<sp/>altogether.<sp/>This<sp/>contributes<sp/>to<sp/>making<sp/>scripts</highlight></codeline>
<codeline lineno="11538"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>portable<sp/>between<sp/>setups<sp/>that<sp/>have<sp/>and<sp/>don&apos;t<sp/>have<sp/>zlib<sp/>compression</highlight></codeline>
<codeline lineno="11539"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>enabled<sp/>globally.<sp/>See<sp/>req<sp/>#44164<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zend_alter_ini_entry(</highlight><highlight class="stringliteral">&quot;zlib.output_compression&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;zlib.output_compression&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="11541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)<sp/>-<sp/>1,<sp/>PHP_INI_USER,<sp/>PHP_INI_STAGE_RUNTIME);</highlight></codeline>
<codeline lineno="11542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!STRCASECMP(header_line,<sp/></highlight><highlight class="stringliteral">&quot;Location&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="11543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((SG(sapi_headers).http_response_code<sp/>&lt;<sp/>300<sp/>||</highlight></codeline>
<codeline lineno="11544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(sapi_headers).http_response_code<sp/>&gt;<sp/>399)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="11545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(sapi_headers).http_response_code<sp/>!=<sp/>201)<sp/>{</highlight></codeline>
<codeline lineno="11546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>a<sp/>Found<sp/>Redirect<sp/>if<sp/>one<sp/>is<sp/>not<sp/>already<sp/>specified<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(http_response_code)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>user<sp/>specified<sp/>redirect<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a0fd0e1dad1fc523bcae010064e0f2fb0" kindref="member">sapi_update_response_code</ref>(http_response_code<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="11549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SG(request_info).proto_num<sp/>&gt;<sp/>1000<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="11550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG(request_info).<ref refid="_c_w_e-20_8c_1aa31a1709fa11916c793adcd69392520b" kindref="member">request_method</ref><sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="11551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(SG(request_info).<ref refid="_c_w_e-20_8c_1aa31a1709fa11916c793adcd69392520b" kindref="member">request_method</ref>,<sp/></highlight><highlight class="stringliteral">&quot;HEAD&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="11552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(SG(request_info).<ref refid="_c_w_e-20_8c_1aa31a1709fa11916c793adcd69392520b" kindref="member">request_method</ref>,<sp/></highlight><highlight class="stringliteral">&quot;GET&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="11553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a0fd0e1dad1fc523bcae010064e0f2fb0" kindref="member">sapi_update_response_code</ref>(303<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="11554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a0fd0e1dad1fc523bcae010064e0f2fb0" kindref="member">sapi_update_response_code</ref>(302<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="11556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!STRCASECMP(header_line,<sp/></highlight><highlight class="stringliteral">&quot;WWW-Authenticate&quot;</highlight><highlight class="normal">))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>HTTP<sp/>Authentication<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a0fd0e1dad1fc523bcae010064e0f2fb0" kindref="member">sapi_update_response_code</ref>(401<sp/>TSRMLS_CC);<sp/></highlight><highlight class="comment">/*<sp/>authentication-required<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sapi_header.header==header_line)<sp/>{</highlight></codeline>
<codeline lineno="11562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*colon_offset<sp/>=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(http_response_code)<sp/>{</highlight></codeline>
<codeline lineno="11567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a0fd0e1dad1fc523bcae010064e0f2fb0" kindref="member">sapi_update_response_code</ref>(http_response_code<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="11568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ad42bb4c1037e286c3f894393ce47a953" kindref="member">sapi_header_add_op</ref>(op,<sp/>&amp;sapi_header<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="11570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>;</highlight></codeline>
<codeline lineno="11571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11572" refid="_c_w_e-79_8c_1a54a4a77f4e85a662ead293d3102c30ac" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a54a4a77f4e85a662ead293d3102c30ac" kindref="member">php_handler</ref>(request_rec<sp/>*r)</highlight></codeline>
<codeline lineno="11573"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11574"><highlight class="normal"><sp/><sp/><sp/><sp/>php_struct<sp/>*<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>ctx;</highlight></codeline>
<codeline lineno="11575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*conf;</highlight></codeline>
<codeline lineno="11576"><highlight class="normal"><sp/><sp/><sp/><sp/>apr_bucket_brigade<sp/>*<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>brigade;</highlight></codeline>
<codeline lineno="11577"><highlight class="normal"><sp/><sp/><sp/><sp/>apr_bucket<sp/>*bucket;</highlight></codeline>
<codeline lineno="11578"><highlight class="normal"><sp/><sp/><sp/><sp/>apr_status_t<sp/>rv;</highlight></codeline>
<codeline lineno="11579"><highlight class="normal"><sp/><sp/><sp/><sp/>request_rec<sp/>*<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>parent_req<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="11580"><highlight class="normal"><sp/><sp/><sp/><sp/>TSRMLS_FETCH();</highlight></codeline>
<codeline lineno="11581"><highlight class="normal"></highlight></codeline>
<codeline lineno="11582"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PHPAP_INI_OFF<sp/>php_apache_ini_dtor(r,<sp/>parent_req<sp/>TSRMLS_CC);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11583"><highlight class="normal"></highlight></codeline>
<codeline lineno="11584"><highlight class="normal"><sp/><sp/><sp/><sp/>conf<sp/>=<sp/>ap_get_module_config(r-&gt;per_dir_config,<sp/>&amp;php5_module);</highlight></codeline>
<codeline lineno="11585"><highlight class="normal"></highlight></codeline>
<codeline lineno="11586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>apply_config()<sp/>needs<sp/>r<sp/>in<sp/>some<sp/>cases,<sp/>so<sp/>allocate<sp/>server_context<sp/>early<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11587"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>SG(server_context);</highlight></codeline>
<codeline lineno="11588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx<sp/>==<sp/>NULL<sp/>||<sp/>(ctx<sp/>&amp;&amp;<sp/>ctx-&gt;request_processed<sp/>&amp;&amp;<sp/>!strcmp(r-&gt;protocol,<sp/></highlight><highlight class="stringliteral">&quot;INCLUDED&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="11589"><highlight class="normal">normal:</highlight></codeline>
<codeline lineno="11590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>SG(server_context)<sp/>=<sp/>apr_pcalloc(r-&gt;pool,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*ctx));</highlight></codeline>
<codeline lineno="11591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>register<sp/>a<sp/>cleanup<sp/>so<sp/>we<sp/>clear<sp/>out<sp/>the<sp/>SG(server_context)</highlight></codeline>
<codeline lineno="11592"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>after<sp/>each<sp/>request.<sp/>Note:<sp/>We<sp/>pass<sp/>in<sp/>the<sp/>pointer<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="11593"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>server_context<sp/>in<sp/>case<sp/>this<sp/>is<sp/>handled<sp/>by<sp/>a<sp/>different<sp/>thread.</highlight></codeline>
<codeline lineno="11594"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_pool_cleanup_register(r-&gt;pool,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;SG(server_context),<sp/><ref refid="_c_w_e-20_8c_1af1df7f9267e5c4e639236dcab9c0ed2a" kindref="member">php_server_context_cleanup</ref>,<sp/>apr_pool_cleanup_null);</highlight></codeline>
<codeline lineno="11596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;r<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="11597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">/*<sp/>May<sp/>look<sp/>weird<sp/>to<sp/>null<sp/>it<sp/>here,<sp/>but<sp/>it<sp/>is<sp/>to<sp/>catch<sp/>the<sp/>right<sp/>case<sp/>in<sp/>the<sp/>first_try<sp/>later<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11598"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_req<sp/>=<sp/>ctx-&gt;r;</highlight></codeline>
<codeline lineno="11600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;r<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="11601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11602"><highlight class="normal"><sp/><sp/><sp/><sp/>apply_config(conf);</highlight></codeline>
<codeline lineno="11603"><highlight class="normal"></highlight></codeline>
<codeline lineno="11604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(r-&gt;handler,<sp/>PHP_MAGIC_TYPE)<sp/>&amp;&amp;<sp/>strcmp(r-&gt;handler,<sp/>PHP_SOURCE_MAGIC_TYPE)<sp/>&amp;&amp;<sp/>strcmp(r-&gt;handler,<sp/>PHP_SCRIPT))<sp/>{</highlight></codeline>
<codeline lineno="11605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>xbithack<sp/>in<sp/>this<sp/>case.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!AP2(xbithack)<sp/>||<sp/>strcmp(r-&gt;handler,<sp/></highlight><highlight class="stringliteral">&quot;text/html&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!(r-&gt;finfo.protection<sp/>&amp;<sp/>APR_UEXECUTE))<sp/>{</highlight></codeline>
<codeline lineno="11607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a9ec263e4fff9d2f9abebeb60ad1961ce" kindref="member">PHPAP_INI_OFF</ref>;</highlight></codeline>
<codeline lineno="11608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DECLINED;</highlight></codeline>
<codeline lineno="11609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11611"><highlight class="normal"></highlight></codeline>
<codeline lineno="11612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Give<sp/>a<sp/>404<sp/>if<sp/>PATH_INFO<sp/>is<sp/>used<sp/>but<sp/>is<sp/>explicitly<sp/>disabled<sp/>in</highlight></codeline>
<codeline lineno="11613"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>configuration;<sp/>default<sp/>behaviour<sp/>is<sp/>to<sp/>accept.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;used_path_info<sp/>==<sp/>AP_REQ_REJECT_PATH_INFO</highlight></codeline>
<codeline lineno="11615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>r-&gt;path_info<sp/>&amp;&amp;<sp/>r-&gt;path_info[0])<sp/>{</highlight></codeline>
<codeline lineno="11616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a9ec263e4fff9d2f9abebeb60ad1961ce" kindref="member">PHPAP_INI_OFF</ref>;</highlight></codeline>
<codeline lineno="11617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTTP_NOT_FOUND;</highlight></codeline>
<codeline lineno="11618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11619"><highlight class="normal"></highlight></codeline>
<codeline lineno="11620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>handle<sp/>situations<sp/>where<sp/>user<sp/>turns<sp/>the<sp/>engine<sp/>off<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!AP2(engine))<sp/>{</highlight></codeline>
<codeline lineno="11622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a9ec263e4fff9d2f9abebeb60ad1961ce" kindref="member">PHPAP_INI_OFF</ref>;</highlight></codeline>
<codeline lineno="11623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DECLINED;</highlight></codeline>
<codeline lineno="11624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11625"><highlight class="normal"></highlight></codeline>
<codeline lineno="11626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;finfo.filetype<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="11627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a51e351e264c4232186edee8ad8e79311" kindref="member">php_apache_sapi_log_message_ex</ref>(</highlight><highlight class="stringliteral">&quot;script<sp/>&apos;%s&apos;<sp/>not<sp/>found<sp/>or<sp/>unable<sp/>to<sp/>stat&quot;</highlight><highlight class="normal">,<sp/>r<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="11628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a9ec263e4fff9d2f9abebeb60ad1961ce" kindref="member">PHPAP_INI_OFF</ref>;</highlight></codeline>
<codeline lineno="11629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTTP_NOT_FOUND;</highlight></codeline>
<codeline lineno="11630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;finfo.filetype<sp/>==<sp/>APR_DIR)<sp/>{</highlight></codeline>
<codeline lineno="11632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a51e351e264c4232186edee8ad8e79311" kindref="member">php_apache_sapi_log_message_ex</ref>(</highlight><highlight class="stringliteral">&quot;attempt<sp/>to<sp/>invoke<sp/>directory<sp/>&apos;%s&apos;<sp/>as<sp/>script&quot;</highlight><highlight class="normal">,<sp/>r<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="11633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a9ec263e4fff9d2f9abebeb60ad1961ce" kindref="member">PHPAP_INI_OFF</ref>;</highlight></codeline>
<codeline lineno="11634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HTTP_FORBIDDEN;</highlight></codeline>
<codeline lineno="11635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11636"><highlight class="normal"></highlight></codeline>
<codeline lineno="11637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Setup<sp/>the<sp/>CGI<sp/>variables<sp/>if<sp/>this<sp/>is<sp/>the<sp/>main<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;main<sp/>==<sp/>NULL<sp/>||</highlight></codeline>
<codeline lineno="11639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>..<sp/>or<sp/>if<sp/>the<sp/>sub-request<sp/>environment<sp/>differs<sp/>from<sp/>the<sp/>main-request.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;subprocess_env<sp/>!=<sp/>r-&gt;main-&gt;subprocess_env</highlight></codeline>
<codeline lineno="11641"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>setup<sp/>standard<sp/>CGI<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ap_add_common_vars(r);</highlight></codeline>
<codeline lineno="11644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ap_add_cgi_vars(r);</highlight></codeline>
<codeline lineno="11645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11646"><highlight class="normal"></highlight></codeline>
<codeline lineno="11647"><highlight class="normal">zend_first_try<sp/>{</highlight></codeline>
<codeline lineno="11648"><highlight class="normal"></highlight></codeline>
<codeline lineno="11649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="11650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brigade<sp/>=<sp/>apr_brigade_create(r-&gt;pool,<sp/>r-&gt;connection-&gt;bucket_alloc);</highlight></codeline>
<codeline lineno="11651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx<sp/>=<sp/>SG(server_context);</highlight></codeline>
<codeline lineno="11652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;brigade<sp/>=<sp/>brigade;</highlight></codeline>
<codeline lineno="11653"><highlight class="normal"></highlight></codeline>
<codeline lineno="11654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1af62b3996f83275f2e0514274b1730293" kindref="member">php_apache_request_ctor</ref>(r,<sp/>ctx<sp/>TSRMLS_CC)!=<ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="11655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zend_bailout();</highlight></codeline>
<codeline lineno="11656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11657"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parent_req)<sp/>{</highlight></codeline>
<codeline lineno="11659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_req<sp/>=<sp/>ctx-&gt;r;</highlight></codeline>
<codeline lineno="11660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent_req<sp/>&amp;&amp;<sp/>parent_req-&gt;handler<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="11662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(parent_req-&gt;handler,<sp/>PHP_MAGIC_TYPE)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="11663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(parent_req-&gt;handler,<sp/>PHP_SOURCE_MAGIC_TYPE)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="11664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(parent_req-&gt;handler,<sp/>PHP_SCRIPT))<sp/>{</highlight></codeline>
<codeline lineno="11665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1af62b3996f83275f2e0514274b1730293" kindref="member">php_apache_request_ctor</ref>(r,<sp/>ctx<sp/>TSRMLS_CC)!=<ref refid="_c_w_e-416_8c_1a48b99cf368a45012ab09b826df3b90a4" kindref="member">SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="11666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zend_bailout();</highlight></codeline>
<codeline lineno="11667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11669"><highlight class="normal"></highlight></codeline>
<codeline lineno="11670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="11671"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>check<sp/>if<sp/>coming<sp/>due<sp/>to<sp/>ErrorDocument</highlight></codeline>
<codeline lineno="11672"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>We<sp/>make<sp/>a<sp/>special<sp/>exception<sp/>of<sp/>413<sp/>(Invalid<sp/>POST<sp/>request)<sp/>as<sp/>the<sp/>invalidity<sp/>of<sp/>the<sp/>request<sp/>occurs</highlight></codeline>
<codeline lineno="11673"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>during<sp/>processing<sp/>of<sp/>the<sp/>request<sp/>by<sp/>PHP<sp/>during<sp/>POST<sp/>processing.<sp/>Therefor<sp/>we<sp/>need<sp/>to<sp/>re-use<sp/>the<sp/>exiting</highlight></codeline>
<codeline lineno="11674"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>PHP<sp/>instance<sp/>to<sp/>handle<sp/>the<sp/>request<sp/>rather<sp/>then<sp/>creating<sp/>a<sp/>new<sp/>one.</highlight></codeline>
<codeline lineno="11675"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent_req<sp/>&amp;&amp;<sp/>parent_req-&gt;status<sp/>!=<sp/>HTTP_OK<sp/>&amp;&amp;<sp/>parent_req-&gt;status<sp/>!=<sp/>413<sp/>&amp;&amp;<sp/>strcmp(r-&gt;protocol,<sp/></highlight><highlight class="stringliteral">&quot;INCLUDED&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="11677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_req<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="11678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>normal;</highlight></codeline>
<codeline lineno="11679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;r<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="11681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>brigade<sp/>=<sp/>ctx-&gt;brigade;</highlight></codeline>
<codeline lineno="11682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11683"><highlight class="normal"></highlight></codeline>
<codeline lineno="11684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AP2(<ref refid="_c_w_e-416_8c_1ab528d402be5568b1e8a1111648c604ab" kindref="member">last_modified</ref>))<sp/>{</highlight></codeline>
<codeline lineno="11685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ap_update_mtime(r,<sp/>r-&gt;finfo.mtime);</highlight></codeline>
<codeline lineno="11686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ap_set_last_modified(r);</highlight></codeline>
<codeline lineno="11687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11688"><highlight class="normal"></highlight></codeline>
<codeline lineno="11689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Determine<sp/>if<sp/>we<sp/>need<sp/>to<sp/>parse<sp/>the<sp/>file<sp/>or<sp/>show<sp/>the<sp/>source<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(r-&gt;handler,<sp/>PHP_SOURCE_MAGIC_TYPE,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PHP_SOURCE_MAGIC_TYPE)<sp/>-<sp/>1)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="11691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zend_syntax_highlighter_ini<sp/>syntax_highlighter_ini;</highlight></codeline>
<codeline lineno="11692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>php_get_highlight_struct(&amp;syntax_highlighter_ini);</highlight></codeline>
<codeline lineno="11693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a7d317f492d8d825dab5f51b4b82f4216" kindref="member">highlight_file</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)r-&gt;filename,<sp/>&amp;syntax_highlighter_ini<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="11694"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zend_file_handle<sp/>zfd;</highlight></codeline>
<codeline lineno="11696"><highlight class="normal"></highlight></codeline>
<codeline lineno="11697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zfd.type<sp/>=<sp/>ZEND_HANDLE_FILENAME;</highlight></codeline>
<codeline lineno="11698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zfd.filename<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>r-&gt;filename;</highlight></codeline>
<codeline lineno="11699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zfd.free_filename<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zfd.opened_path<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="11701"><highlight class="normal"></highlight></codeline>
<codeline lineno="11702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a7734f8b2c328f4fd387908b604be6d73" kindref="member">if</ref><sp/>(!parent_req)<sp/>{</highlight></codeline>
<codeline lineno="11703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>php_execute_script(&amp;zfd<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="11704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zend_execute_scripts(ZEND_INCLUDE<sp/>TSRMLS_CC,<sp/>NULL,<sp/>1,<sp/>&amp;zfd);</highlight></codeline>
<codeline lineno="11706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11707"><highlight class="normal"></highlight></codeline>
<codeline lineno="11708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_table_set(r-&gt;notes,<sp/></highlight><highlight class="stringliteral">&quot;mod_php_memory_usage&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="11709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_psprintf(ctx-&gt;r-&gt;pool,<sp/></highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal"><sp/>APR_SIZE_T_FMT,<sp/>zend_memory_peak_usage(1<sp/>TSRMLS_CC)));</highlight></codeline>
<codeline lineno="11710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11711"><highlight class="normal"></highlight></codeline>
<codeline lineno="11712"><highlight class="normal">}<sp/>zend_end_try();</highlight></codeline>
<codeline lineno="11713"><highlight class="normal"></highlight></codeline>
<codeline lineno="11714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parent_req)<sp/>{</highlight></codeline>
<codeline lineno="11715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a3b24ca832f9cfec8796c814b05aaf0c7" kindref="member">php_apache_request_dtor</ref>(r<sp/>TSRMLS_CC);</highlight></codeline>
<codeline lineno="11716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;request_processed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="11717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bucket<sp/>=<sp/>apr_bucket_eos_create(r-&gt;connection-&gt;bucket_alloc);</highlight></codeline>
<codeline lineno="11718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>APR_BRIGADE_INSERT_TAIL(brigade,<sp/>bucket);</highlight></codeline>
<codeline lineno="11719"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="11720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>ap_pass_brigade(r-&gt;output_filters,<sp/>brigade);</highlight></codeline>
<codeline lineno="11721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rv<sp/>!=<sp/>APR_SUCCESS<sp/>||<sp/>r-&gt;connection-&gt;aborted)<sp/>{</highlight></codeline>
<codeline lineno="11722"><highlight class="normal">zend_first_try<sp/>{</highlight></codeline>
<codeline lineno="11723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>php_handle_aborted_connection();</highlight></codeline>
<codeline lineno="11724"><highlight class="normal">}<sp/>zend_end_try();</highlight></codeline>
<codeline lineno="11725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_brigade_cleanup(brigade);</highlight></codeline>
<codeline lineno="11727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apr_pool_cleanup_run(r-&gt;pool,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;SG(server_context),<sp/><ref refid="_c_w_e-20_8c_1af1df7f9267e5c4e639236dcab9c0ed2a" kindref="member">php_server_context_cleanup</ref>);</highlight></codeline>
<codeline lineno="11728"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;r<sp/>=<sp/>parent_req;</highlight></codeline>
<codeline lineno="11730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11731"><highlight class="normal"></highlight></codeline>
<codeline lineno="11732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OK;</highlight></codeline>
<codeline lineno="11733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11734"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowFrameView::ButtonPressed(views::Button*<sp/>sender,</highlight></codeline>
<codeline lineno="11735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>views::Event&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline lineno="11736"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sender<sp/>==<sp/>close_button_)</highlight></codeline>
<codeline lineno="11737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>frame_-&gt;Close();</highlight></codeline>
<codeline lineno="11738"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="11739"><highlight class="normal"><sp/>views::NonClientFrameView*<sp/>ShellWindowViews::CreateNonClientFrameView(</highlight></codeline>
<codeline lineno="11740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>views::Widget*<sp/>widget)<sp/>{</highlight></codeline>
<codeline lineno="11741"><highlight class="normal"><sp/><sp/>ShellWindowFrameView*<sp/>frame_view<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ShellWindowFrameView();</highlight></codeline>
<codeline lineno="11742"><highlight class="normal"><sp/><sp/><sp/>frame_view-&gt;Init(window_);</highlight></codeline>
<codeline lineno="11743"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frame_view;</highlight></codeline>
<codeline lineno="11744"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="11745"><highlight class="normal"><sp/>gfx::Rect<sp/>ShellWindowFrameView::GetBoundsForClientView()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame_-&gt;IsFullscreen())</highlight></codeline>
<codeline lineno="11747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bounds();</highlight></codeline>
<codeline lineno="11748"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfx::Rect(0,<sp/>kCaptionHeight,<sp/>width(),</highlight></codeline>
<codeline lineno="11749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-787_8c_1affe776513b24d84b39af8ab0930fef7f" kindref="member">std::max</ref>(0,<sp/>height()<sp/>-<sp/>kCaptionHeight));</highlight></codeline>
<codeline lineno="11750"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="11751"><highlight class="normal"><sp/>gfx::Size<sp/>ShellWindowFrameView::GetMaximumSize()<sp/>{</highlight></codeline>
<codeline lineno="11752"><highlight class="normal"><sp/><sp/><sp/>gfx::Size<sp/>max_size<sp/>=<sp/>frame_-&gt;client_view()-&gt;GetMaximumSize();</highlight></codeline>
<codeline lineno="11753"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!max_size.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="11754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>gfx::Rect<sp/>client_bounds<sp/>=<sp/>GetBoundsForClientView();</highlight></codeline>
<codeline lineno="11755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>max_size.Enlarge(0,<sp/>client_bounds.y());</highlight></codeline>
<codeline lineno="11756"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_size;</highlight></codeline>
<codeline lineno="11758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11759"><highlight class="normal"><sp/>gfx::Size<sp/>ShellWindowFrameView::GetMinimumSize()<sp/>{</highlight></codeline>
<codeline lineno="11760"><highlight class="normal"><sp/><sp/><sp/>gfx::Size<sp/>min_size<sp/>=<sp/>frame_-&gt;client_view()-&gt;GetMinimumSize();</highlight></codeline>
<codeline lineno="11761"><highlight class="normal"><sp/><sp/><sp/>gfx::Rect<sp/>client_bounds<sp/>=<sp/>GetBoundsForClientView();</highlight></codeline>
<codeline lineno="11762"><highlight class="normal"><sp/><sp/><sp/>min_size.Enlarge(0,<sp/>client_bounds.y());</highlight></codeline>
<codeline lineno="11763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>closeButtonOffsetX<sp/>=</highlight></codeline>
<codeline lineno="11764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(kCaptionHeight<sp/>-<sp/>close_button_-&gt;height())<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="11765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>header_width<sp/>=<sp/>close_button_-&gt;width()<sp/>+<sp/>closeButtonOffsetX<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="11766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header_width<sp/>&gt;<sp/>min_size.width())</highlight></codeline>
<codeline lineno="11767"><highlight class="normal"><sp/><sp/><sp/><sp/>min_size.set_width(header_width);</highlight></codeline>
<codeline lineno="11768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_size;</highlight></codeline>
<codeline lineno="11769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11770"><highlight class="normal"><sp/>gfx::Rect<sp/>ShellWindowFrameView::GetWindowBoundsForClientBounds(</highlight></codeline>
<codeline lineno="11771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gfx::Rect&amp;<sp/>client_bounds)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11772"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>closeButtonOffsetX<sp/>=</highlight></codeline>
<codeline lineno="11773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(kCaptionHeight<sp/>-<sp/>close_button_-&gt;height())<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="11774"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>header_width<sp/>=<sp/>close_button_-&gt;width()<sp/>+<sp/>closeButtonOffsetX<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="11775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfx::Rect(client_bounds.x(),</highlight></codeline>
<codeline lineno="11776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-787_8c_1affe776513b24d84b39af8ab0930fef7f" kindref="member">std::max</ref>(0,<sp/>client_bounds.y()<sp/>-<sp/>kCaptionHeight),</highlight></codeline>
<codeline lineno="11777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-787_8c_1affe776513b24d84b39af8ab0930fef7f" kindref="member">std::max</ref>(header_width,<sp/>client_bounds.width()),</highlight></codeline>
<codeline lineno="11778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client_bounds.height()<sp/>+<sp/>kCaptionHeight);</highlight></codeline>
<codeline lineno="11779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11780"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowFrameView::Init(views::Widget*<sp/>frame)<sp/>{</highlight></codeline>
<codeline lineno="11781"><highlight class="normal"><sp/><sp/><sp/>frame_<sp/>=<sp/>frame;</highlight></codeline>
<codeline lineno="11782"><highlight class="normal"><sp/><sp/>ui::ResourceBundle&amp;<sp/>rb<sp/>=<sp/>ui::ResourceBundle::GetSharedInstance();</highlight></codeline>
<codeline lineno="11783"><highlight class="normal"><sp/><sp/>close_button_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>views::ImageButton(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11784"><highlight class="normal"><sp/><sp/>close_button_-&gt;SetImage(views::CustomButton::BS_NORMAL,</highlight></codeline>
<codeline lineno="11785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rb.GetNativeImageNamed(IDR_CLOSE_BAR).ToImageSkia());</highlight></codeline>
<codeline lineno="11786"><highlight class="normal"><sp/><sp/>close_button_-&gt;SetImage(views::CustomButton::BS_HOT,</highlight></codeline>
<codeline lineno="11787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rb.GetNativeImageNamed(IDR_CLOSE_BAR_H).ToImageSkia());</highlight></codeline>
<codeline lineno="11788"><highlight class="normal"><sp/><sp/>close_button_-&gt;SetImage(views::CustomButton::BS_PUSHED,</highlight></codeline>
<codeline lineno="11789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rb.GetNativeImageNamed(IDR_CLOSE_BAR_P).ToImageSkia());</highlight></codeline>
<codeline lineno="11790"><highlight class="normal"><sp/><sp/>close_button_-&gt;SetAccessibleName(</highlight></codeline>
<codeline lineno="11791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(IDS_APP_ACCNAME_CLOSE));</highlight></codeline>
<codeline lineno="11792"><highlight class="normal"><sp/><sp/>AddChildView(close_button_);</highlight></codeline>
<codeline lineno="11793"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="11794"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#if<sp/>defined(USE_ASH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11795"><highlight class="normal"><sp/><sp/><sp/>aura::Window*<sp/>window<sp/>=<sp/>frame-&gt;GetNativeWindow();</highlight></codeline>
<codeline lineno="11796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outside_bounds<sp/>=<sp/>ui::GetDisplayLayout()<sp/>==<sp/>ui::LAYOUT_TOUCH<sp/>?</highlight></codeline>
<codeline lineno="11797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kResizeOutsideBoundsSizeTouch<sp/>:</highlight></codeline>
<codeline lineno="11798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kResizeOutsideBoundsSize;</highlight></codeline>
<codeline lineno="11799"><highlight class="normal"><sp/><sp/>window-&gt;set_hit_test_bounds_override_outer(</highlight></codeline>
<codeline lineno="11800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gfx::Insets(-outside_bounds,<sp/>-outside_bounds,</highlight></codeline>
<codeline lineno="11801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-outside_bounds,<sp/>-outside_bounds));</highlight></codeline>
<codeline lineno="11802"><highlight class="normal"><sp/><sp/>window-&gt;set_hit_test_bounds_override_inner(</highlight></codeline>
<codeline lineno="11803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gfx::Insets(kResizeInsideBoundsSize,<sp/>kResizeInsideBoundsSize,</highlight></codeline>
<codeline lineno="11804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kResizeInsideBoundsSize,<sp/>kResizeInsideBoundsSize));</highlight></codeline>
<codeline lineno="11805"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11806"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="11807"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowFrameView::Layout()<sp/>{</highlight></codeline>
<codeline lineno="11808"><highlight class="normal"><sp/><sp/><sp/>gfx::Size<sp/>close_size<sp/>=<sp/>close_button_-&gt;GetPreferredSize();</highlight></codeline>
<codeline lineno="11809"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>closeButtonOffsetY<sp/>=</highlight></codeline>
<codeline lineno="11810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(kCaptionHeight<sp/>-<sp/>close_size.height())<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="11811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>closeButtonOffsetX<sp/>=<sp/>closeButtonOffsetY;</highlight></codeline>
<codeline lineno="11812"><highlight class="normal"><sp/><sp/>close_button_-&gt;SetBounds(</highlight></codeline>
<codeline lineno="11813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>width()<sp/>-<sp/>closeButtonOffsetX<sp/>-<sp/>close_size.width(),</highlight></codeline>
<codeline lineno="11814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>closeButtonOffsetY,</highlight></codeline>
<codeline lineno="11815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>close_size.width(),</highlight></codeline>
<codeline lineno="11816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>close_size.height());</highlight></codeline>
<codeline lineno="11817"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="11818"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShellWindowFrameView::OnPaint(gfx::Canvas*<sp/>canvas)<sp/>{</highlight></codeline>
<codeline lineno="11819"><highlight class="normal"><sp/><sp/><sp/>SkPaint<sp/>paint;</highlight></codeline>
<codeline lineno="11820"><highlight class="normal"><sp/><sp/><sp/>paint.setAntiAlias(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11821"><highlight class="normal"><sp/><sp/>paint.setStyle(SkPaint::kFill_Style);</highlight></codeline>
<codeline lineno="11822"><highlight class="normal"><sp/><sp/>paint.setColor(SK_ColorWHITE);</highlight></codeline>
<codeline lineno="11823"><highlight class="normal"><sp/><sp/>gfx::Path<sp/>path;</highlight></codeline>
<codeline lineno="11824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>radius<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="11825"><highlight class="normal"><sp/><sp/>path.moveTo(0,<sp/>radius);</highlight></codeline>
<codeline lineno="11826"><highlight class="normal"><sp/><sp/>path.lineTo(radius,<sp/>0);</highlight></codeline>
<codeline lineno="11827"><highlight class="normal"><sp/><sp/>path.lineTo(width()<sp/>-<sp/>radius<sp/>-<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="11828"><highlight class="normal"><sp/><sp/>path.lineTo(width(),<sp/>radius<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="11829"><highlight class="normal"><sp/><sp/>path.lineTo(width(),<sp/>kCaptionHeight);</highlight></codeline>
<codeline lineno="11830"><highlight class="normal"><sp/><sp/>path.lineTo(0,<sp/>kCaptionHeight);</highlight></codeline>
<codeline lineno="11831"><highlight class="normal"><sp/><sp/>path.close();</highlight></codeline>
<codeline lineno="11832"><highlight class="normal"><sp/><sp/>canvas-&gt;DrawPath(path,<sp/>paint);</highlight></codeline>
<codeline lineno="11833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11834"><highlight class="normal">ShellWindowFrameView::ShellWindowFrameView()</highlight></codeline>
<codeline lineno="11835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:<sp/>frame_(NULL),</highlight></codeline>
<codeline lineno="11836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>close_button_(NULL)<sp/>{</highlight></codeline>
<codeline lineno="11837"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="11838"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UserActivityDetector::MaybeNotify()<sp/>{</highlight></codeline>
<codeline lineno="11839"><highlight class="normal"><sp/><sp/>base::TimeTicks<sp/>now<sp/>=<sp/>base::TimeTicks::Now();</highlight></codeline>
<codeline lineno="11840"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_observer_notification_time_.is_null()<sp/>||</highlight></codeline>
<codeline lineno="11841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(now<sp/>-<sp/>last_observer_notification_time_).InSecondsF()<sp/>&gt;=</highlight></codeline>
<codeline lineno="11842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kNotifyIntervalSec)<sp/>{</highlight></codeline>
<codeline lineno="11843"><highlight class="normal"><sp/><sp/><sp/><sp/>FOR_EACH_OBSERVER(UserActivityObserver,<sp/>observers_,<sp/>OnUserActivity());</highlight></codeline>
<codeline lineno="11844"><highlight class="normal"><sp/><sp/><sp/><sp/>last_observer_notification_time_<sp/>=<sp/>now;</highlight></codeline>
<codeline lineno="11845"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11847"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>UserActivityDetector::PreHandleMouseEvent(aura::Window*<sp/>target,</highlight></codeline>
<codeline lineno="11848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aura::MouseEvent*<sp/>event)<sp/>{</highlight></codeline>
<codeline lineno="11849"><highlight class="normal"><sp/><sp/>MaybeNotify();</highlight></codeline>
<codeline lineno="11850"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11851"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="11852"><highlight class="normal">SSLErrorInfo<sp/>SSLErrorInfo::CreateError(ErrorType<sp/>error_type,</highlight></codeline>
<codeline lineno="11853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>net::X509Certificate*<sp/>cert,</highlight></codeline>
<codeline lineno="11854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL&amp;<sp/>request_url)<sp/>{</highlight></codeline>
<codeline lineno="11855"><highlight class="normal"><sp/><sp/>string16<sp/>title,<sp/>details,<sp/>short_description;</highlight></codeline>
<codeline lineno="11856"><highlight class="normal"><sp/><sp/>std::vector&lt;string16&gt;<sp/>extra_info;</highlight></codeline>
<codeline lineno="11857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(error_type)<sp/>{</highlight></codeline>
<codeline lineno="11858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CERT_COMMON_NAME_INVALID:<sp/>{</highlight></codeline>
<codeline lineno="11859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>title<sp/>=</highlight></codeline>
<codeline lineno="11860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_COMMON_NAME_INVALID_TITLE);</highlight></codeline>
<codeline lineno="11861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>dns_names;</highlight></codeline>
<codeline lineno="11862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cert-&gt;GetDNSNames(&amp;dns_names);</highlight></codeline>
<codeline lineno="11863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DCHECK(!dns_names.empty());</highlight></codeline>
<codeline lineno="11864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>dns_names.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="11866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dns_names[i]<sp/>==<sp/>cert-&gt;subject().common_name)</highlight></codeline>
<codeline lineno="11867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>dns_names.size())</highlight></codeline>
<codeline lineno="11870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=</highlight></codeline>
<codeline lineno="11872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringFUTF16(IDS_CERT_ERROR_COMMON_NAME_INVALID_DETAILS,</highlight></codeline>
<codeline lineno="11873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(request_url.host()),</highlight></codeline>
<codeline lineno="11874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(dns_names[i]),</highlight></codeline>
<codeline lineno="11875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(request_url.host()));</highlight></codeline>
<codeline lineno="11876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short_description<sp/>=<sp/>l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="11877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_COMMON_NAME_INVALID_DESCRIPTION);</highlight></codeline>
<codeline lineno="11878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(</highlight></codeline>
<codeline lineno="11879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_EXTRA_INFO_1));</highlight></codeline>
<codeline lineno="11880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(</highlight></codeline>
<codeline lineno="11881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringFUTF16(</highlight></codeline>
<codeline lineno="11882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_COMMON_NAME_INVALID_EXTRA_INFO_2,</highlight></codeline>
<codeline lineno="11883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(cert-&gt;subject().common_name),</highlight></codeline>
<codeline lineno="11884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(request_url.host())));</highlight></codeline>
<codeline lineno="11885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CERT_DATE_INVALID:</highlight></codeline>
<codeline lineno="11888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(</highlight></codeline>
<codeline lineno="11889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_EXTRA_INFO_1));</highlight></codeline>
<codeline lineno="11890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cert-&gt;HasExpired())<sp/>{</highlight></codeline>
<codeline lineno="11891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>title<sp/>=<sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_EXPIRED_TITLE);</highlight></codeline>
<codeline lineno="11892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>l10n_util::GetStringFUTF16(</highlight></codeline>
<codeline lineno="11893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_EXPIRED_DETAILS,</highlight></codeline>
<codeline lineno="11894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(request_url.host()),</highlight></codeline>
<codeline lineno="11895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(request_url.host()),</highlight></codeline>
<codeline lineno="11896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::TimeFormatFriendlyDateAndTime(base::Time::Now()));</highlight></codeline>
<codeline lineno="11897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short_description<sp/>=</highlight></codeline>
<codeline lineno="11898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_EXPIRED_DESCRIPTION);</highlight></codeline>
<codeline lineno="11899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="11900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_EXPIRED_DETAILS_EXTRA_INFO_2));</highlight></codeline>
<codeline lineno="11901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>title<sp/>=<sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_NOT_YET_VALID_TITLE);</highlight></codeline>
<codeline lineno="11903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>l10n_util::GetStringFUTF16(</highlight></codeline>
<codeline lineno="11904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_NOT_YET_VALID_DETAILS,</highlight></codeline>
<codeline lineno="11905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(request_url.host()),</highlight></codeline>
<codeline lineno="11906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(request_url.host()),</highlight></codeline>
<codeline lineno="11907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::TimeFormatFriendlyDateAndTime(base::Time::Now()));</highlight></codeline>
<codeline lineno="11908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short_description<sp/>=</highlight></codeline>
<codeline lineno="11909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_NOT_YET_VALID_DESCRIPTION);</highlight></codeline>
<codeline lineno="11910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(</highlight></codeline>
<codeline lineno="11911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="11912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_NOT_YET_VALID_DETAILS_EXTRA_INFO_2));</highlight></codeline>
<codeline lineno="11913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CERT_AUTHORITY_INVALID:</highlight></codeline>
<codeline lineno="11916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>title<sp/>=<sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_AUTHORITY_INVALID_TITLE);</highlight></codeline>
<codeline lineno="11917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>l10n_util::GetStringFUTF16(</highlight></codeline>
<codeline lineno="11918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_AUTHORITY_INVALID_DETAILS,</highlight></codeline>
<codeline lineno="11919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(request_url.host()));</highlight></codeline>
<codeline lineno="11920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>short_description<sp/>=<sp/>l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="11921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_AUTHORITY_INVALID_DESCRIPTION);</highlight></codeline>
<codeline lineno="11922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(</highlight></codeline>
<codeline lineno="11923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_EXTRA_INFO_1));</highlight></codeline>
<codeline lineno="11924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(l10n_util::GetStringFUTF16(</highlight></codeline>
<codeline lineno="11925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_AUTHORITY_INVALID_EXTRA_INFO_2,</highlight></codeline>
<codeline lineno="11926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(request_url.host()),</highlight></codeline>
<codeline lineno="11927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(request_url.host())));</highlight></codeline>
<codeline lineno="11928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="11929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_AUTHORITY_INVALID_EXTRA_INFO_3));</highlight></codeline>
<codeline lineno="11930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CERT_CONTAINS_ERRORS:</highlight></codeline>
<codeline lineno="11932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>title<sp/>=<sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_CONTAINS_ERRORS_TITLE);</highlight></codeline>
<codeline lineno="11933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>l10n_util::GetStringFUTF16(</highlight></codeline>
<codeline lineno="11934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_CONTAINS_ERRORS_DETAILS,</highlight></codeline>
<codeline lineno="11935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(request_url.host()));</highlight></codeline>
<codeline lineno="11936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>short_description<sp/>=</highlight></codeline>
<codeline lineno="11937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_CONTAINS_ERRORS_DESCRIPTION);</highlight></codeline>
<codeline lineno="11938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(</highlight></codeline>
<codeline lineno="11939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringFUTF16(IDS_CERT_ERROR_EXTRA_INFO_1,</highlight></codeline>
<codeline lineno="11940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(request_url.host())));</highlight></codeline>
<codeline lineno="11941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="11942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_CONTAINS_ERRORS_EXTRA_INFO_2));</highlight></codeline>
<codeline lineno="11943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CERT_NO_REVOCATION_MECHANISM:</highlight></codeline>
<codeline lineno="11945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>title<sp/>=<sp/>l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="11946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_NO_REVOCATION_MECHANISM_TITLE);</highlight></codeline>
<codeline lineno="11947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="11948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_NO_REVOCATION_MECHANISM_DETAILS);</highlight></codeline>
<codeline lineno="11949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>short_description<sp/>=<sp/>l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="11950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_NO_REVOCATION_MECHANISM_DESCRIPTION);</highlight></codeline>
<codeline lineno="11951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CERT_UNABLE_TO_CHECK_REVOCATION:</highlight></codeline>
<codeline lineno="11953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>title<sp/>=<sp/>l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="11954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_UNABLE_TO_CHECK_REVOCATION_TITLE);</highlight></codeline>
<codeline lineno="11955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="11956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_UNABLE_TO_CHECK_REVOCATION_DETAILS);</highlight></codeline>
<codeline lineno="11957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>short_description<sp/>=<sp/>l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="11958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_UNABLE_TO_CHECK_REVOCATION_DESCRIPTION);</highlight></codeline>
<codeline lineno="11959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CERT_REVOKED:</highlight></codeline>
<codeline lineno="11961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>title<sp/>=<sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_REVOKED_CERT_TITLE);</highlight></codeline>
<codeline lineno="11962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>l10n_util::GetStringFUTF16(IDS_CERT_ERROR_REVOKED_CERT_DETAILS,</highlight></codeline>
<codeline lineno="11963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(request_url.host()));</highlight></codeline>
<codeline lineno="11964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>short_description<sp/>=</highlight></codeline>
<codeline lineno="11965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_REVOKED_CERT_DESCRIPTION);</highlight></codeline>
<codeline lineno="11966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(</highlight></codeline>
<codeline lineno="11967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_EXTRA_INFO_1));</highlight></codeline>
<codeline lineno="11968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(</highlight></codeline>
<codeline lineno="11969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_REVOKED_CERT_EXTRA_INFO_2));</highlight></codeline>
<codeline lineno="11970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CERT_INVALID:</highlight></codeline>
<codeline lineno="11972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>title<sp/>=<sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_INVALID_CERT_TITLE);</highlight></codeline>
<codeline lineno="11973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>l10n_util::GetStringFUTF16(</highlight></codeline>
<codeline lineno="11974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_INVALID_CERT_DETAILS,</highlight></codeline>
<codeline lineno="11975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(request_url.host()));</highlight></codeline>
<codeline lineno="11976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>short_description<sp/>=</highlight></codeline>
<codeline lineno="11977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_INVALID_CERT_DESCRIPTION);</highlight></codeline>
<codeline lineno="11978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(</highlight></codeline>
<codeline lineno="11979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_EXTRA_INFO_1));</highlight></codeline>
<codeline lineno="11980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="11981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_INVALID_CERT_EXTRA_INFO_2));</highlight></codeline>
<codeline lineno="11982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CERT_WEAK_SIGNATURE_ALGORITHM:</highlight></codeline>
<codeline lineno="11984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>title<sp/>=<sp/>l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="11985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_WEAK_SIGNATURE_ALGORITHM_TITLE);</highlight></codeline>
<codeline lineno="11986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>l10n_util::GetStringFUTF16(</highlight></codeline>
<codeline lineno="11987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_WEAK_SIGNATURE_ALGORITHM_DETAILS,</highlight></codeline>
<codeline lineno="11988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTF8ToUTF16(request_url.host()));</highlight></codeline>
<codeline lineno="11989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>short_description<sp/>=<sp/>l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="11990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_WEAK_SIGNATURE_ALGORITHM_DESCRIPTION);</highlight></codeline>
<codeline lineno="11991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(</highlight></codeline>
<codeline lineno="11992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_EXTRA_INFO_1));</highlight></codeline>
<codeline lineno="11993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(</highlight></codeline>
<codeline lineno="11994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="11995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_WEAK_SIGNATURE_ALGORITHM_EXTRA_INFO_2));</highlight></codeline>
<codeline lineno="11996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CERT_WEAK_KEY:</highlight></codeline>
<codeline lineno="11998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>title<sp/>=<sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_WEAK_KEY_TITLE);</highlight></codeline>
<codeline lineno="11999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>l10n_util::GetStringFUTF16(</highlight></codeline>
<codeline lineno="12000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_WEAK_KEY_DETAILS,<sp/>UTF8ToUTF16(request_url.host()));</highlight></codeline>
<codeline lineno="12001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>short_description<sp/>=<sp/>l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="12002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_WEAK_KEY_DESCRIPTION);</highlight></codeline>
<codeline lineno="12003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(</highlight></codeline>
<codeline lineno="12004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_EXTRA_INFO_1));</highlight></codeline>
<codeline lineno="12005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_info.push_back(</highlight></codeline>
<codeline lineno="12006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(</highlight></codeline>
<codeline lineno="12007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_CERT_ERROR_WEAK_KEY_EXTRA_INFO_2));</highlight></codeline>
<codeline lineno="12008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UNKNOWN:</highlight></codeline>
<codeline lineno="12010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>title<sp/>=<sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_UNKNOWN_ERROR_TITLE);</highlight></codeline>
<codeline lineno="12011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>=<sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_UNKNOWN_ERROR_DETAILS);</highlight></codeline>
<codeline lineno="12012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>short_description<sp/>=</highlight></codeline>
<codeline lineno="12013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l10n_util::GetStringUTF16(IDS_CERT_ERROR_UNKNOWN_ERROR_DESCRIPTION);</highlight></codeline>
<codeline lineno="12014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NOTREACHED();</highlight></codeline>
<codeline lineno="12017"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SSLErrorInfo(title,<sp/>details,<sp/>short_description,<sp/>extra_info);</highlight></codeline>
<codeline lineno="12019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12020"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastCastView::ButtonPressed(views::Button*<sp/>sender,</highlight></codeline>
<codeline lineno="12021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ui::Event&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline lineno="12022"><highlight class="normal"><sp/><sp/><sp/>DCHECK(sender<sp/>==<sp/>stop_button_);</highlight></codeline>
<codeline lineno="12023"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-79_8c_1a98fe1cf3ea15667d665681c79795469c" kindref="member">StopCast</ref>();</highlight></codeline>
<codeline lineno="12024"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="12025"><highlight class="normal">CastCastView::CastCastView(CastConfigDelegate*<sp/>cast_config_delegate)</highlight></codeline>
<codeline lineno="12026"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>cast_config_delegate_(cast_config_delegate)<sp/>{</highlight></codeline>
<codeline lineno="12027"><highlight class="normal"></highlight></codeline>
<codeline lineno="12028"><highlight class="normal"><sp/><sp/>set_background(views::Background::CreateSolidBackground(kBackgroundColor));</highlight></codeline>
<codeline lineno="12029"><highlight class="normal"><sp/><sp/>ui::ResourceBundle&amp;<sp/>bundle<sp/>=<sp/>ui::ResourceBundle::GetSharedInstance();</highlight></codeline>
<codeline lineno="12030"><highlight class="normal"><sp/><sp/>SetLayoutManager(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>views::BoxLayout(views::BoxLayout::kHorizontal,</highlight></codeline>
<codeline lineno="12031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kTrayPopupPaddingHorizontal,<sp/>0,</highlight></codeline>
<codeline lineno="12032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kTrayPopupPaddingBetweenItems));</highlight></codeline>
<codeline lineno="12033"><highlight class="normal"><sp/><sp/>icon_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FixedSizedImageView(0,<sp/>kTrayPopupItemHeight);</highlight></codeline>
<codeline lineno="12034"><highlight class="normal"><sp/><sp/>icon_-&gt;SetImage(</highlight></codeline>
<codeline lineno="12035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bundle.GetImageNamed(IDR_AURA_UBER_TRAY_CAST_ENABLED).ToImageSkia());</highlight></codeline>
<codeline lineno="12036"><highlight class="normal"><sp/><sp/>AddChildView(icon_);</highlight></codeline>
<codeline lineno="12037"><highlight class="normal"></highlight></codeline>
<codeline lineno="12038"><highlight class="normal"><sp/><sp/>label_container_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>views::View;</highlight></codeline>
<codeline lineno="12039"><highlight class="normal"><sp/><sp/>label_container_-&gt;SetLayoutManager(</highlight></codeline>
<codeline lineno="12040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>views::BoxLayout(views::BoxLayout::kVertical,<sp/>0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="12041"><highlight class="normal"></highlight></codeline>
<codeline lineno="12042"><highlight class="normal"><sp/><sp/><sp/>title_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>views::Label;</highlight></codeline>
<codeline lineno="12043"><highlight class="normal"><sp/><sp/><sp/>title_-&gt;SetHorizontalAlignment(gfx::ALIGN_LEFT);</highlight></codeline>
<codeline lineno="12044"><highlight class="normal"><sp/><sp/><sp/>title_-&gt;SetFontList(bundle.GetFontList(ui::ResourceBundle::BoldFont));</highlight></codeline>
<codeline lineno="12045"><highlight class="normal"><sp/><sp/><sp/>label_container_-&gt;AddChildView(title_);</highlight></codeline>
<codeline lineno="12046"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12047"><highlight class="normal"><sp/><sp/><sp/>details_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>views::Label;</highlight></codeline>
<codeline lineno="12048"><highlight class="normal"><sp/><sp/><sp/>details_-&gt;SetHorizontalAlignment(gfx::ALIGN_LEFT);</highlight></codeline>
<codeline lineno="12049"><highlight class="normal"><sp/><sp/><sp/>details_-&gt;SetMultiLine(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12050"><highlight class="normal"><sp/><sp/><sp/>details_-&gt;SetEnabledColor(kHeaderTextColorNormal);</highlight></codeline>
<codeline lineno="12051"><highlight class="normal"><sp/><sp/><sp/>label_container_-&gt;AddChildView(details_);</highlight></codeline>
<codeline lineno="12052"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12053"><highlight class="normal"><sp/><sp/><sp/>AddChildView(label_container_);</highlight></codeline>
<codeline lineno="12054"><highlight class="normal"></highlight></codeline>
<codeline lineno="12055"><highlight class="normal"><sp/><sp/>base::string16<sp/>stop_button_text<sp/>=</highlight></codeline>
<codeline lineno="12056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ui::ResourceBundle::GetSharedInstance().GetLocalizedString(</highlight></codeline>
<codeline lineno="12057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDS_ASH_STATUS_TRAY_CAST_STOP);</highlight></codeline>
<codeline lineno="12058"><highlight class="normal"><sp/><sp/>stop_button_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TrayPopupLabelButton(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>stop_button_text);</highlight></codeline>
<codeline lineno="12059"><highlight class="normal"><sp/><sp/>AddChildView(stop_button_);</highlight></codeline>
<codeline lineno="12060"><highlight class="normal"></highlight></codeline>
<codeline lineno="12061"><highlight class="normal"><sp/><sp/>UpdateLabel();</highlight></codeline>
<codeline lineno="12062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12063" refid="_c_w_e-79_8c_1a98fe1cf3ea15667d665681c79795469c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a98fe1cf3ea15667d665681c79795469c" kindref="member">StopCast</ref>()<sp/>{</highlight></codeline>
<codeline lineno="12064"><highlight class="normal"><sp/><sp/>CastConfigDelegate*<sp/>cast_config<sp/>=</highlight></codeline>
<codeline lineno="12065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Shell::GetInstance()-&gt;system_tray_delegate()-&gt;GetCastConfigDelegate();</highlight></codeline>
<codeline lineno="12066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cast_config<sp/>&amp;&amp;<sp/>cast_config-&gt;HasCastExtension())<sp/>{</highlight></codeline>
<codeline lineno="12067"><highlight class="normal"><sp/><sp/><sp/><sp/>cast_config-&gt;GetReceiversAndActivities(</highlight></codeline>
<codeline lineno="12068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::Bind(&amp;<ref refid="_c_w_e-79_8c_1a5e6aa2b0ab57cb9b3ece755f7ed14b1a" kindref="member">StopCastCallback</ref>,<sp/>cast_config));</highlight></codeline>
<codeline lineno="12069"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12071" refid="_c_w_e-79_8c_1a5e6aa2b0ab57cb9b3ece755f7ed14b1a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a5e6aa2b0ab57cb9b3ece755f7ed14b1a" kindref="member">StopCastCallback</ref>(</highlight></codeline>
<codeline lineno="12072"><highlight class="normal"><sp/><sp/><sp/><sp/>CastConfigDelegate*<sp/>cast_config,</highlight></codeline>
<codeline lineno="12073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CastConfigDelegate::ReceiversAndActivites&amp;<sp/>receivers_activities)<sp/>{</highlight></codeline>
<codeline lineno="12074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>item<sp/>:<sp/>receivers_activities)<sp/>{</highlight></codeline>
<codeline lineno="12075"><highlight class="normal"><sp/><sp/><sp/><sp/>CastConfigDelegate::Activity<sp/>activity<sp/>=<sp/>item.second.activity;</highlight></codeline>
<codeline lineno="12076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(activity.allow_stop<sp/>&amp;&amp;<sp/>activity.id.empty()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="12077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cast_config-&gt;StopCasting(activity.id);</highlight></codeline>
<codeline lineno="12078"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12080"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CastConfigDelegateChromeos::StopCasting(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>activity_id)<sp/>{</highlight></codeline>
<codeline lineno="12081"><highlight class="normal"><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1afd1b401cf4b3a4ab89a15e5bd5c29a3a" kindref="member">ExecuteJavaScript</ref>(</highlight><highlight class="stringliteral">&quot;backgroundSetup.stopCastMirroring(&apos;user-stop&apos;);&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12082"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="12083"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>V8ContextNativeHandler::RunWithNativesEnabledModuleSystem(</highlight></codeline>
<codeline lineno="12084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="12085"><highlight class="normal"><sp/><sp/><sp/>CHECK_EQ(args.Length(),<sp/>1);</highlight></codeline>
<codeline lineno="12086"><highlight class="normal"><sp/><sp/><sp/>CHECK(args[0]-&gt;IsFunction());</highlight></codeline>
<codeline lineno="12087"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>call_with_args[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="12088"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>()-&gt;module_system()-&gt;NewInstance()};</highlight></codeline>
<codeline lineno="12089"><highlight class="normal"><sp/><sp/><sp/>ModuleSystem::NativesEnabledScope<sp/>natives_enabled(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>()-&gt;module_system());</highlight></codeline>
<codeline lineno="12090"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>()-&gt;CallFunction(v8::Local&lt;v8::Function&gt;::Cast(args[0]),<sp/>1,</highlight></codeline>
<codeline lineno="12091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_with_args);</highlight></codeline>
<codeline lineno="12092"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="12093"><highlight class="normal">V8ContextNativeHandler::V8ContextNativeHandler(ScriptContext*<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,</highlight></codeline>
<codeline lineno="12094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dispatcher*<sp/>dispatcher)</highlight></codeline>
<codeline lineno="12095"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>ObjectBackedNativeHandler(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>),</highlight></codeline>
<codeline lineno="12096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>context_(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>),</highlight></codeline>
<codeline lineno="12097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dispatcher_(dispatcher)<sp/>{</highlight></codeline>
<codeline lineno="12098"><highlight class="normal"><sp/><sp/>RouteFunction(</highlight><highlight class="stringliteral">&quot;GetAvailability&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="12099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::Bind(&amp;V8ContextNativeHandler::GetAvailability,</highlight></codeline>
<codeline lineno="12100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::Unretained(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="12101"><highlight class="normal"><sp/><sp/>RouteFunction(</highlight><highlight class="stringliteral">&quot;GetModuleSystem&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="12102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::Bind(&amp;V8ContextNativeHandler::GetModuleSystem,</highlight></codeline>
<codeline lineno="12103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::Unretained(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="12104"><highlight class="normal"><sp/><sp/><sp/>RouteFunction(</highlight></codeline>
<codeline lineno="12105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;RunWithNativesEnabledModuleSystem&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="12106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::Bind(&amp;V8ContextNativeHandler::RunWithNativesEnabledModuleSystem,</highlight></codeline>
<codeline lineno="12107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::Unretained(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="12108"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="12109"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PaintLayerScrollableArea::UpdateCompositingLayersAfterScroll()<sp/>{</highlight></codeline>
<codeline lineno="12110"><highlight class="normal"><sp/><sp/>PaintLayerCompositor*<sp/>compositor<sp/>=<sp/>GetLayoutBox()-&gt;View()-&gt;Compositor();</highlight></codeline>
<codeline lineno="12111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!compositor-&gt;InCompositingMode())</highlight></codeline>
<codeline lineno="12112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12113"><highlight class="normal"></highlight></codeline>
<codeline lineno="12114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UsesCompositedScrolling())<sp/>{</highlight></codeline>
<codeline lineno="12115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>DCHECK(Layer()-&gt;HasCompositedLayerMapping());</highlight></codeline>
<codeline lineno="12116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ScrollingCoordinator*<sp/>scrolling_coordinator<sp/>=<sp/>GetScrollingCoordinator();</highlight></codeline>
<codeline lineno="12117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>handled_scroll<sp/>=</highlight></codeline>
<codeline lineno="12118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Layer()-&gt;IsRootLayer()<sp/>&amp;&amp;<sp/>scrolling_coordinator<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="12119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scrolling_coordinator-&gt;UpdateCompositedScrollOffset(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12120"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!handled_scroll)<sp/>{</highlight></codeline>
<codeline lineno="12122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RuntimeEnabledFeatures::BlinkGenPropertyTreesEnabled())<sp/>{</highlight></codeline>
<codeline lineno="12123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Layer()-&gt;GetCompositedLayerMapping()-&gt;SetNeedsGraphicsLayerUpdate(</highlight></codeline>
<codeline lineno="12124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kGraphicsLayerUpdateSubtree);</highlight></codeline>
<codeline lineno="12125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compositor-&gt;SetNeedsCompositingUpdate(</highlight></codeline>
<codeline lineno="12127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kCompositingUpdateAfterGeometryChange);</highlight></codeline>
<codeline lineno="12128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12129"><highlight class="normal"></highlight></codeline>
<codeline lineno="12130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Layer()-&gt;IsRootLayer())<sp/>{</highlight></codeline>
<codeline lineno="12131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LocalFrame*<sp/>frame<sp/>=<sp/>GetLayoutBox()-&gt;GetFrame();</highlight></codeline>
<codeline lineno="12132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame<sp/>&amp;&amp;<sp/>frame-&gt;View()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="12133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame-&gt;View()-&gt;HasViewportConstrainedObjects())<sp/>{</highlight></codeline>
<codeline lineno="12134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Layer()-&gt;SetNeedsCompositingInputsUpdate();</highlight></codeline>
<codeline lineno="12135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12137"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12138"><highlight class="normal"><sp/><sp/><sp/><sp/>Layer()-&gt;SetNeedsCompositingInputsUpdate();</highlight></codeline>
<codeline lineno="12139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12141"><highlight class="normal">v8::Local&lt;v8::Object&gt;<sp/>V8Console::createCommandLineAPI(InspectedContext*<sp/>inspectedContext)</highlight></codeline>
<codeline lineno="12142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12143"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=<sp/>inspectedContext-&gt;context();</highlight></codeline>
<codeline lineno="12144"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;GetIsolate();</highlight></codeline>
<codeline lineno="12145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::MicrotasksScope<sp/>microtasksScope(isolate,<sp/>v8::MicrotasksScope::kDoNotRunMicrotasks);</highlight></codeline>
<codeline lineno="12146"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>commandLineAPI<sp/>=<sp/>v8::Object::New(isolate);</highlight></codeline>
<codeline lineno="12148"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;dir&quot;</highlight><highlight class="normal">,<sp/>V8Console::dirCallback,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>dir(value)<sp/>{<sp/>[Command<sp/>Line<sp/>API]<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;dirxml&quot;</highlight><highlight class="normal">,<sp/>V8Console::dirxmlCallback,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>dirxml(value)<sp/>{<sp/>[Command<sp/>Line<sp/>API]<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;profile&quot;</highlight><highlight class="normal">,<sp/>V8Console::profileCallback,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>profile(title)<sp/>{<sp/>[Command<sp/>Line<sp/>API]<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;profileEnd&quot;</highlight><highlight class="normal">,<sp/>V8Console::profileEndCallback,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>profileEnd(title)<sp/>{<sp/>[Command<sp/>Line<sp/>API]<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;clear&quot;</highlight><highlight class="normal">,<sp/>V8Console::clearCallback,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>clear()<sp/>{<sp/>[Command<sp/>Line<sp/>API]<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;table&quot;</highlight><highlight class="normal">,<sp/>V8Console::tableCallback,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>table(data,<sp/>[columns])<sp/>{<sp/>[Command<sp/>Line<sp/>API]<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12155"><highlight class="normal"></highlight></codeline>
<codeline lineno="12156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;keys&quot;</highlight><highlight class="normal">,<sp/>V8Console::keysCallback,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>keys(object)<sp/>{<sp/>[Command<sp/>Line<sp/>API]<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;values&quot;</highlight><highlight class="normal">,<sp/>V8Console::valuesCallback,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>values(object)<sp/>{<sp/>[Command<sp/>Line<sp/>API]<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;debug&quot;</highlight><highlight class="normal">,<sp/>V8Console::debugFunctionCallback,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>debug(function)<sp/>{<sp/>[Command<sp/>Line<sp/>API]<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;undebug&quot;</highlight><highlight class="normal">,<sp/>V8Console::undebugFunctionCallback,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>undebug(function)<sp/>{<sp/>[Command<sp/>Line<sp/>API]<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;monitor&quot;</highlight><highlight class="normal">,<sp/>V8Console::monitorFunctionCallback,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>monitor(function)<sp/>{<sp/>[Command<sp/>Line<sp/>API]<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;unmonitor&quot;</highlight><highlight class="normal">,<sp/>V8Console::unmonitorFunctionCallback,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>unmonitor(function)<sp/>{<sp/>[Command<sp/>Line<sp/>API]<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;inspect&quot;</highlight><highlight class="normal">,<sp/>V8Console::inspectCallback,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>inspect(object)<sp/>{<sp/>[Command<sp/>Line<sp/>API]<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;copy&quot;</highlight><highlight class="normal">,<sp/>V8Console::copyCallback,<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>copy(value)<sp/>{<sp/>[Command<sp/>Line<sp/>API]<sp/>}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;$_&quot;</highlight><highlight class="normal">,<sp/>V8Console::lastEvaluationResultCallback);</highlight></codeline>
<codeline lineno="12165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;$0&quot;</highlight><highlight class="normal">,<sp/>V8Console::inspectedObject0);</highlight></codeline>
<codeline lineno="12166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;$1&quot;</highlight><highlight class="normal">,<sp/>V8Console::inspectedObject1);</highlight></codeline>
<codeline lineno="12167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;$2&quot;</highlight><highlight class="normal">,<sp/>V8Console::inspectedObject2);</highlight></codeline>
<codeline lineno="12168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;$3&quot;</highlight><highlight class="normal">,<sp/>V8Console::inspectedObject3);</highlight></codeline>
<codeline lineno="12169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI,<sp/></highlight><highlight class="stringliteral">&quot;$4&quot;</highlight><highlight class="normal">,<sp/>V8Console::inspectedObject4);</highlight></codeline>
<codeline lineno="12170"><highlight class="normal"></highlight></codeline>
<codeline lineno="12171"><highlight class="normal"><sp/><sp/><sp/><sp/>inspectedContext-&gt;inspector()-&gt;client()-&gt;installAdditionalCommandLineAPI(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>commandLineAPI);</highlight></codeline>
<codeline lineno="12172"><highlight class="normal"></highlight></codeline>
<codeline lineno="12173"><highlight class="normal"><sp/><sp/><sp/><sp/>commandLineAPI-&gt;SetPrivate(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/><ref refid="_c_w_e-79_8c_1a67370beabf17ad54f38c306dd997d6ea" kindref="member">inspectedContextPrivateKey</ref>(isolate),<sp/>v8::External::New(isolate,<sp/>inspectedContext));</highlight></codeline>
<codeline lineno="12174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>commandLineAPI;</highlight></codeline>
<codeline lineno="12175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12176"><highlight class="normal">v8::Local&lt;v8::Object&gt;<sp/>V8Console::createConsole(InspectedContext*<sp/>inspectedContext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasMemoryAttribute)</highlight></codeline>
<codeline lineno="12177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12178"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=<sp/>inspectedContext-&gt;context();</highlight></codeline>
<codeline lineno="12179"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Context::Scope<sp/>contextScope(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>);</highlight></codeline>
<codeline lineno="12180"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;GetIsolate();</highlight></codeline>
<codeline lineno="12181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::MicrotasksScope<sp/>microtasksScope(isolate,<sp/>v8::MicrotasksScope::kDoNotRunMicrotasks);</highlight></codeline>
<codeline lineno="12182"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>console<sp/>=<sp/>v8::Object::New(isolate);</highlight></codeline>
<codeline lineno="12184"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;debug&quot;</highlight><highlight class="normal">,<sp/>V8Console::debugCallback);</highlight></codeline>
<codeline lineno="12186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">,<sp/>V8Console::errorCallback);</highlight></codeline>
<codeline lineno="12187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">,<sp/>V8Console::infoCallback);</highlight></codeline>
<codeline lineno="12188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;log&quot;</highlight><highlight class="normal">,<sp/>V8Console::logCallback);</highlight></codeline>
<codeline lineno="12189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;warn&quot;</highlight><highlight class="normal">,<sp/>V8Console::warnCallback);</highlight></codeline>
<codeline lineno="12190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;dir&quot;</highlight><highlight class="normal">,<sp/>V8Console::dirCallback);</highlight></codeline>
<codeline lineno="12191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;dirxml&quot;</highlight><highlight class="normal">,<sp/>V8Console::dirxmlCallback);</highlight></codeline>
<codeline lineno="12192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;table&quot;</highlight><highlight class="normal">,<sp/>V8Console::tableCallback);</highlight></codeline>
<codeline lineno="12193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;trace&quot;</highlight><highlight class="normal">,<sp/>V8Console::traceCallback);</highlight></codeline>
<codeline lineno="12194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;group&quot;</highlight><highlight class="normal">,<sp/>V8Console::groupCallback);</highlight></codeline>
<codeline lineno="12195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;groupCollapsed&quot;</highlight><highlight class="normal">,<sp/>V8Console::groupCollapsedCallback);</highlight></codeline>
<codeline lineno="12196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;groupEnd&quot;</highlight><highlight class="normal">,<sp/>V8Console::groupEndCallback);</highlight></codeline>
<codeline lineno="12197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;clear&quot;</highlight><highlight class="normal">,<sp/>V8Console::clearCallback);</highlight></codeline>
<codeline lineno="12198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">,<sp/>V8Console::countCallback);</highlight></codeline>
<codeline lineno="12199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;assert&quot;</highlight><highlight class="normal">,<sp/>V8Console::assertCallback);</highlight></codeline>
<codeline lineno="12200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;markTimeline&quot;</highlight><highlight class="normal">,<sp/>V8Console::markTimelineCallback);</highlight></codeline>
<codeline lineno="12201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;profile&quot;</highlight><highlight class="normal">,<sp/>V8Console::profileCallback);</highlight></codeline>
<codeline lineno="12202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;profileEnd&quot;</highlight><highlight class="normal">,<sp/>V8Console::profileEndCallback);</highlight></codeline>
<codeline lineno="12203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;timeline&quot;</highlight><highlight class="normal">,<sp/>V8Console::timelineCallback);</highlight></codeline>
<codeline lineno="12204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;timelineEnd&quot;</highlight><highlight class="normal">,<sp/>V8Console::timelineEndCallback);</highlight></codeline>
<codeline lineno="12205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,<sp/>V8Console::timeCallback);</highlight></codeline>
<codeline lineno="12206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;timeEnd&quot;</highlight><highlight class="normal">,<sp/>V8Console::timeEndCallback);</highlight></codeline>
<codeline lineno="12207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a91069dd71e5d65f118a259d753296ea1" kindref="member">createBoundFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>console,<sp/></highlight><highlight class="stringliteral">&quot;timeStamp&quot;</highlight><highlight class="normal">,<sp/>V8Console::timeStampCallback);</highlight></codeline>
<codeline lineno="12208"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/>console-&gt;SetPrototype(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8::Object::New(isolate)).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12210"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK(success);</highlight></codeline>
<codeline lineno="12211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasMemoryAttribute)</highlight></codeline>
<codeline lineno="12212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console-&gt;SetAccessorProperty(toV8StringInternalized(isolate,<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">),<sp/>V8_FUNCTION_NEW_REMOVE_PROTOTYPE(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>V8Console::memoryGetterCallback,<sp/>console,<sp/>0).ToLocalChecked(),<sp/>V8_FUNCTION_NEW_REMOVE_PROTOTYPE(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>V8Console::memorySetterCallback,<sp/>v8::Local&lt;v8::Value&gt;(),<sp/>0).ToLocalChecked(),<sp/>static_cast&lt;v8::PropertyAttribute&gt;(v8::None),<sp/>v8::DEFAULT);</highlight></codeline>
<codeline lineno="12213"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12214"><highlight class="normal"><sp/><sp/><sp/><sp/>console-&gt;SetPrivate(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/><ref refid="_c_w_e-79_8c_1a67370beabf17ad54f38c306dd997d6ea" kindref="member">inspectedContextPrivateKey</ref>(isolate),<sp/>v8::External::New(isolate,<sp/>inspectedContext));</highlight></codeline>
<codeline lineno="12215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>console;</highlight></codeline>
<codeline lineno="12216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12217"><highlight class="normal">v8::Local&lt;v8::Value&gt;<sp/>V8Debugger::collectionEntries(v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8::Local&lt;v8::Object&gt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="12218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!enabled())<sp/>{</highlight></codeline>
<codeline lineno="12220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOTREACHED();</highlight></codeline>
<codeline lineno="12221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Undefined(m_isolate);</highlight></codeline>
<codeline lineno="12222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="12224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>entriesValue<sp/>=<sp/>callDebuggerMethod(</highlight><highlight class="stringliteral">&quot;getCollectionEntries&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>argv).ToLocalChecked();</highlight></codeline>
<codeline lineno="12225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entriesValue-&gt;IsArray())</highlight></codeline>
<codeline lineno="12226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Undefined(m_isolate);</highlight></codeline>
<codeline lineno="12227"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Array&gt;<sp/>entries<sp/>=<sp/>entriesValue.As&lt;v8::Array&gt;();</highlight></codeline>
<codeline lineno="12228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!markArrayEntriesAsInternal(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>entries,<sp/>V8InternalValueType::kEntry))</highlight></codeline>
<codeline lineno="12229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Undefined(m_isolate);</highlight></codeline>
<codeline lineno="12230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entries-&gt;SetPrototype(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8::Null(m_isolate)).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="12231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Undefined(m_isolate);</highlight></codeline>
<codeline lineno="12232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entries;</highlight></codeline>
<codeline lineno="12233"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="12234"><highlight class="normal"><sp/>v8::Local&lt;v8::Value&gt;<sp/>V8Debugger::functionLocation(v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8::Local&lt;v8::Function&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="12235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scriptId<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">-&gt;ScriptId();</highlight></codeline>
<codeline lineno="12237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scriptId<sp/>==<sp/>v8::UnboundScript::kNoScriptId)</highlight></codeline>
<codeline lineno="12238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Null(m_isolate);</highlight></codeline>
<codeline lineno="12239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineNumber<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">-&gt;GetScriptLineNumber();</highlight></codeline>
<codeline lineno="12240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>columnNumber<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">-&gt;GetScriptColumnNumber();</highlight></codeline>
<codeline lineno="12241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lineNumber<sp/>==<sp/>v8::Function::kLineOffsetNotFound<sp/>||<sp/>columnNumber<sp/>==<sp/>v8::Function::kLineOffsetNotFound)</highlight></codeline>
<codeline lineno="12242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Null(m_isolate);</highlight></codeline>
<codeline lineno="12243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>location<sp/>=<sp/>v8::Object::New(m_isolate);</highlight></codeline>
<codeline lineno="12244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!location-&gt;Set(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;scriptId&quot;</highlight><highlight class="normal">),<sp/>toV8String(m_isolate,<sp/>String16::fromInteger(scriptId))).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="12245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Null(m_isolate);</highlight></codeline>
<codeline lineno="12246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!location-&gt;Set(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;lineNumber&quot;</highlight><highlight class="normal">),<sp/>v8::Integer::New(m_isolate,<sp/>lineNumber)).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="12247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Null(m_isolate);</highlight></codeline>
<codeline lineno="12248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!location-&gt;Set(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;columnNumber&quot;</highlight><highlight class="normal">),<sp/>v8::Integer::New(m_isolate,<sp/>columnNumber)).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="12249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Null(m_isolate);</highlight></codeline>
<codeline lineno="12250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!markAsInternal(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>location,<sp/>V8InternalValueType::kLocation))</highlight></codeline>
<codeline lineno="12251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Null(m_isolate);</highlight></codeline>
<codeline lineno="12252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>location;</highlight></codeline>
<codeline lineno="12253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12254"><highlight class="normal">v8::MaybeLocal&lt;v8::Value&gt;<sp/>V8Debugger::functionScopes(v8::Local&lt;v8::Function&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="12255"><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!enabled())<sp/>{</highlight></codeline>
<codeline lineno="12257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOTREACHED();</highlight></codeline>
<codeline lineno="12258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Value&gt;::New(m_isolate,<sp/>v8::Undefined(m_isolate));</highlight></codeline>
<codeline lineno="12259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="12261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>scopesValue;</highlight></codeline>
<codeline lineno="12262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!callDebuggerMethod(</highlight><highlight class="stringliteral">&quot;getFunctionScopes&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>argv).ToLocal(&amp;scopesValue)<sp/>||<sp/>!scopesValue-&gt;IsArray())</highlight></codeline>
<codeline lineno="12263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::MaybeLocal&lt;v8::Value&gt;();</highlight></codeline>
<codeline lineno="12264"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Array&gt;<sp/>scopes<sp/>=<sp/>scopesValue.As&lt;v8::Array&gt;();</highlight></codeline>
<codeline lineno="12265"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=<sp/>m_debuggerContext.Get(m_isolate);</highlight></codeline>
<codeline lineno="12266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!markAsInternal(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>scopes,<sp/>V8InternalValueType::kScopeList))</highlight></codeline>
<codeline lineno="12267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::MaybeLocal&lt;v8::Value&gt;();</highlight></codeline>
<codeline lineno="12268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!markArrayEntriesAsInternal(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>scopes,<sp/>V8InternalValueType::kScope))</highlight></codeline>
<codeline lineno="12269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::MaybeLocal&lt;v8::Value&gt;();</highlight></codeline>
<codeline lineno="12270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scopes-&gt;SetPrototype(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8::Null(m_isolate)).FromMaybe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="12271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Undefined(m_isolate);</highlight></codeline>
<codeline lineno="12272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scopes;</highlight></codeline>
<codeline lineno="12273"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="12274"><highlight class="normal">v8::Local&lt;v8::Value&gt;<sp/>V8Debugger::generatorObjectLocation(v8::Local&lt;v8::Object&gt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="12275"><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!enabled())<sp/>{</highlight></codeline>
<codeline lineno="12277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NOTREACHED();</highlight></codeline>
<codeline lineno="12278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Null(m_isolate);</highlight></codeline>
<codeline lineno="12279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="12281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>location<sp/>=<sp/>callDebuggerMethod(</highlight><highlight class="stringliteral">&quot;getGeneratorObjectLocation&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>argv).ToLocalChecked();</highlight></codeline>
<codeline lineno="12282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!location-&gt;IsObject())</highlight></codeline>
<codeline lineno="12283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Null(m_isolate);</highlight></codeline>
<codeline lineno="12284"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=<sp/>m_debuggerContext.Get(m_isolate);</highlight></codeline>
<codeline lineno="12285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!markAsInternal(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8::Local&lt;v8::Object&gt;::Cast(location),<sp/>V8InternalValueType::kLocation))</highlight></codeline>
<codeline lineno="12286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Null(m_isolate);</highlight></codeline>
<codeline lineno="12287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>location;</highlight></codeline>
<codeline lineno="12288"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="12289"><highlight class="normal"><sp/>v8::MaybeLocal&lt;v8::Array&gt;<sp/>V8Debugger::internalProperties(v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8::Local&lt;v8::Value&gt;<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="12290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12291"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Array&gt;<sp/>properties;</highlight></codeline>
<codeline lineno="12292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v8::Debug::GetInternalProperties(m_isolate,<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>).ToLocal(&amp;properties))</highlight></codeline>
<codeline lineno="12293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::MaybeLocal&lt;v8::Array&gt;();</highlight></codeline>
<codeline lineno="12294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsFunction())<sp/>{</highlight></codeline>
<codeline lineno="12295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>=<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>.As&lt;v8::Function&gt;();</highlight></codeline>
<codeline lineno="12296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>location<sp/>=<sp/>functionLocation(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(location-&gt;IsObject())<sp/>{</highlight></codeline>
<codeline lineno="12298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>properties-&gt;Set(properties-&gt;Length(),<sp/>toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;[[FunctionLocation]]&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="12299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>properties-&gt;Set(properties-&gt;Length(),<sp/>location);</highlight></codeline>
<codeline lineno="12300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function-&gt;IsGeneratorFunction())<sp/>{</highlight></codeline>
<codeline lineno="12302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>properties-&gt;Set(properties-&gt;Length(),<sp/>toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;[[IsGenerator]]&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="12303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>properties-&gt;Set(properties-&gt;Length(),<sp/>v8::True(m_isolate));</highlight></codeline>
<codeline lineno="12304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!enabled())</highlight></codeline>
<codeline lineno="12307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>properties;</highlight></codeline>
<codeline lineno="12308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsMap()<sp/>||<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsWeakMap()<sp/>||<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsSet()<sp/>||<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsWeakSet()<sp/>||<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsSetIterator()<sp/>||<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsMapIterator())<sp/>{</highlight></codeline>
<codeline lineno="12309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>entries<sp/>=<sp/>collectionEntries(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8::Local&lt;v8::Object&gt;::Cast(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>));</highlight></codeline>
<codeline lineno="12310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entries-&gt;IsArray())<sp/>{</highlight></codeline>
<codeline lineno="12311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>properties-&gt;Set(properties-&gt;Length(),<sp/>toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;[[Entries]]&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="12312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>properties-&gt;Set(properties-&gt;Length(),<sp/>entries);</highlight></codeline>
<codeline lineno="12313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsGeneratorObject())<sp/>{</highlight></codeline>
<codeline lineno="12316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>location<sp/>=<sp/>generatorObjectLocation(v8::Local&lt;v8::Object&gt;::Cast(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>));</highlight></codeline>
<codeline lineno="12317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(location-&gt;IsObject())<sp/>{</highlight></codeline>
<codeline lineno="12318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>properties-&gt;Set(properties-&gt;Length(),<sp/>toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;[[GeneratorLocation]]&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="12319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>properties-&gt;Set(properties-&gt;Length(),<sp/>location);</highlight></codeline>
<codeline lineno="12320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>-&gt;IsFunction())<sp/>{</highlight></codeline>
<codeline lineno="12323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>=<sp/><ref refid="_c_w_e-20_8c_1a37d724bfb4d033199eda7f00ee5510eb" kindref="member">value</ref>.As&lt;v8::Function&gt;();</highlight></codeline>
<codeline lineno="12324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>boundFunction<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">-&gt;GetBoundFunction();</highlight></codeline>
<codeline lineno="12325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>scopes;</highlight></codeline>
<codeline lineno="12326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boundFunction-&gt;IsUndefined()<sp/>&amp;&amp;<sp/>functionScopes(</highlight><highlight class="keyword">function</highlight><highlight class="normal">).ToLocal(&amp;scopes))<sp/>{</highlight></codeline>
<codeline lineno="12327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>properties-&gt;Set(properties-&gt;Length(),<sp/>toV8StringInternalized(m_isolate,<sp/></highlight><highlight class="stringliteral">&quot;[[Scopes]]&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="12328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>properties-&gt;Set(properties-&gt;Length(),<sp/>scopes);</highlight></codeline>
<codeline lineno="12329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>properties;</highlight></codeline>
<codeline lineno="12332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12333"><highlight class="normal">v8::Local&lt;v8::Object&gt;<sp/>V8InjectedScriptHost::create(v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>V8InspectorImpl*<sp/>inspector)</highlight></codeline>
<codeline lineno="12334"><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>inspector-&gt;isolate();</highlight></codeline>
<codeline lineno="12336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>injectedScriptHost<sp/>=<sp/>v8::Object::New(isolate);</highlight></codeline>
<codeline lineno="12337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::External&gt;<sp/>debuggerExternal<sp/>=<sp/>v8::External::New(isolate,<sp/>inspector);</highlight></codeline>
<codeline lineno="12338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a4984b5587b1733239c3887072df545c9" kindref="member">setFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>injectedScriptHost,<sp/></highlight><highlight class="stringliteral">&quot;internalConstructorName&quot;</highlight><highlight class="normal">,<sp/>V8InjectedScriptHost::internalConstructorNameCallback,<sp/>debuggerExternal);</highlight></codeline>
<codeline lineno="12339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a4984b5587b1733239c3887072df545c9" kindref="member">setFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>injectedScriptHost,<sp/></highlight><highlight class="stringliteral">&quot;formatAccessorsAsProperties&quot;</highlight><highlight class="normal">,<sp/>V8InjectedScriptHost::formatAccessorsAsProperties,<sp/>debuggerExternal);</highlight></codeline>
<codeline lineno="12340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a4984b5587b1733239c3887072df545c9" kindref="member">setFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>injectedScriptHost,<sp/></highlight><highlight class="stringliteral">&quot;subtype&quot;</highlight><highlight class="normal">,<sp/>V8InjectedScriptHost::subtypeCallback,<sp/>debuggerExternal);</highlight></codeline>
<codeline lineno="12341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a4984b5587b1733239c3887072df545c9" kindref="member">setFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>injectedScriptHost,<sp/></highlight><highlight class="stringliteral">&quot;getInternalProperties&quot;</highlight><highlight class="normal">,<sp/>V8InjectedScriptHost::getInternalPropertiesCallback,<sp/>debuggerExternal);</highlight></codeline>
<codeline lineno="12342"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a4984b5587b1733239c3887072df545c9" kindref="member">setFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>injectedScriptHost,<sp/></highlight><highlight class="stringliteral">&quot;objectHasOwnProperty&quot;</highlight><highlight class="normal">,<sp/>V8InjectedScriptHost::objectHasOwnPropertyCallback,<sp/>debuggerExternal);</highlight></codeline>
<codeline lineno="12343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a4984b5587b1733239c3887072df545c9" kindref="member">setFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>injectedScriptHost,<sp/></highlight><highlight class="stringliteral">&quot;bind&quot;</highlight><highlight class="normal">,<sp/>V8InjectedScriptHost::bindCallback,<sp/>debuggerExternal);</highlight></codeline>
<codeline lineno="12344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a4984b5587b1733239c3887072df545c9" kindref="member">setFunctionProperty</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>injectedScriptHost,<sp/></highlight><highlight class="stringliteral">&quot;proxyTargetValue&quot;</highlight><highlight class="normal">,<sp/>V8InjectedScriptHost::proxyTargetValueCallback,<sp/>debuggerExternal);</highlight></codeline>
<codeline lineno="12345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>injectedScriptHost;</highlight></codeline>
<codeline lineno="12346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12347"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::RegisterMetricsServiceProviders()<sp/>{</highlight></codeline>
<codeline lineno="12348"><highlight class="normal"><sp/><sp/>PrefService*<sp/>local_state<sp/>=<sp/>g_browser_process-&gt;local_state();</highlight></codeline>
<codeline lineno="12349"><highlight class="normal"></highlight></codeline>
<codeline lineno="12350"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;SubprocessMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12352"><highlight class="normal"></highlight></codeline>
<codeline lineno="12353"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BUILDFLAG(ENABLE_EXTENSIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12354"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;ExtensionsMetricsProvider&gt;(metrics_state_manager_));</highlight></codeline>
<codeline lineno="12356"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12357"><highlight class="normal"></highlight></codeline>
<codeline lineno="12358"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;metrics::NetworkMetricsProvider&gt;(</highlight></codeline>
<codeline lineno="12360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content::CreateNetworkConnectionTrackerAsyncGetter(),</highlight></codeline>
<codeline lineno="12361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;metrics::NetworkQualityEstimatorProviderImpl&gt;()));</highlight></codeline>
<codeline lineno="12362"><highlight class="normal"></highlight></codeline>
<codeline lineno="12363"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;OmniboxMetricsProvider&gt;(</highlight></codeline>
<codeline lineno="12365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::Bind(&amp;chrome::IsIncognitoSessionActive)));</highlight></codeline>
<codeline lineno="12366"><highlight class="normal"></highlight></codeline>
<codeline lineno="12367"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;ChromeStabilityMetricsProvider&gt;(local_state));</highlight></codeline>
<codeline lineno="12369"><highlight class="normal"></highlight></codeline>
<codeline lineno="12370"><highlight class="normal"><sp/><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;metrics::GPUMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12372"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12373"><highlight class="normal"><sp/><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;metrics::ScreenInfoMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12375"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12376"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(<ref refid="_c_w_e-79_8c_1a6d78dc2b50690b16ceb7daad67570ae1" kindref="member">CreateFileMetricsProvider</ref>(</highlight></codeline>
<codeline lineno="12377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metrics_state_manager_-&gt;IsMetricsReportingEnabled()));</highlight></codeline>
<codeline lineno="12378"><highlight class="normal"></highlight></codeline>
<codeline lineno="12379"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;metrics::DriveMetricsProvider&gt;(</highlight></codeline>
<codeline lineno="12381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chrome::FILE_LOCAL_STATE));</highlight></codeline>
<codeline lineno="12382"><highlight class="normal"></highlight></codeline>
<codeline lineno="12383"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;metrics::CallStackProfileMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12385"><highlight class="normal"></highlight></codeline>
<codeline lineno="12386"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;metrics::SamplingMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12388"><highlight class="normal"></highlight></codeline>
<codeline lineno="12389"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;translate::TranslateRankerMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12391"><highlight class="normal"></highlight></codeline>
<codeline lineno="12392"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;metrics::ComponentMetricsProvider&gt;(</highlight></codeline>
<codeline lineno="12394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_browser_process-&gt;component_updater()));</highlight></codeline>
<codeline lineno="12395"><highlight class="normal"></highlight></codeline>
<codeline lineno="12396"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_ANDROID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12397"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;AndroidMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12399"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;PageLoadMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12401"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>defined(OS_ANDROID)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12402"><highlight class="normal"></highlight></codeline>
<codeline lineno="12403"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12404"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;GoogleUpdateMetricsProviderWin&gt;());</highlight></codeline>
<codeline lineno="12406"><highlight class="normal"></highlight></codeline>
<codeline lineno="12407"><highlight class="normal"><sp/><sp/>base::FilePath<sp/>user_data_dir;</highlight></codeline>
<codeline lineno="12408"><highlight class="normal"><sp/><sp/>base::FilePath<sp/>crash_dir;</highlight></codeline>
<codeline lineno="12409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!base::PathService::Get(chrome::DIR_USER_DATA,<sp/>&amp;user_data_dir)<sp/>||</highlight></codeline>
<codeline lineno="12410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!base::PathService::Get(chrome::DIR_CRASH_DUMPS,<sp/>&amp;crash_dir))<sp/>{</highlight></codeline>
<codeline lineno="12411"><highlight class="normal"><sp/><sp/><sp/><sp/>user_data_dir<sp/>=<sp/>base::FilePath();</highlight></codeline>
<codeline lineno="12412"><highlight class="normal"><sp/><sp/><sp/><sp/>crash_dir<sp/>=<sp/>base::FilePath();</highlight></codeline>
<codeline lineno="12413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12414"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;browser_watcher::WatcherMetricsProviderWin&gt;(</highlight></codeline>
<codeline lineno="12416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chrome::GetBrowserExitCodesRegistryPath(),<sp/>user_data_dir,<sp/>crash_dir,</highlight></codeline>
<codeline lineno="12417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::Bind(&amp;<ref refid="_c_w_e-79_8c_1af8b821770e0d04bb34e1be3ba3359bd3" kindref="member">GetExecutableVersionDetails</ref>)));</highlight></codeline>
<codeline lineno="12418"><highlight class="normal"></highlight></codeline>
<codeline lineno="12419"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;AntiVirusMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12421"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>defined(OS_WIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12422"><highlight class="normal"></highlight></codeline>
<codeline lineno="12423"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BUILDFLAG(ENABLE_PLUGINS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12424"><highlight class="normal"><sp/><sp/>plugin_metrics_provider_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>PluginMetricsProvider(local_state);</highlight></codeline>
<codeline lineno="12425"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;metrics::MetricsProvider&gt;(plugin_metrics_provider_));</highlight></codeline>
<codeline lineno="12427"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>BUILDFLAG(ENABLE_PLUGINS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12428"><highlight class="normal"></highlight></codeline>
<codeline lineno="12429"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12430"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;ChromeOSMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12432"><highlight class="normal"></highlight></codeline>
<codeline lineno="12433"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;SigninStatusMetricsProviderChromeOS&gt;());</highlight></codeline>
<codeline lineno="12435"><highlight class="normal"></highlight></codeline>
<codeline lineno="12436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(metrics::GetMetricsReportingDefaultState(local_state)<sp/>==</highlight></codeline>
<codeline lineno="12437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metrics::EnableMetricsDefault::DEFAULT_UNKNOWN)<sp/>{</highlight></codeline>
<codeline lineno="12438"><highlight class="normal"><sp/><sp/><sp/><sp/>metrics::RecordMetricsReportingDefaultState(</highlight></codeline>
<codeline lineno="12439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_state,<sp/>metrics::EnableMetricsDefault::OPT_OUT);</highlight></codeline>
<codeline lineno="12440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12441"><highlight class="normal"></highlight></codeline>
<codeline lineno="12442"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;chromeos::PrinterMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12445"><highlight class="normal"></highlight></codeline>
<codeline lineno="12446"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12447"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SigninStatusMetricsProvider::CreateInstance(</highlight></codeline>
<codeline lineno="12449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;ChromeSigninStatusMetricsProviderDelegate&gt;()));</highlight></codeline>
<codeline lineno="12450"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>!defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12451"><highlight class="normal"></highlight></codeline>
<codeline lineno="12452"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;syncer::DeviceCountMetricsProvider&gt;(</highlight></codeline>
<codeline lineno="12454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base::Bind(&amp;browser_sync::ChromeSyncClient::GetDeviceInfoTrackers)));</highlight></codeline>
<codeline lineno="12455"><highlight class="normal"></highlight></codeline>
<codeline lineno="12456"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;HttpsEngagementMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12458"><highlight class="normal"></highlight></codeline>
<codeline lineno="12459"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;CertificateReportingMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12461"><highlight class="normal"></highlight></codeline>
<codeline lineno="12462"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(OS_ANDROID)<sp/>&amp;&amp;<sp/>!defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12463"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;UpgradeMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12465"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight></codeline>
<codeline lineno="12466"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12467"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_MACOSX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12468"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;PowerMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12470"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12471"><highlight class="normal"></highlight></codeline>
<codeline lineno="12472"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BUILDFLAG(ENABLE_CROS_ASSISTANT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12473"><highlight class="normal"><sp/><sp/>metrics_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;AssistantServiceMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12475"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>BUILDFLAG(ENABLE_CROS_ASSISTANT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12477"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ChromeMetricsServiceClient::RegisterUKMProviders()<sp/>{</highlight></codeline>
<codeline lineno="12478"><highlight class="normal"><sp/><sp/>ukm_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;metrics::NetworkMetricsProvider&gt;(</highlight></codeline>
<codeline lineno="12480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>content::CreateNetworkConnectionTrackerAsyncGetter(),</highlight></codeline>
<codeline lineno="12481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;metrics::NetworkQualityEstimatorProviderImpl&gt;()));</highlight></codeline>
<codeline lineno="12482"><highlight class="normal"></highlight></codeline>
<codeline lineno="12483"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12484"><highlight class="normal"><sp/><sp/>ukm_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;ChromeOSMetricsProvider&gt;());</highlight></codeline>
<codeline lineno="12486"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#endif<sp/><sp/>//<sp/>!defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12487"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12488"><highlight class="normal"><sp/><sp/><sp/>ukm_service_-&gt;RegisterMetricsProvider(</highlight></codeline>
<codeline lineno="12489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;variations::FieldTrialsProvider&gt;(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="12490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kUKMFieldTrialSuffix));</highlight></codeline>
<codeline lineno="12491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12492"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SystemProfileProto&amp;<sp/>MetricsLog::RecordEnvironment(</highlight></codeline>
<codeline lineno="12493"><highlight class="normal"><sp/><sp/><sp/><sp/>DelegatingProvider*<sp/>delegating_provider)<sp/>{</highlight></codeline>
<codeline lineno="12494"><highlight class="normal"><sp/><sp/>DCHECK(!has_environment_);</highlight></codeline>
<codeline lineno="12495"><highlight class="normal"><sp/><sp/>has_environment_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12496"><highlight class="normal"></highlight></codeline>
<codeline lineno="12497"><highlight class="normal"><sp/><sp/>SystemProfileProto*<sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref><sp/>=<sp/><ref refid="_c_w_e-79_8c_1ac8d66430b59f81077b7e1f9e4869e508" kindref="member">uma_proto</ref>()-&gt;mutable_system_profile();</highlight></codeline>
<codeline lineno="12498"><highlight class="normal"></highlight></codeline>
<codeline lineno="12499"><highlight class="normal"><sp/><sp/>WriteMetricsEnableDefault(client_-&gt;GetMetricsReportingDefaultState(),</highlight></codeline>
<codeline lineno="12500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>);</highlight></codeline>
<codeline lineno="12501"><highlight class="normal"></highlight></codeline>
<codeline lineno="12502"><highlight class="normal"><sp/><sp/>std::string<sp/>brand_code;</highlight></codeline>
<codeline lineno="12503"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(client_-&gt;GetBrand(&amp;brand_code))</highlight></codeline>
<codeline lineno="12504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>-&gt;set_brand_code(brand_code);</highlight></codeline>
<codeline lineno="12505"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12506"><highlight class="normal"><sp/><sp/>SystemProfileProto::Hardware::CPU*<sp/>cpu<sp/>=</highlight></codeline>
<codeline lineno="12507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>-&gt;mutable_hardware()-&gt;mutable_cpu();</highlight></codeline>
<codeline lineno="12508"><highlight class="normal"><sp/><sp/>base::CPU<sp/>cpu_info;</highlight></codeline>
<codeline lineno="12509"><highlight class="normal"><sp/><sp/>cpu-&gt;set_vendor_name(cpu_info.vendor_name());</highlight></codeline>
<codeline lineno="12510"><highlight class="normal"><sp/><sp/>cpu-&gt;set_signature(cpu_info.signature());</highlight></codeline>
<codeline lineno="12511"><highlight class="normal"><sp/><sp/>cpu-&gt;set_num_cores(base::SysInfo::NumberOfProcessors());</highlight></codeline>
<codeline lineno="12512"><highlight class="normal"><sp/><sp/><sp/>delegating_provider-&gt;ProvideSystemProfileMetrics(<ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>);</highlight></codeline>
<codeline lineno="12513"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12514"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="_c_w_e-79_8c_1a6f308c21b67b69dd2d6cda83e16d2255" kindref="member">system_profile</ref>;</highlight></codeline>
<codeline lineno="12515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12516"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a15864646880d3365e83126dce7e253f7" kindref="member">initializeHolderIfNeeded</ref>(ScriptState*<sp/>scriptState,<sp/>v8::Local&lt;v8::Object&gt;<sp/>classObject,<sp/>v8::Local&lt;v8::Value&gt;<sp/>holder)</highlight></codeline>
<codeline lineno="12517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12518"><highlight class="normal"><sp/><sp/><sp/><sp/>RELEASE_ASSERT(!holder.IsEmpty());</highlight></codeline>
<codeline lineno="12519"><highlight class="normal"><sp/><sp/><sp/><sp/>RELEASE_ASSERT(holder-&gt;IsObject());</highlight></codeline>
<codeline lineno="12520"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>holderObject<sp/>=<sp/>v8::Local&lt;v8::Object&gt;::Cast(holder);</highlight></codeline>
<codeline lineno="12521"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>scriptState-&gt;isolate();</highlight></codeline>
<codeline lineno="12522"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=<sp/>scriptState-&gt;context();</highlight></codeline>
<codeline lineno="12523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>privateIsInitialized<sp/>=<sp/>V8PrivateProperty::getPrivateScriptRunnerIsInitialized(isolate);</highlight></codeline>
<codeline lineno="12524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(privateIsInitialized.hasValue(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>holderObject))</highlight></codeline>
<codeline lineno="12525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Already<sp/>initialized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12526"><highlight class="normal"></highlight></codeline>
<codeline lineno="12527"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::TryCatch<sp/>block(isolate);</highlight></codeline>
<codeline lineno="12528"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>initializeFunction;</highlight></codeline>
<codeline lineno="12529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(classObject-&gt;Get(scriptState-&gt;context(),<sp/>v8String(isolate,<sp/></highlight><highlight class="stringliteral">&quot;initialize&quot;</highlight><highlight class="normal">)).ToLocal(&amp;initializeFunction)<sp/>&amp;&amp;<sp/>initializeFunction-&gt;IsFunction())<sp/>{</highlight></codeline>
<codeline lineno="12530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::TryCatch<sp/>block(isolate);</highlight></codeline>
<codeline lineno="12531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>result;</highlight></codeline>
<codeline lineno="12532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!V8ScriptRunner::callFunction(v8::Local&lt;v8::Function&gt;::Cast(initializeFunction),<sp/>scriptState-&gt;getExecutionContext(),<sp/>holder,<sp/>0,<sp/>0,<sp/>isolate).ToLocal(&amp;result))<sp/>{</highlight></codeline>
<codeline lineno="12533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Object<sp/>constructor<sp/>threw<sp/>an<sp/>exception.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" kindref="member">dumpV8Message</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>block.Message());</highlight></codeline>
<codeline lineno="12535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_NOTREACHED();</highlight></codeline>
<codeline lineno="12536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12538"><highlight class="normal"></highlight></codeline>
<codeline lineno="12539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(classObject-&gt;GetPrototype()<sp/>!=<sp/>holderObject-&gt;GetPrototype())<sp/>{</highlight></codeline>
<codeline lineno="12540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v8CallBoolean(classObject-&gt;SetPrototype(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>holderObject-&gt;GetPrototype())))<sp/>{</highlight></codeline>
<codeline lineno="12541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>SetPrototype<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" kindref="member">dumpV8Message</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>block.Message());</highlight></codeline>
<codeline lineno="12543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_NOTREACHED();</highlight></codeline>
<codeline lineno="12544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v8CallBoolean(holderObject-&gt;SetPrototype(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>classObject)))<sp/>{</highlight></codeline>
<codeline lineno="12547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>SetPrototype<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" kindref="member">dumpV8Message</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>block.Message());</highlight></codeline>
<codeline lineno="12549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_NOTREACHED();</highlight></codeline>
<codeline lineno="12550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12551"><highlight class="normal"></highlight></codeline>
<codeline lineno="12552"><highlight class="normal"><sp/><sp/><sp/><sp/>privateIsInitialized.set(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>holderObject,<sp/><ref refid="_c_w_e-79_8c_1a2a92818f268e3305470d937415ce4c9d" kindref="member">v8Boolean</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>isolate));</highlight></codeline>
<codeline lineno="12553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12554"><highlight class="normal">v8::Local&lt;v8::Value&gt;<sp/>PrivateScriptRunner::runDOMAttributeGetter(ScriptState*<sp/>scriptState,<sp/>ScriptState*<sp/>scriptStateInUserScript,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>className,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>attributeName,<sp/>v8::Local&lt;v8::Value&gt;<sp/>holder)</highlight></codeline>
<codeline lineno="12555"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12556"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>scriptState-&gt;isolate();</highlight></codeline>
<codeline lineno="12557"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>classObject<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a25d0e49f6c8a61ab56034685bfb55102" kindref="member">classObjectOfPrivateScript</ref>(scriptState,<sp/>className);</highlight></codeline>
<codeline lineno="12558"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>descriptor;</highlight></codeline>
<codeline lineno="12559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!classObject-&gt;GetOwnPropertyDescriptor(scriptState-&gt;context(),<sp/>v8String(isolate,<sp/>attributeName)).ToLocal(&amp;descriptor)<sp/>||<sp/>!descriptor-&gt;IsObject())<sp/>{</highlight></codeline>
<codeline lineno="12560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Target<sp/>DOM<sp/>attribute<sp/>getter<sp/>was<sp/>not<sp/>found.<sp/>(Class<sp/>name<sp/>=<sp/>%s,<sp/>Attribute<sp/>name<sp/>=<sp/>%s)\n&quot;</highlight><highlight class="normal">,<sp/>className,<sp/>attributeName);</highlight></codeline>
<codeline lineno="12561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_NOTREACHED();</highlight></codeline>
<codeline lineno="12562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12563"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>getter;</highlight></codeline>
<codeline lineno="12564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v8::Local&lt;v8::Object&gt;::Cast(descriptor)-&gt;Get(scriptState-&gt;context(),<sp/>v8String(isolate,<sp/></highlight><highlight class="stringliteral">&quot;get&quot;</highlight><highlight class="normal">)).ToLocal(&amp;getter)<sp/>||<sp/>!getter-&gt;IsFunction())<sp/>{</highlight></codeline>
<codeline lineno="12565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Target<sp/>DOM<sp/>attribute<sp/>getter<sp/>was<sp/>not<sp/>found.<sp/>(Class<sp/>name<sp/>=<sp/>%s,<sp/>Attribute<sp/>name<sp/>=<sp/>%s)\n&quot;</highlight><highlight class="normal">,<sp/>className,<sp/>attributeName);</highlight></codeline>
<codeline lineno="12566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_NOTREACHED();</highlight></codeline>
<codeline lineno="12567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a15864646880d3365e83126dce7e253f7" kindref="member">initializeHolderIfNeeded</ref>(scriptState,<sp/>classObject,<sp/>holder);</highlight></codeline>
<codeline lineno="12569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::TryCatch<sp/>block(isolate);</highlight></codeline>
<codeline lineno="12570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>result;</highlight></codeline>
<codeline lineno="12571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!V8ScriptRunner::callFunction(v8::Local&lt;v8::Function&gt;::Cast(getter),<sp/>scriptState-&gt;getExecutionContext(),<sp/>holder,<sp/>0,<sp/>0,<sp/>isolate).ToLocal(&amp;result))<sp/>{</highlight></codeline>
<codeline lineno="12572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a097ff2ae9deb0314990702671c978cb1" kindref="member">rethrowExceptionInPrivateScript</ref>(isolate,<sp/>block,<sp/>scriptStateInUserScript,<sp/>ExceptionState::GetterContext,<sp/>attributeName,<sp/>className);</highlight></codeline>
<codeline lineno="12573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block.ReThrow();</highlight></codeline>
<codeline lineno="12574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Value&gt;();</highlight></codeline>
<codeline lineno="12575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12578"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PrivateScriptRunner::runDOMAttributeSetter(ScriptState*<sp/>scriptState,<sp/>ScriptState*<sp/>scriptStateInUserScript,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>className,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>attributeName,<sp/>v8::Local&lt;v8::Value&gt;<sp/>holder,<sp/>v8::Local&lt;v8::Value&gt;<sp/>v8Value)</highlight></codeline>
<codeline lineno="12579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12580"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>scriptState-&gt;isolate();</highlight></codeline>
<codeline lineno="12581"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>classObject<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a25d0e49f6c8a61ab56034685bfb55102" kindref="member">classObjectOfPrivateScript</ref>(scriptState,<sp/>className);</highlight></codeline>
<codeline lineno="12582"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>descriptor;</highlight></codeline>
<codeline lineno="12583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!classObject-&gt;GetOwnPropertyDescriptor(scriptState-&gt;context(),<sp/>v8String(isolate,<sp/>attributeName)).ToLocal(&amp;descriptor)<sp/>||<sp/>!descriptor-&gt;IsObject())<sp/>{</highlight></codeline>
<codeline lineno="12584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Target<sp/>DOM<sp/>attribute<sp/>setter<sp/>was<sp/>not<sp/>found.<sp/>(Class<sp/>name<sp/>=<sp/>%s,<sp/>Attribute<sp/>name<sp/>=<sp/>%s)\n&quot;</highlight><highlight class="normal">,<sp/>className,<sp/>attributeName);</highlight></codeline>
<codeline lineno="12585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_NOTREACHED();</highlight></codeline>
<codeline lineno="12586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12587"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>setter;</highlight></codeline>
<codeline lineno="12588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v8::Local&lt;v8::Object&gt;::Cast(descriptor)-&gt;Get(scriptState-&gt;context(),<sp/>v8String(isolate,<sp/></highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal">)).ToLocal(&amp;setter)<sp/>||<sp/>!setter-&gt;IsFunction())<sp/>{</highlight></codeline>
<codeline lineno="12589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Target<sp/>DOM<sp/>attribute<sp/>setter<sp/>was<sp/>not<sp/>found.<sp/>(Class<sp/>name<sp/>=<sp/>%s,<sp/>Attribute<sp/>name<sp/>=<sp/>%s)\n&quot;</highlight><highlight class="normal">,<sp/>className,<sp/>attributeName);</highlight></codeline>
<codeline lineno="12590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_NOTREACHED();</highlight></codeline>
<codeline lineno="12591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a15864646880d3365e83126dce7e253f7" kindref="member">initializeHolderIfNeeded</ref>(scriptState,<sp/>classObject,<sp/>holder);</highlight></codeline>
<codeline lineno="12593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[]<sp/>=<sp/>{<sp/>v8Value<sp/>};</highlight></codeline>
<codeline lineno="12594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::TryCatch<sp/>block(isolate);</highlight></codeline>
<codeline lineno="12595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>result;</highlight></codeline>
<codeline lineno="12596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!V8ScriptRunner::callFunction(v8::Local&lt;v8::Function&gt;::Cast(setter),<sp/>scriptState-&gt;getExecutionContext(),<sp/>holder,<sp/>WTF_ARRAY_LENGTH(argv),<sp/>argv,<sp/>isolate).ToLocal(&amp;result))<sp/>{</highlight></codeline>
<codeline lineno="12597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a097ff2ae9deb0314990702671c978cb1" kindref="member">rethrowExceptionInPrivateScript</ref>(isolate,<sp/>block,<sp/>scriptStateInUserScript,<sp/>ExceptionState::SetterContext,<sp/>attributeName,<sp/>className);</highlight></codeline>
<codeline lineno="12598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block.ReThrow();</highlight></codeline>
<codeline lineno="12599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12603"><highlight class="normal">v8::Local&lt;v8::Value&gt;<sp/>PrivateScriptRunner::runDOMMethod(ScriptState*<sp/>scriptState,<sp/>ScriptState*<sp/>scriptStateInUserScript,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>className,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>methodName,<sp/>v8::Local&lt;v8::Value&gt;<sp/>holder,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/>v8::Local&lt;v8::Value&gt;<sp/>argv[])</highlight></codeline>
<codeline lineno="12604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12605"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>classObject<sp/>=<sp/><ref refid="_c_w_e-79_8c_1a25d0e49f6c8a61ab56034685bfb55102" kindref="member">classObjectOfPrivateScript</ref>(scriptState,<sp/>className);</highlight></codeline>
<codeline lineno="12606"><highlight class="normal"><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>method;</highlight></codeline>
<codeline lineno="12607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!classObject-&gt;Get(scriptState-&gt;context(),<sp/>v8String(scriptState-&gt;isolate(),<sp/>methodName)).ToLocal(&amp;method)<sp/>||<sp/>!method-&gt;IsFunction())<sp/>{</highlight></codeline>
<codeline lineno="12608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Target<sp/>DOM<sp/>method<sp/>was<sp/>not<sp/>found.<sp/>(Class<sp/>name<sp/>=<sp/>%s,<sp/>Method<sp/>name<sp/>=<sp/>%s)\n&quot;</highlight><highlight class="normal">,<sp/>className,<sp/>methodName);</highlight></codeline>
<codeline lineno="12609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_NOTREACHED();</highlight></codeline>
<codeline lineno="12610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a15864646880d3365e83126dce7e253f7" kindref="member">initializeHolderIfNeeded</ref>(scriptState,<sp/>classObject,<sp/>holder);</highlight></codeline>
<codeline lineno="12612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::TryCatch<sp/>block(scriptState-&gt;isolate());</highlight></codeline>
<codeline lineno="12613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>result;</highlight></codeline>
<codeline lineno="12614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!V8ScriptRunner::callFunction(v8::Local&lt;v8::Function&gt;::Cast(method),<sp/>scriptState-&gt;getExecutionContext(),<sp/>holder,<sp/>argc,<sp/>argv,<sp/>scriptState-&gt;isolate()).ToLocal(&amp;result))<sp/>{</highlight></codeline>
<codeline lineno="12615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a097ff2ae9deb0314990702671c978cb1" kindref="member">rethrowExceptionInPrivateScript</ref>(scriptState-&gt;isolate(),<sp/>block,<sp/>scriptStateInUserScript,<sp/>ExceptionState::ExecutionContext,<sp/>methodName,<sp/>className);</highlight></codeline>
<codeline lineno="12616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block.ReThrow();</highlight></codeline>
<codeline lineno="12617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Value&gt;();</highlight></codeline>
<codeline lineno="12618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12621" refid="_c_w_e-79_8c_1a40511fae1574a0ebf606594cf7de5882" refkind="member"><highlight class="normal"><sp/>base::string16<sp/><ref refid="_c_w_e-79_8c_1a40511fae1574a0ebf606594cf7de5882" kindref="member">FormatBookmarkURLForDisplay</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL&amp;<sp/>url)<sp/>{</highlight></codeline>
<codeline lineno="12622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>url_formatter::FormatUrl(</highlight></codeline>
<codeline lineno="12623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>url,<sp/>url_formatter::kFormatUrlOmitAll<sp/>&amp;</highlight></codeline>
<codeline lineno="12624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~url_formatter::kFormatUrlOmitUsernamePassword,</highlight></codeline>
<codeline lineno="12625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>net::UnescapeRule::SPACES,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12626"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="12627" refid="_c_w_e-79_8c_1a53522aa297007b22a828ac79ff8ff416" refkind="member"><highlight class="normal"><sp/>std::string<sp/><ref refid="_c_w_e-79_8c_1a53522aa297007b22a828ac79ff8ff416" kindref="member">GetUploadData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>brand)<sp/>{</highlight></codeline>
<codeline lineno="12628"><highlight class="normal"><sp/><sp/><sp/>DCHECK(!brand.empty());</highlight></codeline>
<codeline lineno="12629"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>(kPostXml);</highlight></codeline>
<codeline lineno="12630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>placeholder(</highlight><highlight class="stringliteral">&quot;__BRANDCODE_PLACEHOLDER__&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>placeholder_pos<sp/>=<sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>.find(placeholder);</highlight></codeline>
<codeline lineno="12632"><highlight class="normal"><sp/><sp/>DCHECK(placeholder_pos<sp/>!=<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="12633"><highlight class="normal"><sp/><sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>.replace(placeholder_pos,<sp/>placeholder.size(),<sp/>brand);</highlight></codeline>
<codeline lineno="12634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="12635"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="12636"><highlight class="normal">SessionStartupPref<sp/>StartupBrowserCreator::GetSessionStartupPref(</highlight></codeline>
<codeline lineno="12637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::CommandLine&amp;<sp/>command_line,</highlight></codeline>
<codeline lineno="12638"><highlight class="normal"><sp/><sp/><sp/><sp/>Profile*<sp/>profile)<sp/>{</highlight></codeline>
<codeline lineno="12639"><highlight class="normal"><sp/><sp/>DCHECK(profile);</highlight></codeline>
<codeline lineno="12640"><highlight class="normal"><sp/><sp/>PrefService*<sp/>prefs<sp/>=<sp/>profile-&gt;GetPrefs();</highlight></codeline>
<codeline lineno="12641"><highlight class="normal"><sp/><sp/>SessionStartupPref<sp/>pref<sp/>=<sp/>SessionStartupPref::GetStartupPref(prefs);</highlight></codeline>
<codeline lineno="12642"><highlight class="normal"></highlight></codeline>
<codeline lineno="12643"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OS_CHROMEOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_first_run<sp/>=</highlight></codeline>
<codeline lineno="12645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>user_manager::UserManager::Get()-&gt;IsCurrentUserNew();</highlight></codeline>
<codeline lineno="12646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>did_restart<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12647"><highlight class="normal"><sp/><sp/>StartupBrowserCreator::WasRestarted();</highlight></codeline>
<codeline lineno="12648"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_first_run<sp/>=<sp/>first_run::IsChromeFirstRun();</highlight></codeline>
<codeline lineno="12650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>did_restart<sp/>=<sp/>StartupBrowserCreator::WasRestarted();</highlight></codeline>
<codeline lineno="12651"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12652"><highlight class="normal"></highlight></codeline>
<codeline lineno="12653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_first_run<sp/>&amp;&amp;<sp/>SessionStartupPref::TypeIsDefault(prefs))</highlight></codeline>
<codeline lineno="12654"><highlight class="normal"><sp/><sp/><sp/><sp/>pref.type<sp/>=<sp/>SessionStartupPref::DEFAULT;</highlight></codeline>
<codeline lineno="12655"><highlight class="normal"></highlight></codeline>
<codeline lineno="12656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((command_line.HasSwitch(switches::kRestoreLastSession)<sp/>||<sp/>did_restart)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="12657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!profile-&gt;IsNewProfile())<sp/>{</highlight></codeline>
<codeline lineno="12658"><highlight class="normal"><sp/><sp/><sp/><sp/>pref.type<sp/>=<sp/>SessionStartupPref::LAST;</highlight></codeline>
<codeline lineno="12659"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12660"><highlight class="normal"></highlight></codeline>
<codeline lineno="12661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!profile-&gt;IsGuestSession())<sp/>{</highlight></codeline>
<codeline lineno="12662"><highlight class="normal"><sp/><sp/><sp/><sp/>ProfileAttributesEntry*<sp/>entry<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_entry<sp/>=</highlight></codeline>
<codeline lineno="12664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_browser_process-&gt;profile_manager()</highlight></codeline>
<codeline lineno="12665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetProfileAttributesStorage()</highlight></codeline>
<codeline lineno="12666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.GetProfileAttributesWithPath(profile-&gt;GetPath(),<sp/>&amp;entry);</highlight></codeline>
<codeline lineno="12667"><highlight class="normal"></highlight></codeline>
<codeline lineno="12668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_entry<sp/>&amp;&amp;<sp/>entry-&gt;IsSigninRequired())</highlight></codeline>
<codeline lineno="12669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pref.type<sp/>=<sp/>SessionStartupPref::LAST;</highlight></codeline>
<codeline lineno="12670"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12671"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pref.type<sp/>==<sp/>SessionStartupPref::LAST<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="12673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IncognitoModePrefs::ShouldLaunchIncognito(command_line,<sp/>prefs))<sp/>{</highlight></codeline>
<codeline lineno="12674"><highlight class="normal"><sp/><sp/><sp/><sp/>pref.type<sp/>=<sp/>SessionStartupPref::DEFAULT;</highlight></codeline>
<codeline lineno="12675"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12676"><highlight class="normal"></highlight></codeline>
<codeline lineno="12677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pref;</highlight></codeline>
<codeline lineno="12678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12679"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>v8::Local&lt;v8::Value&gt;<sp/><ref refid="_c_w_e-79_8c_1a341830ce581df85e32370f3dcc4925bd" kindref="member">compileAndRunPrivateScript</ref>(ScriptState*<sp/>scriptState,</highlight></codeline>
<codeline lineno="12680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>scriptClassName,</highlight></codeline>
<codeline lineno="12681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>source,</highlight></codeline>
<codeline lineno="12682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-22_8c_1ac325ee2e130c33214318b5dea0073d47" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="12683"><highlight class="normal"><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>scriptState-&gt;isolate();</highlight></codeline>
<codeline lineno="12684"><highlight class="normal"><sp/><sp/>v8::TryCatch<sp/>block(isolate);</highlight></codeline>
<codeline lineno="12685"><highlight class="normal"><sp/><sp/>String<sp/>sourceString(source,<sp/><ref refid="_c_w_e-22_8c_1ac325ee2e130c33214318b5dea0073d47" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="12686"><highlight class="normal"><sp/><sp/>String<sp/>fileName<sp/>=<sp/>scriptClassName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.js&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12687"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12688"><highlight class="normal"><sp/><sp/><sp/>v8::Local&lt;v8::Context&gt;<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref><sp/>=<sp/>scriptState-&gt;context();</highlight></codeline>
<codeline lineno="12689"><highlight class="normal"><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>global<sp/>=<sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>-&gt;Global();</highlight></codeline>
<codeline lineno="12690"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>privateScriptController<sp/>=</highlight></codeline>
<codeline lineno="12691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>global-&gt;Get(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8String(isolate,<sp/></highlight><highlight class="stringliteral">&quot;privateScriptController&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="12692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToLocalChecked();</highlight></codeline>
<codeline lineno="12693"><highlight class="normal"><sp/><sp/>RELEASE_ASSERT(privateScriptController-&gt;IsUndefined()<sp/>||</highlight></codeline>
<codeline lineno="12694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>privateScriptController-&gt;IsObject());</highlight></codeline>
<codeline lineno="12695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(privateScriptController-&gt;IsObject())<sp/>{</highlight></codeline>
<codeline lineno="12696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Object&gt;<sp/>privateScriptControllerObject<sp/>=</highlight></codeline>
<codeline lineno="12697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>privateScriptController.As&lt;v8::Object&gt;();</highlight></codeline>
<codeline lineno="12698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>importFunctionValue<sp/>=</highlight></codeline>
<codeline lineno="12699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>privateScriptControllerObject-&gt;Get(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8String(isolate,<sp/></highlight><highlight class="stringliteral">&quot;import&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="12700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToLocalChecked();</highlight></codeline>
<codeline lineno="12701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(importFunctionValue-&gt;IsUndefined())<sp/>{</highlight></codeline>
<codeline lineno="12702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v8::FunctionTemplate::New(isolate,<sp/><ref refid="_c_w_e-79_8c_1a3529938c16e0e3ebfefefa994878c111" kindref="member">importFunction</ref>)</highlight></codeline>
<codeline lineno="12704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;GetFunction(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>)</highlight></codeline>
<codeline lineno="12705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToLocal(&amp;</highlight><highlight class="keyword">function</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="12706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!v8CallBoolean(privateScriptControllerObject-&gt;Set(</highlight></codeline>
<codeline lineno="12707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>v8String(isolate,<sp/></highlight><highlight class="stringliteral">&quot;import&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="12708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" kindref="member">dumpV8Message</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>block.Message());</highlight></codeline>
<codeline lineno="12709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(FATAL)</highlight></codeline>
<codeline lineno="12710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Setting<sp/>import<sp/>function<sp/>failed.<sp/>(Class<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>scriptClassName.utf8().data()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12715"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12716"><highlight class="normal"></highlight></codeline>
<codeline lineno="12717"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Script&gt;<sp/>script;</highlight></codeline>
<codeline lineno="12718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v8Call(V8ScriptRunner::compileScript(</highlight></codeline>
<codeline lineno="12719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8String(isolate,<sp/>sourceString),<sp/>fileName,<sp/>String(),</highlight></codeline>
<codeline lineno="12720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TextPosition::minimumPosition(),<sp/>isolate,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="12721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>NotSharableCrossOrigin),</highlight></codeline>
<codeline lineno="12722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>script,<sp/>block))<sp/>{</highlight></codeline>
<codeline lineno="12723"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" kindref="member">dumpV8Message</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>block.Message());</highlight></codeline>
<codeline lineno="12724"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(FATAL)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>Compile<sp/>failed.<sp/>(Class<sp/>name<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>scriptClassName.utf8().data()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12726"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12727"><highlight class="normal"></highlight></codeline>
<codeline lineno="12728"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>result;</highlight></codeline>
<codeline lineno="12729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v8Call(V8ScriptRunner::runCompiledInternalScript(isolate,<sp/>script),</highlight></codeline>
<codeline lineno="12730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result,<sp/>block))<sp/>{</highlight></codeline>
<codeline lineno="12731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1a1bb89f2ff02cc35c781d39bed4a2847c" kindref="member">dumpV8Message</ref>(<ref refid="_c_w_e-20_8c_1a5ae42fba9a66322fe003c803cb257fb8" kindref="member">context</ref>,<sp/>block.Message());</highlight></codeline>
<codeline lineno="12732"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(FATAL)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Private<sp/>script<sp/>error:<sp/>installClass()<sp/>failed.<sp/>(Class<sp/>name<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>scriptClassName.utf8().data()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12734"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="12736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12737" refid="_c_w_e-79_8c_1a8d6b5d15c3cecadf447e429a5a66cd7a" refkind="member"><highlight class="normal">UserInitiatedInfo<sp/><ref refid="_c_w_e-79_8c_1a8d6b5d15c3cecadf447e429a5a66cd7a" kindref="member">CreateUserInitiatedInfo</ref>(</highlight></codeline>
<codeline lineno="12738"><highlight class="normal"><sp/><sp/><sp/><sp/>content::NavigationHandle*<sp/>navigation_handle,</highlight></codeline>
<codeline lineno="12739"><highlight class="normal"><sp/><sp/><sp/><sp/>PageLoadTracker*<sp/>committed_load)<sp/>{</highlight></codeline>
<codeline lineno="12740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!navigation_handle-&gt;IsRendererInitiated())</highlight></codeline>
<codeline lineno="12741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UserInitiatedInfo::BrowserInitiated();</highlight></codeline>
<codeline lineno="12742"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12743"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UserInitiatedInfo::RenderInitiated(</highlight></codeline>
<codeline lineno="12744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>navigation_handle-&gt;HasUserGesture());</highlight></codeline>
<codeline lineno="12745"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="12746"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UkmPageLoadMetricsObserver::RecordPageLoadExtraInfoMetrics(</highlight></codeline>
<codeline lineno="12747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>page_load_metrics::PageLoadExtraInfo&amp;<sp/>info,</highlight></codeline>
<codeline lineno="12748"><highlight class="normal"><sp/><sp/><sp/><sp/>base::TimeTicks<sp/>app_background_time)<sp/>{</highlight></codeline>
<codeline lineno="12749"><highlight class="normal"><sp/><sp/>ukm::builders::PageLoad<sp/>builder(info.source_id);</highlight></codeline>
<codeline lineno="12750"><highlight class="normal"><sp/><sp/>base::Optional&lt;base::TimeDelta&gt;<sp/>foreground_duration<sp/>=</highlight></codeline>
<codeline lineno="12751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>page_load_metrics::GetInitialForegroundDuration(info,</highlight></codeline>
<codeline lineno="12752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app_background_time);</highlight></codeline>
<codeline lineno="12753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(foreground_duration)<sp/>{</highlight></codeline>
<codeline lineno="12754"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetPageTiming_ForegroundDuration(</highlight></codeline>
<codeline lineno="12755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foreground_duration.value().InMilliseconds());</highlight></codeline>
<codeline lineno="12756"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12757"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="12758"><highlight class="normal"><sp/><sp/><sp/>metrics::SystemProfileProto::Network::EffectiveConnectionType</highlight></codeline>
<codeline lineno="12759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>proto_effective_connection_type<sp/>=</highlight></codeline>
<codeline lineno="12760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics::ConvertEffectiveConnectionType(effective_connection_type_);</highlight></codeline>
<codeline lineno="12761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proto_effective_connection_type<sp/>!=</highlight></codeline>
<codeline lineno="12762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metrics::SystemProfileProto::Network::EFFECTIVE_CONNECTION_TYPE_UNKNOWN)<sp/>{</highlight></codeline>
<codeline lineno="12763"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetNet_EffectiveConnectionType2_OnNavigationStart(</highlight></codeline>
<codeline lineno="12764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;int64_t&gt;(proto_effective_connection_type));</highlight></codeline>
<codeline lineno="12765"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12766"><highlight class="normal"></highlight></codeline>
<codeline lineno="12767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(http_response_code_)<sp/>{</highlight></codeline>
<codeline lineno="12768"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetNet_HttpResponseCode(</highlight></codeline>
<codeline lineno="12769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;int64_t&gt;(http_response_code_.value()));</highlight></codeline>
<codeline lineno="12770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(http_rtt_estimate_)<sp/>{</highlight></codeline>
<codeline lineno="12772"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetNet_HttpRttEstimate_OnNavigationStart(</highlight></codeline>
<codeline lineno="12773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;int64_t&gt;(http_rtt_estimate_.value().InMilliseconds()));</highlight></codeline>
<codeline lineno="12774"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transport_rtt_estimate_)<sp/>{</highlight></codeline>
<codeline lineno="12776"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetNet_TransportRttEstimate_OnNavigationStart(</highlight></codeline>
<codeline lineno="12777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;int64_t&gt;(transport_rtt_estimate_.value().InMilliseconds()));</highlight></codeline>
<codeline lineno="12778"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(downstream_kbps_estimate_)<sp/>{</highlight></codeline>
<codeline lineno="12780"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetNet_DownstreamKbpsEstimate_OnNavigationStart(</highlight></codeline>
<codeline lineno="12781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;int64_t&gt;(downstream_kbps_estimate_.value()));</highlight></codeline>
<codeline lineno="12782"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12783"><highlight class="normal"><sp/><sp/>builder.SetNavigation_PageTransition(static_cast&lt;int64_t&gt;(page_transition_));</highlight></codeline>
<codeline lineno="12784"><highlight class="normal"><sp/><sp/>builder.SetNavigation_PageEndReason(</highlight></codeline>
<codeline lineno="12785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;int64_t&gt;(info.page_end_reason));</highlight></codeline>
<codeline lineno="12786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.did_commit<sp/>&amp;&amp;<sp/>was_cached_)<sp/>{</highlight></codeline>
<codeline lineno="12787"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetWasCached(1);</highlight></codeline>
<codeline lineno="12788"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12789"><highlight class="normal"><sp/><sp/>builder.Record(ukm::UkmRecorder::Get());</highlight></codeline>
<codeline lineno="12790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12791"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UkmPageLoadMetricsObserver::RecordTimingMetrics(</highlight></codeline>
<codeline lineno="12792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>page_load_metrics::mojom::PageLoadTiming&amp;<sp/>timing,</highlight></codeline>
<codeline lineno="12793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>page_load_metrics::PageLoadExtraInfo&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline lineno="12794"><highlight class="normal"><sp/><sp/><sp/>ukm::builders::PageLoad<sp/>builder(info.source_id);</highlight></codeline>
<codeline lineno="12795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_user_initiated_navigation<sp/>=</highlight></codeline>
<codeline lineno="12796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info.user_initiated_info.browser_initiated<sp/>||</highlight></codeline>
<codeline lineno="12797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timing.input_to_navigation_start;</highlight></codeline>
<codeline lineno="12798"><highlight class="normal"><sp/><sp/>builder.SetExperimental_Navigation_UserInitiated(</highlight></codeline>
<codeline lineno="12799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>is_user_initiated_navigation);</highlight></codeline>
<codeline lineno="12800"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timing.input_to_navigation_start)<sp/>{</highlight></codeline>
<codeline lineno="12801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>builder.SetExperimental_InputToNavigationStart(</highlight></codeline>
<codeline lineno="12802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.input_to_navigation_start.value().InMilliseconds());</highlight></codeline>
<codeline lineno="12803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timing.parse_timing-&gt;parse_start)<sp/>{</highlight></codeline>
<codeline lineno="12805"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetParseTiming_NavigationToParseStart(</highlight></codeline>
<codeline lineno="12806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.parse_timing-&gt;parse_start.value().InMilliseconds());</highlight></codeline>
<codeline lineno="12807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timing.document_timing-&gt;dom_content_loaded_event_start)<sp/>{</highlight></codeline>
<codeline lineno="12809"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetDocumentTiming_NavigationToDOMContentLoadedEventFired(</highlight></codeline>
<codeline lineno="12810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.document_timing-&gt;dom_content_loaded_event_start.value()</highlight></codeline>
<codeline lineno="12811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.InMilliseconds());</highlight></codeline>
<codeline lineno="12812"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timing.document_timing-&gt;load_event_start)<sp/>{</highlight></codeline>
<codeline lineno="12814"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetDocumentTiming_NavigationToLoadEventFired(</highlight></codeline>
<codeline lineno="12815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.document_timing-&gt;load_event_start.value().InMilliseconds());</highlight></codeline>
<codeline lineno="12816"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timing.paint_timing-&gt;first_paint)<sp/>{</highlight></codeline>
<codeline lineno="12818"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetPaintTiming_NavigationToFirstPaint(</highlight></codeline>
<codeline lineno="12819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.paint_timing-&gt;first_paint.value().InMilliseconds());</highlight></codeline>
<codeline lineno="12820"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timing.paint_timing-&gt;first_contentful_paint)<sp/>{</highlight></codeline>
<codeline lineno="12822"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetPaintTiming_NavigationToFirstContentfulPaint(</highlight></codeline>
<codeline lineno="12823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.paint_timing-&gt;first_contentful_paint.value().InMilliseconds());</highlight></codeline>
<codeline lineno="12824"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timing.paint_timing-&gt;first_meaningful_paint)<sp/>{</highlight></codeline>
<codeline lineno="12826"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetExperimental_PaintTiming_NavigationToFirstMeaningfulPaint(</highlight></codeline>
<codeline lineno="12827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.paint_timing-&gt;first_meaningful_paint.value().InMilliseconds());</highlight></codeline>
<codeline lineno="12828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timing.paint_timing-&gt;largest_image_paint.has_value()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="12830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WasStartedInForegroundOptionalEventInForeground(</highlight></codeline>
<codeline lineno="12831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.paint_timing-&gt;largest_image_paint,<sp/>info))<sp/>{</highlight></codeline>
<codeline lineno="12832"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetExperimental_PaintTiming_NavigationToLargestImagePaint(</highlight></codeline>
<codeline lineno="12833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.paint_timing-&gt;largest_image_paint.value().InMilliseconds());</highlight></codeline>
<codeline lineno="12834"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timing.paint_timing-&gt;last_image_paint.has_value()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="12836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WasStartedInForegroundOptionalEventInForeground(</highlight></codeline>
<codeline lineno="12837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.paint_timing-&gt;last_image_paint,<sp/>info))<sp/>{</highlight></codeline>
<codeline lineno="12838"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetExperimental_PaintTiming_NavigationToLastImagePaint(</highlight></codeline>
<codeline lineno="12839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.paint_timing-&gt;last_image_paint.value().InMilliseconds());</highlight></codeline>
<codeline lineno="12840"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timing.paint_timing-&gt;largest_text_paint.has_value()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="12842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WasStartedInForegroundOptionalEventInForeground(</highlight></codeline>
<codeline lineno="12843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.paint_timing-&gt;largest_text_paint,<sp/>info))<sp/>{</highlight></codeline>
<codeline lineno="12844"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetExperimental_PaintTiming_NavigationToLargestTextPaint(</highlight></codeline>
<codeline lineno="12845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.paint_timing-&gt;largest_text_paint.value().InMilliseconds());</highlight></codeline>
<codeline lineno="12846"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timing.paint_timing-&gt;last_text_paint.has_value()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="12848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WasStartedInForegroundOptionalEventInForeground(</highlight></codeline>
<codeline lineno="12849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.paint_timing-&gt;last_text_paint,<sp/>info))<sp/>{</highlight></codeline>
<codeline lineno="12850"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetExperimental_PaintTiming_NavigationToLastTextPaint(</highlight></codeline>
<codeline lineno="12851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.paint_timing-&gt;last_text_paint.value().InMilliseconds());</highlight></codeline>
<codeline lineno="12852"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12853"><highlight class="normal"><sp/><sp/>base::Optional&lt;base::TimeDelta&gt;<sp/>largest_content_paint_time;</highlight></codeline>
<codeline lineno="12854"><highlight class="normal"><sp/><sp/>uint64_t<sp/>largest_content_paint_size;</highlight></codeline>
<codeline lineno="12855"><highlight class="normal"><sp/><sp/>AssignTimeAndSizeForLargestContentfulPaint(largest_content_paint_time,</highlight></codeline>
<codeline lineno="12856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>largest_content_paint_size,</highlight></codeline>
<codeline lineno="12857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.paint_timing);</highlight></codeline>
<codeline lineno="12858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(largest_content_paint_size<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="12859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WasStartedInForegroundOptionalEventInForeground(</highlight></codeline>
<codeline lineno="12860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>largest_content_paint_time,<sp/>info))<sp/>{</highlight></codeline>
<codeline lineno="12861"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetExperimental_PaintTiming_NavigationToLargestContentPaint(</highlight></codeline>
<codeline lineno="12862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>largest_content_paint_time.value().InMilliseconds());</highlight></codeline>
<codeline lineno="12863"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timing.interactive_timing-&gt;interactive)<sp/>{</highlight></codeline>
<codeline lineno="12865"><highlight class="normal"><sp/><sp/><sp/><sp/>base::TimeDelta<sp/>time_to_interactive<sp/>=</highlight></codeline>
<codeline lineno="12866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.interactive_timing-&gt;interactive.value();</highlight></codeline>
<codeline lineno="12867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!timing.interactive_timing-&gt;first_invalidating_input<sp/>||</highlight></codeline>
<codeline lineno="12868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.interactive_timing-&gt;first_invalidating_input.value()<sp/>&gt;</highlight></codeline>
<codeline lineno="12869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_to_interactive)<sp/>{</highlight></codeline>
<codeline lineno="12870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>builder.SetExperimental_NavigationToInteractive(</highlight></codeline>
<codeline lineno="12871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_to_interactive.InMilliseconds());</highlight></codeline>
<codeline lineno="12872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12873"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timing.interactive_timing-&gt;first_input_delay)<sp/>{</highlight></codeline>
<codeline lineno="12875"><highlight class="normal"><sp/><sp/><sp/><sp/>base::TimeDelta<sp/>first_input_delay<sp/>=</highlight></codeline>
<codeline lineno="12876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.interactive_timing-&gt;first_input_delay.value();</highlight></codeline>
<codeline lineno="12877"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetInteractiveTiming_FirstInputDelay2(</highlight></codeline>
<codeline lineno="12878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_input_delay.InMilliseconds());</highlight></codeline>
<codeline lineno="12879"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timing.interactive_timing-&gt;first_input_timestamp)<sp/>{</highlight></codeline>
<codeline lineno="12881"><highlight class="normal"><sp/><sp/><sp/><sp/>base::TimeDelta<sp/>first_input_timestamp<sp/>=</highlight></codeline>
<codeline lineno="12882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.interactive_timing-&gt;first_input_timestamp.value();</highlight></codeline>
<codeline lineno="12883"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetInteractiveTiming_FirstInputTimestamp2(</highlight></codeline>
<codeline lineno="12884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_input_timestamp.InMilliseconds());</highlight></codeline>
<codeline lineno="12885"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12886"><highlight class="normal"></highlight></codeline>
<codeline lineno="12887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timing.interactive_timing-&gt;longest_input_delay)<sp/>{</highlight></codeline>
<codeline lineno="12888"><highlight class="normal"><sp/><sp/><sp/><sp/>base::TimeDelta<sp/>longest_input_delay<sp/>=</highlight></codeline>
<codeline lineno="12889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.interactive_timing-&gt;longest_input_delay.value();</highlight></codeline>
<codeline lineno="12890"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetInteractiveTiming_LongestInputDelay2(</highlight></codeline>
<codeline lineno="12891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>longest_input_delay.InMilliseconds());</highlight></codeline>
<codeline lineno="12892"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timing.interactive_timing-&gt;longest_input_timestamp)<sp/>{</highlight></codeline>
<codeline lineno="12894"><highlight class="normal"><sp/><sp/><sp/><sp/>base::TimeDelta<sp/>longest_input_timestamp<sp/>=</highlight></codeline>
<codeline lineno="12895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timing.interactive_timing-&gt;longest_input_timestamp.value();</highlight></codeline>
<codeline lineno="12896"><highlight class="normal"><sp/><sp/><sp/><sp/>builder.SetInteractiveTiming_LongestInputTimestamp2(</highlight></codeline>
<codeline lineno="12897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>longest_input_timestamp.InMilliseconds());</highlight></codeline>
<codeline lineno="12898"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12899"><highlight class="normal"></highlight></codeline>
<codeline lineno="12900"><highlight class="normal"><sp/><sp/>builder.SetNet_CacheBytes(ukm::GetExponentialBucketMin(cache_bytes_,<sp/>1.3));</highlight></codeline>
<codeline lineno="12901"><highlight class="normal"><sp/><sp/>builder.SetNet_NetworkBytes(</highlight></codeline>
<codeline lineno="12902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ukm::GetExponentialBucketMin(network_bytes_,<sp/>1.3));</highlight></codeline>
<codeline lineno="12903"><highlight class="normal"></highlight></codeline>
<codeline lineno="12904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(main_frame_timing_)</highlight></codeline>
<codeline lineno="12905"><highlight class="normal"><sp/><sp/><sp/><sp/>ReportMainResourceTimingMetrics(timing,<sp/>&amp;builder);</highlight></codeline>
<codeline lineno="12906"><highlight class="normal"></highlight></codeline>
<codeline lineno="12907"><highlight class="normal"><sp/><sp/>builder.Record(ukm::UkmRecorder::Get());</highlight></codeline>
<codeline lineno="12908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12909"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XSSAuditor::Init(Document*<sp/>document,</highlight></codeline>
<codeline lineno="12910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XSSAuditorDelegate*<sp/>auditor_delegate)<sp/>{</highlight></codeline>
<codeline lineno="12911"><highlight class="normal"><sp/><sp/>DCHECK(IsMainThread());</highlight></codeline>
<codeline lineno="12912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state_<sp/>!=<sp/>kUninitialized)</highlight></codeline>
<codeline lineno="12913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12914"><highlight class="normal"><sp/><sp/>state_<sp/>=<sp/>kFilteringTokens;</highlight></codeline>
<codeline lineno="12915"><highlight class="normal"></highlight></codeline>
<codeline lineno="12916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Settings*<sp/>settings<sp/>=<sp/>document-&gt;GetSettings())</highlight></codeline>
<codeline lineno="12917"><highlight class="normal"><sp/><sp/><sp/><sp/>is_enabled_<sp/>=<sp/>settings-&gt;GetXSSAuditorEnabled();</highlight></codeline>
<codeline lineno="12918"><highlight class="normal"></highlight></codeline>
<codeline lineno="12919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_enabled_)</highlight></codeline>
<codeline lineno="12920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12921"><highlight class="normal"></highlight></codeline>
<codeline lineno="12922"><highlight class="normal"><sp/><sp/>document_url_<sp/>=<sp/>document-&gt;Url().Copy();</highlight></codeline>
<codeline lineno="12923"><highlight class="normal"></highlight></codeline>
<codeline lineno="12924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!document-&gt;GetFrame())<sp/>{</highlight></codeline>
<codeline lineno="12925"><highlight class="normal"><sp/><sp/><sp/><sp/>is_enabled_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12927"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12928"><highlight class="normal"></highlight></codeline>
<codeline lineno="12929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(document_url_.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="12930"><highlight class="normal"><sp/><sp/><sp/><sp/>is_enabled_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12932"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12933"><highlight class="normal"></highlight></codeline>
<codeline lineno="12934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(document_url_.ProtocolIsData())<sp/>{</highlight></codeline>
<codeline lineno="12935"><highlight class="normal"><sp/><sp/><sp/><sp/>is_enabled_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="12938"><highlight class="normal"></highlight></codeline>
<codeline lineno="12939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(document-&gt;Encoding().IsValid())</highlight></codeline>
<codeline lineno="12940"><highlight class="normal"><sp/><sp/><sp/><sp/>encoding_<sp/>=<sp/>document-&gt;Encoding();</highlight></codeline>
<codeline lineno="12941"><highlight class="normal"></highlight></codeline>
<codeline lineno="12942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DocumentLoader*<sp/>document_loader<sp/>=</highlight></codeline>
<codeline lineno="12943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>document-&gt;GetFrame()-&gt;Loader().GetDocumentLoader())<sp/>{</highlight></codeline>
<codeline lineno="12944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AtomicString&amp;<sp/>header_value<sp/>=</highlight></codeline>
<codeline lineno="12945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>document_loader-&gt;GetResponse().HttpHeaderField(</highlight></codeline>
<codeline lineno="12946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HTTPNames::X_XSS_Protection);</highlight></codeline>
<codeline lineno="12947"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>error_details;</highlight></codeline>
<codeline lineno="12948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>error_position<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12949"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>report_url;</highlight></codeline>
<codeline lineno="12950"><highlight class="normal"><sp/><sp/><sp/><sp/>KURL<sp/>xss_protection_report_url;</highlight></codeline>
<codeline lineno="12951"><highlight class="normal"></highlight></codeline>
<codeline lineno="12952"><highlight class="normal"><sp/><sp/><sp/><sp/>ReflectedXSSDisposition<sp/>xss_protection_header<sp/>=<sp/>ParseXSSProtectionHeader(</highlight></codeline>
<codeline lineno="12953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header_value,<sp/>error_details,<sp/>error_position,<sp/>report_url);</highlight></codeline>
<codeline lineno="12954"><highlight class="normal"></highlight></codeline>
<codeline lineno="12955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xss_protection_header<sp/>==<sp/>kAllowReflectedXSS)</highlight></codeline>
<codeline lineno="12956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UseCounter::Count(*document,<sp/>WebFeature::kXSSAuditorDisabled);</highlight></codeline>
<codeline lineno="12957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xss_protection_header<sp/>==<sp/>kFilterReflectedXSS)</highlight></codeline>
<codeline lineno="12958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UseCounter::Count(*document,<sp/>WebFeature::kXSSAuditorEnabledFilter);</highlight></codeline>
<codeline lineno="12959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xss_protection_header<sp/>==<sp/>kBlockReflectedXSS)</highlight></codeline>
<codeline lineno="12960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UseCounter::Count(*document,<sp/>WebFeature::kXSSAuditorEnabledBlock);</highlight></codeline>
<codeline lineno="12961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xss_protection_header<sp/>==<sp/>kReflectedXSSInvalid)</highlight></codeline>
<codeline lineno="12962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UseCounter::Count(*document,<sp/>WebFeature::kXSSAuditorInvalid);</highlight></codeline>
<codeline lineno="12963"><highlight class="normal"></highlight></codeline>
<codeline lineno="12964"><highlight class="normal"><sp/><sp/><sp/><sp/>did_send_valid_xss_protection_header_<sp/>=</highlight></codeline>
<codeline lineno="12965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xss_protection_header<sp/>!=<sp/>kReflectedXSSUnset<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="12966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xss_protection_header<sp/>!=<sp/>kReflectedXSSInvalid;</highlight></codeline>
<codeline lineno="12967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((xss_protection_header<sp/>==<sp/>kFilterReflectedXSS<sp/>||</highlight></codeline>
<codeline lineno="12968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xss_protection_header<sp/>==<sp/>kBlockReflectedXSS)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="12969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!report_url.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="12970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xss_protection_report_url<sp/>=<sp/>document-&gt;CompleteURL(report_url);</highlight></codeline>
<codeline lineno="12971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MixedContentChecker::IsMixedContent(document-&gt;GetSecurityOrigin(),</highlight></codeline>
<codeline lineno="12972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xss_protection_report_url))<sp/>{</highlight></codeline>
<codeline lineno="12973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_details<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;insecure<sp/>reporting<sp/>URL<sp/>for<sp/>secure<sp/>page&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xss_protection_header<sp/>=<sp/>kReflectedXSSInvalid;</highlight></codeline>
<codeline lineno="12975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xss_protection_report_url<sp/>=<sp/>KURL();</highlight></codeline>
<codeline lineno="12976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12977"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xss_protection_header<sp/>==<sp/>kReflectedXSSInvalid)<sp/>{</highlight></codeline>
<codeline lineno="12979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>document-&gt;AddConsoleMessage(<ref refid="_c_w_e-787_8c_1afab6f737b873d2fd9852d7f602763af3" kindref="member">ConsoleMessage::Create</ref>(</highlight></codeline>
<codeline lineno="12980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kSecurityMessageSource,<sp/>kErrorMessageLevel,</highlight></codeline>
<codeline lineno="12981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>header<sp/>X-XSS-Protection:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>header_value<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="12982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_details<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>at<sp/>character<sp/>position<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="12983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::Format(</highlight><highlight class="stringliteral">&quot;%u&quot;</highlight><highlight class="normal">,<sp/>error_position)<sp/>+</highlight></codeline>
<codeline lineno="12984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.<sp/>The<sp/>default<sp/>protections<sp/>will<sp/>be<sp/>applied.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="12985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12986"><highlight class="normal"></highlight></codeline>
<codeline lineno="12987"><highlight class="normal"><sp/><sp/><sp/><sp/>xss_protection_<sp/>=<sp/>xss_protection_header;</highlight></codeline>
<codeline lineno="12988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xss_protection_<sp/>==<sp/>kReflectedXSSInvalid<sp/>||</highlight></codeline>
<codeline lineno="12989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xss_protection_<sp/>==<sp/>kReflectedXSSUnset)<sp/>{</highlight></codeline>
<codeline lineno="12990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xss_protection_<sp/>=<sp/>kBlockReflectedXSS;</highlight></codeline>
<codeline lineno="12991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12992"><highlight class="normal"></highlight></codeline>
<codeline lineno="12993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(auditor_delegate)</highlight></codeline>
<codeline lineno="12994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auditor_delegate-&gt;SetReportURL(xss_protection_report_url.Copy());</highlight></codeline>
<codeline lineno="12995"><highlight class="normal"></highlight></codeline>
<codeline lineno="12996"><highlight class="normal"><sp/><sp/><sp/><sp/>EncodedFormData*<sp/>http_body<sp/>=<sp/>document_loader-&gt;GetRequest().HttpBody();</highlight></codeline>
<codeline lineno="12997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(http_body<sp/>&amp;&amp;<sp/>!http_body-&gt;IsEmpty())</highlight></codeline>
<codeline lineno="12998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>http_body_as_string_<sp/>=<sp/>http_body-&gt;FlattenToString();</highlight></codeline>
<codeline lineno="12999"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="13000"><highlight class="normal"></highlight></codeline>
<codeline lineno="13001"><highlight class="normal"><sp/><sp/>SetEncoding(encoding_);</highlight></codeline>
<codeline lineno="13002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13003"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-787_8c_1a98b1050f09da390896f964fb7a892391" kindref="member">VaapiJpegDecoder::Initialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>base::RepeatingClosure&amp;<sp/>error_uma_cb)<sp/>{</highlight></codeline>
<codeline lineno="13004"><highlight class="normal"><sp/><sp/>vaapi_wrapper_<sp/>=<sp/><ref refid="_c_w_e-787_8c_1afab6f737b873d2fd9852d7f602763af3" kindref="member">VaapiWrapper::Create</ref>(VaapiWrapper::kDecode,</highlight></codeline>
<codeline lineno="13005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VAProfileJPEGBaseline,<sp/>error_uma_cb);</highlight></codeline>
<codeline lineno="13006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vaapi_wrapper_)<sp/>{</highlight></codeline>
<codeline lineno="13007"><highlight class="normal"><sp/><sp/><sp/><sp/>VLOGF(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>initializing<sp/>VAAPI&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13009"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="13010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13012" refid="_c_w_e-79_8c_1a684c1e77bc23b7d1f701d95ce8ddac57" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a684c1e77bc23b7d1f701d95ce8ddac57" kindref="member">DoCanonicalizeRef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CHAR*<sp/>spec,</highlight></codeline>
<codeline lineno="13013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Component&amp;<sp/>ref,</highlight></codeline>
<codeline lineno="13014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CanonOutput*<sp/>output,</highlight></codeline>
<codeline lineno="13015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Component*<sp/>out_ref)<sp/>{</highlight></codeline>
<codeline lineno="13016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref.len<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="13017"><highlight class="normal"><sp/><sp/><sp/><sp/>*out_ref<sp/>=<sp/>Component();</highlight></codeline>
<codeline lineno="13018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13019"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="13020"><highlight class="normal"></highlight></codeline>
<codeline lineno="13021"><highlight class="normal"><sp/><sp/>output-&gt;push_back(</highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13022"><highlight class="normal"><sp/><sp/>out_ref-&gt;begin<sp/>=<sp/>output-&gt;length();</highlight></codeline>
<codeline lineno="13023"><highlight class="normal"></highlight></codeline>
<codeline lineno="13024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>ref.end();</highlight></codeline>
<codeline lineno="13025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>ref.begin;<sp/>i<sp/>&lt;<sp/>end;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="13026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec[i]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="13027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13028"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_cast&lt;UCHAR&gt;(spec[i])<sp/>&lt;<sp/>0x20)<sp/>{</highlight></codeline>
<codeline lineno="13029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AppendEscapedChar(static_cast&lt;unsigned<sp/>char&gt;(spec[i]),<sp/>output);</highlight></codeline>
<codeline lineno="13030"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_cast&lt;UCHAR&gt;(spec[i])<sp/>&lt;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="13031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output-&gt;push_back(static_cast&lt;char&gt;(spec[i]));</highlight></codeline>
<codeline lineno="13032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>code_point;</highlight></codeline>
<codeline lineno="13034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReadUTFChar(spec,<sp/>&amp;i,<sp/>end,<sp/>&amp;code_point);</highlight></codeline>
<codeline lineno="13035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AppendUTF8Value(code_point,<sp/>output);</highlight></codeline>
<codeline lineno="13036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13037"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13038"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="13039"><highlight class="normal"><sp/><sp/>out_ref-&gt;len<sp/>=<sp/>output-&gt;length()<sp/>-<sp/>out_ref-&gt;begin;</highlight></codeline>
<codeline lineno="13040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13041"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OmniboxViewViews::OnDrop(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ui::OSExchangeData&amp;<sp/><ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="13042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasTextBeingDragged())</highlight></codeline>
<codeline lineno="13043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::DragDropTypes::DRAG_NONE;</highlight></codeline>
<codeline lineno="13044"><highlight class="normal"></highlight></codeline>
<codeline lineno="13045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>.HasURL(ui::OSExchangeData::CONVERT_FILENAMES))<sp/>{</highlight></codeline>
<codeline lineno="13046"><highlight class="normal"><sp/><sp/><sp/><sp/>GURL<sp/>url;</highlight></codeline>
<codeline lineno="13047"><highlight class="normal"><sp/><sp/><sp/><sp/>base::string16<sp/>title;</highlight></codeline>
<codeline lineno="13048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>.GetURLAndTitle(</highlight></codeline>
<codeline lineno="13049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ui::OSExchangeData::CONVERT_FILENAMES,<sp/>&amp;url,<sp/>&amp;title))<sp/>{</highlight></codeline>
<codeline lineno="13050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::string16<sp/>text(</highlight></codeline>
<codeline lineno="13051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StripJavascriptSchemas(base::UTF8ToUTF16(url.spec())));</highlight></codeline>
<codeline lineno="13052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model()-&gt;CanPasteAndGo(text))<sp/>{</highlight></codeline>
<codeline lineno="13053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model()-&gt;PasteAndGo(text);</highlight></codeline>
<codeline lineno="13054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::DragDropTypes::DRAG_COPY;</highlight></codeline>
<codeline lineno="13055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13057"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>.HasString())<sp/>{</highlight></codeline>
<codeline lineno="13058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>base::string16<sp/>text;</highlight></codeline>
<codeline lineno="13059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-20_8c_1ab353d026a18ab2bfffac25e09dd29d7a" kindref="member">data</ref>.GetString(&amp;text))<sp/>{</highlight></codeline>
<codeline lineno="13060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base::string16<sp/>collapsed_text(base::CollapseWhitespace(text,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="13061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(model()-&gt;CanPasteAndGo(collapsed_text))</highlight></codeline>
<codeline lineno="13062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model()-&gt;PasteAndGo(collapsed_text);</highlight></codeline>
<codeline lineno="13063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::DragDropTypes::DRAG_COPY;</highlight></codeline>
<codeline lineno="13064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13065"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="13066"><highlight class="normal"></highlight></codeline>
<codeline lineno="13067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ui::DragDropTypes::DRAG_NONE;</highlight></codeline>
<codeline lineno="13068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13069" refid="_c_w_e-79_8c_1a07d8270b8758538d9838d925a2815460" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a07d8270b8758538d9838d925a2815460" kindref="member">CompileFromResponseCallback</ref>(</highlight></codeline>
<codeline lineno="13070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="13071"><highlight class="normal"><sp/><sp/>ExceptionState<sp/>exception_state(args.GetIsolate(),</highlight></codeline>
<codeline lineno="13072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExceptionState::kExecutionContext,</highlight></codeline>
<codeline lineno="13073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WebAssembly&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;compile&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13074"><highlight class="normal"><sp/><sp/><sp/>ExceptionToRejectPromiseScope<sp/>reject_promise_scope(args,<sp/>exception_state);</highlight></codeline>
<codeline lineno="13075"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="13076"><highlight class="normal"><sp/><sp/>ScriptState*<sp/>script_state<sp/>=<sp/>ScriptState::ForRelevantRealm(args);</highlight></codeline>
<codeline lineno="13077"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ExecutionContext::From(script_state))<sp/>{</highlight></codeline>
<codeline lineno="13078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>V8SetReturnValue(args,<sp/>ScriptPromise().V8Value());</highlight></codeline>
<codeline lineno="13079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13080"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="13081"><highlight class="normal"></highlight></codeline>
<codeline lineno="13082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args.Length()<sp/>&lt;<sp/>1<sp/>||<sp/>!args[0]-&gt;IsObject()<sp/>||</highlight></codeline>
<codeline lineno="13083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!V8Response::hasInstance(args[0],<sp/>args.GetIsolate()))<sp/>{</highlight></codeline>
<codeline lineno="13084"><highlight class="normal"><sp/><sp/><sp/><sp/>V8SetReturnValue(</highlight></codeline>
<codeline lineno="13085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args,</highlight></codeline>
<codeline lineno="13086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScriptPromise::Reject(</highlight></codeline>
<codeline lineno="13087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>script_state,<sp/>V8ThrowException::CreateTypeError(</highlight></codeline>
<codeline lineno="13088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>script_state-&gt;GetIsolate(),</highlight></codeline>
<codeline lineno="13089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;An<sp/>argument<sp/>must<sp/>be<sp/>provided,<sp/>which<sp/>must<sp/>be<sp/>a&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Response<sp/>or<sp/>Promise&lt;Response&gt;<sp/>object&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="13091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.V8Value());</highlight></codeline>
<codeline lineno="13092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13093"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="13094"><highlight class="normal"></highlight></codeline>
<codeline lineno="13095"><highlight class="normal"><sp/><sp/>Response*<sp/>response<sp/>=<sp/>V8Response::ToImpl(v8::Local&lt;v8::Object&gt;::Cast(args[0]));</highlight></codeline>
<codeline lineno="13096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(response-&gt;MimeType()<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;application/wasm&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="13097"><highlight class="normal"><sp/><sp/><sp/><sp/>V8SetReturnValue(</highlight></codeline>
<codeline lineno="13098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args,</highlight></codeline>
<codeline lineno="13099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScriptPromise::Reject(</highlight></codeline>
<codeline lineno="13100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>script_state,</highlight></codeline>
<codeline lineno="13101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V8ThrowException::CreateTypeError(</highlight></codeline>
<codeline lineno="13102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>script_state-&gt;GetIsolate(),</highlight></codeline>
<codeline lineno="13103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>response<sp/>MIME<sp/>type.<sp/>Expected<sp/>&apos;application/wasm&apos;.&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="13104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.V8Value());</highlight></codeline>
<codeline lineno="13105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="13107"><highlight class="normal"><sp/><sp/>v8::Local&lt;v8::Value&gt;<sp/>promise;</highlight></codeline>
<codeline lineno="13108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(response-&gt;IsBodyLocked()<sp/>||<sp/>response-&gt;bodyUsed())<sp/>{</highlight></codeline>
<codeline lineno="13109"><highlight class="normal"><sp/><sp/><sp/><sp/>promise<sp/>=<sp/>ScriptPromise::Reject(script_state,</highlight></codeline>
<codeline lineno="13110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V8ThrowException::CreateTypeError(</highlight></codeline>
<codeline lineno="13111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>script_state-&gt;GetIsolate(),</highlight></codeline>
<codeline lineno="13112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>compile<sp/>WebAssembly.Module<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;from<sp/>an<sp/>already<sp/>read<sp/>Response&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="13114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.V8Value();</highlight></codeline>
<codeline lineno="13115"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(response-&gt;BodyBuffer())<sp/>{</highlight></codeline>
<codeline lineno="13117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1af0dede2e50ca786eb3761b3df8331fea" kindref="member">FetchDataLoaderAsWasmModule</ref>*<sp/>loader<sp/>=</highlight></codeline>
<codeline lineno="13118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1af0dede2e50ca786eb3761b3df8331fea" kindref="member">FetchDataLoaderAsWasmModule</ref>(script_state);</highlight></codeline>
<codeline lineno="13119"><highlight class="normal"></highlight></codeline>
<codeline lineno="13120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>promise<sp/>=<sp/>loader-&gt;GetPromise();</highlight></codeline>
<codeline lineno="13121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>response-&gt;BodyBuffer()-&gt;StartLoading(loader,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ae4f5601f48e971c6f7b6881e1f63497a" kindref="member">WasmDataLoaderClient</ref>());</highlight></codeline>
<codeline lineno="13122"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>promise<sp/>=<sp/>ScriptPromise::Reject(script_state,</highlight></codeline>
<codeline lineno="13124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V8ThrowException::CreateTypeError(</highlight></codeline>
<codeline lineno="13125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>script_state-&gt;GetIsolate(),</highlight></codeline>
<codeline lineno="13126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Response<sp/>object<sp/>has<sp/>a<sp/>null<sp/>body.&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="13127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.V8Value();</highlight></codeline>
<codeline lineno="13128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="13130"><highlight class="normal"><sp/><sp/>V8SetReturnValue(args,<sp/>promise);</highlight></codeline>
<codeline lineno="13131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13132" refid="_c_w_e-79_8c_1adbfb4798b5614e7996b7efda0a04245a" refkind="member"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1adbfb4798b5614e7996b7efda0a04245a" kindref="member">WasmCompileStreamingImpl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="13133"><highlight class="normal"><sp/><sp/><sp/>v8::Isolate*<sp/>isolate<sp/>=<sp/>args.GetIsolate();</highlight></codeline>
<codeline lineno="13134"><highlight class="normal"><sp/><sp/>ScriptState*<sp/>script_state<sp/>=<sp/>ScriptState::ForRelevantRealm(args);</highlight></codeline>
<codeline lineno="13135"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="13136"><highlight class="normal"><sp/><sp/><sp/>v8::Local&lt;v8::Function&gt;<sp/>compile_callback<sp/>=</highlight></codeline>
<codeline lineno="13137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v8::Function::New(isolate,<sp/><ref refid="_c_w_e-79_8c_1a07d8270b8758538d9838d925a2815460" kindref="member">CompileFromResponseCallback</ref>);</highlight></codeline>
<codeline lineno="13138"><highlight class="normal"></highlight></codeline>
<codeline lineno="13139"><highlight class="normal"></highlight></codeline>
<codeline lineno="13140"><highlight class="normal"><sp/><sp/>V8SetReturnValue(args,<sp/>ScriptPromise::Cast(script_state,<sp/>args[0])</highlight></codeline>
<codeline lineno="13141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Then(compile_callback)</highlight></codeline>
<codeline lineno="13142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.V8Value());</highlight></codeline>
<codeline lineno="13143"><highlight class="normal"></highlight></codeline>
<codeline lineno="13144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13145" refid="_c_w_e-79_8c_1a24f27d728b4352f4744f45db74f69ea3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1a24f27d728b4352f4744f45db74f69ea3" kindref="member">UnpackOriginPermissions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>origins_input,</highlight></codeline>
<codeline lineno="13146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PermissionSet&amp;<sp/>required_permissions,</highlight></codeline>
<codeline lineno="13147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PermissionSet&amp;<sp/>optional_permissions,</highlight></codeline>
<codeline lineno="13148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_file_access,</highlight></codeline>
<codeline lineno="13149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnpackPermissionSetResult*<sp/>result,</highlight></codeline>
<codeline lineno="13150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string*<sp/>error)<sp/>{</highlight></codeline>
<codeline lineno="13151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>user_script_schemes<sp/>=<sp/>UserScript::ValidUserScriptSchemes();</highlight></codeline>
<codeline lineno="13152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>explicit_schemes<sp/>=<sp/>Extension::kValidHostPermissionSchemes;</highlight></codeline>
<codeline lineno="13153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!allow_file_access)<sp/>{</highlight></codeline>
<codeline lineno="13154"><highlight class="normal"><sp/><sp/><sp/><sp/>user_script_schemes<sp/>&amp;=<sp/>~URLPattern::SCHEME_FILE;</highlight></codeline>
<codeline lineno="13155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>explicit_schemes<sp/>&amp;=<sp/>~URLPattern::SCHEME_FILE;</highlight></codeline>
<codeline lineno="13156"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13157"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="13158"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>origin_str<sp/>:<sp/>origins_input)<sp/>{</highlight></codeline>
<codeline lineno="13159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>URLPattern<sp/>explicit_origin(explicit_schemes);</highlight></codeline>
<codeline lineno="13160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>URLPattern::ParseResult<sp/>parse_result<sp/>=<sp/>explicit_origin.Parse(origin_str);</highlight></codeline>
<codeline lineno="13161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(URLPattern::ParseResult::kSuccess<sp/>!=<sp/>parse_result)<sp/>{</highlight></codeline>
<codeline lineno="13162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>ErrorUtils::FormatErrorMessage(</highlight></codeline>
<codeline lineno="13163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kInvalidOrigin,<sp/>origin_str,</highlight></codeline>
<codeline lineno="13164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>URLPattern::GetParseResultString(parse_result));</highlight></codeline>
<codeline lineno="13165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13167"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="13168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>used_origin<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(required_permissions.explicit_hosts().ContainsPattern(</highlight></codeline>
<codeline lineno="13170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>explicit_origin))<sp/>{</highlight></codeline>
<codeline lineno="13171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>used_origin<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;required_explicit_hosts.AddPattern(explicit_origin);</highlight></codeline>
<codeline lineno="13173"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optional_permissions.explicit_hosts().ContainsPattern(</highlight></codeline>
<codeline lineno="13174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>explicit_origin))<sp/>{</highlight></codeline>
<codeline lineno="13175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>used_origin<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;optional_explicit_hosts.AddPattern(explicit_origin);</highlight></codeline>
<codeline lineno="13177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13178"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="13179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>URLPattern<sp/>scriptable_origin(user_script_schemes);</highlight></codeline>
<codeline lineno="13180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scriptable_origin.Parse(origin_str)<sp/>==</highlight></codeline>
<codeline lineno="13181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>URLPattern::ParseResult::kSuccess<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="13182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>required_permissions.scriptable_hosts().ContainsPattern(</highlight></codeline>
<codeline lineno="13183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scriptable_origin))<sp/>{</highlight></codeline>
<codeline lineno="13184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>used_origin<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;required_scriptable_hosts.AddPattern(scriptable_origin);</highlight></codeline>
<codeline lineno="13186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13187"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="13188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!used_origin)</highlight></codeline>
<codeline lineno="13189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result-&gt;unlisted_hosts.AddPattern(explicit_origin);</highlight></codeline>
<codeline lineno="13190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="13191"><highlight class="normal"></highlight></codeline>
<codeline lineno="13192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13194"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PermissionsData::CanCaptureVisiblePage(</highlight></codeline>
<codeline lineno="13195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL&amp;<sp/>document_url,</highlight></codeline>
<codeline lineno="13196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tab_id,</highlight></codeline>
<codeline lineno="13197"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string*<sp/>error,</highlight></codeline>
<codeline lineno="13198"><highlight class="normal"><sp/><sp/><sp/><sp/>CaptureRequirement<sp/>capture_requirement)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_active_tab<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_all_urls<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_page_capture<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13202"><highlight class="normal"><sp/><sp/>url::Origin<sp/>origin<sp/>=<sp/><ref refid="_c_w_e-787_8c_1afab6f737b873d2fd9852d7f602763af3" kindref="member">url::Origin::Create</ref>(document_url);</highlight></codeline>
<codeline lineno="13203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GURL<sp/>origin_url<sp/>=<sp/>origin.GetURL();</highlight></codeline>
<codeline lineno="13204"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="13205"><highlight class="normal"><sp/><sp/><sp/><sp/>base::AutoLock<sp/>auto_lock(runtime_lock_);</highlight></codeline>
<codeline lineno="13206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(location_<sp/>!=<sp/>Manifest::COMPONENT<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="13207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsPolicyBlockedHostUnsafe(origin_url))<sp/>{</highlight></codeline>
<codeline lineno="13208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)</highlight></codeline>
<codeline lineno="13209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>extension_misc::kPolicyBlockedScripting;</highlight></codeline>
<codeline lineno="13210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13212"><highlight class="normal"></highlight></codeline>
<codeline lineno="13213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PermissionSet*<sp/>tab_permissions<sp/>=<sp/>GetTabSpecificPermissions(tab_id);</highlight></codeline>
<codeline lineno="13214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>has_active_tab<sp/>=<sp/>tab_permissions<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="13215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tab_permissions-&gt;HasAPIPermission(APIPermission::kTab);</highlight></codeline>
<codeline lineno="13216"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="13217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>URLPattern<sp/>all_urls(URLPattern::SCHEME_ALL,</highlight></codeline>
<codeline lineno="13218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>URLPattern::kAllUrlsPattern);</highlight></codeline>
<codeline lineno="13219"><highlight class="normal"><sp/><sp/><sp/><sp/>has_all_urls<sp/>=</highlight></codeline>
<codeline lineno="13220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_permissions_unsafe_-&gt;explicit_hosts().ContainsPattern(all_urls);</highlight></codeline>
<codeline lineno="13221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>has_page_capture<sp/>=<sp/>active_permissions_unsafe_-&gt;HasAPIPermission(</highlight></codeline>
<codeline lineno="13222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>APIPermission::kPageCapture);</highlight></codeline>
<codeline lineno="13223"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13224"><highlight class="normal"><sp/><sp/>std::string<sp/>access_error;</highlight></codeline>
<codeline lineno="13225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capture_requirement<sp/>==<sp/>CaptureRequirement::kActiveTabOrAllUrls)<sp/>{</highlight></codeline>
<codeline lineno="13226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_active_tab<sp/>&amp;&amp;<sp/>!has_all_urls)<sp/>{</highlight></codeline>
<codeline lineno="13227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)</highlight></codeline>
<codeline lineno="13228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>manifest_errors::kAllURLOrActiveTabNeeded;</highlight></codeline>
<codeline lineno="13229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13231"><highlight class="normal"></highlight></codeline>
<codeline lineno="13232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetPageAccess(origin_url,<sp/>tab_id,<sp/>&amp;access_error)<sp/>==</highlight></codeline>
<codeline lineno="13233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PageAccess::kAllowed)</highlight></codeline>
<codeline lineno="13234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13235"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13236"><highlight class="normal"><sp/><sp/><sp/><sp/>DCHECK_EQ(CaptureRequirement::kPageCapture,<sp/>capture_requirement);</highlight></codeline>
<codeline lineno="13237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_page_capture)<sp/>{</highlight></codeline>
<codeline lineno="13238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)</highlight></codeline>
<codeline lineno="13239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>manifest_errors::kPageCaptureNeeded;</highlight></codeline>
<codeline lineno="13240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13241"><highlight class="normal"></highlight></codeline>
<codeline lineno="13242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((origin_url.SchemeIs(url::kHttpScheme)<sp/>||</highlight></codeline>
<codeline lineno="13243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>origin_url.SchemeIs(url::kHttpsScheme))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="13244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!origin.IsSameOriginWith(<ref refid="_c_w_e-787_8c_1afab6f737b873d2fd9852d7f602763af3" kindref="member">url::Origin::Create</ref>(</highlight></codeline>
<codeline lineno="13245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtensionsClient::Get()-&gt;GetWebstoreBaseURL())))<sp/>{</highlight></codeline>
<codeline lineno="13246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="13249"><highlight class="normal"></highlight></codeline>
<codeline lineno="13250"><highlight class="normal"></highlight></codeline>
<codeline lineno="13251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(origin_url.host()<sp/>==<sp/>extension_id_)</highlight></codeline>
<codeline lineno="13252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13253"><highlight class="normal"></highlight></codeline>
<codeline lineno="13254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allowed_with_active_tab<sp/>=</highlight></codeline>
<codeline lineno="13255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>origin_url.SchemeIs(content::kChromeUIScheme)<sp/>||</highlight></codeline>
<codeline lineno="13256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>origin_url.SchemeIs(kExtensionScheme)<sp/>||</highlight></codeline>
<codeline lineno="13257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>document_url.SchemeIs(url::kDataScheme)<sp/>||</highlight></codeline>
<codeline lineno="13258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>origin.IsSameOriginWith(</highlight></codeline>
<codeline lineno="13259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-787_8c_1afab6f737b873d2fd9852d7f602763af3" kindref="member">url::Origin::Create</ref>(ExtensionsClient::Get()-&gt;GetWebstoreBaseURL()));</highlight></codeline>
<codeline lineno="13260"><highlight class="normal"></highlight></codeline>
<codeline lineno="13261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!allowed_with_active_tab)<sp/>{</highlight></codeline>
<codeline lineno="13262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)</highlight></codeline>
<codeline lineno="13263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>access_error;</highlight></codeline>
<codeline lineno="13264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="13266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_active_tab)</highlight></codeline>
<codeline lineno="13267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13268"><highlight class="normal"></highlight></codeline>
<codeline lineno="13269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)</highlight></codeline>
<codeline lineno="13270"><highlight class="normal"><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>manifest_errors::kActiveTabPermissionNotGranted;</highlight></codeline>
<codeline lineno="13271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13273"><highlight class="normal">HTMLTreeBuilderSimulator::SimulatedToken<sp/>HTMLTreeBuilderSimulator::Simulate(</highlight></codeline>
<codeline lineno="13274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CompactHTMLToken&amp;<sp/>token,</highlight></codeline>
<codeline lineno="13275"><highlight class="normal"><sp/><sp/><sp/><sp/>HTMLTokenizer*<sp/>tokenizer)<sp/>{</highlight></codeline>
<codeline lineno="13276"><highlight class="normal"><sp/><sp/>SimulatedToken<sp/>simulated_token<sp/>=<sp/>kOtherToken;</highlight></codeline>
<codeline lineno="13277"><highlight class="normal"></highlight></codeline>
<codeline lineno="13278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token.GetType()<sp/>==<sp/>HTMLToken::kStartTag)<sp/>{</highlight></codeline>
<codeline lineno="13279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>tag_name<sp/>=<sp/>token.Data();</highlight></codeline>
<codeline lineno="13280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>SVGNames::svgTag))</highlight></codeline>
<codeline lineno="13281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>namespace_stack_.push_back(SVG);</highlight></codeline>
<codeline lineno="13282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>MathMLNames::mathTag))</highlight></codeline>
<codeline lineno="13283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace_stack_.push_back(kMathML);</highlight></codeline>
<codeline lineno="13284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InForeignContent()<sp/>&amp;&amp;<sp/><ref refid="_c_w_e-79_8c_1a84b0acb38fa8fb623634966ab4b3d60e" kindref="member">TokenExitsForeignContent</ref>(token))</highlight></codeline>
<codeline lineno="13285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace_stack_.pop_back();</highlight></codeline>
<codeline lineno="13286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((namespace_stack_.back()<sp/>==<sp/>SVG<sp/>&amp;&amp;<sp/><ref refid="_c_w_e-79_8c_1ad23a14ab3d294df5b9ec6bda779c6177" kindref="member">TokenExitsSVG</ref>(token))<sp/>||</highlight></codeline>
<codeline lineno="13287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(namespace_stack_.back()<sp/>==<sp/>kMathML<sp/>&amp;&amp;<sp/><ref refid="_c_w_e-79_8c_1a2170bfdc04db1ea427d590790007d7e3" kindref="member">TokenExitsMath</ref>(token)))</highlight></codeline>
<codeline lineno="13288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace_stack_.push_back(HTML);</highlight></codeline>
<codeline lineno="13289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!InForeignContent())<sp/>{</highlight></codeline>
<codeline lineno="13290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>textareaTag)<sp/>||</highlight></codeline>
<codeline lineno="13291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>titleTag))<sp/>{</highlight></codeline>
<codeline lineno="13292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenizer-&gt;SetState(HTMLTokenizer::kRCDATAState);</highlight></codeline>
<codeline lineno="13293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>scriptTag))<sp/>{</highlight></codeline>
<codeline lineno="13294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenizer-&gt;SetState(HTMLTokenizer::kScriptDataState);</highlight></codeline>
<codeline lineno="13295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simulated_token<sp/>=<sp/>kScriptStart;</highlight></codeline>
<codeline lineno="13296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>linkTag))<sp/>{</highlight></codeline>
<codeline lineno="13297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simulated_token<sp/>=<sp/>kLink;</highlight></codeline>
<codeline lineno="13298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!in_select_insertion_mode_)<sp/>{</highlight></codeline>
<codeline lineno="13299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>plaintextTag)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="13300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!in_select_insertion_mode_)<sp/>{</highlight></codeline>
<codeline lineno="13301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenizer-&gt;SetState(HTMLTokenizer::kPLAINTEXTState);</highlight></codeline>
<codeline lineno="13302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>styleTag)<sp/>||</highlight></codeline>
<codeline lineno="13303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>iframeTag)<sp/>||</highlight></codeline>
<codeline lineno="13304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>xmpTag)<sp/>||</highlight></codeline>
<codeline lineno="13305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>noembedTag)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="13306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options_.plugins_enabled)<sp/>||</highlight></codeline>
<codeline lineno="13307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>noframesTag)<sp/>||</highlight></codeline>
<codeline lineno="13308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>noscriptTag)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="13309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options_.script_enabled))<sp/>{</highlight></codeline>
<codeline lineno="13310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenizer-&gt;SetState(HTMLTokenizer::kRAWTEXTState);</highlight></codeline>
<codeline lineno="13311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13313"><highlight class="normal"></highlight></codeline>
<codeline lineno="13314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>selectTag))<sp/>{</highlight></codeline>
<codeline lineno="13315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_select_insertion_mode_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_select_insertion_mode_<sp/>&amp;&amp;<sp/><ref refid="_c_w_e-79_8c_1a9bc13aa915d29324aed5bcd43f2b8113" kindref="member">TokenExitsInSelect</ref>(token))<sp/>{</highlight></codeline>
<codeline lineno="13317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_select_insertion_mode_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="13321"><highlight class="normal"></highlight></codeline>
<codeline lineno="13322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token.GetType()<sp/>==<sp/>HTMLToken::kEndTag<sp/>||</highlight></codeline>
<codeline lineno="13323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(token.GetType()<sp/>==<sp/>HTMLToken::kStartTag<sp/>&amp;&amp;<sp/>token.SelfClosing()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="13324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InForeignContent()))<sp/>{</highlight></codeline>
<codeline lineno="13325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>tag_name<sp/>=<sp/>token.Data();</highlight></codeline>
<codeline lineno="13326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((namespace_stack_.back()<sp/>==<sp/>SVG<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="13327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>SVGNames::svgTag))<sp/>||</highlight></codeline>
<codeline lineno="13328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(namespace_stack_.back()<sp/>==<sp/>kMathML<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="13329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>MathMLNames::mathTag))<sp/>||</highlight></codeline>
<codeline lineno="13330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(namespace_stack_.Contains(SVG)<sp/>&amp;&amp;<sp/>namespace_stack_.back()<sp/>==<sp/>HTML<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="13331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_c_w_e-79_8c_1ad23a14ab3d294df5b9ec6bda779c6177" kindref="member">TokenExitsSVG</ref>(token))<sp/>||</highlight></codeline>
<codeline lineno="13332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(namespace_stack_.Contains(kMathML)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="13333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace_stack_.back()<sp/>==<sp/>HTML<sp/>&amp;&amp;<sp/><ref refid="_c_w_e-79_8c_1a2170bfdc04db1ea427d590790007d7e3" kindref="member">TokenExitsMath</ref>(token)))<sp/>{</highlight></codeline>
<codeline lineno="13334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace_stack_.pop_back();</highlight></codeline>
<codeline lineno="13335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>scriptTag))<sp/>{</highlight></codeline>
<codeline lineno="13337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!InForeignContent())</highlight></codeline>
<codeline lineno="13338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenizer-&gt;SetState(HTMLTokenizer::kDataState);</highlight></codeline>
<codeline lineno="13339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kScriptEnd;</highlight></codeline>
<codeline lineno="13340"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>selectTag))<sp/>{</highlight></codeline>
<codeline lineno="13341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in_select_insertion_mode_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_c_w_e-79_8c_1aaee9c4f38bb1d3001195cdf036490409" kindref="member">ThreadSafeMatch</ref>(tag_name,<sp/>styleTag))</highlight></codeline>
<codeline lineno="13344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>simulated_token<sp/>=<sp/>kStyleEnd;</highlight></codeline>
<codeline lineno="13345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="13346"><highlight class="normal"></highlight></codeline>
<codeline lineno="13347"><highlight class="normal"><sp/><sp/>tokenizer-&gt;SetForceNullCharacterReplacement(InForeignContent());</highlight></codeline>
<codeline lineno="13348"><highlight class="normal"><sp/><sp/>tokenizer-&gt;SetShouldAllowCDATA(InForeignContent());</highlight></codeline>
<codeline lineno="13349"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>simulated_token;</highlight></codeline>
<codeline lineno="13350"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="13351" refid="_c_w_e-79_8c_1ad23a14ab3d294df5b9ec6bda779c6177" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_c_w_e-79_8c_1ad23a14ab3d294df5b9ec6bda779c6177" kindref="member">TokenExitsSVG</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CompactHTMLToken&amp;<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="13352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DeprecatedEqualIgnoringCase(token.Data(),</highlight></codeline>
<codeline lineno="13353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SVGNames::foreignObjectTag.LocalName());</highlight></codeline>
<codeline lineno="13354"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/HC/Desktop/path/CWE-79.c"/>
  </compounddef>
</doxygen>
